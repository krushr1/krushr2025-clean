// Enhanced Krushr Database Schema - 2025 Enterprise Features
// This extends the existing schema with comprehensive enterprise task management capabilities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// EXISTING MODELS (Enhanced)
// ============================================================================

model User {
  id              String             @id @default(cuid())
  email           String             @unique
  name            String
  avatar          String?
  password        String
  emailVerified   DateTime?
  timezone        String             @default("UTC")
  dateFormat      String             @default("MM/DD/YYYY")
  language        String             @default("en")
  // New AI-powered features
  aiPreferences   String             @default("{}")  // AI writing style, tone preferences
  voiceSignature  String?            // Voice recording ID for voice-to-text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Existing relationships
  sentMessages    ChatMessage[]      @relation("MessageSender")
  notes           Note[]
  notifications   Notification[]
  preferences     UserPreferences?
  sessions        Session[]
  taskComments    TaskComment[]
  tasks           Task[]             @relation("TaskAssignee")
  createdTasks    Task[]             @relation("TaskCreator")
  teamMembers     TeamMember[]
  workspaces      WorkspaceMember[]
  ownedWorkspaces Workspace[]        @relation("WorkspaceOwner")
  
  // New relationships for enhanced features
  taskWatchers    TaskWatcher[]
  taskReactions   TaskReaction[]
  timeEntries     TimeEntry[]
  customFieldsCreated CustomField[]  @relation("CustomFieldCreator")
  worklogEntries  WorklogEntry[]
  taskDependenciesCreated TaskDependency[] @relation("DependencyCreator")
  taskRevisions   TaskRevision[]     @relation("RevisionAuthor")
  aiAssistantChats AIAssistantChat[]
  taskBlockers    TaskBlocker[]      @relation("BlockerReporter")

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Workspace {
  id            String                  @id @default(cuid())
  name          String
  description   String?
  settings      String                  @default("{}")
  // Enhanced workspace features
  aiEnabled     Boolean                 @default(true)
  customFields  String                  @default("[]")  // JSON array of workspace-level custom fields
  workflowStates String                 @default("[]")  // Custom workflow states
  automationRules String                @default("[]")  // Automation rules configuration
  integrations  String                  @default("{}")  // Third-party integrations config
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  ownerId       String
  
  // Existing relationships
  kanbans       Kanban[]
  noteFolders   NoteFolder[]
  notes         Note[]
  panels        Panel[]
  projects      Project[]
  teams         Team[]
  layoutPresets WorkspaceLayoutPreset[]
  members       WorkspaceMember[]
  owner         User                    @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  
  // New enhanced relationships
  customFields  CustomField[]
  templates     TaskTemplate[]
  epics         Epic[]
  sprints       Sprint[]
  releases      Release[]
  workflowStatesConfig WorkflowState[]
  automations   Automation[]
  integrationConfigs Integration[]
  auditLogs     AuditLog[]

  @@map("workspaces")
}

// Enhanced Task Model with ALL 2025 Enterprise Features
model Task {
  id             String           @id @default(cuid())
  title          String
  description    String?          // Will be enhanced to support rich text/markdown
  richDescription String?         // Rich text content (JSON format)
  status         String           @default("TODO")
  priority       String           @default("MEDIUM")
  position       Int              @default(0)
  dueDate        DateTime?
  startDate      DateTime?
  
  // Story Points & Estimation
  storyPoints    Int?
  estimatedHours Float?
  actualHours    Float?
  remainingHours Float?
  
  // Progress Tracking
  progressPercent Int             @default(0)
  
  // Epic and Sprint Association
  epicId         String?
  sprintId       String?
  
  // Custom Fields Support
  customFieldValues String        @default("{}") // JSON object for custom field values
  
  // Task Type and Templates
  taskType       String           @default("TASK") // TASK, BUG, STORY, EPIC, SUBTASK
  templateId     String?
  
  // AI-Generated Content
  aiGenerated    Boolean          @default(false)
  aiSummary      String?
  aiSuggestions  String           @default("[]") // AI-suggested actions/improvements
  
  // Workflow and Automation
  workflowStateId String?
  automationTriggers String        @default("[]") // Automation rules that apply
  
  // Timestamps and Tracking
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  completedAt    DateTime?
  archivedAt     DateTime?
  
  // Legacy fields
  projectId      String?
  kanbanColumnId String?
  createdById    String
  assigneeId     String?
  
  // Relationships
  attachments    TaskAttachment[]
  checklists     TaskChecklist[]
  comments       TaskComment[]
  tags           TaskTag[]
  assignee       User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy      User             @relation("TaskCreator", fields: [createdById], references: [id])
  kanbanColumn   KanbanColumn?    @relation(fields: [kanbanColumnId], references: [id])
  project        Project?         @relation(fields: [projectId], references: [id])
  
  // New Enhanced Relationships
  epic           Epic?            @relation(fields: [epicId], references: [id])
  sprint         Sprint?          @relation(fields: [sprintId], references: [id])
  template       TaskTemplate?    @relation(fields: [templateId], references: [id])
  workflowState  WorkflowState?   @relation(fields: [workflowStateId], references: [id])
  
  // Subtasks and Dependencies
  parentTask     Task?            @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  parentTaskId   String?
  subtasks       Task[]           @relation("TaskHierarchy")
  dependencies   TaskDependency[] @relation("DependentTask")
  dependents     TaskDependency[] @relation("BlockingTask")
  
  // Collaboration Features
  watchers       TaskWatcher[]
  reactions      TaskReaction[]
  timeEntries    TimeEntry[]
  worklogEntries WorklogEntry[]
  revisions      TaskRevision[]
  blockers       TaskBlocker[]
  
  // AI Features
  aiChats        AIAssistantChat[]
  
  // Links and References
  linkedTasks    TaskLink[]       @relation("SourceTask")
  linkedByTasks  TaskLink[]       @relation("TargetTask")

  @@map("tasks")
}

// ============================================================================
// NEW ENTERPRISE FEATURES - TASK ENHANCEMENT
// ============================================================================

// Epic Management
model Epic {
  id          String    @id @default(cuid())
  title       String
  description String?
  richDescription String?
  status      String    @default("PLANNING") // PLANNING, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String    @default("MEDIUM")
  startDate   DateTime?
  endDate     DateTime?
  workspaceId String
  assigneeId  String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]
  sprints     Sprint[]

  @@map("epics")
}

// Sprint Management
model Sprint {
  id          String    @id @default(cuid())
  name        String
  goal        String?
  status      String    @default("PLANNED") // PLANNED, ACTIVE, COMPLETED, CANCELLED
  startDate   DateTime?
  endDate     DateTime?
  workspaceId String
  epicId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  epic        Epic?     @relation(fields: [epicId], references: [id])
  tasks       Task[]

  @@map("sprints")
}

// Release Management
model Release {
  id          String    @id @default(cuid())
  name        String
  description String?
  version     String?
  status      String    @default("PLANNED") // PLANNED, IN_PROGRESS, RELEASED, CANCELLED
  releaseDate DateTime?
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("releases")
}

// Task Dependencies and Relationships
model TaskDependency {
  id            String   @id @default(cuid())
  dependentId   String   // Task that depends on another
  blockingId    String   // Task that is blocking the dependent
  type          String   @default("BLOCKS") // BLOCKS, DUPLICATES, RELATES_TO, IMPLEMENTS
  createdById   String
  createdAt     DateTime @default(now())
  
  dependentTask Task     @relation("DependentTask", fields: [dependentId], references: [id], onDelete: Cascade)
  blockingTask  Task     @relation("BlockingTask", fields: [blockingId], references: [id], onDelete: Cascade)
  createdBy     User     @relation("DependencyCreator", fields: [createdById], references: [id])

  @@unique([dependentId, blockingId])
  @@map("task_dependencies")
}

// Task Links (more flexible than dependencies)
model TaskLink {
  id       String @id @default(cuid())
  sourceId String
  targetId String
  type     String // BLOCKS, DUPLICATES, RELATES_TO, IMPLEMENTS, FIXES, CAUSED_BY
  
  source   Task   @relation("SourceTask", fields: [sourceId], references: [id], onDelete: Cascade)
  target   Task   @relation("TargetTask", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId, type])
  @@map("task_links")
}

// Task Watchers (users following a task)
model TaskWatcher {
  id     String @id @default(cuid())
  taskId String
  userId String
  
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_watchers")
}

// Task Reactions (emoji reactions on tasks)
model TaskReaction {
  id       String   @id @default(cuid())
  taskId   String
  userId   String
  emoji    String   // 👍, ❤️, 🎉, etc.
  createdAt DateTime @default(now())
  
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId, emoji])
  @@map("task_reactions")
}

// Enhanced Checklist with Rich Features
model TaskChecklist {
  id       String              @id @default(cuid())
  title    String
  taskId   String
  position Int                 @default(0)
  items    TaskChecklistItem[]
  task     Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_checklists")
}

model TaskChecklistItem {
  id          String        @id @default(cuid())
  text        String
  richText    String?       // Rich text content
  completed   Boolean       @default(false)
  position    Int           @default(0)
  assigneeId  String?       // Items can be assigned to specific users
  dueDate     DateTime?     // Items can have due dates
  checklistId String
  completedAt DateTime?
  checklist   TaskChecklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("task_checklist_items")
}

// Enhanced Comments with Rich Features
model TaskComment {
  id        String           @id @default(cuid())
  content   String
  richContent String?        // Rich text content
  taskId    String
  authorId  String
  parentId  String?          // For threaded comments
  type      String           @default("COMMENT") // COMMENT, SYSTEM, AI_SUGGESTION
  isInternal Boolean          @default(false)     // Internal team comments
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  author    User             @relation(fields: [authorId], references: [id])
  task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parent    TaskComment?     @relation("CommentThread", fields: [parentId], references: [id])
  replies   TaskComment[]    @relation("CommentThread")
  reactions CommentReaction[]

  @@map("task_comments")
}

// Comment Reactions
model CommentReaction {
  id        String      @id @default(cuid())
  commentId String
  userId    String
  emoji     String
  createdAt DateTime    @default(now())
  
  comment   TaskComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji])
  @@map("comment_reactions")
}

// Time Tracking
model TimeEntry {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // Duration in minutes
  billable    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

// Work Log Entries (daily summaries)
model WorklogEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  date        DateTime
  hoursSpent  Float
  description String?
  createdAt   DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId, date])
  @@map("worklog_entries")
}

// Custom Fields System
model CustomField {
  id          String    @id @default(cuid())
  name        String
  key         String    // programmatic key
  type        String    // TEXT, NUMBER, DATE, BOOLEAN, SELECT, MULTI_SELECT, USER, FORMULA
  options     String    @default("[]") // For select fields
  required    Boolean   @default(false)
  description String?
  workspaceId String
  createdById String
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy   User      @relation("CustomFieldCreator", fields: [createdById], references: [id])

  @@unique([workspaceId, key])
  @@map("custom_fields")
}

// Task Templates
model TaskTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  taskType    String   @default("TASK")
  template    String   // JSON template with default values
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("task_templates")
}

// Workflow States (Custom statuses)
model WorkflowState {
  id          String    @id @default(cuid())
  name        String
  key         String    // programmatic key
  color       String    @default("#6B7280")
  position    Int       @default(0)
  category    String    @default("TODO") // TODO, IN_PROGRESS, DONE
  workspaceId String
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@unique([workspaceId, key])
  @@map("workflow_states")
}

// Automation Rules
model Automation {
  id          String    @id @default(cuid())
  name        String
  description String?
  trigger     String    // JSON trigger configuration
  conditions  String    @default("[]") // JSON conditions array
  actions     String    @default("[]") // JSON actions array
  enabled     Boolean   @default(true)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("automations")
}

// Task Blockers (impediments)
model TaskBlocker {
  id          String   @id @default(cuid())
  taskId      String
  title       String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, RESOLVED
  reporterId  String
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  reporter    User     @relation("BlockerReporter", fields: [reporterId], references: [id])

  @@map("task_blockers")
}

// Task Revision History
model TaskRevision {
  id        String   @id @default(cuid())
  taskId    String
  field     String   // Field that changed
  oldValue  String?  // Previous value
  newValue  String?  // New value
  authorId  String
  createdAt DateTime @default(now())
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author    User     @relation("RevisionAuthor", fields: [authorId], references: [id])

  @@map("task_revisions")
}

// AI Assistant Integration
model AIAssistantChat {
  id        String   @id @default(cuid())
  taskId    String?  // Optional - can be workspace-wide
  userId    String
  prompt    String
  response  String
  type      String   @default("GENERAL") // GENERAL, SUBTASK_GENERATION, SUMMARY, SUGGESTION
  createdAt DateTime @default(now())
  
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_assistant_chats")
}

// Integration Configurations
model Integration {
  id          String    @id @default(cuid())
  name        String    // github, slack, google-calendar, etc.
  type        String    // GIT, COMMUNICATION, CALENDAR, STORAGE
  config      String    // JSON configuration
  enabled     Boolean   @default(true)
  workspaceId String
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// Audit Log for Enterprise Compliance
model AuditLog {
  id          String    @id @default(cuid())
  action      String    // CREATE, UPDATE, DELETE, VIEW
  entityType  String    // TASK, PROJECT, USER, etc.
  entityId    String
  userId      String?
  details     String    // JSON details of the change
  ipAddress   String?
  userAgent   String?
  workspaceId String
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// ============================================================================
// EXISTING MODELS (Unchanged)
// ============================================================================

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    @default("MEMBER")
  joinedAt    DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  color       String       @default("#3B82F6")
  workspaceId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chats       ChatThread[]
  projects    Project[]
  members     TeamMember[]
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   String @default("MEMBER")
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("ACTIVE")
  startDate   DateTime?
  endDate     DateTime?
  workspaceId String
  teamId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  kanbans     Kanban[]
  team        Team?     @relation(fields: [teamId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("projects")
}

model Kanban {
  id          String         @id @default(cuid())
  title       String
  description String?
  position    Int            @default(0)
  workspaceId String
  projectId   String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  columns     KanbanColumn[]
  project     Project?       @relation(fields: [projectId], references: [id])
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("kanbans")
}

model KanbanColumn {
  id       String @id @default(cuid())
  title    String
  position Int    @default(0)
  color    String @default("#6B7280")
  kanbanId String
  kanban   Kanban @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  tasks    Task[]

  @@map("kanban_columns")
}

model TaskTag {
  id     String @id @default(cuid())
  name   String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([name, taskId])
  @@map("task_tags")
}

model TaskAttachment {
  id           String   @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  compressed   Boolean  @default(false)
  taskId       String
  uploadedAt   DateTime @default(now())
  thumbnailUrl String?
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model ChatThread {
  id        String        @id @default(cuid())
  name      String?
  type      String
  teamId    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  team      Team?         @relation(fields: [teamId], references: [id])

  @@map("chat_threads")
}

model ChatMessage {
  id          String           @id @default(cuid())
  content     String
  type        String           @default("TEXT")
  threadId    String
  senderId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  attachments ChatAttachment[]
  sender      User             @relation("MessageSender", fields: [senderId], references: [id])
  thread      ChatThread       @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  userId    String
  data      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Panel {
  id           String    @id @default(cuid())
  type         String
  title        String
  position_x   Int       @default(0)
  position_y   Int       @default(0)
  width        Int       @default(6)
  height       Int       @default(4)
  is_minimized Boolean   @default(false)
  is_locked    Boolean   @default(false)
  data         String    @default("{}")
  workspaceId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("panels")
}

model NoteFolder {
  id          String       @id @default(cuid())
  name        String
  description String?
  color       String       @default("#6B7280")
  position    Int          @default(0)
  parentId    String?
  workspaceId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent      NoteFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    NoteFolder[] @relation("FolderHierarchy")
  notes       Note[]

  @@map("note_folders")
}

model Note {
  id          String           @id @default(cuid())
  title       String
  content     String           @default("")
  isPinned    Boolean          @default(false)
  isArchived  Boolean          @default(false)
  folderId    String?
  authorId    String
  workspaceId String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  attachments NoteAttachment[]
  tags        NoteTag[]
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  author      User             @relation(fields: [authorId], references: [id])
  folder      NoteFolder?      @relation(fields: [folderId], references: [id])

  @@map("notes")
}

model NoteTag {
  id     String @id @default(cuid())
  name   String
  noteId String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([name, noteId])
  @@map("note_tags")
}

model WorkspaceLayoutPreset {
  id          String    @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean   @default(false)
  layoutData  String
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_layout_presets")
}

model ChatAttachment {
  id           String      @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  compressed   Boolean     @default(false)
  messageId    String
  uploadedAt   DateTime    @default(now())
  thumbnailUrl String?
  message      ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("chat_attachments")
}

model NoteAttachment {
  id           String   @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  compressed   Boolean  @default(false)
  noteId       String
  uploadedAt   DateTime @default(now())
  thumbnailUrl String?
  note         Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_attachments")
}

model UserPreferences {
  id                          String   @id @default(cuid())
  userId                      String   @unique
  theme                       String   @default("system") // light, dark, system
  colorScheme                 String   @default("blue")   // blue, green, purple, orange
  compactMode                 Boolean  @default(false)
  fontSize                    String   @default("medium") // small, medium, large
  sidebarBehavior            String   @default("auto")    // always, auto, manual
  desktopNotifications       Boolean  @default(true)
  emailNotifications         Boolean  @default(true)
  emailDigestFrequency       String   @default("daily")   // immediate, daily, weekly, off
  notifyTaskAssignments      Boolean  @default(true)
  notifyCommentsMentions     Boolean  @default(true)
  notifyTeamInvitations      Boolean  @default(true)
  notifyProjectDeadlines     Boolean  @default(true)
  notifyFileUploads          Boolean  @default(false)
  notificationSound          Boolean  @default(true)
  quietHoursStart            String?  // "22:00"
  quietHoursEnd              String?  // "08:00"
  defaultTaskPriority        String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  autoSaveFrequency          Int      @default(30)       // seconds
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}