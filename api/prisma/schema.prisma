generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String
  avatar               String?
  password             String
  emailVerified        DateTime?
  timezone             String                @default("UTC")
  dateFormat           String                @default("MM/DD/YYYY")
  language             String                @default("en")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  aiConversations      AiConversation[]
  aiUsage              AiUsage[]
  calendarEvents       CalendarEvent[]
  sentMessages         ChatMessage[]         @relation("MessageSender")
  chatReactions        ChatReaction[]        @relation("ChatReactions")
  notes                Note[]
  notifications        Notification[]
  sessions             Session[]
  taskCommentMentions  TaskCommentMention[]
  taskCommentReactions TaskCommentReaction[]
  taskComments         TaskComment[]
  taskTimeEntries      TaskTimeEntry[]
  createdTasks         Task[]                @relation("TaskCreator")
  tasks                Task[]                @relation("TaskAssignee")
  teamMembers          TeamMember[]
  preferences          UserPreferences?
  workspaces           WorkspaceMember[]
  ownedWorkspaces      Workspace[]           @relation("WorkspaceOwner")

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Workspace {
  id              String                  @id @default(cuid())
  name            String
  description     String?
  settings        String                  @default("{}")
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  ownerId         String
  aiConversations AiConversation[]
  aiUsage         AiUsage[]
  calendarEvents  CalendarEvent[]
  kanbans         Kanban[]
  noteFolders     NoteFolder[]
  notes           Note[]
  panels          Panel[]
  projects        Project[]
  teams           Team[]
  layoutPresets   WorkspaceLayoutPreset[]
  members         WorkspaceMember[]
  owner           User                    @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    @default("MEMBER")
  joinedAt    DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  color       String       @default("#3B82F6")
  workspaceId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chats       ChatThread[]
  projects    Project[]
  members     TeamMember[]
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   String @default("MEMBER")
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("ACTIVE")
  startDate   DateTime?
  endDate     DateTime?
  workspaceId String
  teamId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  kanbans     Kanban[]
  team        Team?     @relation(fields: [teamId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("projects")
}

model Kanban {
  id          String         @id @default(cuid())
  title       String
  description String?
  position    Int            @default(0)
  workspaceId String
  projectId   String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  columns     KanbanColumn[]
  project     Project?       @relation(fields: [projectId], references: [id])
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("kanbans")
}

model KanbanColumn {
  id       String @id @default(cuid())
  title    String
  position Int    @default(0)
  color    String @default("#6B7280")
  kanbanId String
  kanban   Kanban @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  tasks    Task[]

  @@map("kanban_columns")
}

model Task {
  id               String           @id @default(cuid())
  title            String
  description      String?
  status           String           @default("TODO")
  priority         String           @default("medium")
  position         Int              @default(0)
  dueDate          DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  projectId        String?
  kanbanColumnId   String?
  createdById      String
  assigneeId       String?
  estimatedHours   Float?
  startDate        DateTime?
  completedAt      DateTime?
  storyPoints      Int?
  actualHours      Float?
  epicId           String?
  parentTaskId     String?
  template         String?
  recurringPattern String?
  watchers         String           @default("[]")
  customFields     String           @default("{}")
  aiSummary        String?
  aiPriority       String?
  riskLevel        String           @default("LOW")
  businessValue    Int?
  complexity       Int?
  blockedReason    String?
  blockedBy        String?
  isBlocked        Boolean          @default(false)
  isTemplate       Boolean          @default(false)
  isPrivate        Boolean          @default(false)
  attachments      TaskAttachment[]
  checklists       TaskChecklist[]
  comments         TaskComment[]
  dependents       TaskDependency[] @relation("BlockingTask")
  dependencies     TaskDependency[] @relation("DependentTask")
  tags             TaskTag[]
  timeEntries      TaskTimeEntry[]
  project          Project?         @relation(fields: [projectId], references: [id])
  kanbanColumn     KanbanColumn?    @relation(fields: [kanbanColumnId], references: [id])
  createdBy        User             @relation("TaskCreator", fields: [createdById], references: [id])
  assignee         User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask       Task?            @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks         Task[]           @relation("TaskHierarchy")

  @@map("tasks")
}

model TaskTag {
  id     String @id @default(cuid())
  name   String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([name, taskId])
  @@map("task_tags")
}

model TaskChecklist {
  id     String              @id @default(cuid())
  title  String
  taskId String
  items  TaskChecklistItem[]
  task   Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_checklists")
}

model TaskChecklistItem {
  id          String        @id @default(cuid())
  text        String
  completed   Boolean       @default(false)
  position    Int           @default(0)
  checklistId String
  checklist   TaskChecklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("task_checklist_items")
}

model TaskComment {
  id        String                @id @default(cuid())
  content   String
  plainText String?
  taskId    String
  authorId  String
  parentId  String?
  isEdited  Boolean               @default(false)
  isDeleted Boolean               @default(false)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  mentions  TaskCommentMention[]
  reactions TaskCommentReaction[]
  parent    TaskComment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies   TaskComment[]         @relation("CommentReplies")
  task      Task                  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author    User                  @relation(fields: [authorId], references: [id])

  @@map("task_comments")
}

model TaskCommentMention {
  id        String      @id @default(cuid())
  commentId String
  userId    String
  startPos  Int
  endPos    Int
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  comment   TaskComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, startPos])
  @@map("task_comment_mentions")
}

model TaskCommentReaction {
  id        String      @id @default(cuid())
  commentId String
  userId    String
  emoji     String
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  comment   TaskComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji])
  @@map("task_comment_reactions")
}

model TaskAttachment {
  id           String   @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  compressed   Boolean  @default(false)
  taskId       String
  uploadedAt   DateTime @default(now())
  thumbnailUrl String?
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model TaskTimeEntry {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  billable    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_time_entries")
}

model TaskDependency {
  id              String   @id @default(cuid())
  dependentTaskId String
  blockingTaskId  String
  type            String   @default("FINISH_TO_START")
  createdAt       DateTime @default(now())
  blockingTask    Task     @relation("BlockingTask", fields: [blockingTaskId], references: [id], onDelete: Cascade)
  dependentTask   Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, blockingTaskId])
  @@map("task_dependencies")
}

model ChatThread {
  id        String        @id @default(cuid())
  name      String?
  type      String
  teamId    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  team      Team?         @relation(fields: [teamId], references: [id])

  @@map("chat_threads")
}

model ChatMessage {
  id          String           @id @default(cuid())
  content     String
  type        String           @default("TEXT")
  threadId    String
  senderId    String
  replyToId   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  attachments ChatAttachment[]
  replyTo     ChatMessage?     @relation("MessageReply", fields: [replyToId], references: [id])
  replies     ChatMessage[]    @relation("MessageReply")
  thread      ChatThread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender      User             @relation("MessageSender", fields: [senderId], references: [id])
  reactions   ChatReaction[]

  @@map("chat_messages")
}

model ChatReaction {
  id        String      @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime    @default(now())
  user      User        @relation("ChatReactions", fields: [userId], references: [id], onDelete: Cascade)
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("chat_reactions")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  userId    String
  data      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Panel {
  id           String    @id @default(cuid())
  type         String
  title        String
  position_x   Int       @default(0)
  position_y   Int       @default(0)
  width        Int       @default(6)
  height       Int       @default(4)
  is_minimized Boolean   @default(false)
  is_locked    Boolean   @default(false)
  data         String    @default("{}")
  workspaceId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("panels")
}

model NoteFolder {
  id          String       @id @default(cuid())
  name        String
  description String?
  color       String       @default("#6B7280")
  position    Int          @default(0)
  parentId    String?
  workspaceId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent      NoteFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    NoteFolder[] @relation("FolderHierarchy")
  notes       Note[]

  @@map("note_folders")
}

model Note {
  id          String           @id @default(cuid())
  title       String
  content     String           @default("")
  isPinned    Boolean          @default(false)
  isArchived  Boolean          @default(false)
  folderId    String?
  authorId    String
  workspaceId String
  taskId      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  color       String?          @default("#ffffff")
  attachments NoteAttachment[]
  tags        NoteTag[]
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  author      User             @relation(fields: [authorId], references: [id])
  folder      NoteFolder?      @relation(fields: [folderId], references: [id])
  task        Task?            @relation(fields: [taskId], references: [id])

  @@map("notes")
}

model NoteTag {
  id     String @id @default(cuid())
  name   String
  noteId String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([name, noteId])
  @@map("note_tags")
}

model WorkspaceLayoutPreset {
  id          String    @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean   @default(false)
  layoutData  String
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_layout_presets")
}

model ChatAttachment {
  id           String      @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  compressed   Boolean     @default(false)
  messageId    String
  uploadedAt   DateTime    @default(now())
  thumbnailUrl String?
  message      ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("chat_attachments")
}

model NoteAttachment {
  id           String   @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  compressed   Boolean  @default(false)
  noteId       String
  uploadedAt   DateTime @default(now())
  thumbnailUrl String?
  note         Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_attachments")
}

model UserPreferences {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  theme                  String   @default("system")
  colorScheme            String   @default("blue")
  compactMode            Boolean  @default(false)
  fontSize               String   @default("medium")
  sidebarBehavior        String   @default("auto")
  desktopNotifications   Boolean  @default(true)
  emailNotifications     Boolean  @default(true)
  emailDigestFrequency   String   @default("daily")
  notifyTaskAssignments  Boolean  @default(true)
  notifyCommentsMentions Boolean  @default(true)
  notifyTeamInvitations  Boolean  @default(true)
  notifyProjectDeadlines Boolean  @default(true)
  notifyFileUploads      Boolean  @default(false)
  notificationSound      Boolean  @default(true)
  quietHoursStart        String?
  quietHoursEnd          String?
  defaultTaskPriority    String   @default("medium")
  autoSaveFrequency      Int      @default(30)
  defaultCalendarView    String   @default("month")
  calendarWeekStartsOn   Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model CalendarEvent {
  id             String             @id @default(cuid())
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  allDay         Boolean            @default(false)
  location       String?
  color          String             @default("blue")
  type           String             @default("EVENT")
  status         String             @default("CONFIRMED")
  priority       String             @default("MEDIUM")
  isRecurring    Boolean            @default(false)
  recurrenceRule String?
  timezone       String             @default("UTC")
  visibility     String             @default("DEFAULT")
  workspaceId    String
  createdById    String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  attendees      CalendarAttendee[]
  createdBy      User               @relation(fields: [createdById], references: [id])
  workspace      Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  reminders      CalendarReminder[]

  @@map("calendar_events")
}

model CalendarAttendee {
  id          String        @id @default(cuid())
  eventId     String
  email       String
  name        String?
  status      String        @default("PENDING")
  response    String?
  isOrganizer Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  event       CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
  @@map("calendar_attendees")
}

model CalendarReminder {
  id            String        @id @default(cuid())
  eventId       String
  type          String        @default("NOTIFICATION")
  timing        String        @default("FIFTEEN_MINUTES")
  customMinutes Int?
  createdAt     DateTime      @default(now())
  event         CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("calendar_reminders")
}

model AiConversation {
  id          String      @id @default(cuid())
  userId      String
  workspaceId String
  title       String?
  context     String?
  isActive    Boolean     @default(true)
  totalTokens Int         @default(0)
  totalCost   Float       @default(0.0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    AiMessage[]

  @@map("ai_conversations")
}

model AiMessage {
  id             String         @id @default(cuid())
  conversationId String
  role           String
  content        String
  tokenCount     Int            @default(0)
  cost           Float          @default(0.0)
  model          String         @default("gemini-2.5-flash")
  thinkingBudget Int?
  responseTime   Int?
  createdAt      DateTime       @default(now())
  conversation   AiConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("ai_messages")
}

model AiUsage {
  id           String    @id @default(cuid())
  userId       String
  workspaceId  String
  date         DateTime  @default(now())
  model        String    @default("gemini-2.5-flash")
  totalTokens  Int       @default(0)
  totalCost    Float     @default(0.0)
  requestCount Int       @default(0)
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId, date, model])
  @@map("ai_usage")
}
