{
  "version": 3,
  "sources": ["../../frontend/src/components/chat/MessageBubble.tsx", "../../frontend/src/components/chat/ReplyIndicator.tsx", "../../frontend/src/components/chat/MessageItem.tsx", "../../frontend/src/components/chat/ReplyBanner.tsx", "../../frontend/src/components/chat/MessageInput.tsx", "../../frontend/src/components/chat/useChatMessages.ts", "../../frontend/src/components/chat/mockData.ts", "../../frontend/src/components/chat/useChatActions.ts", "../../frontend/src/components/chat/Chat.tsx"],
  "sourcesContent": ["import React from 'react'\nimport { Reply, Smile } from 'lucide-react'\nimport { cn } from '../../lib/utils'\nimport { ChatMessage } from './types'\n\ninterface MessageBubbleProps {\n  message: ChatMessage\n  isOutgoing: boolean\n  onReaction: (messageId: string, emoji: string) => void\n  onReply: (message: ChatMessage) => void\n  showEmojiPicker: string | null\n  setShowEmojiPicker: (messageId: string | null) => void\n  quickReactions: string[]\n}\n\nexport const MessageBubble: React.FC<MessageBubbleProps> = ({\n  message,\n  isOutgoing,\n  onReaction,\n  onReply,\n  showEmojiPicker,\n  setShowEmojiPicker,\n  quickReactions\n}) => {\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    })\n  }\n\n  return (\n    <div className=\"relative inline-block\">\n      <div className={cn(\n        \"rounded-lg p-3 shadow-sm\",\n        isOutgoing \n          ? \"bg-krushr-primary text-white rounded-tr-none\" \n          : \"bg-gray-100 rounded-tl-none\"\n      )}>\n        <p className={cn(\n          \"text-sm\",\n          isOutgoing ? \"text-white\" : \"text-krushr-gray-dark\"\n        )}>\n          {message.content}\n        </p>\n        \n        {/* File attachment for incoming messages */}\n        {message.type === 'file' && !isOutgoing && (\n          <div className=\"bg-krushr-gray-bg border border-krushr-gray-200 rounded p-2 flex items-center space-x-2 mt-2\">\n            <div className=\"w-8 h-8 bg-krushr-info rounded flex items-center justify-center\">\n              <span className=\"text-white text-xs\">File</span>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"text-sm font-medium\">dashboard-mockups.fig</div>\n              <div className=\"text-xs text-krushr-gray\">2.4 MB \u2022 Figma File</div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Reactions */}\n      {message.reactions && message.reactions.length > 0 && (\n        <div className=\"absolute -top-2 right-2 flex items-center gap-1\">\n          {message.reactions.map((reaction, index) => (\n            <button\n              key={index}\n              onClick={() => onReaction(message.id, reaction.emoji)}\n              className=\"inline-flex items-center gap-1 px-2 py-1 text-xs bg-white hover:bg-krushr-primary-50 border border-krushr-gray-200 hover:border-krushr-primary-200 rounded-full transition-all duration-200 shadow-sm hover:shadow-md\"\n            >\n              <span className=\"text-sm\">{reaction.emoji}</span>\n              <span className=\"font-medium text-krushr-gray\">{reaction.count}</span>\n            </button>\n          ))}\n        </div>\n      )}\n      \n      {/* Message Actions */}\n      <div className={cn(\n        \"absolute -top-2 opacity-0 group-hover:opacity-100 transition-all duration-200 flex items-center gap-1 bg-white border border-krushr-gray-200 rounded-lg px-2 py-1 shadow-sm\",\n        isOutgoing ? \"left-2\" : \"left-2\"\n      )}>\n        {!isOutgoing && (\n          <button\n            onClick={() => onReply(message)}\n            className=\"p-1 hover:bg-krushr-primary-50 hover:text-krushr-primary-600 rounded transition-colors duration-200\"\n            title=\"Reply to message\"\n          >\n            <Reply className=\"w-3.5 h-3.5\" />\n          </button>\n        )}\n        <div className=\"relative\">\n          <button\n            onClick={() => setShowEmojiPicker(showEmojiPicker === message.id ? null : message.id)}\n            className=\"p-1 hover:bg-krushr-warning-50 hover:text-krushr-warning-600 rounded transition-colors duration-200\"\n            title=\"Add reaction\"\n          >\n            <Smile className=\"w-3.5 h-3.5\" />\n          </button>\n          \n          {/* Quick Emoji Picker */}\n          {showEmojiPicker === message.id && (\n            <div className={cn(\n              \"absolute bottom-full mb-2 bg-white border border-krushr-gray-200 rounded-lg shadow-lg p-2 flex gap-1 z-50\",\n              isOutgoing ? \"left-0\" : \"right-0\"\n            )}>\n              {quickReactions.map((emoji) => (\n                <button\n                  key={emoji}\n                  onClick={() => onReaction(message.id, emoji)}\n                  className=\"p-1 hover:bg-krushr-gray-100 rounded text-lg leading-none\"\n                  title={`React with ${emoji}`}\n                >\n                  {emoji}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}", "import React from 'react'\nimport { Reply } from 'lucide-react'\nimport { cn } from '../../lib/utils'\n\ninterface ReplyIndicatorProps {\n  replyTo: {\n    id: string\n    content: string\n    sender: string\n  }\n  isOutgoing: boolean\n}\n\nexport const ReplyIndicator: React.FC<ReplyIndicatorProps> = ({\n  replyTo,\n  isOutgoing\n}) => {\n  return (\n    <div className={cn(\n      \"mb-2 border-l-2 border-krushr-primary pl-3 py-2\",\n      isOutgoing \n        ? \"mr-11 bg-krushr-primary-50 rounded-l-lg ml-16\"\n        : \"ml-11 bg-krushr-gray-bg-light rounded-r-lg\"\n    )}>\n      <div className=\"flex items-center gap-1 mb-1\">\n        <Reply className=\"w-3 h-3 text-krushr-primary\" />\n        <span className=\"text-xs text-krushr-gray font-medium\">{replyTo.sender}</span>\n      </div>\n      <p className=\"text-xs text-krushr-gray-light truncate\">{replyTo.content}</p>\n    </div>\n  )\n}", "import React from 'react'\nimport { MessageBubble } from './MessageBubble'\nimport { ReplyIndicator } from './ReplyIndicator'\nimport { ChatMessage } from './types'\n\ninterface MessageItemProps {\n  message: ChatMessage\n  currentUserId: string\n  onReaction: (messageId: string, emoji: string) => void\n  onReply: (message: ChatMessage) => void\n  showEmojiPicker: string | null\n  setShowEmojiPicker: (messageId: string | null) => void\n  quickReactions: string[]\n}\n\nexport const MessageItem: React.FC<MessageItemProps> = ({\n  message,\n  currentUserId,\n  onReaction,\n  onReply,\n  showEmojiPicker,\n  setShowEmojiPicker,\n  quickReactions\n}) => {\n  const isOutgoing = message.sender.id === currentUserId\n  const isSystem = message.type === 'system'\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    })\n  }\n\n  if (isSystem) {\n    return (\n      <div className=\"text-center\">\n        <div className=\"bg-krushr-gray-100 text-krushr-gray px-3 py-1 rounded-full text-xs inline-block\">\n          {message.content}\n        </div>\n      </div>\n    )\n  }\n\n  if (isOutgoing) {\n    return (\n      <div className=\"group\">\n        {message.replyTo && (\n          <ReplyIndicator replyTo={message.replyTo} isOutgoing={true} />\n        )}\n        \n        <div className=\"flex items-start justify-end space-x-3\">\n          <div className=\"flex-1 text-right\">\n            <MessageBubble\n              message={message}\n              isOutgoing={true}\n              onReaction={onReaction}\n              onReply={onReply}\n              showEmojiPicker={showEmojiPicker}\n              setShowEmojiPicker={setShowEmojiPicker}\n              quickReactions={quickReactions}\n            />\n            \n            <div className=\"flex items-center justify-end space-x-2 mt-1\">\n              <span className=\"text-xs text-krushr-gray-light\">{formatTime(message.timestamp)}</span>\n              <span className=\"text-xs text-krushr-gray-light\">\u2022</span>\n              <span className=\"text-xs text-krushr-gray-light\">Read</span>\n            </div>\n          </div>\n          <div className=\"w-8 h-8 bg-krushr-secondary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n            ME\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"group\">\n      {message.replyTo && (\n        <ReplyIndicator replyTo={message.replyTo} isOutgoing={false} />\n      )}\n      \n      <div className=\"flex items-start space-x-3\">\n        <div className=\"w-8 h-8 bg-krushr-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n          {message.sender.avatar || message.sender.name.slice(0, 2).toUpperCase()}\n        </div>\n        <div className=\"flex-1\">\n          <MessageBubble\n            message={message}\n            isOutgoing={false}\n            onReaction={onReaction}\n            onReply={onReply}\n            showEmojiPicker={showEmojiPicker}\n            setShowEmojiPicker={setShowEmojiPicker}\n            quickReactions={quickReactions}\n          />\n          \n          <div className=\"flex items-center space-x-2 mt-1\">\n            <span className=\"text-xs text-krushr-gray-light\">{message.sender.name}</span>\n            <span className=\"text-xs text-krushr-gray-light\">\u2022</span>\n            <span className=\"text-xs text-krushr-gray-light\">{formatTime(message.timestamp)}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}", "import React from 'react'\nimport { Reply, X } from 'lucide-react'\nimport { ChatMessage } from './types'\n\ninterface ReplyBannerProps {\n  replyingTo: ChatMessage\n  onCancel: () => void\n}\n\nexport const ReplyBanner: React.FC<ReplyBannerProps> = ({\n  replyingTo,\n  onCancel\n}) => {\n  return (\n    <div className=\"flex-shrink-0 px-4 py-2 bg-krushr-info-50 border-t border-krushr-info-200\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Reply className=\"w-3 h-3 text-krushr-info-600\" />\n          <span className=\"text-sm text-krushr-info-700 font-medium\">\n            Replying to {replyingTo.sender.name}\n          </span>\n        </div>\n        <button\n          onClick={onCancel}\n          className=\"p-1 text-krushr-info-600 hover:text-krushr-info-800 hover:bg-krushr-info-100 rounded transition-colors duration-200\"\n          title=\"Cancel reply\"\n        >\n          <X className=\"w-3 h-3\" />\n        </button>\n      </div>\n      <p className=\"text-xs text-krushr-info-600 mt-1 truncate pl-5\">\n        {replyingTo.content}\n      </p>\n    </div>\n  )\n}", "import React from 'react'\nimport { Send } from 'lucide-react'\nimport { cn } from '../../lib/utils'\n\ninterface MessageInputProps {\n  message: string\n  onChange: (message: string) => void\n  onSend: () => void\n  onKeyPress: (e: React.KeyboardEvent) => void\n  inputRef: React.RefObject<HTMLInputElement>\n}\n\nexport const MessageInput: React.FC<MessageInputProps> = ({\n  message,\n  onChange,\n  onSend,\n  onKeyPress,\n  inputRef\n}) => {\n  return (\n    <div className=\"flex-shrink-0 p-4 pt-3 border-t border-krushr-gray-200\">\n      {/* Match AI assistant chat box styling exactly */}\n      <div className=\"relative flex items-center bg-white border border-gray-300 rounded-3xl shadow-sm hover:shadow-md transition-shadow focus-within:shadow-md focus-within:border-krushr-primary h-[60px]\">\n        {/* Main input area */}\n        <div className=\"flex-1 min-w-0 relative\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={message}\n            onChange={(e) => onChange(e.target.value)}\n            onKeyPress={onKeyPress}\n            placeholder=\"\"\n            className=\"w-full min-h-[46px] h-[46px] text-sm resize-none border-0 bg-transparent focus:ring-0 focus:outline-none px-3 py-3 placeholder-transparent peer leading-relaxed font-manrope\"\n          />\n          {/* Floating label */}\n          <label className={cn(\n            \"absolute left-3 text-gray-500 duration-300 transform origin-[0] bg-white px-1 pointer-events-none select-none z-10\",\n            message.trim()\n              ? \"-top-2 text-xs scale-75 text-krushr-primary\"\n              : \"top-1/2 -translate-y-1/2 text-sm peer-focus:-top-2 peer-focus:text-xs peer-focus:scale-75 peer-focus:text-krushr-primary\"\n          )}>\n            Type a message...\n          </label>\n        </div>\n        \n        {/* Send button - inside input */}\n        <div className=\"flex items-center pr-3\">\n          <button \n            onClick={onSend}\n            disabled={!message.trim()}\n            className=\"h-8 w-8 rounded-full flex items-center justify-center transition-all p-0 bg-krushr-primary text-white hover:bg-krushr-primary/90 shadow-sm hover:shadow disabled:opacity-50 disabled:cursor-not-allowed\"\n            title=\"Send message\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}", "import { useEffect, useRef } from 'react'\nimport { trpc } from '../../lib/trpc'\nimport { mockMessages } from './mockData'\n\nexport const useChatMessages = (threadId?: string) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  const { data: messagesData } = trpc.chat.getMessages.useQuery(\n    { threadId: threadId || 'default' },\n    { enabled: !!threadId }\n  )\n  \n  const messages = messagesData?.messages || []\n  const displayMessages = threadId ? messages : mockMessages\n\n  useEffect(() => {\n    const scrollContainer = messagesEndRef.current?.closest('[data-radix-scroll-area-viewport]')\n    if (scrollContainer && messagesEndRef.current) {\n      scrollContainer.scrollTop = scrollContainer.scrollHeight\n    }\n  }, [displayMessages])\n\n  return {\n    messages: displayMessages,\n    messagesEndRef\n  }\n}", "import { ChatMessage } from './types'\n\nexport const mockMessages: ChatMessage[] = [\n  {\n    id: '1',\n    content: 'Hey team, how\\'s the progress on the dashboard redesign?',\n    type: 'text',\n    sender: { id: '1', name: 'John Doe', avatar: 'JD' },\n    timestamp: new Date(Date.now() - 10 * 60 * 1000).toISOString(),\n    reactions: [{ emoji: '\uD83D\uDC4D', count: 2, users: ['2', '3'] }]\n  },\n  {\n    id: '2',\n    content: 'We\\'re about 70% done! Should be ready for review by Friday.',\n    type: 'text',\n    sender: { id: '2', name: 'You', avatar: 'ME' },\n    timestamp: new Date(Date.now() - 8 * 60 * 1000).toISOString(),\n    replyTo: { id: '1', content: 'Hey team, how\\'s the progress...', sender: 'John Doe' }\n  },\n  {\n    id: '3',\n    content: 'Alice joined the conversation',\n    type: 'system',\n    sender: { id: 'system', name: 'System', avatar: '' },\n    timestamp: new Date(Date.now() - 6 * 60 * 1000).toISOString()\n  },\n  {\n    id: '4',\n    content: 'Here are the latest mockups for review:',\n    type: 'file',\n    sender: { id: '3', name: 'Alice Smith', avatar: 'AS' },\n    timestamp: new Date(Date.now() - 4 * 60 * 1000).toISOString(),\n    reactions: [\n      { emoji: '\uD83D\uDE80', count: 1, users: ['2'] },\n      { emoji: '\uD83D\uDCAF', count: 1, users: ['1'] }\n    ]\n  }\n]\n\nexport const quickReactions = ['\uD83D\uDC4D', '\u2764\uFE0F', '\uD83D\uDE0A', '\uD83D\uDE80', '\uD83D\uDCAF', '\uD83D\uDC4F']", "import { useState, useRef } from 'react'\nimport { trpc } from '../../lib/trpc'\nimport { ChatMessage } from './types'\n\nexport const useChatActions = (threadId?: string) => {\n  const [message, setMessage] = useState('')\n  const [replyingTo, setReplyingTo] = useState<ChatMessage | null>(null)\n  const [showEmojiPicker, setShowEmojiPicker] = useState<string | null>(null)\n  const messageInputRef = useRef<HTMLInputElement>(null)\n\n  const sendChatMessage = trpc.chat.sendMessage.useMutation({\n  })\n\n  const addReaction = trpc.chat.addReaction.useMutation({\n  })\n\n  const removeReaction = trpc.chat.removeReaction.useMutation({\n  })\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return\n\n    if (threadId) {\n      sendChatMessage.mutate({\n        threadId,\n        content: message,\n        type: 'TEXT',\n        replyToId: replyingTo?.id\n      })\n    }\n\n    setMessage('')\n    setReplyingTo(null)\n  }\n\n  const handleReaction = (messageId: string, emoji: string) => {\n    if (threadId) {\n      addReaction.mutate({ messageId, emoji })\n    } else {\n      console.log(`Adding reaction ${emoji} to message ${messageId}`)\n    }\n    setShowEmojiPicker(null)\n  }\n\n  const handleReply = (message: ChatMessage) => {\n    setReplyingTo(message)\n    messageInputRef.current?.focus()\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  return {\n    message,\n    setMessage,\n    replyingTo,\n    setReplyingTo,\n    showEmojiPicker,\n    setShowEmojiPicker,\n    messageInputRef,\n    handleSendMessage,\n    handleReaction,\n    handleReply,\n    handleKeyPress\n  }\n}", "\nimport React from 'react'\nimport { cn } from '../../lib/utils'\nimport { ChatProps } from './types'\nimport { MessageItem } from './MessageItem'\nimport { ReplyBanner } from './ReplyBanner'\nimport { MessageInput } from './MessageInput'\nimport { useChatMessages } from './useChatMessages'\nimport { useChatActions } from './useChatActions'\nimport { quickReactions } from './mockData'\n\nexport default function Chat({ threadId, className }: ChatProps) {\n  const { messages, messagesEndRef } = useChatMessages(threadId)\n  const {\n    message,\n    setMessage,\n    replyingTo,\n    setReplyingTo,\n    showEmojiPicker,\n    setShowEmojiPicker,\n    messageInputRef,\n    handleSendMessage,\n    handleReaction,\n    handleReply,\n    handleKeyPress\n  } = useChatActions(threadId)\n\n  const currentUserId = '2' // Mock current user ID\n\n  return (\n    <div className={cn('bg-white h-full flex flex-col', className)}>\n\n      {/* Messages Area */}\n      <div className=\"flex-1 space-y-4 p-4 pb-0 overflow-y-auto\">\n        {messages.map((message) => (\n          <MessageItem\n            key={message.id}\n            message={message}\n            currentUserId={currentUserId}\n            onReaction={handleReaction}\n            onReply={handleReply}\n            showEmojiPicker={showEmojiPicker}\n            setShowEmojiPicker={setShowEmojiPicker}\n            quickReactions={quickReactions}\n          />\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Reply Banner */}\n      {replyingTo && (\n        <ReplyBanner\n          replyingTo={replyingTo}\n          onCancel={() => setReplyingTo(null)}\n        />\n      )}\n\n      {/* Message Input */}\n      <MessageInput\n        message={message}\n        onChange={setMessage}\n        onSend={handleSendMessage}\n        onKeyPress={handleKeyPress}\n        inputRef={messageInputRef}\n      />\n    </div>\n  )\n}"],
  "mappings": ";;;;;;;;;;;;;;;AAuCQ;AAxBD,IAAM,gBAA8C,CAAC;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAAA;AACF,MAAM;AACJ,QAAM,aAAa,CAAC,cAAsB;AACxC,WAAO,IAAI,KAAK,SAAS,EAAE,mBAAmB,CAAC,GAAG;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAEA,SACE,6CAAC,SAAI,WAAU,yBACb;AAAA,iDAAC,SAAI,WAAW;AAAA,MACd;AAAA,MACA,aACI,iDACA;AAAA,IACN,GACE;AAAA,kDAAC,OAAE,WAAW;AAAA,QACZ;AAAA,QACA,aAAa,eAAe;AAAA,MAC9B,GACG,kBAAQ,SACX;AAAA,MAGC,QAAQ,SAAS,UAAU,CAAC,cAC3B,6CAAC,SAAI,WAAU,gGACb;AAAA,oDAAC,SAAI,WAAU,mEACb,sDAAC,UAAK,WAAU,sBAAqB,kBAAI,GAC3C;AAAA,QACA,6CAAC,SAAI,WAAU,UACb;AAAA,sDAAC,SAAI,WAAU,uBAAsB,mCAAqB;AAAA,UAC1D,4CAAC,SAAI,WAAU,4BAA2B,sCAAmB;AAAA,WAC/D;AAAA,SACF;AAAA,OAEJ;AAAA,IAGC,QAAQ,aAAa,QAAQ,UAAU,SAAS,KAC/C,4CAAC,SAAI,WAAU,mDACZ,kBAAQ,UAAU,IAAI,CAAC,UAAU,UAChC;AAAA,MAAC;AAAA;AAAA,QAEC,SAAS,MAAM,WAAW,QAAQ,IAAI,SAAS,KAAK;AAAA,QACpD,WAAU;AAAA,QAEV;AAAA,sDAAC,UAAK,WAAU,WAAW,mBAAS,OAAM;AAAA,UAC1C,4CAAC,UAAK,WAAU,gCAAgC,mBAAS,OAAM;AAAA;AAAA;AAAA,MAL1D;AAAA,IAMP,CACD,GACH;AAAA,IAIF,6CAAC,SAAI,WAAW;AAAA,MACd;AAAA,MACA,aAAa,WAAW;AAAA,IAC1B,GACG;AAAA,OAAC,cACA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS,MAAM,QAAQ,OAAO;AAAA,UAC9B,WAAU;AAAA,UACV,OAAM;AAAA,UAEN,sDAAC,SAAM,WAAU,eAAc;AAAA;AAAA,MACjC;AAAA,MAEF,6CAAC,SAAI,WAAU,YACb;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,MAAM,mBAAmB,oBAAoB,QAAQ,KAAK,OAAO,QAAQ,EAAE;AAAA,YACpF,WAAU;AAAA,YACV,OAAM;AAAA,YAEN,sDAAC,SAAM,WAAU,eAAc;AAAA;AAAA,QACjC;AAAA,QAGC,oBAAoB,QAAQ,MAC3B,4CAAC,SAAI,WAAW;AAAA,UACd;AAAA,UACA,aAAa,WAAW;AAAA,QAC1B,GACG,UAAAA,gBAAe,IAAI,CAAC,UACnB;AAAA,UAAC;AAAA;AAAA,YAEC,SAAS,MAAM,WAAW,QAAQ,IAAI,KAAK;AAAA,YAC3C,WAAU;AAAA,YACV,OAAO,cAAc,KAAK;AAAA,YAEzB;AAAA;AAAA,UALI;AAAA,QAMP,CACD,GACH;AAAA,SAEJ;AAAA,OACF;AAAA,KACF;AAEJ;;;ACjGM,IAAAC,sBAAA;AAXC,IAAM,iBAAgD,CAAC;AAAA,EAC5D;AAAA,EACA;AACF,MAAM;AACJ,SACE,8CAAC,SAAI,WAAW;AAAA,IACd;AAAA,IACA,aACI,kDACA;AAAA,EACN,GACE;AAAA,kDAAC,SAAI,WAAU,gCACb;AAAA,mDAAC,SAAM,WAAU,+BAA8B;AAAA,MAC/C,6CAAC,UAAK,WAAU,wCAAwC,kBAAQ,QAAO;AAAA,OACzE;AAAA,IACA,6CAAC,OAAE,WAAU,2CAA2C,kBAAQ,SAAQ;AAAA,KAC1E;AAEJ;;;ACMQ,IAAAC,sBAAA;AAtBD,IAAM,cAA0C,CAAC;AAAA,EACtD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAAC;AACF,MAAM;AACJ,QAAM,aAAa,QAAQ,OAAO,OAAO;AACzC,QAAM,WAAW,QAAQ,SAAS;AAElC,QAAM,aAAa,CAAC,cAAsB;AACxC,WAAO,IAAI,KAAK,SAAS,EAAE,mBAAmB,CAAC,GAAG;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAEA,MAAI,UAAU;AACZ,WACE,6CAAC,SAAI,WAAU,eACb,uDAAC,SAAI,WAAU,mFACZ,kBAAQ,SACX,GACF;AAAA,EAEJ;AAEA,MAAI,YAAY;AACd,WACE,8CAAC,SAAI,WAAU,SACZ;AAAA,cAAQ,WACP,6CAAC,kBAAe,SAAS,QAAQ,SAAS,YAAY,MAAM;AAAA,MAG9D,8CAAC,SAAI,WAAU,0CACb;AAAA,sDAAC,SAAI,WAAU,qBACb;AAAA;AAAA,YAAC;AAAA;AAAA,cACC;AAAA,cACA,YAAY;AAAA,cACZ;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,gBAAgBA;AAAA;AAAA,UAClB;AAAA,UAEA,8CAAC,SAAI,WAAU,gDACb;AAAA,yDAAC,UAAK,WAAU,kCAAkC,qBAAW,QAAQ,SAAS,GAAE;AAAA,YAChF,6CAAC,UAAK,WAAU,kCAAiC,oBAAC;AAAA,YAClD,6CAAC,UAAK,WAAU,kCAAiC,kBAAI;AAAA,aACvD;AAAA,WACF;AAAA,QACA,6CAAC,SAAI,WAAU,4GAA2G,gBAE1H;AAAA,SACF;AAAA,OACF;AAAA,EAEJ;AAEA,SACE,8CAAC,SAAI,WAAU,SACZ;AAAA,YAAQ,WACP,6CAAC,kBAAe,SAAS,QAAQ,SAAS,YAAY,OAAO;AAAA,IAG/D,8CAAC,SAAI,WAAU,8BACb;AAAA,mDAAC,SAAI,WAAU,0GACZ,kBAAQ,OAAO,UAAU,QAAQ,OAAO,KAAK,MAAM,GAAG,CAAC,EAAE,YAAY,GACxE;AAAA,MACA,8CAAC,SAAI,WAAU,UACb;AAAA;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA,YAAY;AAAA,YACZ;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,gBAAgBA;AAAA;AAAA,QAClB;AAAA,QAEA,8CAAC,SAAI,WAAU,oCACb;AAAA,uDAAC,UAAK,WAAU,kCAAkC,kBAAQ,OAAO,MAAK;AAAA,UACtE,6CAAC,UAAK,WAAU,kCAAiC,oBAAC;AAAA,UAClD,6CAAC,UAAK,WAAU,kCAAkC,qBAAW,QAAQ,SAAS,GAAE;AAAA,WAClF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEJ;;;AC1FU,IAAAC,sBAAA;AARH,IAAM,cAA0C,CAAC;AAAA,EACtD;AAAA,EACA;AACF,MAAM;AACJ,SACE,8CAAC,SAAI,WAAU,6EACb;AAAA,kDAAC,SAAI,WAAU,qCACb;AAAA,oDAAC,SAAI,WAAU,2BACb;AAAA,qDAAC,SAAM,WAAU,gCAA+B;AAAA,QAChD,8CAAC,UAAK,WAAU,4CAA2C;AAAA;AAAA,UAC5C,WAAW,OAAO;AAAA,WACjC;AAAA,SACF;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,WAAU;AAAA,UACV,OAAM;AAAA,UAEN,uDAAC,KAAE,WAAU,WAAU;AAAA;AAAA,MACzB;AAAA,OACF;AAAA,IACA,6CAAC,OAAE,WAAU,mDACV,qBAAW,SACd;AAAA,KACF;AAEJ;;;ACXQ,IAAAC,sBAAA;AAZD,IAAM,eAA4C,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE,6CAAC,SAAI,WAAU,0DAEb,wDAAC,SAAI,WAAU,yLAEb;AAAA,kDAAC,SAAI,WAAU,2BACb;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,KAAK;AAAA,UACL,MAAK;AAAA,UACL,OAAO;AAAA,UACP,UAAU,CAAC,MAAM,SAAS,EAAE,OAAO,KAAK;AAAA,UACxC;AAAA,UACA,aAAY;AAAA,UACZ,WAAU;AAAA;AAAA,MACZ;AAAA,MAEA,6CAAC,WAAM,WAAW;AAAA,QAChB;AAAA,QACA,QAAQ,KAAK,IACT,gDACA;AAAA,MACN,GAAG,+BAEH;AAAA,OACF;AAAA,IAGA,6CAAC,SAAI,WAAU,0BACb;AAAA,MAAC;AAAA;AAAA,QACC,SAAS;AAAA,QACT,UAAU,CAAC,QAAQ,KAAK;AAAA,QACxB,WAAU;AAAA,QACV,OAAM;AAAA,QAEN,uDAAC,QAAK,WAAU,WAAU;AAAA;AAAA,IAC5B,GACF;AAAA,KACF,GACF;AAEJ;;;AC3DA,mBAAkC;;;ACE3B,IAAM,eAA8B;AAAA,EACzC;AAAA,IACE,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ,EAAE,IAAI,KAAK,MAAM,YAAY,QAAQ,KAAK;AAAA,IAClD,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,GAAI,EAAE,YAAY;AAAA,IAC7D,WAAW,CAAC,EAAE,OAAO,aAAM,OAAO,GAAG,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;AAAA,EAC1D;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ,EAAE,IAAI,KAAK,MAAM,OAAO,QAAQ,KAAK;AAAA,IAC7C,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,KAAK,GAAI,EAAE,YAAY;AAAA,IAC5D,SAAS,EAAE,IAAI,KAAK,SAAS,mCAAoC,QAAQ,WAAW;AAAA,EACtF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ,EAAE,IAAI,UAAU,MAAM,UAAU,QAAQ,GAAG;AAAA,IACnD,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,KAAK,GAAI,EAAE,YAAY;AAAA,EAC9D;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ,EAAE,IAAI,KAAK,MAAM,eAAe,QAAQ,KAAK;AAAA,IACrD,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,KAAK,GAAI,EAAE,YAAY;AAAA,IAC5D,WAAW;AAAA,MACT,EAAE,OAAO,aAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;AAAA,MACtC,EAAE,OAAO,aAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;AAAA,IACxC;AAAA,EACF;AACF;AAEO,IAAM,iBAAiB,CAAC,aAAM,gBAAM,aAAM,aAAM,aAAM,WAAI;;;ADnC1D,IAAM,kBAAkB,CAAC,aAAsB;AACpD,QAAM,qBAAiB,qBAAuB,IAAI;AAElD,QAAM,EAAE,MAAM,aAAa,IAAI,KAAK,KAAK,YAAY;AAAA,IACnD,EAAE,UAAU,YAAY,UAAU;AAAA,IAClC,EAAE,SAAS,CAAC,CAAC,SAAS;AAAA,EACxB;AAEA,QAAM,WAAW,cAAc,YAAY,CAAC;AAC5C,QAAM,kBAAkB,WAAW,WAAW;AAE9C,8BAAU,MAAM;AACd,UAAM,kBAAkB,eAAe,SAAS,QAAQ,mCAAmC;AAC3F,QAAI,mBAAmB,eAAe,SAAS;AAC7C,sBAAgB,YAAY,gBAAgB;AAAA,IAC9C;AAAA,EACF,GAAG,CAAC,eAAe,CAAC;AAEpB,SAAO;AAAA,IACL,UAAU;AAAA,IACV;AAAA,EACF;AACF;;;AE1BA,IAAAC,gBAAiC;AAI1B,IAAM,iBAAiB,CAAC,aAAsB;AACnD,QAAM,CAAC,SAAS,UAAU,QAAI,wBAAS,EAAE;AACzC,QAAM,CAAC,YAAY,aAAa,QAAI,wBAA6B,IAAI;AACrE,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAwB,IAAI;AAC1E,QAAM,sBAAkB,sBAAyB,IAAI;AAErD,QAAM,kBAAkB,KAAK,KAAK,YAAY,YAAY,CAC1D,CAAC;AAED,QAAM,cAAc,KAAK,KAAK,YAAY,YAAY,CACtD,CAAC;AAED,QAAM,iBAAiB,KAAK,KAAK,eAAe,YAAY,CAC5D,CAAC;AAED,QAAM,oBAAoB,MAAM;AAC9B,QAAI,CAAC,QAAQ,KAAK,EAAG;AAErB,QAAI,UAAU;AACZ,sBAAgB,OAAO;AAAA,QACrB;AAAA,QACA,SAAS;AAAA,QACT,MAAM;AAAA,QACN,WAAW,YAAY;AAAA,MACzB,CAAC;AAAA,IACH;AAEA,eAAW,EAAE;AACb,kBAAc,IAAI;AAAA,EACpB;AAEA,QAAM,iBAAiB,CAAC,WAAmB,UAAkB;AAC3D,QAAI,UAAU;AACZ,kBAAY,OAAO,EAAE,WAAW,MAAM,CAAC;AAAA,IACzC,OAAO;AACL,cAAQ,IAAI,mBAAmB,KAAK,eAAe,SAAS,EAAE;AAAA,IAChE;AACA,uBAAmB,IAAI;AAAA,EACzB;AAEA,QAAM,cAAc,CAACC,aAAyB;AAC5C,kBAAcA,QAAO;AACrB,oBAAgB,SAAS,MAAM;AAAA,EACjC;AAEA,QAAM,iBAAiB,CAAC,MAA2B;AACjD,QAAI,EAAE,QAAQ,WAAW,CAAC,EAAE,UAAU;AACpC,QAAE,eAAe;AACjB,wBAAkB;AAAA,IACpB;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACpCM,IAAAC,sBAAA;AAtBS,SAAR,KAAsB,EAAE,UAAU,UAAU,GAAc;AAC/D,QAAM,EAAE,UAAU,eAAe,IAAI,gBAAgB,QAAQ;AAC7D,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,eAAe,QAAQ;AAE3B,QAAM,gBAAgB;AAEtB,SACE,8CAAC,SAAI,WAAW,GAAG,iCAAiC,SAAS,GAG3D;AAAA,kDAAC,SAAI,WAAU,6CACZ;AAAA,eAAS,IAAI,CAACC,aACb;AAAA,QAAC;AAAA;AAAA,UAEC,SAASA;AAAA,UACT;AAAA,UACA,YAAY;AAAA,UACZ,SAAS;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA;AAAA,QAPKA,SAAQ;AAAA,MAQf,CACD;AAAA,MACD,6CAAC,SAAI,KAAK,gBAAgB;AAAA,OAC5B;AAAA,IAGC,cACC;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,UAAU,MAAM,cAAc,IAAI;AAAA;AAAA,IACpC;AAAA,IAIF;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,UAAU;AAAA;AAAA,IACZ;AAAA,KACF;AAEJ;",
  "names": ["quickReactions", "import_jsx_runtime", "import_jsx_runtime", "quickReactions", "import_jsx_runtime", "import_jsx_runtime", "import_react", "message", "import_jsx_runtime", "message"]
}
