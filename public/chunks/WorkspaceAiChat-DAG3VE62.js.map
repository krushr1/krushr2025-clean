{
  "version": 3,
  "sources": ["../../frontend/src/components/ai/WorkspaceAiChat.tsx"],
  "sourcesContent": ["import React, { useState, useRef, useEffect } from 'react'\nimport { Button } from '../ui/button'\nimport { Input } from '../ui/input'\nimport { Avatar, AvatarFallback } from '../ui/avatar'\nimport { ScrollArea } from '../ui/scroll-area'\nimport { \n  Send, \n  Bot, \n  User,\n  Zap,\n  Clock,\n  Plus,\n  MessageSquare,\n  Sparkles\n} from 'lucide-react'\nimport { trpc } from '../../lib/trpc'\nimport { cn } from '../../lib/utils'\nimport { useAppStore } from '../../stores/app-store'\n\ninterface WorkspaceAiChatProps {\n  workspaceId: string\n  className?: string\n}\n\nexport default function WorkspaceAiChat({ workspaceId, className }: WorkspaceAiChatProps) {\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null)\n  const [message, setMessage] = useState('')\n  const [thinkingBudget, setThinkingBudget] = useState(8000)\n  const [isLoading, setIsLoading] = useState(false)\n  const [showConversations, setShowConversations] = useState(false)\n  \n  const messageInputRef = useRef<HTMLInputElement>(null)\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  \n  const { user } = useAppStore()\n  \n  // tRPC queries and mutations\n  const { data: conversations, refetch: refetchConversations } = trpc.ai.getConversations.useQuery({\n    workspaceId\n  })\n  \n  const { data: currentConversation } = trpc.ai.getConversation.useQuery({\n    conversationId: selectedConversation!\n  }, {\n    enabled: !!selectedConversation\n  })\n  \n  const { data: usageStats } = trpc.ai.getUsageStats.useQuery({\n    workspaceId,\n    days: 30\n  })\n  \n  const createConversation = trpc.ai.createConversation.useMutation({\n    onSuccess: (conversation) => {\n      setSelectedConversation(conversation.id)\n      refetchConversations()\n      setShowConversations(false)\n    }\n  })\n  \n  const sendMessage = trpc.ai.sendMessage.useMutation({\n    onSuccess: () => {\n      setMessage('')\n      setIsLoading(false)\n    },\n    onError: () => {\n      setIsLoading(false)\n    }\n  })\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [currentConversation?.messages])\n\n  useEffect(() => {\n    // Auto-select first conversation if none selected\n    if (!selectedConversation && conversations && conversations.length > 0) {\n      setSelectedConversation(conversations[0].id)\n    }\n  }, [conversations, selectedConversation])\n\n  const handleSendMessage = async () => {\n    if (!message.trim()) return\n    \n    let conversationId = selectedConversation\n    \n    // Create new conversation if none selected\n    if (!conversationId) {\n      setIsLoading(true)\n      const newConversation = await createConversation.mutateAsync({\n        workspaceId,\n        title: undefined,\n        context: 'Workspace AI assistant'\n      })\n      conversationId = newConversation.id\n    }\n    \n    setIsLoading(true)\n    await sendMessage.mutateAsync({\n      conversationId: conversationId!,\n      message,\n      thinkingBudget\n    })\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  const formatCost = (cost: number) => {\n    return cost < 0.01 ? '<$0.01' : `$${cost.toFixed(3)}`\n  }\n\n  const formatTokens = (tokens: number) => {\n    return tokens > 1000 ? `${(tokens / 1000).toFixed(1)}K` : tokens.toString()\n  }\n\n  return (\n    <div className={cn('h-full flex flex-col bg-white', className)}>\n      {/* Header similar to chat panel */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-200 bg-gradient-to-r from-krushr-primary/5 to-transparent\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"relative\">\n              <Bot className=\"w-5 h-5 text-krushr-primary\" />\n              <Sparkles className=\"w-3 h-3 text-yellow-500 absolute -top-1 -right-1\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-sm text-gray-900\">AI Assistant</h3>\n              <p className=\"text-xs text-gray-500\">Gemini 2.5 Flash</p>\n            </div>\n          </div>\n          {usageStats && (\n            <div className=\"hidden md:flex items-center space-x-3 text-xs text-gray-500\">\n              <div className=\"flex items-center space-x-1\">\n                <Zap className=\"w-3 h-3\" />\n                <span>{formatTokens(usageStats.totalStats.totalTokens)}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <span>{formatCost(usageStats.totalStats.totalCost)}</span>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-1\">\n          {conversations && conversations.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowConversations(!showConversations)}\n              className=\"h-7 px-2 text-xs\"\n            >\n              <MessageSquare className=\"w-3 h-3 mr-1\" />\n              {conversations.length}\n            </Button>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => createConversation.mutate({ workspaceId })}\n            className=\"h-7 px-2\"\n          >\n            <Plus className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Conversation selector (collapsible) */}\n      {showConversations && conversations && conversations.length > 0 && (\n        <div className=\"border-b border-gray-200 bg-gray-50 max-h-32 overflow-y-auto\">\n          <div className=\"p-2 space-y-1\">\n            {conversations.map((conversation) => (\n              <Button\n                key={conversation.id}\n                variant={selectedConversation === conversation.id ? 'secondary' : 'ghost'}\n                size=\"sm\"\n                className=\"w-full justify-start h-auto p-2 text-left\"\n                onClick={() => {\n                  setSelectedConversation(conversation.id)\n                  setShowConversations(false)\n                }}\n              >\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium text-xs truncate\">\n                    {conversation.title || 'New Conversation'}\n                  </div>\n                  <div className=\"text-xs text-gray-500 truncate\">\n                    {conversation.messages[0]?.content || 'No messages yet'}\n                  </div>\n                  <div className=\"flex items-center justify-between mt-1\">\n                    <span className=\"text-xs text-gray-400\">\n                      {conversation.messages.length} messages\n                    </span>\n                    <span className=\"text-xs text-gray-400\">\n                      {formatCost(conversation.totalCost)}\n                    </span>\n                  </div>\n                </div>\n              </Button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Messages area */}\n      <ScrollArea className=\"flex-1 p-3\">\n        <div className=\"space-y-4\">\n          {selectedConversation && currentConversation ? (\n            currentConversation.messages.map((msg) => (\n              <div key={msg.id} className=\"flex items-start space-x-3\">\n                <Avatar className=\"w-7 h-7 flex-shrink-0\">\n                  <AvatarFallback className=\"text-xs\">\n                    {msg.role === 'user' ? (\n                      <User className=\"w-4 h-4\" />\n                    ) : (\n                      <Bot className=\"w-4 h-4\" />\n                    )}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <span className=\"font-medium text-xs text-gray-900\">\n                      {msg.role === 'user' ? user?.name || 'You' : 'AI'}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(msg.createdAt).toLocaleTimeString([], { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </span>\n                    {msg.role === 'assistant' && (\n                      <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n                        <Zap className=\"w-3 h-3\" />\n                        <span>{formatTokens(msg.tokenCount)}</span>\n                        {msg.responseTime && (\n                          <>\n                            <Clock className=\"w-3 h-3 ml-1\" />\n                            <span>{msg.responseTime}ms</span>\n                          </>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  <div className={cn(\n                    'text-sm',\n                    msg.role === 'user' \n                      ? 'bg-krushr-primary/10 p-2 rounded-lg border border-krushr-primary/20' \n                      : 'text-gray-900'\n                  )}>\n                    <p className=\"whitespace-pre-wrap\">{msg.content}</p>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <Button\n                onClick={() => createConversation.mutate({ workspaceId })}\n                size=\"sm\"\n                className=\"bg-krushr-primary hover:bg-krushr-primary/90\"\n              >\n                <Plus className=\"w-3 h-3 mr-1\" />\n                Start Conversation\n              </Button>\n            </div>\n          )}\n          \n          {isLoading && (\n            <div className=\"flex items-start space-x-3\">\n              <Avatar className=\"w-7 h-7\">\n                <AvatarFallback className=\"text-xs\">\n                  <Bot className=\"w-4 h-4\" />\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <div className=\"bg-gray-100 p-2 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-krushr-primary\"></div>\n                    <span className=\"text-xs text-gray-500\">AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div ref={messagesEndRef} />\n        </div>\n      </ScrollArea>\n\n      {/* Input area - compact design */}\n      <div className=\"p-3 border-t border-gray-200 bg-gray-50/50\">\n        {/* Thinking budget slider - simplified */}\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <label className=\"text-xs text-gray-500 flex-shrink-0\">Thinking:</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"24576\"\n            value={thinkingBudget}\n            onChange={(e) => setThinkingBudget(Number(e.target.value))}\n            className=\"flex-1 h-1.5 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n          />\n          <span className=\"text-xs text-gray-500 w-12 text-right\">\n            {thinkingBudget === 0 ? 'Fast' : formatTokens(thinkingBudget)}\n          </span>\n        </div>\n        \n        {/* Message input */}\n        <div className=\"flex items-center space-x-2\">\n          <Input\n            ref={messageInputRef}\n            placeholder=\"Ask AI anything...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            disabled={isLoading}\n            className=\"flex-1 h-8 text-sm\"\n          />\n          <Button\n            onClick={handleSendMessage}\n            disabled={!message.trim() || isLoading}\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n          >\n            <Send className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}"],
  "mappings": "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",
  "names": []
}
