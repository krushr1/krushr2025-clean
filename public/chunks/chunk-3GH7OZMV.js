import{a as k}from"/chunks/chunk-FVIO3V6K.js";import{a as i}from"/chunks/chunk-OCDNZNMT.js";var p={LOGIN:"/auth/login",REGISTER:"/auth/register",LOGOUT:"/auth/logout",ME:"/auth/me",WORKSPACES:"/workspaces",TEAMS:"/teams",KANBANS:"/kanbans",TASKS:"/tasks",PANELS:"/panels",NOTIFICATIONS:"/notifications",EMAILS:"/emails",CALENDAR:"/calendar",CHAT:"/chat",PERSONAL_CHAT:"/chat/personal",TEAM_CHAT:"/chat/team",OPENAI:"/openai",TAGS:"/tags"};var r={PERSONAL_CHAT_MESSAGE:"personal-chat-message",TEAM_CHAT_MESSAGE:"team-chat-message",NOTIFICATION_CREATED:"notification-created",TASK_UPDATED:"task-updated",KANBAN_UPDATED:"kanban-updated",USER_ONLINE:"user-online",USER_OFFLINE:"user-offline"};var d=i()(k((o,c)=>({user:null,isAuthenticated:!1,workspaces:[],activeWorkspace:null,teams:[],kanbans:[],tasks:[],notifications:[],sidebarOpen:!0,currentPage:"home",loading:!1,error:null,websocket:{connected:!1,socket:null,reconnectAttempts:0,maxReconnectAttempts:5},setUser:e=>o({user:e,isAuthenticated:!!e}),setActiveWorkspace:e=>o({activeWorkspace:e}),setWorkspaces:e=>o({workspaces:e}),setTeams:e=>o({teams:e}),setKanbans:e=>o({kanbans:e}),setTasks:e=>o({tasks:e}),addTask:e=>o(s=>({tasks:[...s.tasks,e]})),updateTask:(e,s)=>o(t=>({tasks:t.tasks.map(a=>a.id===e?{...a,...s}:a)})),deleteTask:e=>o(s=>({tasks:s.tasks.filter(t=>t.id!==e)})),setNotifications:e=>o({notifications:e}),addNotification:e=>o(s=>({notifications:[e,...s.notifications]})),markNotificationRead:e=>o(s=>({notifications:s.notifications.map(t=>t.id===e?{...t,is_read:!0}:t)})),setSidebarOpen:e=>o({sidebarOpen:e}),setCurrentPage:e=>o({currentPage:e}),setLoading:e=>o({loading:e}),setError:e=>o({error:e}),connectWebSocket:()=>{let e=c();if(e.websocket.socket||!e.isAuthenticated)return;let s="wss://api.krushr.app/ws";try{let t=new WebSocket(s);t.onopen=()=>{console.log("WebSocket connected"),o(a=>({websocket:{...a.websocket,connected:!0,socket:t,reconnectAttempts:0}}))},t.onmessage=a=>{try{let n=JSON.parse(a.data);A(n,o,c)}catch(n){console.error("WebSocket message parse error:",n)}},t.onclose=()=>{console.log("WebSocket disconnected"),o(n=>({websocket:{...n.websocket,connected:!1,socket:null}}));let a=c();a.websocket.reconnectAttempts<a.websocket.maxReconnectAttempts&&setTimeout(()=>{o(n=>({websocket:{...n.websocket,reconnectAttempts:n.websocket.reconnectAttempts+1}})),c().connectWebSocket()},2e3*Math.pow(2,a.websocket.reconnectAttempts))},t.onerror=a=>{console.error("WebSocket error:",a),o({error:"Connection error occurred"})}}catch(t){console.error("WebSocket connection failed:",t),o({error:"Failed to connect to real-time service"})}},disconnectWebSocket:()=>{let e=c();e.websocket.socket&&(e.websocket.socket.close(),o(s=>({websocket:{...s.websocket,connected:!1,socket:null}})))},sendMessage:(e,s)=>{let t=c();t.websocket.connected&&t.websocket.socket&&t.websocket.socket.send(JSON.stringify({event:e,data:s,timestamp:new Date().toISOString()}))}})));function A(o,c,e){let{event:s,data:t}=o;switch(s){case r.TASK_UPDATED:e().updateTask(t.id,t);break;case r.KANBAN_UPDATED:c(a=>({kanbans:a.kanbans.map(n=>n.id===t.id?t:n)}));break;case r.NOTIFICATION_CREATED:e().addNotification(t);break;case r.PERSONAL_CHAT_MESSAGE:case r.TEAM_CHAT_MESSAGE:console.log("Chat message received:",t);break;case r.USER_ONLINE:case r.USER_OFFLINE:console.log("User presence change:",t);break;default:console.log("Unknown WebSocket event:",s,t)}}var b=()=>{let o=d(e=>e.websocket.connected),c=d(e=>e.sendMessage);return{connected:o,sendMessage:c}};export{p as a,d as b,b as c};
