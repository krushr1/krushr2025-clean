{
  "version": 3,
  "sources": ["../../frontend/src/components/ui/textarea.tsx", "../../node_modules/zustand/esm/vanilla.mjs", "../../node_modules/zustand/esm/react.mjs", "../../node_modules/zustand/esm/middleware.mjs", "../../shared/constants.ts", "../../frontend/src/stores/app-store.ts"],
  "sourcesContent": ["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n", "const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const api = { setState, getState, getInitialState, subscribe };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\n\nexport { createStore };\n", "import React from 'react';\nimport { createStore } from 'zustand/vanilla';\n\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity) {\n  const slice = React.useSyncExternalStore(\n    api.subscribe,\n    () => selector(api.getState()),\n    () => selector(api.getInitialState())\n  );\n  React.useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  const api = createStore(createState);\n  const useBoundStore = (selector) => useStore(api, selector);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\n\nexport { create, useStore };\n", "const reduxImpl = (reducer, initial) => (set, _get, api) => {\n  api.dispatch = (action) => {\n    set((state) => reducer(state, action), false, action);\n    return action;\n  };\n  api.dispatchFromDevtools = true;\n  return { dispatch: (...args) => api.dispatch(...args), ...initial };\n};\nconst redux = reduxImpl;\n\nconst trackedConnections = /* @__PURE__ */ new Map();\nconst getTrackedConnectionState = (name) => {\n  const api = trackedConnections.get(name);\n  if (!api) return {};\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\n  );\n};\nconst extractConnectionInformation = (store, extensionConnector, options) => {\n  if (store === void 0) {\n    return {\n      type: \"untracked\",\n      connection: extensionConnector.connect(options)\n    };\n  }\n  const existingConnection = trackedConnections.get(options.name);\n  if (existingConnection) {\n    return { type: \"tracked\", store, ...existingConnection };\n  }\n  const newConnection = {\n    connection: extensionConnector.connect(options),\n    stores: {}\n  };\n  trackedConnections.set(options.name, newConnection);\n  return { type: \"tracked\", store, ...newConnection };\n};\nconst removeStoreFromTrackedConnections = (name, store) => {\n  if (store === void 0) return;\n  const connectionInfo = trackedConnections.get(name);\n  if (!connectionInfo) return;\n  delete connectionInfo.stores[store];\n  if (Object.keys(connectionInfo.stores).length === 0) {\n    trackedConnections.delete(name);\n  }\n};\nconst findCallerName = (stack) => {\n  var _a, _b;\n  if (!stack) return void 0;\n  const traceLines = stack.split(\"\\n\");\n  const apiSetStateLineIndex = traceLines.findIndex(\n    (traceLine) => traceLine.includes(\"api.setState\")\n  );\n  if (apiSetStateLineIndex < 0) return void 0;\n  const callerLine = ((_a = traceLines[apiSetStateLineIndex + 1]) == null ? void 0 : _a.trim()) || \"\";\n  return (_b = /.+ (.+) .+/.exec(callerLine)) == null ? void 0 : _b[1];\n};\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\n  let extensionConnector;\n  try {\n    extensionConnector = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (e) {\n  }\n  if (!extensionConnector) {\n    return fn(set, get, api);\n  }\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\n  let isRecording = true;\n  api.setState = (state, replace, nameOrAction) => {\n    const r = set(state, replace);\n    if (!isRecording) return r;\n    const action = nameOrAction === void 0 ? {\n      type: anonymousActionType || findCallerName(new Error().stack) || \"anonymous\"\n    } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\n    if (store === void 0) {\n      connection == null ? void 0 : connection.send(action, get());\n      return r;\n    }\n    connection == null ? void 0 : connection.send(\n      {\n        ...action,\n        type: `${store}/${action.type}`\n      },\n      {\n        ...getTrackedConnectionState(options.name),\n        [store]: api.getState()\n      }\n    );\n    return r;\n  };\n  api.devtools = {\n    cleanup: () => {\n      if (connection && typeof connection.unsubscribe === \"function\") {\n        connection.unsubscribe();\n      }\n      removeStoreFromTrackedConnections(options.name, store);\n    }\n  };\n  const setStateFromDevtools = (...a) => {\n    const originalIsRecording = isRecording;\n    isRecording = false;\n    set(...a);\n    isRecording = originalIsRecording;\n  };\n  const initialState = fn(api.setState, get, api);\n  if (connectionInformation.type === \"untracked\") {\n    connection == null ? void 0 : connection.init(initialState);\n  } else {\n    connectionInformation.stores[connectionInformation.store] = api;\n    connection == null ? void 0 : connection.init(\n      Object.fromEntries(\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\n          key,\n          key === connectionInformation.store ? initialState : store2.getState()\n        ])\n      )\n    );\n  }\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n    let didWarnAboutReservedActionType = false;\n    const originalDispatch = api.dispatch;\n    api.dispatch = (...args) => {\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && args[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n        console.warn(\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\n        );\n        didWarnAboutReservedActionType = true;\n      }\n      originalDispatch(...args);\n    };\n  }\n  connection.subscribe((message) => {\n    var _a;\n    switch (message.type) {\n      case \"ACTION\":\n        if (typeof message.payload !== \"string\") {\n          console.error(\n            \"[zustand devtools middleware] Unsupported action format\"\n          );\n          return;\n        }\n        return parseJsonThen(\n          message.payload,\n          (action) => {\n            if (action.type === \"__setState\") {\n              if (store === void 0) {\n                setStateFromDevtools(action.state);\n                return;\n              }\n              if (Object.keys(action.state).length !== 1) {\n                console.error(\n                  `\n                    [zustand devtools middleware] Unsupported __setState action format.\n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `\n                );\n              }\n              const stateFromDevtools = action.state[store];\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\n                setStateFromDevtools(stateFromDevtools);\n              }\n              return;\n            }\n            if (!api.dispatchFromDevtools) return;\n            if (typeof api.dispatch !== \"function\") return;\n            api.dispatch(action);\n          }\n        );\n      case \"DISPATCH\":\n        switch (message.payload.type) {\n          case \"RESET\":\n            setStateFromDevtools(initialState);\n            if (store === void 0) {\n              return connection == null ? void 0 : connection.init(api.getState());\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"COMMIT\":\n            if (store === void 0) {\n              connection == null ? void 0 : connection.init(api.getState());\n              return;\n            }\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n          case \"ROLLBACK\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                connection == null ? void 0 : connection.init(api.getState());\n                return;\n              }\n              setStateFromDevtools(state[store]);\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\n            });\n          case \"JUMP_TO_STATE\":\n          case \"JUMP_TO_ACTION\":\n            return parseJsonThen(message.state, (state) => {\n              if (store === void 0) {\n                setStateFromDevtools(state);\n                return;\n              }\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\n                setStateFromDevtools(state[store]);\n              }\n            });\n          case \"IMPORT_STATE\": {\n            const { nextLiftedState } = message.payload;\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\n            if (!lastComputedState) return;\n            if (store === void 0) {\n              setStateFromDevtools(lastComputedState);\n            } else {\n              setStateFromDevtools(lastComputedState[store]);\n            }\n            connection == null ? void 0 : connection.send(\n              null,\n              // FIXME no-any\n              nextLiftedState\n            );\n            return;\n          }\n          case \"PAUSE_RECORDING\":\n            return isRecording = !isRecording;\n        }\n        return;\n    }\n  });\n  return initialState;\n};\nconst devtools = devtoolsImpl;\nconst parseJsonThen = (stringified, fn) => {\n  let parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error(\n      \"[zustand devtools middleware] Could not parse the received json\",\n      e\n    );\n  }\n  if (parsed !== void 0) fn(parsed);\n};\n\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\n  const origSubscribe = api.subscribe;\n  api.subscribe = (selector, optListener, options) => {\n    let listener = selector;\n    if (optListener) {\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n      let currentSlice = selector(api.getState());\n      listener = (state) => {\n        const nextSlice = selector(state);\n        if (!equalityFn(currentSlice, nextSlice)) {\n          const previousSlice = currentSlice;\n          optListener(currentSlice = nextSlice, previousSlice);\n        }\n      };\n      if (options == null ? void 0 : options.fireImmediately) {\n        optListener(currentSlice, currentSlice);\n      }\n    }\n    return origSubscribe(listener);\n  };\n  const initialState = fn(set, get, api);\n  return initialState;\n};\nconst subscribeWithSelector = subscribeWithSelectorImpl;\n\nfunction combine(initialState, create) {\n  return (...args) => Object.assign({}, initialState, create(...args));\n}\n\nfunction createJSONStorage(getStorage, options) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (e) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue, options == null ? void 0 : options.replacer)),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn) => (input) => {\n  try {\n    const result = fn(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e);\n      }\n    };\n  }\n};\nconst persistImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  api.getInitialState = () => configResult;\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a, _b;\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => {\n      var _a2;\n      return cb((_a2 = get()) != null ? _a2 : configResult);\n    });\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            const migration = options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n            if (migration instanceof Promise) {\n              return migration.then((result) => [true, result]);\n            }\n            return [true, migration];\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return [false, deserializedStorageValue.state];\n        }\n      }\n      return [false, void 0];\n    }).then((migrationResult) => {\n      var _a2;\n      const [migrated, migratedState] = migrationResult;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      if (migrated) {\n        return setItem();\n      }\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      stateFromStorage = get();\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  if (!options.skipHydration) {\n    hydrate();\n  }\n  return stateFromStorage || configResult;\n};\nconst persist = persistImpl;\n\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\n", "// Shared constants across frontend and backend\n\nexport const API_ENDPOINTS = {\n  // Auth\n  LOGIN: '/auth/login',\n  REGISTER: '/auth/register',\n  LOGOUT: '/auth/logout',\n  ME: '/auth/me',\n  \n  // Workspaces\n  WORKSPACES: '/workspaces',\n  \n  // Teams\n  TEAMS: '/teams',\n  \n  // Kanbans\n  KANBANS: '/kanbans',\n  \n  // Tasks\n  TASKS: '/tasks',\n  \n  // Panels\n  PANELS: '/panels',\n  \n  // Notifications\n  NOTIFICATIONS: '/notifications',\n  \n  // Email\n  EMAILS: '/emails',\n  \n  // Calendar\n  CALENDAR: '/calendar',\n  \n  // Chat\n  CHAT: '/chat',\n  PERSONAL_CHAT: '/chat/personal',\n  TEAM_CHAT: '/chat/team',\n  \n  // OpenAI\n  OPENAI: '/openai',\n  \n  // Tags\n  TAGS: '/tags'\n} as const;\n\nexport const TASK_PRIORITIES = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high'\n} as const;\n\nexport const PANEL_TYPES = {\n  KANBAN: 'kanban',\n  CALENDAR: 'calendar',\n  CHAT: 'chat',\n  NOTES: 'notes',\n  EMAIL: 'email',\n  CONTACTS: 'contacts'\n} as const;\n\nexport const NOTIFICATION_TYPES = {\n  TASK_ASSIGNED: 'task_assigned',\n  TEAM_INVITATION: 'team_invitation',\n  USER_INVITATION: 'user_invitation',\n  CHAT_MESSAGE: 'chat_message',\n  EMAIL_RECEIVED: 'email_received'\n} as const;\n\nexport const WEBSOCKET_EVENTS = {\n  // Chat events\n  PERSONAL_CHAT_MESSAGE: 'personal-chat-message',\n  TEAM_CHAT_MESSAGE: 'team-chat-message',\n  \n  // Notification events\n  NOTIFICATION_CREATED: 'notification-created',\n  \n  // Task events\n  TASK_UPDATED: 'task-updated',\n  KANBAN_UPDATED: 'kanban-updated',\n  \n  // Presence events\n  USER_ONLINE: 'user-online',\n  USER_OFFLINE: 'user-offline'\n} as const;\n\nexport const HTTP_STATUS = {\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  UNPROCESSABLE_ENTITY: 422,\n  INTERNAL_SERVER_ERROR: 500\n} as const;\n\nexport const DEFAULT_PAGINATION = {\n  PAGE: 1,\n  PER_PAGE: 15,\n  MAX_PER_PAGE: 100\n} as const;", "\nimport { create } from 'zustand'\nimport { subscribeWithSelector } from 'zustand/middleware'\nimport { User, Kanban, Task, Team, Workspace, Notification } from '../../../shared/types.js'\nimport { WEBSOCKET_EVENTS } from '../../../shared/constants.js'\n\ninterface WebSocketState {\n  connected: boolean\n  socket: WebSocket | null\n  reconnectAttempts: number\n  maxReconnectAttempts: number\n}\n\ninterface AppState {\n  // Authentication\n  user: User | null\n  isAuthenticated: boolean\n  \n  workspaces: Workspace[]\n  activeWorkspace: Workspace | null\n  teams: Team[]\n  kanbans: Kanban[]\n  tasks: Task[]\n  notifications: Notification[]\n  \n  sidebarOpen: boolean\n  currentPage: string\n  loading: boolean\n  error: string | null\n  \n  websocket: WebSocketState\n  \n  setUser: (user: User | null) => void\n  setActiveWorkspace: (workspace: Workspace) => void\n  setWorkspaces: (workspaces: Workspace[]) => void\n  setTeams: (teams: Team[]) => void\n  setKanbans: (kanbans: Kanban[]) => void\n  setTasks: (tasks: Task[]) => void\n  addTask: (task: Task) => void\n  updateTask: (taskId: string, updates: Partial<Task>) => void\n  deleteTask: (taskId: string) => void\n  setNotifications: (notifications: Notification[]) => void\n  addNotification: (notification: Notification) => void\n  markNotificationRead: (notificationId: string) => void\n  setSidebarOpen: (open: boolean) => void\n  setCurrentPage: (page: string) => void\n  setLoading: (loading: boolean) => void\n  setError: (error: string | null) => void\n  \n  connectWebSocket: () => void\n  disconnectWebSocket: () => void\n  sendMessage: (event: string, data: any) => void\n}\n\nexport const useAppStore = create<AppState>()(\n  subscribeWithSelector((set, get) => ({\n    user: null,\n    isAuthenticated: false,\n    workspaces: [],\n    activeWorkspace: null,\n    teams: [],\n    kanbans: [],\n    tasks: [],\n    notifications: [],\n    sidebarOpen: true,\n    currentPage: 'home',\n    loading: false,\n    error: null,\n    websocket: {\n      connected: false,\n      socket: null,\n      reconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n          },\n\n      // Authentication Actions\n    setUser: (user) => set({ user, isAuthenticated: !!user }),\n    \n    setActiveWorkspace: (workspace) => set({ activeWorkspace: workspace }),\n    setWorkspaces: (workspaces) => set({ workspaces }),\n    setTeams: (teams) => set({ teams }),\n    setKanbans: (kanbans) => set({ kanbans }),\n    setTasks: (tasks) => set({ tasks }),\n    \n    addTask: (task) => set((state) => ({\n      tasks: [...state.tasks, task]\n    })),\n    \n    updateTask: (taskId, updates) => set((state) => ({\n      tasks: state.tasks.map(task => \n        task.id === taskId ? { ...task, ...updates } : task\n      )\n    })),\n    \n    deleteTask: (taskId) => set((state) => ({\n      tasks: state.tasks.filter(task => task.id !== taskId)\n    })),\n    \n    setNotifications: (notifications) => set({ notifications }),\n    \n    addNotification: (notification) => set((state) => ({\n      notifications: [notification, ...state.notifications]\n    })),\n    \n    markNotificationRead: (notificationId) => set((state) => ({\n      notifications: state.notifications.map(notif =>\n        notif.id === notificationId ? { ...notif, is_read: true } : notif\n      )\n    })),\n\n    setSidebarOpen: (open) => set({ sidebarOpen: open }),\n    setCurrentPage: (page) => set({ currentPage: page }),\n    setLoading: (loading) => set({ loading }),\n    setError: (error) => set({ error }),\n\n    connectWebSocket: () => {\n      const state = get()\n      if (state.websocket.socket || !state.isAuthenticated) return\n\n      const wsUrl = process.env.NODE_ENV === 'production' \n        ? 'wss://api.krushr.app/ws' \n        : 'ws://localhost:6001/app/krushr'\n\n      try {\n        const socket = new WebSocket(wsUrl)\n        \n        socket.onopen = () => {\n          console.log('WebSocket connected')\n          set((state) => ({\n            websocket: {\n              ...state.websocket,\n              connected: true,\n              socket,\n              reconnectAttempts: 0,\n            }\n          }))\n        }\n\n        socket.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data)\n            handleWebSocketMessage(message, set, get)\n          } catch (error) {\n            console.error('WebSocket message parse error:', error)\n          }\n        }\n\n        socket.onclose = () => {\n          console.log('WebSocket disconnected')\n          set((state) => ({\n            websocket: {\n              ...state.websocket,\n              connected: false,\n              socket: null,\n            }\n          }))\n          \n          const currentState = get()\n          if (currentState.websocket.reconnectAttempts < currentState.websocket.maxReconnectAttempts) {\n            setTimeout(() => {\n              set((state) => ({\n                websocket: {\n                  ...state.websocket,\n                  reconnectAttempts: state.websocket.reconnectAttempts + 1,\n                }\n              }))\n              get().connectWebSocket()\n            }, 2000 * Math.pow(2, currentState.websocket.reconnectAttempts))\n          }\n        }\n\n        socket.onerror = (error) => {\n          console.error('WebSocket error:', error)\n          set({ error: 'Connection error occurred' })\n        }\n\n      } catch (error) {\n        console.error('WebSocket connection failed:', error)\n        set({ error: 'Failed to connect to real-time service' })\n      }\n    },\n\n    disconnectWebSocket: () => {\n      const state = get()\n      if (state.websocket.socket) {\n        state.websocket.socket.close()\n        set((state) => ({\n          websocket: {\n            ...state.websocket,\n            connected: false,\n            socket: null,\n          }\n        }))\n      }\n    },\n\n    sendMessage: (event, data) => {\n      const state = get()\n      if (state.websocket.connected && state.websocket.socket) {\n        state.websocket.socket.send(JSON.stringify({\n          event,\n          data,\n          timestamp: new Date().toISOString(),\n        }))\n      }\n    },\n  }))\n)\n\nfunction handleWebSocketMessage(\n  message: any, \n  set: any, \n  get: () => AppState\n) {\n  const { event, data } = message\n\n  switch (event) {\n    case WEBSOCKET_EVENTS.TASK_UPDATED:\n      get().updateTask(data.id, data)\n      break\n      \n    case WEBSOCKET_EVENTS.KANBAN_UPDATED:\n      set((state: AppState) => ({\n        kanbans: state.kanbans.map(kanban =>\n          kanban.id === data.id ? data : kanban\n        )\n      }))\n      break\n      \n    case WEBSOCKET_EVENTS.NOTIFICATION_CREATED:\n      get().addNotification(data)\n      break\n      \n    case WEBSOCKET_EVENTS.PERSONAL_CHAT_MESSAGE:\n    case WEBSOCKET_EVENTS.TEAM_CHAT_MESSAGE:\n      console.log('Chat message received:', data)\n      break\n      \n    case WEBSOCKET_EVENTS.USER_ONLINE:\n    case WEBSOCKET_EVENTS.USER_OFFLINE:\n      console.log('User presence change:', data)\n      break\n      \n    default:\n      console.log('Unknown WebSocket event:', event, data)\n  }\n}\n\nexport const useAuth = () => useAppStore((state) => ({\n  user: state.user,\n  isAuthenticated: state.isAuthenticated,\n}))\n\nexport const useWorkspace = () => useAppStore((state) => ({\n  workspaces: state.workspaces,\n  activeWorkspace: state.activeWorkspace,\n}))\n\nexport const useKanbans = () => useAppStore((state) => state.kanbans)\nexport const useTasks = () => useAppStore((state) => state.tasks)\nexport const useNotifications = () => useAppStore((state) => state.notifications)\nexport const useUI = () => useAppStore((state) => ({\n  sidebarOpen: state.sidebarOpen,\n  currentPage: state.currentPage,\n  loading: state.loading,\n  error: state.error,\n}))\n\nexport const useWebSocket = () => {\n  const connected = useAppStore((state) => state.websocket.connected)\n  const sendMessage = useAppStore((state) => state.sendMessage)\n  return { connected, sendMessage }\n}"],
  "mappings": "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",
  "names": ["React", "state"]
}
