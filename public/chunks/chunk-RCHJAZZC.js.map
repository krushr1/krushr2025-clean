{
  "version": 3,
  "sources": ["../../shared/constants.ts", "../../frontend/src/stores/app-store.ts"],
  "sourcesContent": ["// Shared constants across frontend and backend\n\nexport const API_ENDPOINTS = {\n  // Auth\n  LOGIN: '/auth/login',\n  REGISTER: '/auth/register',\n  LOGOUT: '/auth/logout',\n  ME: '/auth/me',\n  \n  // Workspaces\n  WORKSPACES: '/workspaces',\n  \n  // Teams\n  TEAMS: '/teams',\n  \n  // Kanbans\n  KANBANS: '/kanbans',\n  \n  // Tasks\n  TASKS: '/tasks',\n  \n  // Panels\n  PANELS: '/panels',\n  \n  // Notifications\n  NOTIFICATIONS: '/notifications',\n  \n  // Email\n  EMAILS: '/emails',\n  \n  // Calendar\n  CALENDAR: '/calendar',\n  \n  // Chat\n  CHAT: '/chat',\n  PERSONAL_CHAT: '/chat/personal',\n  TEAM_CHAT: '/chat/team',\n  \n  // OpenAI\n  OPENAI: '/openai',\n  \n  // Tags\n  TAGS: '/tags'\n} as const;\n\nexport const TASK_PRIORITIES = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high'\n} as const;\n\nexport const PANEL_TYPES = {\n  KANBAN: 'kanban',\n  CALENDAR: 'calendar',\n  CHAT: 'chat',\n  NOTES: 'notes',\n  EMAIL: 'email',\n  CONTACTS: 'contacts'\n} as const;\n\nexport const NOTIFICATION_TYPES = {\n  TASK_ASSIGNED: 'task_assigned',\n  TEAM_INVITATION: 'team_invitation',\n  USER_INVITATION: 'user_invitation',\n  CHAT_MESSAGE: 'chat_message',\n  EMAIL_RECEIVED: 'email_received'\n} as const;\n\nexport const WEBSOCKET_EVENTS = {\n  // Chat events\n  PERSONAL_CHAT_MESSAGE: 'personal-chat-message',\n  TEAM_CHAT_MESSAGE: 'team-chat-message',\n  \n  // Notification events\n  NOTIFICATION_CREATED: 'notification-created',\n  \n  // Task events\n  TASK_UPDATED: 'task-updated',\n  KANBAN_UPDATED: 'kanban-updated',\n  \n  // Presence events\n  USER_ONLINE: 'user-online',\n  USER_OFFLINE: 'user-offline'\n} as const;\n\nexport const HTTP_STATUS = {\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  UNPROCESSABLE_ENTITY: 422,\n  INTERNAL_SERVER_ERROR: 500\n} as const;\n\nexport const DEFAULT_PAGINATION = {\n  PAGE: 1,\n  PER_PAGE: 15,\n  MAX_PER_PAGE: 100\n} as const;", "\nimport { create } from 'zustand'\nimport { subscribeWithSelector } from 'zustand/middleware'\nimport { User, Kanban, Task, Team, Workspace, Notification } from '../../../shared/types.js'\nimport { WEBSOCKET_EVENTS } from '../../../shared/constants.js'\n\ninterface WebSocketState {\n  connected: boolean\n  socket: WebSocket | null\n  reconnectAttempts: number\n  maxReconnectAttempts: number\n}\n\ninterface AppState {\n  // Authentication\n  user: User | null\n  isAuthenticated: boolean\n  \n  workspaces: Workspace[]\n  activeWorkspace: Workspace | null\n  teams: Team[]\n  kanbans: Kanban[]\n  tasks: Task[]\n  notifications: Notification[]\n  \n  sidebarOpen: boolean\n  currentPage: string\n  loading: boolean\n  error: string | null\n  \n  websocket: WebSocketState\n  \n  setUser: (user: User | null) => void\n  setActiveWorkspace: (workspace: Workspace) => void\n  setWorkspaces: (workspaces: Workspace[]) => void\n  setTeams: (teams: Team[]) => void\n  setKanbans: (kanbans: Kanban[]) => void\n  setTasks: (tasks: Task[]) => void\n  addTask: (task: Task) => void\n  updateTask: (taskId: string, updates: Partial<Task>) => void\n  deleteTask: (taskId: string) => void\n  setNotifications: (notifications: Notification[]) => void\n  addNotification: (notification: Notification) => void\n  markNotificationRead: (notificationId: string) => void\n  setSidebarOpen: (open: boolean) => void\n  setCurrentPage: (page: string) => void\n  setLoading: (loading: boolean) => void\n  setError: (error: string | null) => void\n  \n  connectWebSocket: () => void\n  disconnectWebSocket: () => void\n  sendMessage: (event: string, data: any) => void\n}\n\nexport const useAppStore = create<AppState>()(\n  subscribeWithSelector((set, get) => ({\n    user: null,\n    isAuthenticated: false,\n    workspaces: [],\n    activeWorkspace: null,\n    teams: [],\n    kanbans: [],\n    tasks: [],\n    notifications: [],\n    sidebarOpen: true,\n    currentPage: 'home',\n    loading: false,\n    error: null,\n    websocket: {\n      connected: false,\n      socket: null,\n      reconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n          },\n\n      // Authentication Actions\n    setUser: (user) => set({ user, isAuthenticated: !!user }),\n    \n    setActiveWorkspace: (workspace) => set({ activeWorkspace: workspace }),\n    setWorkspaces: (workspaces) => set({ workspaces }),\n    setTeams: (teams) => set({ teams }),\n    setKanbans: (kanbans) => set({ kanbans }),\n    setTasks: (tasks) => set({ tasks }),\n    \n    addTask: (task) => set((state) => ({\n      tasks: [...state.tasks, task]\n    })),\n    \n    updateTask: (taskId, updates) => set((state) => ({\n      tasks: state.tasks.map(task => \n        task.id === taskId ? { ...task, ...updates } : task\n      )\n    })),\n    \n    deleteTask: (taskId) => set((state) => ({\n      tasks: state.tasks.filter(task => task.id !== taskId)\n    })),\n    \n    setNotifications: (notifications) => set({ notifications }),\n    \n    addNotification: (notification) => set((state) => ({\n      notifications: [notification, ...state.notifications]\n    })),\n    \n    markNotificationRead: (notificationId) => set((state) => ({\n      notifications: state.notifications.map(notif =>\n        notif.id === notificationId ? { ...notif, is_read: true } : notif\n      )\n    })),\n\n    setSidebarOpen: (open) => set({ sidebarOpen: open }),\n    setCurrentPage: (page) => set({ currentPage: page }),\n    setLoading: (loading) => set({ loading }),\n    setError: (error) => set({ error }),\n\n    connectWebSocket: () => {\n      const state = get()\n      if (state.websocket.socket || !state.isAuthenticated) return\n\n      const wsUrl = process.env.NODE_ENV === 'production' \n        ? 'wss://api.krushr.app/ws' \n        : 'ws://localhost:6001/app/krushr'\n\n      try {\n        const socket = new WebSocket(wsUrl)\n        \n        socket.onopen = () => {\n          console.log('WebSocket connected')\n          set((state) => ({\n            websocket: {\n              ...state.websocket,\n              connected: true,\n              socket,\n              reconnectAttempts: 0,\n            }\n          }))\n        }\n\n        socket.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data)\n            handleWebSocketMessage(message, set, get)\n          } catch (error) {\n            console.error('WebSocket message parse error:', error)\n          }\n        }\n\n        socket.onclose = () => {\n          console.log('WebSocket disconnected')\n          set((state) => ({\n            websocket: {\n              ...state.websocket,\n              connected: false,\n              socket: null,\n            }\n          }))\n          \n          const currentState = get()\n          if (currentState.websocket.reconnectAttempts < currentState.websocket.maxReconnectAttempts) {\n            setTimeout(() => {\n              set((state) => ({\n                websocket: {\n                  ...state.websocket,\n                  reconnectAttempts: state.websocket.reconnectAttempts + 1,\n                }\n              }))\n              get().connectWebSocket()\n            }, 2000 * Math.pow(2, currentState.websocket.reconnectAttempts))\n          }\n        }\n\n        socket.onerror = (error) => {\n          console.error('WebSocket error:', error)\n          set({ error: 'Connection error occurred' })\n        }\n\n      } catch (error) {\n        console.error('WebSocket connection failed:', error)\n        set({ error: 'Failed to connect to real-time service' })\n      }\n    },\n\n    disconnectWebSocket: () => {\n      const state = get()\n      if (state.websocket.socket) {\n        state.websocket.socket.close()\n        set((state) => ({\n          websocket: {\n            ...state.websocket,\n            connected: false,\n            socket: null,\n          }\n        }))\n      }\n    },\n\n    sendMessage: (event, data) => {\n      const state = get()\n      if (state.websocket.connected && state.websocket.socket) {\n        state.websocket.socket.send(JSON.stringify({\n          event,\n          data,\n          timestamp: new Date().toISOString(),\n        }))\n      }\n    },\n  }))\n)\n\nfunction handleWebSocketMessage(\n  message: any, \n  set: any, \n  get: () => AppState\n) {\n  const { event, data } = message\n\n  switch (event) {\n    case WEBSOCKET_EVENTS.TASK_UPDATED:\n      get().updateTask(data.id, data)\n      break\n      \n    case WEBSOCKET_EVENTS.KANBAN_UPDATED:\n      set((state: AppState) => ({\n        kanbans: state.kanbans.map(kanban =>\n          kanban.id === data.id ? data : kanban\n        )\n      }))\n      break\n      \n    case WEBSOCKET_EVENTS.NOTIFICATION_CREATED:\n      get().addNotification(data)\n      break\n      \n    case WEBSOCKET_EVENTS.PERSONAL_CHAT_MESSAGE:\n    case WEBSOCKET_EVENTS.TEAM_CHAT_MESSAGE:\n      console.log('Chat message received:', data)\n      break\n      \n    case WEBSOCKET_EVENTS.USER_ONLINE:\n    case WEBSOCKET_EVENTS.USER_OFFLINE:\n      console.log('User presence change:', data)\n      break\n      \n    default:\n      console.log('Unknown WebSocket event:', event, data)\n  }\n}\n\nexport const useAuth = () => useAppStore((state) => ({\n  user: state.user,\n  isAuthenticated: state.isAuthenticated,\n}))\n\nexport const useWorkspace = () => useAppStore((state) => ({\n  workspaces: state.workspaces,\n  activeWorkspace: state.activeWorkspace,\n}))\n\nexport const useKanbans = () => useAppStore((state) => state.kanbans)\nexport const useTasks = () => useAppStore((state) => state.tasks)\nexport const useNotifications = () => useAppStore((state) => state.notifications)\nexport const useUI = () => useAppStore((state) => ({\n  sidebarOpen: state.sidebarOpen,\n  currentPage: state.currentPage,\n  loading: state.loading,\n  error: state.error,\n}))\n\nexport const useWebSocket = () => {\n  const connected = useAppStore((state) => state.websocket.connected)\n  const sendMessage = useAppStore((state) => state.sendMessage)\n  return { connected, sendMessage }\n}"],
  "mappings": "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",
  "names": ["state"]
}
