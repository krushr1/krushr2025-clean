{
  "version": 3,
  "sources": ["../../frontend/src/hooks/use-optimistic-action.tsx"],
  "sourcesContent": ["import { useToast } from '@/hooks/use-toast'\nimport { useUndoStore } from '@/stores/undo-store'\nimport { Button } from '@/components/ui/button'\nimport { Undo2 } from 'lucide-react'\n\ninterface OptimisticActionOptions {\n  type: 'task' | 'note' | 'column' | 'comment' | 'conversation' | 'panel' | 'bulk-tasks'\n  action: () => Promise<void> // The actual delete/action to perform\n  undoAction: () => Promise<void> // How to restore/undo\n  item: any // The item being acted upon (for backup)\n  getMessage: () => string // Function to generate the success message\n  getUndoMessage?: () => string // Optional custom undo success message\n  ttl?: number // Time before undo expires (default 10 seconds)\n  showUndo?: boolean // Whether to show undo button (default true)\n}\n\nexport function useOptimisticAction() {\n  const { toast } = useToast()\n  const { addUndoableAction, undo, removeAction } = useUndoStore()\n\n  const execute = async ({\n    type,\n    action,\n    undoAction,\n    item,\n    getMessage,\n    getUndoMessage,\n    ttl = 10000,\n    showUndo = true\n  }: OptimisticActionOptions) => {\n    // Show success toast with undo option FIRST\n    const message = getMessage()\n    let actionId: string | undefined\n    \n    if (showUndo) {\n      actionId = addUndoableAction(\n        type,\n        message,\n        item,\n        undoAction,\n        ttl\n      )\n        \n      toast({\n        title: message,\n        duration: ttl,\n        action: (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={async () => {\n              try {\n                await undo(actionId)\n                toast({\n                  title: getUndoMessage?.() || 'Action undone',\n                  duration: 3000\n                })\n              } catch (error) {\n                toast({\n                  title: 'Failed to undo',\n                  description: 'The action could not be undone',\n                  variant: 'destructive'\n                })\n              }\n            }}\n            className=\"ml-auto\"\n          >\n            <Undo2 className=\"mr-1 h-3 w-3\" />\n            Undo\n          </Button>\n        ),\n        onOpenChange: (open) => {\n          // Remove action from store when toast is dismissed\n          if (!open && actionId) {\n            removeAction(actionId)\n          }\n        }\n      })\n    } else {\n      // Just show success message without undo\n      toast({\n        title: message,\n        duration: 3000\n      })\n    }\n    \n    try {\n      // Perform the action AFTER showing the toast\n      await action()\n      return true\n    } catch (error) {\n      // If action fails, remove the undo action and show error\n      if (showUndo && actionId) {\n        removeAction(actionId)\n      }\n      toast({\n        title: 'Action failed',\n        description: error instanceof Error ? error.message : 'Something went wrong',\n        variant: 'destructive'\n      })\n      return false\n    }\n  }\n\n  return { execute }\n}\n\n// Specialized hook for delete operations\nexport function useOptimisticDelete() {\n  const { execute } = useOptimisticAction()\n  \n  const deleteItem = async ({\n    type,\n    item,\n    deleteAction,\n    restoreAction,\n    itemName\n  }: {\n    type: OptimisticActionOptions['type']\n    item: any\n    deleteAction: () => Promise<void>\n    restoreAction: () => Promise<void>\n    itemName?: string\n  }) => {\n    return execute({\n      type,\n      action: deleteAction,\n      undoAction: restoreAction,\n      item,\n      getMessage: () => {\n        const typeLabels = {\n          task: 'Task',\n          note: 'Note', \n          column: 'Column',\n          comment: 'Comment',\n          conversation: 'Conversation',\n          panel: 'Panel',\n          'bulk-tasks': 'Tasks'\n        }\n        return `${typeLabels[type]} ${itemName ? `\"${itemName}\" ` : ''}deleted`\n      },\n      getUndoMessage: () => {\n        const typeLabels = {\n          task: 'Task',\n          note: 'Note',\n          column: 'Column', \n          comment: 'Comment',\n          conversation: 'Conversation',\n          panel: 'Panel',\n          'bulk-tasks': 'Tasks'\n        }\n        return `${typeLabels[type]} restored`\n      }\n    })\n  }\n  \n  return { deleteItem }\n}"],
  "mappings": ";;;;;;;;;;;;AA+CU;AA/BH,SAAS,sBAAsB;AACpC,QAAM,EAAE,MAAM,IAAI,SAAS;AAC3B,QAAM,EAAE,mBAAmB,MAAM,aAAa,IAAI,aAAa;AAE/D,QAAM,UAAU,OAAO;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN,WAAW;AAAA,EACb,MAA+B;AAE7B,UAAM,UAAU,WAAW;AAC3B,QAAI;AAEJ,QAAI,UAAU;AACZ,iBAAW;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,YAAM;AAAA,QACJ,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QACE;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,YAAY;AACnB,kBAAI;AACF,sBAAM,KAAK,QAAQ;AACnB,sBAAM;AAAA,kBACJ,OAAO,iBAAiB,KAAK;AAAA,kBAC7B,UAAU;AAAA,gBACZ,CAAC;AAAA,cACH,SAAS,OAAO;AACd,sBAAM;AAAA,kBACJ,OAAO;AAAA,kBACP,aAAa;AAAA,kBACb,SAAS;AAAA,gBACX,CAAC;AAAA,cACH;AAAA,YACF;AAAA,YACA,WAAU;AAAA,YAEV;AAAA,0DAAC,SAAM,WAAU,gBAAe;AAAA,cAAE;AAAA;AAAA;AAAA,QAEpC;AAAA,QAEF,cAAc,CAAC,SAAS;AAEtB,cAAI,CAAC,QAAQ,UAAU;AACrB,yBAAa,QAAQ;AAAA,UACvB;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AAEL,YAAM;AAAA,QACJ,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAEA,QAAI;AAEF,YAAM,OAAO;AACb,aAAO;AAAA,IACT,SAAS,OAAO;AAEd,UAAI,YAAY,UAAU;AACxB,qBAAa,QAAQ;AAAA,MACvB;AACA,YAAM;AAAA,QACJ,OAAO;AAAA,QACP,aAAa,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QACtD,SAAS;AAAA,MACX,CAAC;AACD,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO,EAAE,QAAQ;AACnB;",
  "names": []
}
