import {
  Close,
  Combination_default,
  Content,
  Description,
  FocusScope,
  KanbanBoard,
  Overlay,
  Portal as Portal2,
  Root,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
  Title,
  Trigger,
  WarningProvider,
  createCollection,
  createDialogScope,
  differenceInCalendarMonths,
  hideOthers,
  useFocusGuards,
  usePrevious
} from "/chunks/chunk-FEI3GOZ7.js";
import {
  NotesPanel_default
} from "/chunks/chunk-4TQQ7EHU.js";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  addDays,
  endOfWeek,
  formatDateShort,
  formatDateTime,
  isSameMonth
} from "/chunks/chunk-HRBNCF6S.js";
import {
  Anchor,
  Arrow,
  AttachmentUpload_default,
  Badge,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Content as Content2,
  DismissableLayer,
  FileUpload,
  Portal,
  Priority,
  Progress,
  Root2,
  TaskStatus,
  addMonths,
  constructFrom,
  createPopperScope,
  differenceInCalendarDays,
  enUS,
  endOfMonth,
  format,
  getISOWeek,
  getTimezoneOffsetInMilliseconds,
  getWeek,
  isDate,
  isSameDay,
  millisecondsInWeek,
  require_prop_types,
  startOfDay,
  startOfISOWeek,
  startOfMonth,
  startOfWeek,
  startOfYear,
  toDate,
  useAuthStore,
  useControllableState,
  useId,
  useSize
} from "/chunks/chunk-OMXNXWKY.js";
import {
  Toaster,
  toast
} from "/chunks/chunk-XTC34SKS.js";
import {
  FloatingInput
} from "/chunks/chunk-KI66MM42.js";
import {
  API_ENDPOINTS,
  useAppStore,
  useWebSocket
} from "/chunks/chunk-IBXXHJB3.js";
import {
  Button,
  buttonVariants,
  cva
} from "/chunks/chunk-L2AE6HHB.js";
import {
  QueryClient,
  QueryClientProvider,
  trpc,
  trpcClient
} from "/chunks/chunk-BD2IZKPD.js";
import {
  ScrollArea
} from "/chunks/chunk-6CV7TKIQ.js";
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
  useDirection
} from "/chunks/chunk-MOKPSQOC.js";
import {
  Presence,
  Primitive,
  composeEventHandlers,
  composeRefs,
  createContextScope,
  createSlot,
  createSlottable,
  dispatchDiscreteCustomEvent,
  useCallbackRef,
  useComposedRefs
} from "/chunks/chunk-4ZHD5XW2.js";
import {
  require_react_dom
} from "/chunks/chunk-WYEFURCV.js";
import {
  Activity,
  Archive,
  ArrowRight,
  ArrowUpNarrowWide,
  Bell,
  BookOpen,
  Bookmark,
  Bot,
  Calendar,
  ChartColumn,
  Check,
  CheckCheck,
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  ChevronUp,
  Circle,
  CircleAlert,
  CircleCheck,
  CircleCheckBig,
  Clock,
  Columns2,
  Command,
  Copy,
  Download,
  Ellipsis,
  EllipsisVertical,
  Expand,
  ExternalLink,
  Eye,
  EyeOff,
  File,
  FileArchive,
  FileImage,
  FileText,
  FileVideo,
  Folder,
  FolderOpen,
  Funnel,
  Globe,
  Grid3x3,
  GripVertical,
  Hash,
  House,
  Kanban,
  Keyboard,
  LayoutGrid,
  Link,
  List,
  LoaderCircle,
  Lock,
  LockOpen,
  LogOut,
  Mail,
  MapPin,
  Maximize,
  Maximize2,
  Menu,
  MessageCircle,
  MessageSquare,
  Minimize,
  Minimize2,
  Palette,
  PanelsTopLeft,
  Paperclip,
  PenLine,
  Phone,
  Pin,
  Play,
  Plus,
  RefreshCw,
  Reply,
  Save,
  Search,
  Send,
  Settings,
  Settings2,
  Share,
  Share2,
  Shield,
  Shrink,
  Smile,
  SquareCheckBig,
  SquarePen,
  Star,
  StickyNote,
  Tag,
  Target,
  Trash,
  Trash2,
  TrendingUp,
  TriangleAlert,
  Upload,
  User,
  UserPlus,
  Users,
  Video,
  WandSparkles,
  Wifi,
  X,
  Zap,
  __commonJS,
  __toESM,
  cn,
  debounce,
  require_jsx_runtime,
  require_react
} from "/chunks/chunk-CPGAIYPB.js";

// ../node_modules/react-dom/client.js
var require_client = __commonJS({
  "../node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m2 = require_react_dom();
    if (false) {
      exports.createRoot = m2.createRoot;
      exports.hydrateRoot = m2.hydrateRoot;
    } else {
      i = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m2.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m2.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// ../node_modules/react-router/node_modules/cookie/dist/index.js
var require_dist = __commonJS({
  "../node_modules/react-router/node_modules/cookie/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = parse3;
    exports.serialize = serialize2;
    var cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
    var cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
    var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
    var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
    var __toString = Object.prototype.toString;
    var NullObject = /* @__PURE__ */ (() => {
      const C = function() {
      };
      C.prototype = /* @__PURE__ */ Object.create(null);
      return C;
    })();
    function parse3(str, options) {
      const obj = new NullObject();
      const len = str.length;
      if (len < 2)
        return obj;
      const dec = options?.decode || decode;
      let index = 0;
      do {
        const eqIdx = str.indexOf("=", index);
        if (eqIdx === -1)
          break;
        const colonIdx = str.indexOf(";", index);
        const endIdx = colonIdx === -1 ? len : colonIdx;
        if (eqIdx > endIdx) {
          index = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        const keyStartIdx = startIndex(str, index, eqIdx);
        const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
        const key = str.slice(keyStartIdx, keyEndIdx);
        if (obj[key] === void 0) {
          let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
          let valEndIdx = endIndex(str, endIdx, valStartIdx);
          const value = dec(str.slice(valStartIdx, valEndIdx));
          obj[key] = value;
        }
        index = endIdx + 1;
      } while (index < len);
      return obj;
    }
    function startIndex(str, index, max2) {
      do {
        const code = str.charCodeAt(index);
        if (code !== 32 && code !== 9)
          return index;
      } while (++index < max2);
      return max2;
    }
    function endIndex(str, index, min2) {
      while (index > min2) {
        const code = str.charCodeAt(--index);
        if (code !== 32 && code !== 9)
          return index + 1;
      }
      return min2;
    }
    function serialize2(name, val, options) {
      const enc = options?.encode || encodeURIComponent;
      if (!cookieNameRegExp.test(name)) {
        throw new TypeError(`argument name is invalid: ${name}`);
      }
      const value = enc(val);
      if (!cookieValueRegExp.test(value)) {
        throw new TypeError(`argument val is invalid: ${val}`);
      }
      let str = name + "=" + value;
      if (!options)
        return str;
      if (options.maxAge !== void 0) {
        if (!Number.isInteger(options.maxAge)) {
          throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);
        }
        str += "; Max-Age=" + options.maxAge;
      }
      if (options.domain) {
        if (!domainValueRegExp.test(options.domain)) {
          throw new TypeError(`option domain is invalid: ${options.domain}`);
        }
        str += "; Domain=" + options.domain;
      }
      if (options.path) {
        if (!pathValueRegExp.test(options.path)) {
          throw new TypeError(`option path is invalid: ${options.path}`);
        }
        str += "; Path=" + options.path;
      }
      if (options.expires) {
        if (!isDate2(options.expires) || !Number.isFinite(options.expires.valueOf())) {
          throw new TypeError(`option expires is invalid: ${options.expires}`);
        }
        str += "; Expires=" + options.expires.toUTCString();
      }
      if (options.httpOnly) {
        str += "; HttpOnly";
      }
      if (options.secure) {
        str += "; Secure";
      }
      if (options.partitioned) {
        str += "; Partitioned";
      }
      if (options.priority) {
        const priority = typeof options.priority === "string" ? options.priority.toLowerCase() : void 0;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError(`option priority is invalid: ${options.priority}`);
        }
      }
      if (options.sameSite) {
        const sameSite = typeof options.sameSite === "string" ? options.sameSite.toLowerCase() : options.sameSite;
        switch (sameSite) {
          case true:
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);
        }
      }
      return str;
    }
    function decode(str) {
      if (str.indexOf("%") === -1)
        return str;
      try {
        return decodeURIComponent(str);
      } catch (e) {
        return str;
      }
    }
    function isDate2(val) {
      return __toString.call(val) === "[object Date]";
    }
  }
});

// ../node_modules/fast-equals/dist/fast-equals.js
var require_fast_equals = __commonJS({
  "../node_modules/fast-equals/dist/fast-equals.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2["fast-equals"] = {}));
    })(exports, function(exports2) {
      "use strict";
      function createDefaultIsNestedEqual(comparator) {
        return function isEqual(a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, meta) {
          return comparator(a, b, meta);
        };
      }
      function createIsCircular(areItemsEqual) {
        return function isCircular(a, b, isEqual, cache) {
          if (!a || !b || typeof a !== "object" || typeof b !== "object") {
            return areItemsEqual(a, b, isEqual, cache);
          }
          var cachedA = cache.get(a);
          var cachedB = cache.get(b);
          if (cachedA && cachedB) {
            return cachedA === b && cachedB === a;
          }
          cache.set(a, b);
          cache.set(b, a);
          var result = areItemsEqual(a, b, isEqual, cache);
          cache.delete(a);
          cache.delete(b);
          return result;
        };
      }
      function merge(a, b) {
        var merged = {};
        for (var key in a) {
          merged[key] = a[key];
        }
        for (var key in b) {
          merged[key] = b[key];
        }
        return merged;
      }
      function isPlainObject(value) {
        return value.constructor === Object || value.constructor == null;
      }
      function isPromiseLike(value) {
        return typeof value.then === "function";
      }
      function sameValueZeroEqual(a, b) {
        return a === b || a !== a && b !== b;
      }
      var ARGUMENTS_TAG = "[object Arguments]";
      var BOOLEAN_TAG = "[object Boolean]";
      var DATE_TAG = "[object Date]";
      var REG_EXP_TAG = "[object RegExp]";
      var MAP_TAG = "[object Map]";
      var NUMBER_TAG = "[object Number]";
      var OBJECT_TAG = "[object Object]";
      var SET_TAG = "[object Set]";
      var STRING_TAG = "[object String]";
      var toString = Object.prototype.toString;
      function createComparator(_a) {
        var areArraysEqual2 = _a.areArraysEqual, areDatesEqual2 = _a.areDatesEqual, areMapsEqual2 = _a.areMapsEqual, areObjectsEqual2 = _a.areObjectsEqual, areRegExpsEqual2 = _a.areRegExpsEqual, areSetsEqual2 = _a.areSetsEqual, createIsNestedEqual = _a.createIsNestedEqual;
        var isEqual = createIsNestedEqual(comparator);
        function comparator(a, b, meta) {
          if (a === b) {
            return true;
          }
          if (!a || !b || typeof a !== "object" || typeof b !== "object") {
            return a !== a && b !== b;
          }
          if (isPlainObject(a) && isPlainObject(b)) {
            return areObjectsEqual2(a, b, isEqual, meta);
          }
          var aArray = Array.isArray(a);
          var bArray = Array.isArray(b);
          if (aArray || bArray) {
            return aArray === bArray && areArraysEqual2(a, b, isEqual, meta);
          }
          var aTag = toString.call(a);
          if (aTag !== toString.call(b)) {
            return false;
          }
          if (aTag === DATE_TAG) {
            return areDatesEqual2(a, b, isEqual, meta);
          }
          if (aTag === REG_EXP_TAG) {
            return areRegExpsEqual2(a, b, isEqual, meta);
          }
          if (aTag === MAP_TAG) {
            return areMapsEqual2(a, b, isEqual, meta);
          }
          if (aTag === SET_TAG) {
            return areSetsEqual2(a, b, isEqual, meta);
          }
          if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {
            return isPromiseLike(a) || isPromiseLike(b) ? false : areObjectsEqual2(a, b, isEqual, meta);
          }
          if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {
            return sameValueZeroEqual(a.valueOf(), b.valueOf());
          }
          return false;
        }
        return comparator;
      }
      function areArraysEqual(a, b, isEqual, meta) {
        var index = a.length;
        if (b.length !== index) {
          return false;
        }
        while (index-- > 0) {
          if (!isEqual(a[index], b[index], index, index, a, b, meta)) {
            return false;
          }
        }
        return true;
      }
      var areArraysEqualCircular = createIsCircular(areArraysEqual);
      function areDatesEqual(a, b) {
        return sameValueZeroEqual(a.valueOf(), b.valueOf());
      }
      function areMapsEqual(a, b, isEqual, meta) {
        var isValueEqual = a.size === b.size;
        if (!isValueEqual) {
          return false;
        }
        if (!a.size) {
          return true;
        }
        var matchedIndices = {};
        var indexA = 0;
        a.forEach(function(aValue, aKey) {
          if (!isValueEqual) {
            return;
          }
          var hasMatch = false;
          var matchIndexB = 0;
          b.forEach(function(bValue, bKey) {
            if (!hasMatch && !matchedIndices[matchIndexB] && (hasMatch = isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) && isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {
              matchedIndices[matchIndexB] = true;
            }
            matchIndexB++;
          });
          indexA++;
          isValueEqual = hasMatch;
        });
        return isValueEqual;
      }
      var areMapsEqualCircular = createIsCircular(areMapsEqual);
      var OWNER = "_owner";
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function areObjectsEqual(a, b, isEqual, meta) {
        var keysA = Object.keys(a);
        var index = keysA.length;
        if (Object.keys(b).length !== index) {
          return false;
        }
        var key;
        while (index-- > 0) {
          key = keysA[index];
          if (key === OWNER) {
            var reactElementA = !!a.$$typeof;
            var reactElementB = !!b.$$typeof;
            if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {
              return false;
            }
          }
          if (!hasOwnProperty.call(b, key) || !isEqual(a[key], b[key], key, key, a, b, meta)) {
            return false;
          }
        }
        return true;
      }
      var areObjectsEqualCircular = createIsCircular(areObjectsEqual);
      function areRegExpsEqual(a, b) {
        return a.source === b.source && a.flags === b.flags;
      }
      function areSetsEqual(a, b, isEqual, meta) {
        var isValueEqual = a.size === b.size;
        if (!isValueEqual) {
          return false;
        }
        if (!a.size) {
          return true;
        }
        var matchedIndices = {};
        a.forEach(function(aValue, aKey) {
          if (!isValueEqual) {
            return;
          }
          var hasMatch = false;
          var matchIndex = 0;
          b.forEach(function(bValue, bKey) {
            if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {
              matchedIndices[matchIndex] = true;
            }
            matchIndex++;
          });
          isValueEqual = hasMatch;
        });
        return isValueEqual;
      }
      var areSetsEqualCircular = createIsCircular(areSetsEqual);
      var DEFAULT_CONFIG = Object.freeze({
        areArraysEqual,
        areDatesEqual,
        areMapsEqual,
        areObjectsEqual,
        areRegExpsEqual,
        areSetsEqual,
        createIsNestedEqual: createDefaultIsNestedEqual
      });
      var DEFAULT_CIRCULAR_CONFIG = Object.freeze({
        areArraysEqual: areArraysEqualCircular,
        areDatesEqual,
        areMapsEqual: areMapsEqualCircular,
        areObjectsEqual: areObjectsEqualCircular,
        areRegExpsEqual,
        areSetsEqual: areSetsEqualCircular,
        createIsNestedEqual: createDefaultIsNestedEqual
      });
      var isDeepEqual = createComparator(DEFAULT_CONFIG);
      function deepEqual(a, b) {
        return isDeepEqual(a, b, void 0);
      }
      var isShallowEqual = createComparator(merge(DEFAULT_CONFIG, { createIsNestedEqual: function() {
        return sameValueZeroEqual;
      } }));
      function shallowEqual(a, b) {
        return isShallowEqual(a, b, void 0);
      }
      var isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);
      function circularDeepEqual(a, b) {
        return isCircularDeepEqual(a, b, /* @__PURE__ */ new WeakMap());
      }
      var isCircularShallowEqual = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, {
        createIsNestedEqual: function() {
          return sameValueZeroEqual;
        }
      }));
      function circularShallowEqual(a, b) {
        return isCircularShallowEqual(a, b, /* @__PURE__ */ new WeakMap());
      }
      function createCustomEqual(getComparatorOptions) {
        return createComparator(merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG)));
      }
      function createCustomCircularEqual(getComparatorOptions) {
        var comparator = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, getComparatorOptions(DEFAULT_CIRCULAR_CONFIG)));
        return function(a, b, meta) {
          if (meta === void 0) {
            meta = /* @__PURE__ */ new WeakMap();
          }
          return comparator(a, b, meta);
        };
      }
      exports2.circularDeepEqual = circularDeepEqual;
      exports2.circularShallowEqual = circularShallowEqual;
      exports2.createCustomCircularEqual = createCustomCircularEqual;
      exports2.createCustomEqual = createCustomEqual;
      exports2.deepEqual = deepEqual;
      exports2.sameValueZeroEqual = sameValueZeroEqual;
      exports2.shallowEqual = shallowEqual;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// ../node_modules/clsx/dist/clsx.js
var require_clsx = __commonJS({
  "../node_modules/clsx/dist/clsx.js"(exports, module) {
    function r(e2) {
      var o, t2, f = "";
      if ("string" == typeof e2 || "number" == typeof e2) f += e2;
      else if ("object" == typeof e2) if (Array.isArray(e2)) {
        var n = e2.length;
        for (o = 0; o < n; o++) e2[o] && (t2 = r(e2[o])) && (f && (f += " "), f += t2);
      } else for (t2 in e2) e2[t2] && (f && (f += " "), f += t2);
      return f;
    }
    function e() {
      for (var e2, o, t2 = 0, f = "", n = arguments.length; t2 < n; t2++) (e2 = arguments[t2]) && (o = r(e2)) && (f && (f += " "), f += o);
      return f;
    }
    module.exports = e, module.exports.clsx = e;
  }
});

// ../node_modules/react-grid-layout/build/fastRGLPropsEqual.js
var require_fastRGLPropsEqual = __commonJS({
  "../node_modules/react-grid-layout/build/fastRGLPropsEqual.js"(exports, module) {
    module.exports = function fastRGLPropsEqual(a, b, isEqualImpl) {
      if (a === b) return true;
      return a.className === b.className && isEqualImpl(a.style, b.style) && a.width === b.width && a.autoSize === b.autoSize && a.cols === b.cols && a.draggableCancel === b.draggableCancel && a.draggableHandle === b.draggableHandle && isEqualImpl(a.verticalCompact, b.verticalCompact) && isEqualImpl(a.compactType, b.compactType) && isEqualImpl(a.layout, b.layout) && isEqualImpl(a.margin, b.margin) && isEqualImpl(a.containerPadding, b.containerPadding) && a.rowHeight === b.rowHeight && a.maxRows === b.maxRows && a.isBounded === b.isBounded && a.isDraggable === b.isDraggable && a.isResizable === b.isResizable && a.allowOverlap === b.allowOverlap && a.preventCollision === b.preventCollision && a.useCSSTransforms === b.useCSSTransforms && a.transformScale === b.transformScale && a.isDroppable === b.isDroppable && isEqualImpl(a.resizeHandles, b.resizeHandles) && isEqualImpl(a.resizeHandle, b.resizeHandle) && a.onLayoutChange === b.onLayoutChange && a.onDragStart === b.onDragStart && a.onDrag === b.onDrag && a.onDragStop === b.onDragStop && a.onResizeStart === b.onResizeStart && a.onResize === b.onResize && a.onResizeStop === b.onResizeStop && a.onDrop === b.onDrop && isEqualImpl(a.droppingItem, b.droppingItem) && isEqualImpl(a.innerRef, b.innerRef);
    };
  }
});

// ../node_modules/react-grid-layout/build/utils.js
var require_utils = __commonJS({
  "../node_modules/react-grid-layout/build/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.bottom = bottom;
    exports.childrenEqual = childrenEqual;
    exports.cloneLayout = cloneLayout;
    exports.cloneLayoutItem = cloneLayoutItem;
    exports.collides = collides;
    exports.compact = compact;
    exports.compactItem = compactItem;
    exports.compactType = compactType;
    exports.correctBounds = correctBounds;
    exports.fastPositionEqual = fastPositionEqual;
    exports.fastRGLPropsEqual = void 0;
    exports.getAllCollisions = getAllCollisions;
    exports.getFirstCollision = getFirstCollision;
    exports.getLayoutItem = getLayoutItem;
    exports.getStatics = getStatics;
    exports.modifyLayout = modifyLayout;
    exports.moveElement = moveElement;
    exports.moveElementAwayFromCollision = moveElementAwayFromCollision;
    exports.noop = void 0;
    exports.perc = perc;
    exports.resizeItemInDirection = resizeItemInDirection;
    exports.setTopLeft = setTopLeft;
    exports.setTransform = setTransform;
    exports.sortLayoutItems = sortLayoutItems;
    exports.sortLayoutItemsByColRow = sortLayoutItemsByColRow;
    exports.sortLayoutItemsByRowCol = sortLayoutItemsByRowCol;
    exports.synchronizeLayoutWithChildren = synchronizeLayoutWithChildren;
    exports.validateLayout = validateLayout;
    exports.withLayoutItem = withLayoutItem;
    var _fastEquals = require_fast_equals();
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isProduction = false;
    var DEBUG = false;
    function bottom(layout) {
      let max2 = 0, bottomY;
      for (let i = 0, len = layout.length; i < len; i++) {
        bottomY = layout[i].y + layout[i].h;
        if (bottomY > max2) max2 = bottomY;
      }
      return max2;
    }
    function cloneLayout(layout) {
      const newLayout = Array(layout.length);
      for (let i = 0, len = layout.length; i < len; i++) {
        newLayout[i] = cloneLayoutItem(layout[i]);
      }
      return newLayout;
    }
    function modifyLayout(layout, layoutItem) {
      const newLayout = Array(layout.length);
      for (let i = 0, len = layout.length; i < len; i++) {
        if (layoutItem.i === layout[i].i) {
          newLayout[i] = layoutItem;
        } else {
          newLayout[i] = layout[i];
        }
      }
      return newLayout;
    }
    function withLayoutItem(layout, itemKey, cb) {
      let item = getLayoutItem(layout, itemKey);
      if (!item) return [layout, null];
      item = cb(cloneLayoutItem(item));
      layout = modifyLayout(layout, item);
      return [layout, item];
    }
    function cloneLayoutItem(layoutItem) {
      return {
        w: layoutItem.w,
        h: layoutItem.h,
        x: layoutItem.x,
        y: layoutItem.y,
        i: layoutItem.i,
        minW: layoutItem.minW,
        maxW: layoutItem.maxW,
        minH: layoutItem.minH,
        maxH: layoutItem.maxH,
        moved: Boolean(layoutItem.moved),
        static: Boolean(layoutItem.static),
        // These can be null/undefined
        isDraggable: layoutItem.isDraggable,
        isResizable: layoutItem.isResizable,
        resizeHandles: layoutItem.resizeHandles,
        isBounded: layoutItem.isBounded
      };
    }
    function childrenEqual(a, b) {
      return (0, _fastEquals.deepEqual)(_react.default.Children.map(a, (c) => c?.key), _react.default.Children.map(b, (c) => c?.key)) && (0, _fastEquals.deepEqual)(_react.default.Children.map(a, (c) => c?.props["data-grid"]), _react.default.Children.map(b, (c) => c?.props["data-grid"]));
    }
    var fastRGLPropsEqual = exports.fastRGLPropsEqual = require_fastRGLPropsEqual();
    function fastPositionEqual(a, b) {
      return a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height;
    }
    function collides(l1, l2) {
      if (l1.i === l2.i) return false;
      if (l1.x + l1.w <= l2.x) return false;
      if (l1.x >= l2.x + l2.w) return false;
      if (l1.y + l1.h <= l2.y) return false;
      if (l1.y >= l2.y + l2.h) return false;
      return true;
    }
    function compact(layout, compactType2, cols, allowOverlap) {
      const compareWith = getStatics(layout);
      const sorted = sortLayoutItems(layout, compactType2);
      const out = Array(layout.length);
      for (let i = 0, len = sorted.length; i < len; i++) {
        let l = cloneLayoutItem(sorted[i]);
        if (!l.static) {
          l = compactItem(compareWith, l, compactType2, cols, sorted, allowOverlap);
          compareWith.push(l);
        }
        out[layout.indexOf(sorted[i])] = l;
        l.moved = false;
      }
      return out;
    }
    var heightWidth = {
      x: "w",
      y: "h"
    };
    function resolveCompactionCollision(layout, item, moveToCoord, axis) {
      const sizeProp = heightWidth[axis];
      item[axis] += 1;
      const itemIndex = layout.map((layoutItem) => {
        return layoutItem.i;
      }).indexOf(item.i);
      for (let i = itemIndex + 1; i < layout.length; i++) {
        const otherItem = layout[i];
        if (otherItem.static) continue;
        if (otherItem.y > item.y + item.h) break;
        if (collides(item, otherItem)) {
          resolveCompactionCollision(layout, otherItem, moveToCoord + item[sizeProp], axis);
        }
      }
      item[axis] = moveToCoord;
    }
    function compactItem(compareWith, l, compactType2, cols, fullLayout, allowOverlap) {
      const compactV = compactType2 === "vertical";
      const compactH = compactType2 === "horizontal";
      if (compactV) {
        l.y = Math.min(bottom(compareWith), l.y);
        while (l.y > 0 && !getFirstCollision(compareWith, l)) {
          l.y--;
        }
      } else if (compactH) {
        while (l.x > 0 && !getFirstCollision(compareWith, l)) {
          l.x--;
        }
      }
      let collides2;
      while ((collides2 = getFirstCollision(compareWith, l)) && !(compactType2 === null && allowOverlap)) {
        if (compactH) {
          resolveCompactionCollision(fullLayout, l, collides2.x + collides2.w, "x");
        } else {
          resolveCompactionCollision(fullLayout, l, collides2.y + collides2.h, "y");
        }
        if (compactH && l.x + l.w > cols) {
          l.x = cols - l.w;
          l.y++;
          while (l.x > 0 && !getFirstCollision(compareWith, l)) {
            l.x--;
          }
        }
      }
      l.y = Math.max(l.y, 0);
      l.x = Math.max(l.x, 0);
      return l;
    }
    function correctBounds(layout, bounds) {
      const collidesWith = getStatics(layout);
      for (let i = 0, len = layout.length; i < len; i++) {
        const l = layout[i];
        if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;
        if (l.x < 0) {
          l.x = 0;
          l.w = bounds.cols;
        }
        if (!l.static) collidesWith.push(l);
        else {
          while (getFirstCollision(collidesWith, l)) {
            l.y++;
          }
        }
      }
      return layout;
    }
    function getLayoutItem(layout, id2) {
      for (let i = 0, len = layout.length; i < len; i++) {
        if (layout[i].i === id2) return layout[i];
      }
    }
    function getFirstCollision(layout, layoutItem) {
      for (let i = 0, len = layout.length; i < len; i++) {
        if (collides(layout[i], layoutItem)) return layout[i];
      }
    }
    function getAllCollisions(layout, layoutItem) {
      return layout.filter((l) => collides(l, layoutItem));
    }
    function getStatics(layout) {
      return layout.filter((l) => l.static);
    }
    function moveElement(layout, l, x, y, isUserAction, preventCollision, compactType2, cols, allowOverlap) {
      if (l.static && l.isDraggable !== true) return layout;
      if (l.y === y && l.x === x) return layout;
      log(`Moving element ${l.i} to [${String(x)},${String(y)}] from [${l.x},${l.y}]`);
      const oldX = l.x;
      const oldY = l.y;
      if (typeof x === "number") l.x = x;
      if (typeof y === "number") l.y = y;
      l.moved = true;
      let sorted = sortLayoutItems(layout, compactType2);
      const movingUp = compactType2 === "vertical" && typeof y === "number" ? oldY >= y : compactType2 === "horizontal" && typeof x === "number" ? oldX >= x : false;
      if (movingUp) sorted = sorted.reverse();
      const collisions = getAllCollisions(sorted, l);
      const hasCollisions = collisions.length > 0;
      if (hasCollisions && allowOverlap) {
        return cloneLayout(layout);
      } else if (hasCollisions && preventCollision) {
        log(`Collision prevented on ${l.i}, reverting.`);
        l.x = oldX;
        l.y = oldY;
        l.moved = false;
        return layout;
      }
      for (let i = 0, len = collisions.length; i < len; i++) {
        const collision = collisions[i];
        log(`Resolving collision between ${l.i} at [${l.x},${l.y}] and ${collision.i} at [${collision.x},${collision.y}]`);
        if (collision.moved) continue;
        if (collision.static) {
          layout = moveElementAwayFromCollision(layout, collision, l, isUserAction, compactType2, cols);
        } else {
          layout = moveElementAwayFromCollision(layout, l, collision, isUserAction, compactType2, cols);
        }
      }
      return layout;
    }
    function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction, compactType2, cols) {
      const compactH = compactType2 === "horizontal";
      const compactV = compactType2 === "vertical";
      const preventCollision = collidesWith.static;
      if (isUserAction) {
        isUserAction = false;
        const fakeItem = {
          x: compactH ? Math.max(collidesWith.x - itemToMove.w, 0) : itemToMove.x,
          y: compactV ? Math.max(collidesWith.y - itemToMove.h, 0) : itemToMove.y,
          w: itemToMove.w,
          h: itemToMove.h,
          i: "-1"
        };
        const firstCollision = getFirstCollision(layout, fakeItem);
        const collisionNorth = firstCollision && firstCollision.y + firstCollision.h > collidesWith.y;
        const collisionWest = firstCollision && collidesWith.x + collidesWith.w > firstCollision.x;
        if (!firstCollision) {
          log(`Doing reverse collision on ${itemToMove.i} up to [${fakeItem.x},${fakeItem.y}].`);
          return moveElement(layout, itemToMove, compactH ? fakeItem.x : void 0, compactV ? fakeItem.y : void 0, isUserAction, preventCollision, compactType2, cols);
        } else if (collisionNorth && compactV) {
          return moveElement(layout, itemToMove, void 0, collidesWith.y + 1, isUserAction, preventCollision, compactType2, cols);
        } else if (collisionNorth && compactType2 == null) {
          collidesWith.y = itemToMove.y;
          itemToMove.y = itemToMove.y + itemToMove.h;
          return layout;
        } else if (collisionWest && compactH) {
          return moveElement(layout, collidesWith, itemToMove.x, void 0, isUserAction, preventCollision, compactType2, cols);
        }
      }
      const newX = compactH ? itemToMove.x + 1 : void 0;
      const newY = compactV ? itemToMove.y + 1 : void 0;
      if (newX == null && newY == null) {
        return layout;
      }
      return moveElement(layout, itemToMove, compactH ? itemToMove.x + 1 : void 0, compactV ? itemToMove.y + 1 : void 0, isUserAction, preventCollision, compactType2, cols);
    }
    function perc(num) {
      return num * 100 + "%";
    }
    var constrainWidth = (left, currentWidth, newWidth, containerWidth) => {
      return left + newWidth > containerWidth ? currentWidth : newWidth;
    };
    var constrainHeight = (top, currentHeight, newHeight) => {
      return top < 0 ? currentHeight : newHeight;
    };
    var constrainLeft = (left) => Math.max(0, left);
    var constrainTop = (top) => Math.max(0, top);
    var resizeNorth = (currentSize, _ref, _containerWidth) => {
      let {
        left,
        height,
        width
      } = _ref;
      const top = currentSize.top - (height - currentSize.height);
      return {
        left,
        width,
        height: constrainHeight(top, currentSize.height, height),
        top: constrainTop(top)
      };
    };
    var resizeEast = (currentSize, _ref2, containerWidth) => {
      let {
        top,
        left,
        height,
        width
      } = _ref2;
      return {
        top,
        height,
        width: constrainWidth(currentSize.left, currentSize.width, width, containerWidth),
        left: constrainLeft(left)
      };
    };
    var resizeWest = (currentSize, _ref3, containerWidth) => {
      let {
        top,
        height,
        width
      } = _ref3;
      const left = currentSize.left - (width - currentSize.width);
      return {
        height,
        width: left < 0 ? currentSize.width : constrainWidth(currentSize.left, currentSize.width, width, containerWidth),
        top: constrainTop(top),
        left: constrainLeft(left)
      };
    };
    var resizeSouth = (currentSize, _ref4, containerWidth) => {
      let {
        top,
        left,
        height,
        width
      } = _ref4;
      return {
        width,
        left,
        height: constrainHeight(top, currentSize.height, height),
        top: constrainTop(top)
      };
    };
    var resizeNorthEast = function() {
      return resizeNorth(arguments.length <= 0 ? void 0 : arguments[0], resizeEast(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var resizeNorthWest = function() {
      return resizeNorth(arguments.length <= 0 ? void 0 : arguments[0], resizeWest(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var resizeSouthEast = function() {
      return resizeSouth(arguments.length <= 0 ? void 0 : arguments[0], resizeEast(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var resizeSouthWest = function() {
      return resizeSouth(arguments.length <= 0 ? void 0 : arguments[0], resizeWest(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var ordinalResizeHandlerMap = {
      n: resizeNorth,
      ne: resizeNorthEast,
      e: resizeEast,
      se: resizeSouthEast,
      s: resizeSouth,
      sw: resizeSouthWest,
      w: resizeWest,
      nw: resizeNorthWest
    };
    function resizeItemInDirection(direction, currentSize, newSize, containerWidth) {
      const ordinalHandler = ordinalResizeHandlerMap[direction];
      if (!ordinalHandler) return newSize;
      return ordinalHandler(currentSize, {
        ...currentSize,
        ...newSize
      }, containerWidth);
    }
    function setTransform(_ref5) {
      let {
        top,
        left,
        width,
        height
      } = _ref5;
      const translate = `translate(${left}px,${top}px)`;
      return {
        transform: translate,
        WebkitTransform: translate,
        MozTransform: translate,
        msTransform: translate,
        OTransform: translate,
        width: `${width}px`,
        height: `${height}px`,
        position: "absolute"
      };
    }
    function setTopLeft(_ref6) {
      let {
        top,
        left,
        width,
        height
      } = _ref6;
      return {
        top: `${top}px`,
        left: `${left}px`,
        width: `${width}px`,
        height: `${height}px`,
        position: "absolute"
      };
    }
    function sortLayoutItems(layout, compactType2) {
      if (compactType2 === "horizontal") return sortLayoutItemsByColRow(layout);
      if (compactType2 === "vertical") return sortLayoutItemsByRowCol(layout);
      else return layout;
    }
    function sortLayoutItemsByRowCol(layout) {
      return layout.slice(0).sort(function(a, b) {
        if (a.y > b.y || a.y === b.y && a.x > b.x) {
          return 1;
        } else if (a.y === b.y && a.x === b.x) {
          return 0;
        }
        return -1;
      });
    }
    function sortLayoutItemsByColRow(layout) {
      return layout.slice(0).sort(function(a, b) {
        if (a.x > b.x || a.x === b.x && a.y > b.y) {
          return 1;
        }
        return -1;
      });
    }
    function synchronizeLayoutWithChildren(initialLayout, children, cols, compactType2, allowOverlap) {
      initialLayout = initialLayout || [];
      const layout = [];
      _react.default.Children.forEach(children, (child) => {
        if (child?.key == null) return;
        const exists = getLayoutItem(initialLayout, String(child.key));
        const g = child.props["data-grid"];
        if (exists && g == null) {
          layout.push(cloneLayoutItem(exists));
        } else {
          if (g) {
            if (!isProduction) {
              validateLayout([g], "ReactGridLayout.children");
            }
            layout.push(cloneLayoutItem({
              ...g,
              i: child.key
            }));
          } else {
            layout.push(cloneLayoutItem({
              w: 1,
              h: 1,
              x: 0,
              y: bottom(layout),
              i: String(child.key)
            }));
          }
        }
      });
      const correctedLayout = correctBounds(layout, {
        cols
      });
      return allowOverlap ? correctedLayout : compact(correctedLayout, compactType2, cols);
    }
    function validateLayout(layout) {
      let contextName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Layout";
      const subProps = ["x", "y", "w", "h"];
      if (!Array.isArray(layout)) throw new Error(contextName + " must be an array!");
      for (let i = 0, len = layout.length; i < len; i++) {
        const item = layout[i];
        for (let j = 0; j < subProps.length; j++) {
          const key = subProps[j];
          const value = item[key];
          if (typeof value !== "number" || Number.isNaN(value)) {
            throw new Error(`ReactGridLayout: ${contextName}[${i}].${key} must be a number! Received: ${value} (${typeof value})`);
          }
        }
        if (typeof item.i !== "undefined" && typeof item.i !== "string") {
          throw new Error(`ReactGridLayout: ${contextName}[${i}].i must be a string! Received: ${item.i} (${typeof item.i})`);
        }
      }
    }
    function compactType(props) {
      const {
        verticalCompact,
        compactType: compactType2
      } = props || {};
      return verticalCompact === false ? null : compactType2;
    }
    function log() {
      if (!DEBUG) return;
      console.log(...arguments);
    }
    var noop = () => {
    };
    exports.noop = noop;
  }
});

// ../node_modules/react-grid-layout/build/calculateUtils.js
var require_calculateUtils = __commonJS({
  "../node_modules/react-grid-layout/build/calculateUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.calcGridColWidth = calcGridColWidth;
    exports.calcGridItemPosition = calcGridItemPosition;
    exports.calcGridItemWHPx = calcGridItemWHPx;
    exports.calcWH = calcWH;
    exports.calcXY = calcXY;
    exports.clamp = clamp;
    function calcGridColWidth(positionParams) {
      const {
        margin,
        containerPadding,
        containerWidth,
        cols
      } = positionParams;
      return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;
    }
    function calcGridItemWHPx(gridUnits, colOrRowSize, marginPx) {
      if (!Number.isFinite(gridUnits)) return gridUnits;
      return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);
    }
    function calcGridItemPosition(positionParams, x, y, w, h, state) {
      const {
        margin,
        containerPadding,
        rowHeight
      } = positionParams;
      const colWidth = calcGridColWidth(positionParams);
      const out = {};
      if (state && state.resizing) {
        out.width = Math.round(state.resizing.width);
        out.height = Math.round(state.resizing.height);
      } else {
        out.width = calcGridItemWHPx(w, colWidth, margin[0]);
        out.height = calcGridItemWHPx(h, rowHeight, margin[1]);
      }
      if (state && state.dragging) {
        out.top = Math.round(state.dragging.top);
        out.left = Math.round(state.dragging.left);
      } else if (state && state.resizing && typeof state.resizing.top === "number" && typeof state.resizing.left === "number") {
        out.top = Math.round(state.resizing.top);
        out.left = Math.round(state.resizing.left);
      } else {
        out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);
        out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);
      }
      return out;
    }
    function calcXY(positionParams, top, left, w, h) {
      const {
        margin,
        containerPadding,
        cols,
        rowHeight,
        maxRows
      } = positionParams;
      const colWidth = calcGridColWidth(positionParams);
      let x = Math.round((left - containerPadding[0]) / (colWidth + margin[0]));
      let y = Math.round((top - containerPadding[1]) / (rowHeight + margin[1]));
      x = clamp(x, 0, cols - w);
      y = clamp(y, 0, maxRows - h);
      return {
        x,
        y
      };
    }
    function calcWH(positionParams, width, height, x, y, handle) {
      const {
        margin,
        maxRows,
        cols,
        rowHeight
      } = positionParams;
      const colWidth = calcGridColWidth(positionParams);
      let w = Math.round((width + margin[0]) / (colWidth + margin[0]));
      let h = Math.round((height + margin[1]) / (rowHeight + margin[1]));
      let _w = clamp(w, 0, cols - x);
      let _h = clamp(h, 0, maxRows - y);
      if (["sw", "w", "nw"].indexOf(handle) !== -1) {
        _w = clamp(w, 0, cols);
      }
      if (["nw", "n", "ne"].indexOf(handle) !== -1) {
        _h = clamp(h, 0, maxRows);
      }
      return {
        w: _w,
        h: _h
      };
    }
    function clamp(num, lowerBound, upperBound) {
      return Math.max(Math.min(num, upperBound), lowerBound);
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/shims.js
var require_shims = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/shims.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.dontSetMe = dontSetMe;
    exports.findInArray = findInArray;
    exports.int = int;
    exports.isFunction = isFunction2;
    exports.isNum = isNum;
    function findInArray(array, callback) {
      for (let i = 0, length = array.length; i < length; i++) {
        if (callback.apply(callback, [array[i], i, array])) return array[i];
      }
    }
    function isFunction2(func) {
      return typeof func === "function" || Object.prototype.toString.call(func) === "[object Function]";
    }
    function isNum(num) {
      return typeof num === "number" && !isNaN(num);
    }
    function int(a) {
      return parseInt(a, 10);
    }
    function dontSetMe(props, propName, componentName) {
      if (props[propName]) {
        return new Error(`Invalid prop ${propName} passed to ${componentName} - do not set this, set it on the child.`);
      }
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/getPrefix.js
var require_getPrefix = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/getPrefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.browserPrefixToKey = browserPrefixToKey;
    exports.browserPrefixToStyle = browserPrefixToStyle;
    exports.default = void 0;
    exports.getPrefix = getPrefix;
    var prefixes = ["Moz", "Webkit", "O", "ms"];
    function getPrefix() {
      let prop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "transform";
      if (typeof window === "undefined") return "";
      const style = window.document?.documentElement?.style;
      if (!style) return "";
      if (prop in style) return "";
      for (let i = 0; i < prefixes.length; i++) {
        if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
      }
      return "";
    }
    function browserPrefixToKey(prop, prefix) {
      return prefix ? `${prefix}${kebabToTitleCase(prop)}` : prop;
    }
    function browserPrefixToStyle(prop, prefix) {
      return prefix ? `-${prefix.toLowerCase()}-${prop}` : prop;
    }
    function kebabToTitleCase(str) {
      let out = "";
      let shouldCapitalize = true;
      for (let i = 0; i < str.length; i++) {
        if (shouldCapitalize) {
          out += str[i].toUpperCase();
          shouldCapitalize = false;
        } else if (str[i] === "-") {
          shouldCapitalize = true;
        } else {
          out += str[i];
        }
      }
      return out;
    }
    var _default = exports.default = getPrefix();
  }
});

// ../node_modules/react-draggable/build/cjs/utils/domFns.js
var require_domFns = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/domFns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.addClassName = addClassName;
    exports.addEvent = addEvent;
    exports.addUserSelectStyles = addUserSelectStyles;
    exports.createCSSTransform = createCSSTransform;
    exports.createSVGTransform = createSVGTransform;
    exports.getTouch = getTouch;
    exports.getTouchIdentifier = getTouchIdentifier;
    exports.getTranslation = getTranslation;
    exports.innerHeight = innerHeight;
    exports.innerWidth = innerWidth;
    exports.matchesSelector = matchesSelector;
    exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
    exports.offsetXYFromParent = offsetXYFromParent;
    exports.outerHeight = outerHeight;
    exports.outerWidth = outerWidth;
    exports.removeClassName = removeClassName;
    exports.removeEvent = removeEvent;
    exports.scheduleRemoveUserSelectStyles = scheduleRemoveUserSelectStyles;
    var _shims = require_shims();
    var _getPrefix = _interopRequireWildcard(require_getPrefix());
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    var matchesSelectorFunc = "";
    function matchesSelector(el, selector) {
      if (!matchesSelectorFunc) {
        matchesSelectorFunc = (0, _shims.findInArray)(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function(method) {
          return (0, _shims.isFunction)(el[method]);
        });
      }
      if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false;
      return el[matchesSelectorFunc](selector);
    }
    function matchesSelectorAndParentsTo(el, selector, baseNode) {
      let node = el;
      do {
        if (matchesSelector(node, selector)) return true;
        if (node === baseNode) return false;
        node = node.parentNode;
      } while (node);
      return false;
    }
    function addEvent(el, event, handler, inputOptions) {
      if (!el) return;
      const options = {
        capture: true,
        ...inputOptions
      };
      if (el.addEventListener) {
        el.addEventListener(event, handler, options);
      } else if (el.attachEvent) {
        el.attachEvent("on" + event, handler);
      } else {
        el["on" + event] = handler;
      }
    }
    function removeEvent(el, event, handler, inputOptions) {
      if (!el) return;
      const options = {
        capture: true,
        ...inputOptions
      };
      if (el.removeEventListener) {
        el.removeEventListener(event, handler, options);
      } else if (el.detachEvent) {
        el.detachEvent("on" + event, handler);
      } else {
        el["on" + event] = null;
      }
    }
    function outerHeight(node) {
      let height = node.clientHeight;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      height += (0, _shims.int)(computedStyle.borderTopWidth);
      height += (0, _shims.int)(computedStyle.borderBottomWidth);
      return height;
    }
    function outerWidth(node) {
      let width = node.clientWidth;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      width += (0, _shims.int)(computedStyle.borderLeftWidth);
      width += (0, _shims.int)(computedStyle.borderRightWidth);
      return width;
    }
    function innerHeight(node) {
      let height = node.clientHeight;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      height -= (0, _shims.int)(computedStyle.paddingTop);
      height -= (0, _shims.int)(computedStyle.paddingBottom);
      return height;
    }
    function innerWidth(node) {
      let width = node.clientWidth;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      width -= (0, _shims.int)(computedStyle.paddingLeft);
      width -= (0, _shims.int)(computedStyle.paddingRight);
      return width;
    }
    function offsetXYFromParent(evt, offsetParent, scale) {
      const isBody = offsetParent === offsetParent.ownerDocument.body;
      const offsetParentRect = isBody ? {
        left: 0,
        top: 0
      } : offsetParent.getBoundingClientRect();
      const x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
      const y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
      return {
        x,
        y
      };
    }
    function createCSSTransform(controlPos, positionOffset) {
      const translation = getTranslation(controlPos, positionOffset, "px");
      return {
        [(0, _getPrefix.browserPrefixToKey)("transform", _getPrefix.default)]: translation
      };
    }
    function createSVGTransform(controlPos, positionOffset) {
      const translation = getTranslation(controlPos, positionOffset, "");
      return translation;
    }
    function getTranslation(_ref, positionOffset, unitSuffix) {
      let {
        x,
        y
      } = _ref;
      let translation = `translate(${x}${unitSuffix},${y}${unitSuffix})`;
      if (positionOffset) {
        const defaultX = `${typeof positionOffset.x === "string" ? positionOffset.x : positionOffset.x + unitSuffix}`;
        const defaultY = `${typeof positionOffset.y === "string" ? positionOffset.y : positionOffset.y + unitSuffix}`;
        translation = `translate(${defaultX}, ${defaultY})` + translation;
      }
      return translation;
    }
    function getTouch(e, identifier) {
      return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, (t2) => identifier === t2.identifier) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, (t2) => identifier === t2.identifier);
    }
    function getTouchIdentifier(e) {
      if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
      if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
    }
    function addUserSelectStyles(doc) {
      if (!doc) return;
      let styleEl = doc.getElementById("react-draggable-style-el");
      if (!styleEl) {
        styleEl = doc.createElement("style");
        styleEl.type = "text/css";
        styleEl.id = "react-draggable-style-el";
        styleEl.innerHTML = ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n";
        styleEl.innerHTML += ".react-draggable-transparent-selection *::selection {all: inherit;}\n";
        doc.getElementsByTagName("head")[0].appendChild(styleEl);
      }
      if (doc.body) addClassName(doc.body, "react-draggable-transparent-selection");
    }
    function scheduleRemoveUserSelectStyles(doc) {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(() => {
          removeUserSelectStyles(doc);
        });
      } else {
        removeUserSelectStyles(doc);
      }
    }
    function removeUserSelectStyles(doc) {
      if (!doc) return;
      try {
        if (doc.body) removeClassName(doc.body, "react-draggable-transparent-selection");
        if (doc.selection) {
          doc.selection.empty();
        } else {
          const selection = (doc.defaultView || window).getSelection();
          if (selection && selection.type !== "Caret") {
            selection.removeAllRanges();
          }
        }
      } catch (e) {
      }
    }
    function addClassName(el, className) {
      if (el.classList) {
        el.classList.add(className);
      } else {
        if (!el.className.match(new RegExp(`(?:^|\\s)${className}(?!\\S)`))) {
          el.className += ` ${className}`;
        }
      }
    }
    function removeClassName(el, className) {
      if (el.classList) {
        el.classList.remove(className);
      } else {
        el.className = el.className.replace(new RegExp(`(?:^|\\s)${className}(?!\\S)`, "g"), "");
      }
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/positionFns.js
var require_positionFns = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/positionFns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canDragX = canDragX;
    exports.canDragY = canDragY;
    exports.createCoreData = createCoreData;
    exports.createDraggableData = createDraggableData;
    exports.getBoundPosition = getBoundPosition;
    exports.getControlPosition = getControlPosition;
    exports.snapToGrid = snapToGrid;
    var _shims = require_shims();
    var _domFns = require_domFns();
    function getBoundPosition(draggable, x, y) {
      if (!draggable.props.bounds) return [x, y];
      let {
        bounds
      } = draggable.props;
      bounds = typeof bounds === "string" ? bounds : cloneBounds(bounds);
      const node = findDOMNode(draggable);
      if (typeof bounds === "string") {
        const {
          ownerDocument
        } = node;
        const ownerWindow = ownerDocument.defaultView;
        let boundNode;
        if (bounds === "parent") {
          boundNode = node.parentNode;
        } else {
          const rootNode = node.getRootNode();
          boundNode = rootNode.querySelector(bounds);
        }
        if (!(boundNode instanceof ownerWindow.HTMLElement)) {
          throw new Error('Bounds selector "' + bounds + '" could not find an element.');
        }
        const boundNodeEl = boundNode;
        const nodeStyle = ownerWindow.getComputedStyle(node);
        const boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);
        bounds = {
          left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
          top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
          right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
          bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
        };
      }
      if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);
      if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom);
      if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);
      if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);
      return [x, y];
    }
    function snapToGrid(grid, pendingX, pendingY) {
      const x = Math.round(pendingX / grid[0]) * grid[0];
      const y = Math.round(pendingY / grid[1]) * grid[1];
      return [x, y];
    }
    function canDragX(draggable) {
      return draggable.props.axis === "both" || draggable.props.axis === "x";
    }
    function canDragY(draggable) {
      return draggable.props.axis === "both" || draggable.props.axis === "y";
    }
    function getControlPosition(e, touchIdentifier, draggableCore) {
      const touchObj = typeof touchIdentifier === "number" ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
      if (typeof touchIdentifier === "number" && !touchObj) return null;
      const node = findDOMNode(draggableCore);
      const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
      return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
    }
    function createCoreData(draggable, x, y) {
      const isStart = !(0, _shims.isNum)(draggable.lastX);
      const node = findDOMNode(draggable);
      if (isStart) {
        return {
          node,
          deltaX: 0,
          deltaY: 0,
          lastX: x,
          lastY: y,
          x,
          y
        };
      } else {
        return {
          node,
          deltaX: x - draggable.lastX,
          deltaY: y - draggable.lastY,
          lastX: draggable.lastX,
          lastY: draggable.lastY,
          x,
          y
        };
      }
    }
    function createDraggableData(draggable, coreData) {
      const scale = draggable.props.scale;
      return {
        node: coreData.node,
        x: draggable.state.x + coreData.deltaX / scale,
        y: draggable.state.y + coreData.deltaY / scale,
        deltaX: coreData.deltaX / scale,
        deltaY: coreData.deltaY / scale,
        lastX: draggable.state.x,
        lastY: draggable.state.y
      };
    }
    function cloneBounds(bounds) {
      return {
        left: bounds.left,
        top: bounds.top,
        right: bounds.right,
        bottom: bounds.bottom
      };
    }
    function findDOMNode(draggable) {
      const node = draggable.findDOMNode();
      if (!node) {
        throw new Error("<DraggableCore>: Unmounted during event!");
      }
      return node;
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/log.js
var require_log = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = log;
    function log() {
      if (void 0) console.log(...arguments);
    }
  }
});

// ../node_modules/react-draggable/build/cjs/DraggableCore.js
var require_DraggableCore = __commonJS({
  "../node_modules/react-draggable/build/cjs/DraggableCore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React62 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _domFns = require_domFns();
    var _positionFns = require_positionFns();
    var _shims = require_shims();
    var _log = _interopRequireDefault(require_log());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _defineProperty(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var eventsFor = {
      touch: {
        start: "touchstart",
        move: "touchmove",
        stop: "touchend"
      },
      mouse: {
        start: "mousedown",
        move: "mousemove",
        stop: "mouseup"
      }
    };
    var dragEventFor = eventsFor.mouse;
    var DraggableCore = class extends React62.Component {
      constructor() {
        super(...arguments);
        _defineProperty(this, "dragging", false);
        _defineProperty(this, "lastX", NaN);
        _defineProperty(this, "lastY", NaN);
        _defineProperty(this, "touchIdentifier", null);
        _defineProperty(this, "mounted", false);
        _defineProperty(this, "handleDragStart", (e) => {
          this.props.onMouseDown(e);
          if (!this.props.allowAnyClick && typeof e.button === "number" && e.button !== 0) return false;
          const thisNode = this.findDOMNode();
          if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
            throw new Error("<DraggableCore> not mounted on DragStart!");
          }
          const {
            ownerDocument
          } = thisNode;
          if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {
            return;
          }
          if (e.type === "touchstart" && !this.props.allowMobileScroll) e.preventDefault();
          const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
          this.touchIdentifier = touchIdentifier;
          const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);
          if (position == null) return;
          const {
            x,
            y
          } = position;
          const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
          (0, _log.default)("DraggableCore: handleDragStart: %j", coreEvent);
          (0, _log.default)("calling", this.props.onStart);
          const shouldUpdate = this.props.onStart(e, coreEvent);
          if (shouldUpdate === false || this.mounted === false) return;
          if (this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument);
          this.dragging = true;
          this.lastX = x;
          this.lastY = y;
          (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);
          (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);
        });
        _defineProperty(this, "handleDrag", (e) => {
          const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
          if (position == null) return;
          let {
            x,
            y
          } = position;
          if (Array.isArray(this.props.grid)) {
            let deltaX = x - this.lastX, deltaY = y - this.lastY;
            [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
            if (!deltaX && !deltaY) return;
            x = this.lastX + deltaX, y = this.lastY + deltaY;
          }
          const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
          (0, _log.default)("DraggableCore: handleDrag: %j", coreEvent);
          const shouldUpdate = this.props.onDrag(e, coreEvent);
          if (shouldUpdate === false || this.mounted === false) {
            try {
              this.handleDragStop(new MouseEvent("mouseup"));
            } catch (err) {
              const event = document.createEvent("MouseEvents");
              event.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
              this.handleDragStop(event);
            }
            return;
          }
          this.lastX = x;
          this.lastY = y;
        });
        _defineProperty(this, "handleDragStop", (e) => {
          if (!this.dragging) return;
          const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
          if (position == null) return;
          let {
            x,
            y
          } = position;
          if (Array.isArray(this.props.grid)) {
            let deltaX = x - this.lastX || 0;
            let deltaY = y - this.lastY || 0;
            [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
            x = this.lastX + deltaX, y = this.lastY + deltaY;
          }
          const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
          const shouldContinue = this.props.onStop(e, coreEvent);
          if (shouldContinue === false || this.mounted === false) return false;
          const thisNode = this.findDOMNode();
          if (thisNode) {
            if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(thisNode.ownerDocument);
          }
          (0, _log.default)("DraggableCore: handleDragStop: %j", coreEvent);
          this.dragging = false;
          this.lastX = NaN;
          this.lastY = NaN;
          if (thisNode) {
            (0, _log.default)("DraggableCore: Removing handlers");
            (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);
            (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);
          }
        });
        _defineProperty(this, "onMouseDown", (e) => {
          dragEventFor = eventsFor.mouse;
          return this.handleDragStart(e);
        });
        _defineProperty(this, "onMouseUp", (e) => {
          dragEventFor = eventsFor.mouse;
          return this.handleDragStop(e);
        });
        _defineProperty(this, "onTouchStart", (e) => {
          dragEventFor = eventsFor.touch;
          return this.handleDragStart(e);
        });
        _defineProperty(this, "onTouchEnd", (e) => {
          dragEventFor = eventsFor.touch;
          return this.handleDragStop(e);
        });
      }
      componentDidMount() {
        this.mounted = true;
        const thisNode = this.findDOMNode();
        if (thisNode) {
          (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
            passive: false
          });
        }
      }
      componentWillUnmount() {
        this.mounted = false;
        const thisNode = this.findDOMNode();
        if (thisNode) {
          const {
            ownerDocument
          } = thisNode;
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
          (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
            passive: false
          });
          if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(ownerDocument);
        }
      }
      // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
      // the underlying DOM node ourselves. See the README for more information.
      findDOMNode() {
        return this.props?.nodeRef ? this.props?.nodeRef?.current : _reactDom.default.findDOMNode(this);
      }
      render() {
        return /* @__PURE__ */ React62.cloneElement(React62.Children.only(this.props.children), {
          // Note: mouseMove handler is attached to document so it will still function
          // when the user drags quickly and leaves the bounds of the element.
          onMouseDown: this.onMouseDown,
          onMouseUp: this.onMouseUp,
          // onTouchStart is added on `componentDidMount` so they can be added with
          // {passive: false}, which allows it to cancel. See
          // https://developers.google.com/web/updates/2017/01/scrolling-intervention
          onTouchEnd: this.onTouchEnd
        });
      }
    };
    exports.default = DraggableCore;
    _defineProperty(DraggableCore, "displayName", "DraggableCore");
    _defineProperty(DraggableCore, "propTypes", {
      /**
       * `allowAnyClick` allows dragging using any mouse button.
       * By default, we only accept the left button.
       *
       * Defaults to `false`.
       */
      allowAnyClick: _propTypes.default.bool,
      /**
       * `allowMobileScroll` turns off cancellation of the 'touchstart' event
       * on mobile devices. Only enable this if you are having trouble with click
       * events. Prefer using 'handle' / 'cancel' instead.
       *
       * Defaults to `false`.
       */
      allowMobileScroll: _propTypes.default.bool,
      children: _propTypes.default.node.isRequired,
      /**
       * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
       * with the exception of `onMouseDown`, will not fire.
       */
      disabled: _propTypes.default.bool,
      /**
       * By default, we add 'user-select:none' attributes to the document body
       * to prevent ugly text selection during drag. If this is causing problems
       * for your app, set this to `false`.
       */
      enableUserSelectHack: _propTypes.default.bool,
      /**
       * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
       * instead of using the parent node.
       */
      offsetParent: function(props, propName) {
        if (props[propName] && props[propName].nodeType !== 1) {
          throw new Error("Draggable's offsetParent must be a DOM Node.");
        }
      },
      /**
       * `grid` specifies the x and y that dragging should snap to.
       */
      grid: _propTypes.default.arrayOf(_propTypes.default.number),
      /**
       * `handle` specifies a selector to be used as the handle that initiates drag.
       *
       * Example:
       *
       * ```jsx
       *   let App = React.createClass({
       *       render: function () {
       *         return (
       *            <Draggable handle=".handle">
       *              <div>
       *                  <div className="handle">Click me to drag</div>
       *                  <div>This is some other content</div>
       *              </div>
       *           </Draggable>
       *         );
       *       }
       *   });
       * ```
       */
      handle: _propTypes.default.string,
      /**
       * `cancel` specifies a selector to be used to prevent drag initialization.
       *
       * Example:
       *
       * ```jsx
       *   let App = React.createClass({
       *       render: function () {
       *           return(
       *               <Draggable cancel=".cancel">
       *                   <div>
       *                     <div className="cancel">You can't drag from here</div>
       *                     <div>Dragging here works fine</div>
       *                   </div>
       *               </Draggable>
       *           );
       *       }
       *   });
       * ```
       */
      cancel: _propTypes.default.string,
      /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
       * Unfortunately, in order for <Draggable> to work properly, we need raw access
       * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
       * as in this example:
       *
       * function MyComponent() {
       *   const nodeRef = React.useRef(null);
       *   return (
       *     <Draggable nodeRef={nodeRef}>
       *       <div ref={nodeRef}>Example Target</div>
       *     </Draggable>
       *   );
       * }
       *
       * This can be used for arbitrarily nested components, so long as the ref ends up
       * pointing to the actual child DOM node and not a custom component.
       */
      nodeRef: _propTypes.default.object,
      /**
       * Called when dragging starts.
       * If this function returns the boolean false, dragging will be canceled.
       */
      onStart: _propTypes.default.func,
      /**
       * Called while dragging.
       * If this function returns the boolean false, dragging will be canceled.
       */
      onDrag: _propTypes.default.func,
      /**
       * Called when dragging stops.
       * If this function returns the boolean false, the drag will remain active.
       */
      onStop: _propTypes.default.func,
      /**
       * A workaround option which can be passed if onMouseDown needs to be accessed,
       * since it'll always be blocked (as there is internal use of onMouseDown)
       */
      onMouseDown: _propTypes.default.func,
      /**
       * `scale`, if set, applies scaling while dragging an element
       */
      scale: _propTypes.default.number,
      /**
       * These properties should be defined on the child, not here.
       */
      className: _shims.dontSetMe,
      style: _shims.dontSetMe,
      transform: _shims.dontSetMe
    });
    _defineProperty(DraggableCore, "defaultProps", {
      allowAnyClick: false,
      // by default only accept left click
      allowMobileScroll: false,
      disabled: false,
      enableUserSelectHack: true,
      onStart: function() {
      },
      onDrag: function() {
      },
      onStop: function() {
      },
      onMouseDown: function() {
      },
      scale: 1
    });
  }
});

// ../node_modules/react-draggable/build/cjs/Draggable.js
var require_Draggable = __commonJS({
  "../node_modules/react-draggable/build/cjs/Draggable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DraggableCore", {
      enumerable: true,
      get: function() {
        return _DraggableCore.default;
      }
    });
    exports.default = void 0;
    var React62 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _clsx = require_clsx();
    var _domFns = require_domFns();
    var _positionFns = require_positionFns();
    var _shims = require_shims();
    var _DraggableCore = _interopRequireDefault(require_DraggableCore());
    var _log = _interopRequireDefault(require_log());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _extends() {
      return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t2 = arguments[e];
          for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
        }
        return n;
      }, _extends.apply(null, arguments);
    }
    function _defineProperty(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var Draggable = class extends React62.Component {
      // React 16.3+
      // Arity (props, state)
      static getDerivedStateFromProps(_ref, _ref2) {
        let {
          position
        } = _ref;
        let {
          prevPropsPosition
        } = _ref2;
        if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
          (0, _log.default)("Draggable: getDerivedStateFromProps %j", {
            position,
            prevPropsPosition
          });
          return {
            x: position.x,
            y: position.y,
            prevPropsPosition: {
              ...position
            }
          };
        }
        return null;
      }
      constructor(props) {
        super(props);
        _defineProperty(this, "onDragStart", (e, coreData) => {
          (0, _log.default)("Draggable: onDragStart: %j", coreData);
          const shouldStart = this.props.onStart(e, (0, _positionFns.createDraggableData)(this, coreData));
          if (shouldStart === false) return false;
          this.setState({
            dragging: true,
            dragged: true
          });
        });
        _defineProperty(this, "onDrag", (e, coreData) => {
          if (!this.state.dragging) return false;
          (0, _log.default)("Draggable: onDrag: %j", coreData);
          const uiData = (0, _positionFns.createDraggableData)(this, coreData);
          const newState = {
            x: uiData.x,
            y: uiData.y,
            slackX: 0,
            slackY: 0
          };
          if (this.props.bounds) {
            const {
              x,
              y
            } = newState;
            newState.x += this.state.slackX;
            newState.y += this.state.slackY;
            const [newStateX, newStateY] = (0, _positionFns.getBoundPosition)(this, newState.x, newState.y);
            newState.x = newStateX;
            newState.y = newStateY;
            newState.slackX = this.state.slackX + (x - newState.x);
            newState.slackY = this.state.slackY + (y - newState.y);
            uiData.x = newState.x;
            uiData.y = newState.y;
            uiData.deltaX = newState.x - this.state.x;
            uiData.deltaY = newState.y - this.state.y;
          }
          const shouldUpdate = this.props.onDrag(e, uiData);
          if (shouldUpdate === false) return false;
          this.setState(newState);
        });
        _defineProperty(this, "onDragStop", (e, coreData) => {
          if (!this.state.dragging) return false;
          const shouldContinue = this.props.onStop(e, (0, _positionFns.createDraggableData)(this, coreData));
          if (shouldContinue === false) return false;
          (0, _log.default)("Draggable: onDragStop: %j", coreData);
          const newState = {
            dragging: false,
            slackX: 0,
            slackY: 0
          };
          const controlled = Boolean(this.props.position);
          if (controlled) {
            const {
              x,
              y
            } = this.props.position;
            newState.x = x;
            newState.y = y;
          }
          this.setState(newState);
        });
        this.state = {
          // Whether or not we are currently dragging.
          dragging: false,
          // Whether or not we have been dragged before.
          dragged: false,
          // Current transform x and y.
          x: props.position ? props.position.x : props.defaultPosition.x,
          y: props.position ? props.position.y : props.defaultPosition.y,
          prevPropsPosition: {
            ...props.position
          },
          // Used for compensating for out-of-bounds drags
          slackX: 0,
          slackY: 0,
          // Can only determine if SVG after mounting
          isElementSVG: false
        };
        if (props.position && !(props.onDrag || props.onStop)) {
          console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.");
        }
      }
      componentDidMount() {
        if (typeof window.SVGElement !== "undefined" && this.findDOMNode() instanceof window.SVGElement) {
          this.setState({
            isElementSVG: true
          });
        }
      }
      componentWillUnmount() {
        if (this.state.dragging) {
          this.setState({
            dragging: false
          });
        }
      }
      // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
      // the underlying DOM node ourselves. See the README for more information.
      findDOMNode() {
        return this.props?.nodeRef?.current ?? _reactDom.default.findDOMNode(this);
      }
      render() {
        const {
          axis,
          bounds,
          children,
          defaultPosition,
          defaultClassName,
          defaultClassNameDragging,
          defaultClassNameDragged,
          position,
          positionOffset,
          scale,
          ...draggableCoreProps
        } = this.props;
        let style = {};
        let svgTransform = null;
        const controlled = Boolean(position);
        const draggable = !controlled || this.state.dragging;
        const validPosition = position || defaultPosition;
        const transformOpts = {
          // Set left if horizontal drag is enabled
          x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
          // Set top if vertical drag is enabled
          y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
        };
        if (this.state.isElementSVG) {
          svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
        } else {
          style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
        }
        const className = (0, _clsx.clsx)(children.props.className || "", defaultClassName, {
          [defaultClassNameDragging]: this.state.dragging,
          [defaultClassNameDragged]: this.state.dragged
        });
        return /* @__PURE__ */ React62.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {
          onStart: this.onDragStart,
          onDrag: this.onDrag,
          onStop: this.onDragStop
        }), /* @__PURE__ */ React62.cloneElement(React62.Children.only(children), {
          className,
          style: {
            ...children.props.style,
            ...style
          },
          transform: svgTransform
        }));
      }
    };
    exports.default = Draggable;
    _defineProperty(Draggable, "displayName", "Draggable");
    _defineProperty(Draggable, "propTypes", {
      // Accepts all props <DraggableCore> accepts.
      ..._DraggableCore.default.propTypes,
      /**
       * `axis` determines which axis the draggable can move.
       *
       *  Note that all callbacks will still return data as normal. This only
       *  controls flushing to the DOM.
       *
       * 'both' allows movement horizontally and vertically.
       * 'x' limits movement to horizontal axis.
       * 'y' limits movement to vertical axis.
       * 'none' limits all movement.
       *
       * Defaults to 'both'.
       */
      axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
      /**
       * `bounds` determines the range of movement available to the element.
       * Available values are:
       *
       * 'parent' restricts movement within the Draggable's parent node.
       *
       * Alternatively, pass an object with the following properties, all of which are optional:
       *
       * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
       *
       * All values are in px.
       *
       * Example:
       *
       * ```jsx
       *   let App = React.createClass({
       *       render: function () {
       *         return (
       *            <Draggable bounds={{right: 300, bottom: 300}}>
       *              <div>Content</div>
       *           </Draggable>
       *         );
       *       }
       *   });
       * ```
       */
      bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
        left: _propTypes.default.number,
        right: _propTypes.default.number,
        top: _propTypes.default.number,
        bottom: _propTypes.default.number
      }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
      defaultClassName: _propTypes.default.string,
      defaultClassNameDragging: _propTypes.default.string,
      defaultClassNameDragged: _propTypes.default.string,
      /**
       * `defaultPosition` specifies the x and y that the dragged item should start at
       *
       * Example:
       *
       * ```jsx
       *      let App = React.createClass({
       *          render: function () {
       *              return (
       *                  <Draggable defaultPosition={{x: 25, y: 25}}>
       *                      <div>I start with transformX: 25px and transformY: 25px;</div>
       *                  </Draggable>
       *              );
       *          }
       *      });
       * ```
       */
      defaultPosition: _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }),
      positionOffset: _propTypes.default.shape({
        x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      }),
      /**
       * `position`, if present, defines the current position of the element.
       *
       *  This is similar to how form elements in React work - if no `position` is supplied, the component
       *  is uncontrolled.
       *
       * Example:
       *
       * ```jsx
       *      let App = React.createClass({
       *          render: function () {
       *              return (
       *                  <Draggable position={{x: 25, y: 25}}>
       *                      <div>I start with transformX: 25px and transformY: 25px;</div>
       *                  </Draggable>
       *              );
       *          }
       *      });
       * ```
       */
      position: _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }),
      /**
       * These properties should be defined on the child, not here.
       */
      className: _shims.dontSetMe,
      style: _shims.dontSetMe,
      transform: _shims.dontSetMe
    });
    _defineProperty(Draggable, "defaultProps", {
      ..._DraggableCore.default.defaultProps,
      axis: "both",
      bounds: false,
      defaultClassName: "react-draggable",
      defaultClassNameDragging: "react-draggable-dragging",
      defaultClassNameDragged: "react-draggable-dragged",
      defaultPosition: {
        x: 0,
        y: 0
      },
      scale: 1
    });
  }
});

// ../node_modules/react-draggable/build/cjs/cjs.js
var require_cjs = __commonJS({
  "../node_modules/react-draggable/build/cjs/cjs.js"(exports, module) {
    "use strict";
    var {
      default: Draggable,
      DraggableCore
    } = require_Draggable();
    module.exports = Draggable;
    module.exports.default = Draggable;
    module.exports.DraggableCore = DraggableCore;
  }
});

// ../node_modules/react-resizable/build/utils.js
var require_utils2 = __commonJS({
  "../node_modules/react-resizable/build/utils.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.cloneElement = cloneElement2;
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function cloneElement2(element, props) {
      if (props.style && element.props.style) {
        props.style = _objectSpread(_objectSpread({}, element.props.style), props.style);
      }
      if (props.className && element.props.className) {
        props.className = element.props.className + " " + props.className;
      }
      return /* @__PURE__ */ _react.default.cloneElement(element, props);
    }
  }
});

// ../node_modules/react-resizable/build/propTypes.js
var require_propTypes = __commonJS({
  "../node_modules/react-resizable/build/propTypes.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.resizableProps = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDraggable = require_cjs();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var resizableProps = {
      /*
      * Restricts resizing to a particular axis (default: 'both')
      * 'both' - allows resizing by width or height
      * 'x' - only allows the width to be changed
      * 'y' - only allows the height to be changed
      * 'none' - disables resizing altogether
      * */
      axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
      className: _propTypes.default.string,
      /*
      * Require that one and only one child be present.
      * */
      children: _propTypes.default.element.isRequired,
      /*
      * These will be passed wholesale to react-draggable's DraggableCore
      * */
      draggableOpts: _propTypes.default.shape({
        allowAnyClick: _propTypes.default.bool,
        cancel: _propTypes.default.string,
        children: _propTypes.default.node,
        disabled: _propTypes.default.bool,
        enableUserSelectHack: _propTypes.default.bool,
        offsetParent: _propTypes.default.node,
        grid: _propTypes.default.arrayOf(_propTypes.default.number),
        handle: _propTypes.default.string,
        nodeRef: _propTypes.default.object,
        onStart: _propTypes.default.func,
        onDrag: _propTypes.default.func,
        onStop: _propTypes.default.func,
        onMouseDown: _propTypes.default.func,
        scale: _propTypes.default.number
      }),
      /*
      * Initial height
      * */
      height: function height() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var props = args[0];
        if (props.axis === "both" || props.axis === "y") {
          var _PropTypes$number;
          return (_PropTypes$number = _propTypes.default.number).isRequired.apply(_PropTypes$number, args);
        }
        return _propTypes.default.number.apply(_propTypes.default, args);
      },
      /*
      * Customize cursor resize handle
      * */
      handle: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      /*
      * If you change this, be sure to update your css
      * */
      handleSize: _propTypes.default.arrayOf(_propTypes.default.number),
      lockAspectRatio: _propTypes.default.bool,
      /*
      * Max X & Y measure
      * */
      maxConstraints: _propTypes.default.arrayOf(_propTypes.default.number),
      /*
      * Min X & Y measure
      * */
      minConstraints: _propTypes.default.arrayOf(_propTypes.default.number),
      /*
      * Called on stop resize event
      * */
      onResizeStop: _propTypes.default.func,
      /*
      * Called on start resize event
      * */
      onResizeStart: _propTypes.default.func,
      /*
      * Called on resize event
      * */
      onResize: _propTypes.default.func,
      /*
      * Defines which resize handles should be rendered (default: 'se')
      * 's' - South handle (bottom-center)
      * 'w' - West handle (left-center)
      * 'e' - East handle (right-center)
      * 'n' - North handle (top-center)
      * 'sw' - Southwest handle (bottom-left)
      * 'nw' - Northwest handle (top-left)
      * 'se' - Southeast handle (bottom-right)
      * 'ne' - Northeast handle (top-center)
      * */
      resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf(["s", "w", "e", "n", "sw", "nw", "se", "ne"])),
      /*
      * If `transform: scale(n)` is set on the parent, this should be set to `n`.
      * */
      transformScale: _propTypes.default.number,
      /*
       * Initial width
       */
      width: function width() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var props = args[0];
        if (props.axis === "both" || props.axis === "x") {
          var _PropTypes$number2;
          return (_PropTypes$number2 = _propTypes.default.number).isRequired.apply(_PropTypes$number2, args);
        }
        return _propTypes.default.number.apply(_propTypes.default, args);
      }
    };
    exports.resizableProps = resizableProps;
  }
});

// ../node_modules/react-resizable/build/Resizable.js
var require_Resizable = __commonJS({
  "../node_modules/react-resizable/build/Resizable.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var React62 = _interopRequireWildcard(require_react());
    var _reactDraggable = require_cjs();
    var _utils = require_utils2();
    var _propTypes = require_propTypes();
    var _excluded = ["children", "className", "draggableOpts", "width", "height", "handle", "handleSize", "lockAspectRatio", "axis", "minConstraints", "maxConstraints", "onResize", "onResizeStop", "onResizeStart", "resizeHandles", "transformScale"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      };
      return _setPrototypeOf(o, p2);
    }
    var Resizable = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Resizable2, _React$Component);
      function Resizable2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.handleRefs = {};
        _this.lastHandleRect = null;
        _this.slack = null;
        return _this;
      }
      var _proto = Resizable2.prototype;
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.resetData();
      };
      _proto.resetData = function resetData() {
        this.lastHandleRect = this.slack = null;
      };
      _proto.runConstraints = function runConstraints(width, height) {
        var _this$props = this.props, minConstraints = _this$props.minConstraints, maxConstraints = _this$props.maxConstraints, lockAspectRatio = _this$props.lockAspectRatio;
        if (!minConstraints && !maxConstraints && !lockAspectRatio) return [width, height];
        if (lockAspectRatio) {
          var ratio = this.props.width / this.props.height;
          var deltaW = width - this.props.width;
          var deltaH = height - this.props.height;
          if (Math.abs(deltaW) > Math.abs(deltaH * ratio)) {
            height = width / ratio;
          } else {
            width = height * ratio;
          }
        }
        var oldW = width, oldH = height;
        var _ref = this.slack || [0, 0], slackW = _ref[0], slackH = _ref[1];
        width += slackW;
        height += slackH;
        if (minConstraints) {
          width = Math.max(minConstraints[0], width);
          height = Math.max(minConstraints[1], height);
        }
        if (maxConstraints) {
          width = Math.min(maxConstraints[0], width);
          height = Math.min(maxConstraints[1], height);
        }
        this.slack = [slackW + (oldW - width), slackH + (oldH - height)];
        return [width, height];
      };
      _proto.resizeHandler = function resizeHandler(handlerName, axis) {
        var _this2 = this;
        return function(e, _ref2) {
          var node = _ref2.node, deltaX = _ref2.deltaX, deltaY = _ref2.deltaY;
          if (handlerName === "onResizeStart") _this2.resetData();
          var canDragX = (_this2.props.axis === "both" || _this2.props.axis === "x") && axis !== "n" && axis !== "s";
          var canDragY = (_this2.props.axis === "both" || _this2.props.axis === "y") && axis !== "e" && axis !== "w";
          if (!canDragX && !canDragY) return;
          var axisV = axis[0];
          var axisH = axis[axis.length - 1];
          var handleRect = node.getBoundingClientRect();
          if (_this2.lastHandleRect != null) {
            if (axisH === "w") {
              var deltaLeftSinceLast = handleRect.left - _this2.lastHandleRect.left;
              deltaX += deltaLeftSinceLast;
            }
            if (axisV === "n") {
              var deltaTopSinceLast = handleRect.top - _this2.lastHandleRect.top;
              deltaY += deltaTopSinceLast;
            }
          }
          _this2.lastHandleRect = handleRect;
          if (axisH === "w") deltaX = -deltaX;
          if (axisV === "n") deltaY = -deltaY;
          var width = _this2.props.width + (canDragX ? deltaX / _this2.props.transformScale : 0);
          var height = _this2.props.height + (canDragY ? deltaY / _this2.props.transformScale : 0);
          var _this2$runConstraints = _this2.runConstraints(width, height);
          width = _this2$runConstraints[0];
          height = _this2$runConstraints[1];
          var dimensionsChanged = width !== _this2.props.width || height !== _this2.props.height;
          var cb = typeof _this2.props[handlerName] === "function" ? _this2.props[handlerName] : null;
          var shouldSkipCb = handlerName === "onResize" && !dimensionsChanged;
          if (cb && !shouldSkipCb) {
            e.persist == null ? void 0 : e.persist();
            cb(e, {
              node,
              size: {
                width,
                height
              },
              handle: axis
            });
          }
          if (handlerName === "onResizeStop") _this2.resetData();
        };
      };
      _proto.renderResizeHandle = function renderResizeHandle(handleAxis, ref) {
        var handle = this.props.handle;
        if (!handle) {
          return /* @__PURE__ */ React62.createElement("span", {
            className: "react-resizable-handle react-resizable-handle-" + handleAxis,
            ref
          });
        }
        if (typeof handle === "function") {
          return handle(handleAxis, ref);
        }
        var isDOMElement = typeof handle.type === "string";
        var props = _objectSpread({
          ref
        }, isDOMElement ? {} : {
          handleAxis
        });
        return /* @__PURE__ */ React62.cloneElement(handle, props);
      };
      _proto.render = function render() {
        var _this3 = this;
        var _this$props2 = this.props, children = _this$props2.children, className = _this$props2.className, draggableOpts = _this$props2.draggableOpts, width = _this$props2.width, height = _this$props2.height, handle = _this$props2.handle, handleSize = _this$props2.handleSize, lockAspectRatio = _this$props2.lockAspectRatio, axis = _this$props2.axis, minConstraints = _this$props2.minConstraints, maxConstraints = _this$props2.maxConstraints, onResize = _this$props2.onResize, onResizeStop = _this$props2.onResizeStop, onResizeStart = _this$props2.onResizeStart, resizeHandles = _this$props2.resizeHandles, transformScale = _this$props2.transformScale, p2 = _objectWithoutPropertiesLoose(_this$props2, _excluded);
        return (0, _utils.cloneElement)(children, _objectSpread(_objectSpread({}, p2), {}, {
          className: (className ? className + " " : "") + "react-resizable",
          children: [].concat(children.props.children, resizeHandles.map(function(handleAxis) {
            var _this3$handleRefs$han;
            var ref = (_this3$handleRefs$han = _this3.handleRefs[handleAxis]) != null ? _this3$handleRefs$han : _this3.handleRefs[handleAxis] = /* @__PURE__ */ React62.createRef();
            return /* @__PURE__ */ React62.createElement(_reactDraggable.DraggableCore, _extends({}, draggableOpts, {
              nodeRef: ref,
              key: "resizableHandle-" + handleAxis,
              onStop: _this3.resizeHandler("onResizeStop", handleAxis),
              onStart: _this3.resizeHandler("onResizeStart", handleAxis),
              onDrag: _this3.resizeHandler("onResize", handleAxis)
            }), _this3.renderResizeHandle(handleAxis, ref));
          }))
        }));
      };
      return Resizable2;
    }(React62.Component);
    exports.default = Resizable;
    Resizable.propTypes = _propTypes.resizableProps;
    Resizable.defaultProps = {
      axis: "both",
      handleSize: [20, 20],
      lockAspectRatio: false,
      minConstraints: [20, 20],
      maxConstraints: [Infinity, Infinity],
      resizeHandles: ["se"],
      transformScale: 1
    };
  }
});

// ../node_modules/react-resizable/build/ResizableBox.js
var require_ResizableBox = __commonJS({
  "../node_modules/react-resizable/build/ResizableBox.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var React62 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _Resizable = _interopRequireDefault(require_Resizable());
    var _propTypes2 = require_propTypes();
    var _excluded = ["handle", "handleSize", "onResize", "onResizeStart", "onResizeStop", "draggableOpts", "minConstraints", "maxConstraints", "lockAspectRatio", "axis", "width", "height", "resizeHandles", "style", "transformScale"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      };
      return _setPrototypeOf(o, p2);
    }
    var ResizableBox = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(ResizableBox2, _React$Component);
      function ResizableBox2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.state = {
          width: _this.props.width,
          height: _this.props.height,
          propsWidth: _this.props.width,
          propsHeight: _this.props.height
        };
        _this.onResize = function(e, data2) {
          var size = data2.size;
          if (_this.props.onResize) {
            e.persist == null ? void 0 : e.persist();
            _this.setState(size, function() {
              return _this.props.onResize && _this.props.onResize(e, data2);
            });
          } else {
            _this.setState(size);
          }
        };
        return _this;
      }
      ResizableBox2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        if (state.propsWidth !== props.width || state.propsHeight !== props.height) {
          return {
            width: props.width,
            height: props.height,
            propsWidth: props.width,
            propsHeight: props.height
          };
        }
        return null;
      };
      var _proto = ResizableBox2.prototype;
      _proto.render = function render() {
        var _this$props = this.props, handle = _this$props.handle, handleSize = _this$props.handleSize, onResize = _this$props.onResize, onResizeStart = _this$props.onResizeStart, onResizeStop = _this$props.onResizeStop, draggableOpts = _this$props.draggableOpts, minConstraints = _this$props.minConstraints, maxConstraints = _this$props.maxConstraints, lockAspectRatio = _this$props.lockAspectRatio, axis = _this$props.axis, width = _this$props.width, height = _this$props.height, resizeHandles = _this$props.resizeHandles, style = _this$props.style, transformScale = _this$props.transformScale, props = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return /* @__PURE__ */ React62.createElement(_Resizable.default, {
          axis,
          draggableOpts,
          handle,
          handleSize,
          height: this.state.height,
          lockAspectRatio,
          maxConstraints,
          minConstraints,
          onResizeStart,
          onResize: this.onResize,
          onResizeStop,
          resizeHandles,
          transformScale,
          width: this.state.width
        }, /* @__PURE__ */ React62.createElement("div", _extends({}, props, {
          style: _objectSpread(_objectSpread({}, style), {}, {
            width: this.state.width + "px",
            height: this.state.height + "px"
          })
        })));
      };
      return ResizableBox2;
    }(React62.Component);
    exports.default = ResizableBox;
    ResizableBox.propTypes = _objectSpread(_objectSpread({}, _propTypes2.resizableProps), {}, {
      children: _propTypes.default.element
    });
  }
});

// ../node_modules/react-resizable/index.js
var require_react_resizable = __commonJS({
  "../node_modules/react-resizable/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error("Don't instantiate Resizable directly! Use require('react-resizable').Resizable");
    };
    module.exports.Resizable = require_Resizable().default;
    module.exports.ResizableBox = require_ResizableBox().default;
  }
});

// ../node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js
var require_ReactGridLayoutPropTypes = __commonJS({
  "../node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.resizeHandleType = exports.resizeHandleAxesType = exports.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var resizeHandleAxesType = exports.resizeHandleAxesType = _propTypes.default.arrayOf(_propTypes.default.oneOf(["s", "w", "e", "n", "sw", "nw", "se", "ne"]));
    var resizeHandleType = exports.resizeHandleType = _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]);
    var _default = exports.default = {
      //
      // Basic props
      //
      className: _propTypes.default.string,
      style: _propTypes.default.object,
      // This can be set explicitly. If it is not set, it will automatically
      // be set to the container width. Note that resizes will *not* cause this to adjust.
      // If you need that behavior, use WidthProvider.
      width: _propTypes.default.number,
      // If true, the container height swells and contracts to fit contents
      autoSize: _propTypes.default.bool,
      // # of cols.
      cols: _propTypes.default.number,
      // A selector that will not be draggable.
      draggableCancel: _propTypes.default.string,
      // A selector for the draggable handler
      draggableHandle: _propTypes.default.string,
      // Deprecated
      verticalCompact: function(props) {
        if (props.verticalCompact === false && true) {
          console.warn(
            // eslint-disable-line no-console
            '`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. Use `compactType`: "horizontal" | "vertical" | null.'
          );
        }
      },
      // Choose vertical or hotizontal compaction
      compactType: _propTypes.default.oneOf(["vertical", "horizontal"]),
      // layout is an array of object with the format:
      // {x: Number, y: Number, w: Number, h: Number, i: String}
      layout: function(props) {
        var layout = props.layout;
        if (layout === void 0) return;
        require_utils().validateLayout(layout, "layout");
      },
      //
      // Grid Dimensions
      //
      // Margin between items [x, y] in px
      margin: _propTypes.default.arrayOf(_propTypes.default.number),
      // Padding inside the container [x, y] in px
      containerPadding: _propTypes.default.arrayOf(_propTypes.default.number),
      // Rows have a static height, but you can change this based on breakpoints if you like
      rowHeight: _propTypes.default.number,
      // Default Infinity, but you can specify a max here if you like.
      // Note that this isn't fully fleshed out and won't error if you specify a layout that
      // extends beyond the row capacity. It will, however, not allow users to drag/resize
      // an item past the barrier. They can push items beyond the barrier, though.
      // Intentionally not documented for this reason.
      maxRows: _propTypes.default.number,
      //
      // Flags
      //
      isBounded: _propTypes.default.bool,
      isDraggable: _propTypes.default.bool,
      isResizable: _propTypes.default.bool,
      // If true, grid can be placed one over the other.
      allowOverlap: _propTypes.default.bool,
      // If true, grid items won't change position when being dragged over.
      preventCollision: _propTypes.default.bool,
      // Use CSS transforms instead of top/left
      useCSSTransforms: _propTypes.default.bool,
      // parent layout transform scale
      transformScale: _propTypes.default.number,
      // If true, an external element can trigger onDrop callback with a specific grid position as a parameter
      isDroppable: _propTypes.default.bool,
      // Resize handle options
      resizeHandles: resizeHandleAxesType,
      resizeHandle: resizeHandleType,
      //
      // Callbacks
      //
      // Callback so you can save the layout. Calls after each drag & resize stops.
      onLayoutChange: _propTypes.default.func,
      // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).
      // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.
      onDragStart: _propTypes.default.func,
      // Calls on each drag movement.
      onDrag: _propTypes.default.func,
      // Calls when drag is complete.
      onDragStop: _propTypes.default.func,
      //Calls when resize starts.
      onResizeStart: _propTypes.default.func,
      // Calls when resize movement happens.
      onResize: _propTypes.default.func,
      // Calls when resize is complete.
      onResizeStop: _propTypes.default.func,
      // Calls when some element is dropped.
      onDrop: _propTypes.default.func,
      //
      // Other validations
      //
      droppingItem: _propTypes.default.shape({
        i: _propTypes.default.string.isRequired,
        w: _propTypes.default.number.isRequired,
        h: _propTypes.default.number.isRequired
      }),
      // Children must not have duplicate keys.
      children: function(props, propName) {
        const children = props[propName];
        const keys = {};
        _react.default.Children.forEach(children, function(child) {
          if (child?.key == null) return;
          if (keys[child.key]) {
            throw new Error('Duplicate child key "' + child.key + '" found! This will cause problems in ReactGridLayout.');
          }
          keys[child.key] = true;
        });
      },
      // Optional ref for getting a reference for the wrapping div.
      innerRef: _propTypes.default.any
    };
  }
});

// ../node_modules/react-grid-layout/build/GridItem.js
var require_GridItem = __commonJS({
  "../node_modules/react-grid-layout/build/GridItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _reactDom = require_react_dom();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDraggable = require_cjs();
    var _reactResizable = require_react_resizable();
    var _utils = require_utils();
    var _calculateUtils = require_calculateUtils();
    var _ReactGridLayoutPropTypes = require_ReactGridLayoutPropTypes();
    var _clsx = _interopRequireDefault(require_clsx());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _defineProperty(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var GridItem = class extends _react.default.Component {
      constructor() {
        super(...arguments);
        _defineProperty(this, "state", {
          resizing: null,
          dragging: null,
          className: ""
        });
        _defineProperty(this, "elementRef", /* @__PURE__ */ _react.default.createRef());
        _defineProperty(this, "onDragStart", (e, _ref) => {
          let {
            node
          } = _ref;
          const {
            onDragStart,
            transformScale
          } = this.props;
          if (!onDragStart) return;
          const newPosition = {
            top: 0,
            left: 0
          };
          const {
            offsetParent
          } = node;
          if (!offsetParent) return;
          const parentRect = offsetParent.getBoundingClientRect();
          const clientRect = node.getBoundingClientRect();
          const cLeft = clientRect.left / transformScale;
          const pLeft = parentRect.left / transformScale;
          const cTop = clientRect.top / transformScale;
          const pTop = parentRect.top / transformScale;
          newPosition.left = cLeft - pLeft + offsetParent.scrollLeft;
          newPosition.top = cTop - pTop + offsetParent.scrollTop;
          this.setState({
            dragging: newPosition
          });
          const {
            x,
            y
          } = (0, _calculateUtils.calcXY)(this.getPositionParams(), newPosition.top, newPosition.left, this.props.w, this.props.h);
          return onDragStart.call(this, this.props.i, x, y, {
            e,
            node,
            newPosition
          });
        });
        _defineProperty(this, "onDrag", (e, _ref2, dontFlush) => {
          let {
            node,
            deltaX,
            deltaY
          } = _ref2;
          const {
            onDrag
          } = this.props;
          if (!onDrag) return;
          if (!this.state.dragging) {
            throw new Error("onDrag called before onDragStart.");
          }
          let top = this.state.dragging.top + deltaY;
          let left = this.state.dragging.left + deltaX;
          const {
            isBounded,
            i,
            w,
            h,
            containerWidth
          } = this.props;
          const positionParams = this.getPositionParams();
          if (isBounded) {
            const {
              offsetParent
            } = node;
            if (offsetParent) {
              const {
                margin,
                rowHeight
              } = this.props;
              const bottomBoundary = offsetParent.clientHeight - (0, _calculateUtils.calcGridItemWHPx)(h, rowHeight, margin[1]);
              top = (0, _calculateUtils.clamp)(top, 0, bottomBoundary);
              const colWidth = (0, _calculateUtils.calcGridColWidth)(positionParams);
              const rightBoundary = containerWidth - (0, _calculateUtils.calcGridItemWHPx)(w, colWidth, margin[0]);
              left = (0, _calculateUtils.clamp)(left, 0, rightBoundary);
            }
          }
          const newPosition = {
            top,
            left
          };
          if (dontFlush) {
            this.setState({
              dragging: newPosition
            });
          } else {
            (0, _reactDom.flushSync)(() => {
              this.setState({
                dragging: newPosition
              });
            });
          }
          const {
            x,
            y
          } = (0, _calculateUtils.calcXY)(positionParams, top, left, w, h);
          return onDrag.call(this, i, x, y, {
            e,
            node,
            newPosition
          });
        });
        _defineProperty(this, "onDragStop", (e, _ref3) => {
          let {
            node
          } = _ref3;
          const {
            onDragStop
          } = this.props;
          if (!onDragStop) return;
          if (!this.state.dragging) {
            throw new Error("onDragEnd called before onDragStart.");
          }
          const {
            w,
            h,
            i
          } = this.props;
          const {
            left,
            top
          } = this.state.dragging;
          const newPosition = {
            top,
            left
          };
          this.setState({
            dragging: null
          });
          const {
            x,
            y
          } = (0, _calculateUtils.calcXY)(this.getPositionParams(), top, left, w, h);
          return onDragStop.call(this, i, x, y, {
            e,
            node,
            newPosition
          });
        });
        _defineProperty(this, "onResizeStop", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, "onResizeStop"));
        _defineProperty(this, "onResizeStart", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, "onResizeStart"));
        _defineProperty(this, "onResize", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, "onResize"));
      }
      shouldComponentUpdate(nextProps, nextState) {
        if (this.props.children !== nextProps.children) return true;
        if (this.props.droppingPosition !== nextProps.droppingPosition) return true;
        const oldPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(this.props), this.props.x, this.props.y, this.props.w, this.props.h, this.state);
        const newPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(nextProps), nextProps.x, nextProps.y, nextProps.w, nextProps.h, nextState);
        return !(0, _utils.fastPositionEqual)(oldPosition, newPosition) || this.props.useCSSTransforms !== nextProps.useCSSTransforms;
      }
      componentDidMount() {
        this.moveDroppingItem({});
      }
      componentDidUpdate(prevProps) {
        this.moveDroppingItem(prevProps);
      }
      // When a droppingPosition is present, this means we should fire a move event, as if we had moved
      // this element by `x, y` pixels.
      moveDroppingItem(prevProps) {
        const {
          droppingPosition
        } = this.props;
        if (!droppingPosition) return;
        const node = this.elementRef.current;
        if (!node) return;
        const prevDroppingPosition = prevProps.droppingPosition || {
          left: 0,
          top: 0
        };
        const {
          dragging
        } = this.state;
        const shouldDrag = dragging && droppingPosition.left !== prevDroppingPosition.left || droppingPosition.top !== prevDroppingPosition.top;
        if (!dragging) {
          this.onDragStart(droppingPosition.e, {
            node,
            deltaX: droppingPosition.left,
            deltaY: droppingPosition.top
          });
        } else if (shouldDrag) {
          const deltaX = droppingPosition.left - dragging.left;
          const deltaY = droppingPosition.top - dragging.top;
          this.onDrag(
            droppingPosition.e,
            {
              node,
              deltaX,
              deltaY
            },
            true
            // dontFLush: avoid flushSync to temper warnings
          );
        }
      }
      getPositionParams() {
        let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return {
          cols: props.cols,
          containerPadding: props.containerPadding,
          containerWidth: props.containerWidth,
          margin: props.margin,
          maxRows: props.maxRows,
          rowHeight: props.rowHeight
        };
      }
      /**
       * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it
       * well when server rendering, and the only way to do that properly is to use percentage width/left because
       * we don't know exactly what the browser viewport is.
       * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage
       * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.
       *
       * @param  {Object} pos Position object with width, height, left, top.
       * @return {Object}     Style object.
       */
      createStyle(pos) {
        const {
          usePercentages,
          containerWidth,
          useCSSTransforms
        } = this.props;
        let style;
        if (useCSSTransforms) {
          style = (0, _utils.setTransform)(pos);
        } else {
          style = (0, _utils.setTopLeft)(pos);
          if (usePercentages) {
            style.left = (0, _utils.perc)(pos.left / containerWidth);
            style.width = (0, _utils.perc)(pos.width / containerWidth);
          }
        }
        return style;
      }
      /**
       * Mix a Draggable instance into a child.
       * @param  {Element} child    Child element.
       * @return {Element}          Child wrapped in Draggable.
       */
      mixinDraggable(child, isDraggable) {
        return /* @__PURE__ */ _react.default.createElement(_reactDraggable.DraggableCore, {
          disabled: !isDraggable,
          onStart: this.onDragStart,
          onDrag: this.onDrag,
          onStop: this.onDragStop,
          handle: this.props.handle,
          cancel: ".react-resizable-handle" + (this.props.cancel ? "," + this.props.cancel : ""),
          scale: this.props.transformScale,
          nodeRef: this.elementRef
        }, child);
      }
      /**
       * Utility function to setup callback handler definitions for
       * similarily structured resize events.
       */
      curryResizeHandler(position, handler) {
        return (e, data2) => (
          /*: Function*/
          handler(e, data2, position)
        );
      }
      /**
       * Mix a Resizable instance into a child.
       * @param  {Element} child    Child element.
       * @param  {Object} position  Position object (pixel values)
       * @return {Element}          Child wrapped in Resizable.
       */
      mixinResizable(child, position, isResizable) {
        const {
          cols,
          minW,
          minH,
          maxW,
          maxH,
          transformScale,
          resizeHandles,
          resizeHandle
        } = this.props;
        const positionParams = this.getPositionParams();
        const maxWidth = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, cols, 0).width;
        const mins = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, minW, minH);
        const maxes = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, maxW, maxH);
        const minConstraints = [mins.width, mins.height];
        const maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];
        return /* @__PURE__ */ _react.default.createElement(
          _reactResizable.Resizable,
          {
            draggableOpts: {
              disabled: !isResizable
            },
            className: isResizable ? void 0 : "react-resizable-hide",
            width: position.width,
            height: position.height,
            minConstraints,
            maxConstraints,
            onResizeStop: this.curryResizeHandler(position, this.onResizeStop),
            onResizeStart: this.curryResizeHandler(position, this.onResizeStart),
            onResize: this.curryResizeHandler(position, this.onResize),
            transformScale,
            resizeHandles,
            handle: resizeHandle
          },
          child
        );
      }
      /**
       * Wrapper around resize events to provide more useful data.
       */
      onResizeHandler(e, _ref4, position, handlerName) {
        let {
          node,
          size,
          handle
        } = _ref4;
        const handler = this.props[handlerName];
        if (!handler) return;
        const {
          x,
          y,
          i,
          maxH,
          minH,
          containerWidth
        } = this.props;
        const {
          minW,
          maxW
        } = this.props;
        let updatedSize = size;
        if (node) {
          updatedSize = (0, _utils.resizeItemInDirection)(handle, position, size, containerWidth);
          (0, _reactDom.flushSync)(() => {
            this.setState({
              resizing: handlerName === "onResizeStop" ? null : updatedSize
            });
          });
        }
        let {
          w,
          h
        } = (0, _calculateUtils.calcWH)(this.getPositionParams(), updatedSize.width, updatedSize.height, x, y, handle);
        w = (0, _calculateUtils.clamp)(w, Math.max(minW, 1), maxW);
        h = (0, _calculateUtils.clamp)(h, minH, maxH);
        handler.call(this, i, w, h, {
          e,
          node,
          size: updatedSize,
          handle
        });
      }
      render() {
        const {
          x,
          y,
          w,
          h,
          isDraggable,
          isResizable,
          droppingPosition,
          useCSSTransforms
        } = this.props;
        const pos = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(), x, y, w, h, this.state);
        const child = _react.default.Children.only(this.props.children);
        let newChild = /* @__PURE__ */ _react.default.cloneElement(child, {
          ref: this.elementRef,
          className: (0, _clsx.default)("react-grid-item", child.props.className, this.props.className, {
            static: this.props.static,
            resizing: Boolean(this.state.resizing),
            "react-draggable": isDraggable,
            "react-draggable-dragging": Boolean(this.state.dragging),
            dropping: Boolean(droppingPosition),
            cssTransforms: useCSSTransforms
          }),
          // We can set the width and height on the child, but unfortunately we can't set the position.
          style: {
            ...this.props.style,
            ...child.props.style,
            ...this.createStyle(pos)
          }
        });
        newChild = this.mixinResizable(newChild, pos, isResizable);
        newChild = this.mixinDraggable(newChild, isDraggable);
        return newChild;
      }
    };
    exports.default = GridItem;
    _defineProperty(GridItem, "propTypes", {
      // Children must be only a single element
      children: _propTypes.default.element,
      // General grid attributes
      cols: _propTypes.default.number.isRequired,
      containerWidth: _propTypes.default.number.isRequired,
      rowHeight: _propTypes.default.number.isRequired,
      margin: _propTypes.default.array.isRequired,
      maxRows: _propTypes.default.number.isRequired,
      containerPadding: _propTypes.default.array.isRequired,
      // These are all in grid units
      x: _propTypes.default.number.isRequired,
      y: _propTypes.default.number.isRequired,
      w: _propTypes.default.number.isRequired,
      h: _propTypes.default.number.isRequired,
      // All optional
      minW: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("minWidth not Number");
        if (value > props.w || value > props.maxW) return new Error("minWidth larger than item width/maxWidth");
      },
      maxW: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("maxWidth not Number");
        if (value < props.w || value < props.minW) return new Error("maxWidth smaller than item width/minWidth");
      },
      minH: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("minHeight not Number");
        if (value > props.h || value > props.maxH) return new Error("minHeight larger than item height/maxHeight");
      },
      maxH: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("maxHeight not Number");
        if (value < props.h || value < props.minH) return new Error("maxHeight smaller than item height/minHeight");
      },
      // ID is nice to have for callbacks
      i: _propTypes.default.string.isRequired,
      // Resize handle options
      resizeHandles: _ReactGridLayoutPropTypes.resizeHandleAxesType,
      resizeHandle: _ReactGridLayoutPropTypes.resizeHandleType,
      // Functions
      onDragStop: _propTypes.default.func,
      onDragStart: _propTypes.default.func,
      onDrag: _propTypes.default.func,
      onResizeStop: _propTypes.default.func,
      onResizeStart: _propTypes.default.func,
      onResize: _propTypes.default.func,
      // Flags
      isDraggable: _propTypes.default.bool.isRequired,
      isResizable: _propTypes.default.bool.isRequired,
      isBounded: _propTypes.default.bool.isRequired,
      static: _propTypes.default.bool,
      // Use CSS transforms instead of top/left
      useCSSTransforms: _propTypes.default.bool.isRequired,
      transformScale: _propTypes.default.number,
      // Others
      className: _propTypes.default.string,
      // Selector for draggable handle
      handle: _propTypes.default.string,
      // Selector for draggable cancel (see react-draggable)
      cancel: _propTypes.default.string,
      // Current position of a dropping element
      droppingPosition: _propTypes.default.shape({
        e: _propTypes.default.object.isRequired,
        left: _propTypes.default.number.isRequired,
        top: _propTypes.default.number.isRequired
      })
    });
    _defineProperty(GridItem, "defaultProps", {
      className: "",
      cancel: "",
      handle: "",
      minH: 1,
      minW: 1,
      maxH: Infinity,
      maxW: Infinity,
      transformScale: 1
    });
  }
});

// ../node_modules/react-grid-layout/build/ReactGridLayout.js
var require_ReactGridLayout = __commonJS({
  "../node_modules/react-grid-layout/build/ReactGridLayout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React62 = _interopRequireWildcard(require_react());
    var _fastEquals = require_fast_equals();
    var _clsx = _interopRequireDefault(require_clsx());
    var _utils = require_utils();
    var _calculateUtils = require_calculateUtils();
    var _GridItem = _interopRequireDefault(require_GridItem());
    var _ReactGridLayoutPropTypes = _interopRequireDefault(require_ReactGridLayoutPropTypes());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _defineProperty(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var layoutClassName = "react-grid-layout";
    var isFirefox = false;
    try {
      isFirefox = /firefox/i.test(navigator.userAgent);
    } catch (e) {
    }
    var ReactGridLayout = class extends React62.Component {
      constructor() {
        super(...arguments);
        _defineProperty(this, "state", {
          activeDrag: null,
          layout: (0, _utils.synchronizeLayoutWithChildren)(
            this.props.layout,
            this.props.children,
            this.props.cols,
            // Legacy support for verticalCompact: false
            (0, _utils.compactType)(this.props),
            this.props.allowOverlap
          ),
          mounted: false,
          oldDragItem: null,
          oldLayout: null,
          oldResizeItem: null,
          resizing: false,
          droppingDOMNode: null,
          children: []
        });
        _defineProperty(this, "dragEnterCounter", 0);
        _defineProperty(this, "onDragStart", (i, x, y, _ref) => {
          let {
            e,
            node
          } = _ref;
          const {
            layout
          } = this.state;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          const placeholder = {
            w: l.w,
            h: l.h,
            x: l.x,
            y: l.y,
            placeholder: true,
            i
          };
          this.setState({
            oldDragItem: (0, _utils.cloneLayoutItem)(l),
            oldLayout: layout,
            activeDrag: placeholder
          });
          return this.props.onDragStart(layout, l, l, null, e, node);
        });
        _defineProperty(this, "onDrag", (i, x, y, _ref2) => {
          let {
            e,
            node
          } = _ref2;
          const {
            oldDragItem
          } = this.state;
          let {
            layout
          } = this.state;
          const {
            cols,
            allowOverlap,
            preventCollision
          } = this.props;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          const placeholder = {
            w: l.w,
            h: l.h,
            x: l.x,
            y: l.y,
            placeholder: true,
            i
          };
          const isUserAction = true;
          layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, preventCollision, (0, _utils.compactType)(this.props), cols, allowOverlap);
          this.props.onDrag(layout, oldDragItem, l, placeholder, e, node);
          this.setState({
            layout: allowOverlap ? layout : (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols),
            activeDrag: placeholder
          });
        });
        _defineProperty(this, "onDragStop", (i, x, y, _ref3) => {
          let {
            e,
            node
          } = _ref3;
          if (!this.state.activeDrag) return;
          const {
            oldDragItem
          } = this.state;
          let {
            layout
          } = this.state;
          const {
            cols,
            preventCollision,
            allowOverlap
          } = this.props;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          const isUserAction = true;
          layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, preventCollision, (0, _utils.compactType)(this.props), cols, allowOverlap);
          const newLayout = allowOverlap ? layout : (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols);
          this.props.onDragStop(newLayout, oldDragItem, l, null, e, node);
          const {
            oldLayout
          } = this.state;
          this.setState({
            activeDrag: null,
            layout: newLayout,
            oldDragItem: null,
            oldLayout: null
          });
          this.onLayoutMaybeChanged(newLayout, oldLayout);
        });
        _defineProperty(this, "onResizeStart", (i, w, h, _ref4) => {
          let {
            e,
            node
          } = _ref4;
          const {
            layout
          } = this.state;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          this.setState({
            oldResizeItem: (0, _utils.cloneLayoutItem)(l),
            oldLayout: this.state.layout,
            resizing: true
          });
          this.props.onResizeStart(layout, l, l, null, e, node);
        });
        _defineProperty(this, "onResize", (i, w, h, _ref5) => {
          let {
            e,
            node,
            size,
            handle
          } = _ref5;
          const {
            oldResizeItem
          } = this.state;
          const {
            layout
          } = this.state;
          const {
            cols,
            preventCollision,
            allowOverlap
          } = this.props;
          let shouldMoveItem = false;
          let finalLayout;
          let x;
          let y;
          const [newLayout, l] = (0, _utils.withLayoutItem)(layout, i, (l2) => {
            let hasCollisions;
            x = l2.x;
            y = l2.y;
            if (["sw", "w", "nw", "n", "ne"].indexOf(handle) !== -1) {
              if (["sw", "nw", "w"].indexOf(handle) !== -1) {
                x = l2.x + (l2.w - w);
                w = l2.x !== x && x < 0 ? l2.w : w;
                x = x < 0 ? 0 : x;
              }
              if (["ne", "n", "nw"].indexOf(handle) !== -1) {
                y = l2.y + (l2.h - h);
                h = l2.y !== y && y < 0 ? l2.h : h;
                y = y < 0 ? 0 : y;
              }
              shouldMoveItem = true;
            }
            if (preventCollision && !allowOverlap) {
              const collisions = (0, _utils.getAllCollisions)(layout, {
                ...l2,
                w,
                h,
                x,
                y
              }).filter((layoutItem) => layoutItem.i !== l2.i);
              hasCollisions = collisions.length > 0;
              if (hasCollisions) {
                y = l2.y;
                h = l2.h;
                x = l2.x;
                w = l2.w;
                shouldMoveItem = false;
              }
            }
            l2.w = w;
            l2.h = h;
            return l2;
          });
          if (!l) return;
          finalLayout = newLayout;
          if (shouldMoveItem) {
            const isUserAction = true;
            finalLayout = (0, _utils.moveElement)(newLayout, l, x, y, isUserAction, this.props.preventCollision, (0, _utils.compactType)(this.props), cols, allowOverlap);
          }
          const placeholder = {
            w: l.w,
            h: l.h,
            x: l.x,
            y: l.y,
            static: true,
            i
          };
          this.props.onResize(finalLayout, oldResizeItem, l, placeholder, e, node);
          this.setState({
            layout: allowOverlap ? finalLayout : (0, _utils.compact)(finalLayout, (0, _utils.compactType)(this.props), cols),
            activeDrag: placeholder
          });
        });
        _defineProperty(this, "onResizeStop", (i, w, h, _ref6) => {
          let {
            e,
            node
          } = _ref6;
          const {
            layout,
            oldResizeItem
          } = this.state;
          const {
            cols,
            allowOverlap
          } = this.props;
          const l = (0, _utils.getLayoutItem)(layout, i);
          const newLayout = allowOverlap ? layout : (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols);
          this.props.onResizeStop(newLayout, oldResizeItem, l, null, e, node);
          const {
            oldLayout
          } = this.state;
          this.setState({
            activeDrag: null,
            layout: newLayout,
            oldResizeItem: null,
            oldLayout: null,
            resizing: false
          });
          this.onLayoutMaybeChanged(newLayout, oldLayout);
        });
        _defineProperty(this, "onDragOver", (e) => {
          e.preventDefault();
          e.stopPropagation();
          if (isFirefox && // $FlowIgnore can't figure this out
          !e.nativeEvent.target?.classList.contains(layoutClassName)) {
            return false;
          }
          const {
            droppingItem,
            onDropDragOver,
            margin,
            cols,
            rowHeight,
            maxRows,
            width,
            containerPadding,
            transformScale
          } = this.props;
          const onDragOverResult = onDropDragOver?.(e);
          if (onDragOverResult === false) {
            if (this.state.droppingDOMNode) {
              this.removeDroppingPlaceholder();
            }
            return false;
          }
          const finalDroppingItem = {
            ...droppingItem,
            ...onDragOverResult
          };
          const {
            layout
          } = this.state;
          const gridRect = e.currentTarget.getBoundingClientRect();
          const layerX = e.clientX - gridRect.left;
          const layerY = e.clientY - gridRect.top;
          const droppingPosition = {
            left: layerX / transformScale,
            top: layerY / transformScale,
            e
          };
          if (!this.state.droppingDOMNode) {
            const positionParams = {
              cols,
              margin,
              maxRows,
              rowHeight,
              containerWidth: width,
              containerPadding: containerPadding || margin
            };
            const calculatedPosition = (0, _calculateUtils.calcXY)(positionParams, layerY, layerX, finalDroppingItem.w, finalDroppingItem.h);
            this.setState({
              droppingDOMNode: /* @__PURE__ */ React62.createElement("div", {
                key: finalDroppingItem.i
              }),
              droppingPosition,
              layout: [...layout, {
                ...finalDroppingItem,
                x: calculatedPosition.x,
                y: calculatedPosition.y,
                static: false,
                isDraggable: true
              }]
            });
          } else if (this.state.droppingPosition) {
            const {
              left,
              top
            } = this.state.droppingPosition;
            const shouldUpdatePosition = left != layerX || top != layerY;
            if (shouldUpdatePosition) {
              this.setState({
                droppingPosition
              });
            }
          }
        });
        _defineProperty(this, "removeDroppingPlaceholder", () => {
          const {
            droppingItem,
            cols
          } = this.props;
          const {
            layout
          } = this.state;
          const newLayout = (0, _utils.compact)(layout.filter((l) => l.i !== droppingItem.i), (0, _utils.compactType)(this.props), cols, this.props.allowOverlap);
          this.setState({
            layout: newLayout,
            droppingDOMNode: null,
            activeDrag: null,
            droppingPosition: void 0
          });
        });
        _defineProperty(this, "onDragLeave", (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.dragEnterCounter--;
          if (this.dragEnterCounter === 0) {
            this.removeDroppingPlaceholder();
          }
        });
        _defineProperty(this, "onDragEnter", (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.dragEnterCounter++;
        });
        _defineProperty(this, "onDrop", (e) => {
          e.preventDefault();
          e.stopPropagation();
          const {
            droppingItem
          } = this.props;
          const {
            layout
          } = this.state;
          const item = layout.find((l) => l.i === droppingItem.i);
          this.dragEnterCounter = 0;
          this.removeDroppingPlaceholder();
          this.props.onDrop(layout, item, e);
        });
      }
      componentDidMount() {
        this.setState({
          mounted: true
        });
        this.onLayoutMaybeChanged(this.state.layout, this.props.layout);
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let newLayoutBase;
        if (prevState.activeDrag) {
          return null;
        }
        if (!(0, _fastEquals.deepEqual)(nextProps.layout, prevState.propsLayout) || nextProps.compactType !== prevState.compactType) {
          newLayoutBase = nextProps.layout;
        } else if (!(0, _utils.childrenEqual)(nextProps.children, prevState.children)) {
          newLayoutBase = prevState.layout;
        }
        if (newLayoutBase) {
          const newLayout = (0, _utils.synchronizeLayoutWithChildren)(newLayoutBase, nextProps.children, nextProps.cols, (0, _utils.compactType)(nextProps), nextProps.allowOverlap);
          return {
            layout: newLayout,
            // We need to save these props to state for using
            // getDerivedStateFromProps instead of componentDidMount (in which we would get extra rerender)
            compactType: nextProps.compactType,
            children: nextProps.children,
            propsLayout: nextProps.layout
          };
        }
        return null;
      }
      shouldComponentUpdate(nextProps, nextState) {
        return (
          // NOTE: this is almost always unequal. Therefore the only way to get better performance
          // from SCU is if the user intentionally memoizes children. If they do, and they can
          // handle changes properly, performance will increase.
          this.props.children !== nextProps.children || !(0, _utils.fastRGLPropsEqual)(this.props, nextProps, _fastEquals.deepEqual) || this.state.activeDrag !== nextState.activeDrag || this.state.mounted !== nextState.mounted || this.state.droppingPosition !== nextState.droppingPosition
        );
      }
      componentDidUpdate(prevProps, prevState) {
        if (!this.state.activeDrag) {
          const newLayout = this.state.layout;
          const oldLayout = prevState.layout;
          this.onLayoutMaybeChanged(newLayout, oldLayout);
        }
      }
      /**
       * Calculates a pixel value for the container.
       * @return {String} Container height in pixels.
       */
      containerHeight() {
        if (!this.props.autoSize) return;
        const nbRow = (0, _utils.bottom)(this.state.layout);
        const containerPaddingY = this.props.containerPadding ? this.props.containerPadding[1] : this.props.margin[1];
        return nbRow * this.props.rowHeight + (nbRow - 1) * this.props.margin[1] + containerPaddingY * 2 + "px";
      }
      onLayoutMaybeChanged(newLayout, oldLayout) {
        if (!oldLayout) oldLayout = this.state.layout;
        if (!(0, _fastEquals.deepEqual)(oldLayout, newLayout)) {
          this.props.onLayoutChange(newLayout);
        }
      }
      /**
       * Create a placeholder object.
       * @return {Element} Placeholder div.
       */
      placeholder() {
        const {
          activeDrag
        } = this.state;
        if (!activeDrag) return null;
        const {
          width,
          cols,
          margin,
          containerPadding,
          rowHeight,
          maxRows,
          useCSSTransforms,
          transformScale
        } = this.props;
        return /* @__PURE__ */ React62.createElement(_GridItem.default, {
          w: activeDrag.w,
          h: activeDrag.h,
          x: activeDrag.x,
          y: activeDrag.y,
          i: activeDrag.i,
          className: `react-grid-placeholder ${this.state.resizing ? "placeholder-resizing" : ""}`,
          containerWidth: width,
          cols,
          margin,
          containerPadding: containerPadding || margin,
          maxRows,
          rowHeight,
          isDraggable: false,
          isResizable: false,
          isBounded: false,
          useCSSTransforms,
          transformScale
        }, /* @__PURE__ */ React62.createElement("div", null));
      }
      /**
       * Given a grid item, set its style attributes & surround in a <Draggable>.
       * @param  {Element} child React element.
       * @return {Element}       Element wrapped in draggable and properly placed.
       */
      processGridItem(child, isDroppingItem) {
        if (!child || !child.key) return;
        const l = (0, _utils.getLayoutItem)(this.state.layout, String(child.key));
        if (!l) return null;
        const {
          width,
          cols,
          margin,
          containerPadding,
          rowHeight,
          maxRows,
          isDraggable,
          isResizable,
          isBounded,
          useCSSTransforms,
          transformScale,
          draggableCancel,
          draggableHandle,
          resizeHandles,
          resizeHandle
        } = this.props;
        const {
          mounted,
          droppingPosition
        } = this.state;
        const draggable = typeof l.isDraggable === "boolean" ? l.isDraggable : !l.static && isDraggable;
        const resizable = typeof l.isResizable === "boolean" ? l.isResizable : !l.static && isResizable;
        const resizeHandlesOptions = l.resizeHandles || resizeHandles;
        const bounded = draggable && isBounded && l.isBounded !== false;
        return /* @__PURE__ */ React62.createElement(_GridItem.default, {
          containerWidth: width,
          cols,
          margin,
          containerPadding: containerPadding || margin,
          maxRows,
          rowHeight,
          cancel: draggableCancel,
          handle: draggableHandle,
          onDragStop: this.onDragStop,
          onDragStart: this.onDragStart,
          onDrag: this.onDrag,
          onResizeStart: this.onResizeStart,
          onResize: this.onResize,
          onResizeStop: this.onResizeStop,
          isDraggable: draggable,
          isResizable: resizable,
          isBounded: bounded,
          useCSSTransforms: useCSSTransforms && mounted,
          usePercentages: !mounted,
          transformScale,
          w: l.w,
          h: l.h,
          x: l.x,
          y: l.y,
          i: l.i,
          minH: l.minH,
          minW: l.minW,
          maxH: l.maxH,
          maxW: l.maxW,
          static: l.static,
          droppingPosition: isDroppingItem ? droppingPosition : void 0,
          resizeHandles: resizeHandlesOptions,
          resizeHandle
        }, child);
      }
      render() {
        const {
          className,
          style,
          isDroppable,
          innerRef
        } = this.props;
        const mergedClassName = (0, _clsx.default)(layoutClassName, className);
        const mergedStyle = {
          height: this.containerHeight(),
          ...style
        };
        return /* @__PURE__ */ React62.createElement("div", {
          ref: innerRef,
          className: mergedClassName,
          style: mergedStyle,
          onDrop: isDroppable ? this.onDrop : _utils.noop,
          onDragLeave: isDroppable ? this.onDragLeave : _utils.noop,
          onDragEnter: isDroppable ? this.onDragEnter : _utils.noop,
          onDragOver: isDroppable ? this.onDragOver : _utils.noop
        }, React62.Children.map(this.props.children, (child) => this.processGridItem(child)), isDroppable && this.state.droppingDOMNode && this.processGridItem(this.state.droppingDOMNode, true), this.placeholder());
      }
    };
    exports.default = ReactGridLayout;
    _defineProperty(ReactGridLayout, "displayName", "ReactGridLayout");
    _defineProperty(ReactGridLayout, "propTypes", _ReactGridLayoutPropTypes.default);
    _defineProperty(ReactGridLayout, "defaultProps", {
      autoSize: true,
      cols: 12,
      className: "",
      style: {},
      draggableHandle: "",
      draggableCancel: "",
      containerPadding: null,
      rowHeight: 150,
      maxRows: Infinity,
      // infinite vertical growth
      layout: [],
      margin: [10, 10],
      isBounded: false,
      isDraggable: true,
      isResizable: true,
      allowOverlap: false,
      isDroppable: false,
      useCSSTransforms: true,
      transformScale: 1,
      verticalCompact: true,
      compactType: "vertical",
      preventCollision: false,
      droppingItem: {
        i: "__dropping-elem__",
        h: 1,
        w: 1
      },
      resizeHandles: ["se"],
      onLayoutChange: _utils.noop,
      onDragStart: _utils.noop,
      onDrag: _utils.noop,
      onDragStop: _utils.noop,
      onResizeStart: _utils.noop,
      onResize: _utils.noop,
      onResizeStop: _utils.noop,
      onDrop: _utils.noop,
      onDropDragOver: _utils.noop
    });
  }
});

// ../node_modules/react-grid-layout/build/responsiveUtils.js
var require_responsiveUtils = __commonJS({
  "../node_modules/react-grid-layout/build/responsiveUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;
    exports.getBreakpointFromWidth = getBreakpointFromWidth;
    exports.getColsFromBreakpoint = getColsFromBreakpoint;
    exports.sortBreakpoints = sortBreakpoints;
    var _utils = require_utils();
    function getBreakpointFromWidth(breakpoints, width) {
      const sorted = sortBreakpoints(breakpoints);
      let matching = sorted[0];
      for (let i = 1, len = sorted.length; i < len; i++) {
        const breakpointName = sorted[i];
        if (width > breakpoints[breakpointName]) matching = breakpointName;
      }
      return matching;
    }
    function getColsFromBreakpoint(breakpoint, cols) {
      if (!cols[breakpoint]) {
        throw new Error("ResponsiveReactGridLayout: `cols` entry for breakpoint " + breakpoint + " is missing!");
      }
      return cols[breakpoint];
    }
    function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, compactType) {
      if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]);
      let layout = layouts[lastBreakpoint];
      const breakpointsSorted = sortBreakpoints(breakpoints);
      const breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));
      for (let i = 0, len = breakpointsAbove.length; i < len; i++) {
        const b = breakpointsAbove[i];
        if (layouts[b]) {
          layout = layouts[b];
          break;
        }
      }
      layout = (0, _utils.cloneLayout)(layout || []);
      return (0, _utils.compact)((0, _utils.correctBounds)(layout, {
        cols
      }), compactType, cols);
    }
    function sortBreakpoints(breakpoints) {
      const keys = Object.keys(breakpoints);
      return keys.sort(function(a, b) {
        return breakpoints[a] - breakpoints[b];
      });
    }
  }
});

// ../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js
var require_ResponsiveReactGridLayout = __commonJS({
  "../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React62 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _fastEquals = require_fast_equals();
    var _utils = require_utils();
    var _responsiveUtils = require_responsiveUtils();
    var _ReactGridLayout = _interopRequireDefault(require_ReactGridLayout());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _extends() {
      return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t2 = arguments[e];
          for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
        }
        return n;
      }, _extends.apply(null, arguments);
    }
    function _defineProperty(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var type = (obj) => Object.prototype.toString.call(obj);
    function getIndentationValue(param, breakpoint) {
      if (param == null) return null;
      return Array.isArray(param) ? param : param[breakpoint];
    }
    var ResponsiveReactGridLayout = class extends React62.Component {
      constructor() {
        super(...arguments);
        _defineProperty(this, "state", this.generateInitialState());
        _defineProperty(this, "onLayoutChange", (layout) => {
          this.props.onLayoutChange(layout, {
            ...this.props.layouts,
            [this.state.breakpoint]: layout
          });
        });
      }
      generateInitialState() {
        const {
          width,
          breakpoints,
          layouts,
          cols
        } = this.props;
        const breakpoint = (0, _responsiveUtils.getBreakpointFromWidth)(breakpoints, width);
        const colNo = (0, _responsiveUtils.getColsFromBreakpoint)(breakpoint, cols);
        const compactType = this.props.verticalCompact === false ? null : this.props.compactType;
        const initialLayout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(layouts, breakpoints, breakpoint, breakpoint, colNo, compactType);
        return {
          layout: initialLayout,
          breakpoint,
          cols: colNo
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        if (!(0, _fastEquals.deepEqual)(nextProps.layouts, prevState.layouts)) {
          const {
            breakpoint,
            cols
          } = prevState;
          const newLayout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(nextProps.layouts, nextProps.breakpoints, breakpoint, breakpoint, cols, nextProps.compactType);
          return {
            layout: newLayout,
            layouts: nextProps.layouts
          };
        }
        return null;
      }
      componentDidUpdate(prevProps) {
        if (this.props.width != prevProps.width || this.props.breakpoint !== prevProps.breakpoint || !(0, _fastEquals.deepEqual)(this.props.breakpoints, prevProps.breakpoints) || !(0, _fastEquals.deepEqual)(this.props.cols, prevProps.cols)) {
          this.onWidthChange(prevProps);
        }
      }
      /**
       * When the width changes work through breakpoints and reset state with the new width & breakpoint.
       * Width changes are necessary to figure out the widget widths.
       */
      onWidthChange(prevProps) {
        const {
          breakpoints,
          cols,
          layouts,
          compactType
        } = this.props;
        const newBreakpoint = this.props.breakpoint || (0, _responsiveUtils.getBreakpointFromWidth)(this.props.breakpoints, this.props.width);
        const lastBreakpoint = this.state.breakpoint;
        const newCols = (0, _responsiveUtils.getColsFromBreakpoint)(newBreakpoint, cols);
        const newLayouts = {
          ...layouts
        };
        if (lastBreakpoint !== newBreakpoint || prevProps.breakpoints !== breakpoints || prevProps.cols !== cols) {
          if (!(lastBreakpoint in newLayouts)) newLayouts[lastBreakpoint] = (0, _utils.cloneLayout)(this.state.layout);
          let layout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(newLayouts, breakpoints, newBreakpoint, lastBreakpoint, newCols, compactType);
          layout = (0, _utils.synchronizeLayoutWithChildren)(layout, this.props.children, newCols, compactType, this.props.allowOverlap);
          newLayouts[newBreakpoint] = layout;
          this.props.onBreakpointChange(newBreakpoint, newCols);
          this.props.onLayoutChange(layout, newLayouts);
          this.setState({
            breakpoint: newBreakpoint,
            layout,
            cols: newCols
          });
        }
        const margin = getIndentationValue(this.props.margin, newBreakpoint);
        const containerPadding = getIndentationValue(this.props.containerPadding, newBreakpoint);
        this.props.onWidthChange(this.props.width, margin, newCols, containerPadding);
      }
      render() {
        const {
          breakpoint,
          breakpoints,
          cols,
          layouts,
          margin,
          containerPadding,
          onBreakpointChange,
          onLayoutChange,
          onWidthChange,
          ...other
        } = this.props;
        return /* @__PURE__ */ React62.createElement(_ReactGridLayout.default, _extends({}, other, {
          // $FlowIgnore should allow nullable here due to DefaultProps
          margin: getIndentationValue(margin, this.state.breakpoint),
          containerPadding: getIndentationValue(containerPadding, this.state.breakpoint),
          onLayoutChange: this.onLayoutChange,
          layout: this.state.layout,
          cols: this.state.cols
        }));
      }
    };
    exports.default = ResponsiveReactGridLayout;
    _defineProperty(ResponsiveReactGridLayout, "propTypes", {
      //
      // Basic props
      //
      // Optional, but if you are managing width yourself you may want to set the breakpoint
      // yourself as well.
      breakpoint: _propTypes.default.string,
      // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}
      breakpoints: _propTypes.default.object,
      allowOverlap: _propTypes.default.bool,
      // # of cols. This is a breakpoint -> cols map
      cols: _propTypes.default.object,
      // # of margin. This is a breakpoint -> margin map
      // e.g. { lg: [5, 5], md: [10, 10], sm: [15, 15] }
      // Margin between items [x, y] in px
      // e.g. [10, 10]
      margin: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
      // # of containerPadding. This is a breakpoint -> containerPadding map
      // e.g. { lg: [5, 5], md: [10, 10], sm: [15, 15] }
      // Padding inside the container [x, y] in px
      // e.g. [10, 10]
      containerPadding: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
      // layouts is an object mapping breakpoints to layouts.
      // e.g. {lg: Layout, md: Layout, ...}
      layouts(props, propName) {
        if (type(props[propName]) !== "[object Object]") {
          throw new Error("Layout property must be an object. Received: " + type(props[propName]));
        }
        Object.keys(props[propName]).forEach((key) => {
          if (!(key in props.breakpoints)) {
            throw new Error("Each key in layouts must align with a key in breakpoints.");
          }
          (0, _utils.validateLayout)(props.layouts[key], "layouts." + key);
        });
      },
      // The width of this component.
      // Required in this propTypes stanza because generateInitialState() will fail without it.
      width: _propTypes.default.number.isRequired,
      //
      // Callbacks
      //
      // Calls back with breakpoint and new # cols
      onBreakpointChange: _propTypes.default.func,
      // Callback so you can save the layout.
      // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.
      onLayoutChange: _propTypes.default.func,
      // Calls back with (containerWidth, margin, cols, containerPadding)
      onWidthChange: _propTypes.default.func
    });
    _defineProperty(ResponsiveReactGridLayout, "defaultProps", {
      breakpoints: {
        lg: 1200,
        md: 996,
        sm: 768,
        xs: 480,
        xxs: 0
      },
      cols: {
        lg: 12,
        md: 10,
        sm: 6,
        xs: 4,
        xxs: 2
      },
      containerPadding: {
        lg: null,
        md: null,
        sm: null,
        xs: null,
        xxs: null
      },
      layouts: {},
      margin: [10, 10],
      allowOverlap: false,
      onBreakpointChange: _utils.noop,
      onLayoutChange: _utils.noop,
      onWidthChange: _utils.noop
    });
  }
});

// ../node_modules/resize-observer-polyfill/dist/ResizeObserver.js
var require_ResizeObserver = __commonJS({
  "../node_modules/resize-observer-polyfill/dist/ResizeObserver.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.ResizeObserver = factory();
    })(exports, function() {
      "use strict";
      var MapShim = function() {
        if (typeof Map !== "undefined") {
          return Map;
        }
        function getIndex(arr, key) {
          var result = -1;
          arr.some(function(entry, index2) {
            if (entry[0] === key) {
              result = index2;
              return true;
            }
            return false;
          });
          return result;
        }
        return (
          /** @class */
          function() {
            function class_1() {
              this.__entries__ = [];
            }
            Object.defineProperty(class_1.prototype, "size", {
              /**
               * @returns {boolean}
               */
              get: function() {
                return this.__entries__.length;
              },
              enumerable: true,
              configurable: true
            });
            class_1.prototype.get = function(key) {
              var index2 = getIndex(this.__entries__, key);
              var entry = this.__entries__[index2];
              return entry && entry[1];
            };
            class_1.prototype.set = function(key, value) {
              var index2 = getIndex(this.__entries__, key);
              if (~index2) {
                this.__entries__[index2][1] = value;
              } else {
                this.__entries__.push([key, value]);
              }
            };
            class_1.prototype.delete = function(key) {
              var entries = this.__entries__;
              var index2 = getIndex(entries, key);
              if (~index2) {
                entries.splice(index2, 1);
              }
            };
            class_1.prototype.has = function(key) {
              return !!~getIndex(this.__entries__, key);
            };
            class_1.prototype.clear = function() {
              this.__entries__.splice(0);
            };
            class_1.prototype.forEach = function(callback, ctx) {
              if (ctx === void 0) {
                ctx = null;
              }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
              }
            };
            return class_1;
          }()
        );
      }();
      var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
      var global$1 = function() {
        if (typeof global !== "undefined" && global.Math === Math) {
          return global;
        }
        if (typeof self !== "undefined" && self.Math === Math) {
          return self;
        }
        if (typeof window !== "undefined" && window.Math === Math) {
          return window;
        }
        return Function("return this")();
      }();
      var requestAnimationFrame$1 = function() {
        if (typeof requestAnimationFrame === "function") {
          return requestAnimationFrame.bind(global$1);
        }
        return function(callback) {
          return setTimeout(function() {
            return callback(Date.now());
          }, 1e3 / 60);
        };
      }();
      var trailingTimeout = 2;
      function throttle(callback, delay) {
        var leadingCall = false, trailingCall = false, lastCallTime = 0;
        function resolvePending() {
          if (leadingCall) {
            leadingCall = false;
            callback();
          }
          if (trailingCall) {
            proxy();
          }
        }
        function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
        }
        function proxy() {
          var timeStamp = Date.now();
          if (leadingCall) {
            if (timeStamp - lastCallTime < trailingTimeout) {
              return;
            }
            trailingCall = true;
          } else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
          }
          lastCallTime = timeStamp;
        }
        return proxy;
      }
      var REFRESH_DELAY = 20;
      var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
      var mutationObserverSupported = typeof MutationObserver !== "undefined";
      var ResizeObserverController = (
        /** @class */
        function() {
          function ResizeObserverController2() {
            this.connected_ = false;
            this.mutationEventsAdded_ = false;
            this.mutationsObserver_ = null;
            this.observers_ = [];
            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
          }
          ResizeObserverController2.prototype.addObserver = function(observer) {
            if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
            }
            if (!this.connected_) {
              this.connect_();
            }
          };
          ResizeObserverController2.prototype.removeObserver = function(observer) {
            var observers2 = this.observers_;
            var index2 = observers2.indexOf(observer);
            if (~index2) {
              observers2.splice(index2, 1);
            }
            if (!observers2.length && this.connected_) {
              this.disconnect_();
            }
          };
          ResizeObserverController2.prototype.refresh = function() {
            var changesDetected = this.updateObservers_();
            if (changesDetected) {
              this.refresh();
            }
          };
          ResizeObserverController2.prototype.updateObservers_ = function() {
            var activeObservers = this.observers_.filter(function(observer) {
              return observer.gatherActive(), observer.hasActive();
            });
            activeObservers.forEach(function(observer) {
              return observer.broadcastActive();
            });
            return activeObservers.length > 0;
          };
          ResizeObserverController2.prototype.connect_ = function() {
            if (!isBrowser2 || this.connected_) {
              return;
            }
            document.addEventListener("transitionend", this.onTransitionEnd_);
            window.addEventListener("resize", this.refresh);
            if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
              });
            } else {
              document.addEventListener("DOMSubtreeModified", this.refresh);
              this.mutationEventsAdded_ = true;
            }
            this.connected_ = true;
          };
          ResizeObserverController2.prototype.disconnect_ = function() {
            if (!isBrowser2 || !this.connected_) {
              return;
            }
            document.removeEventListener("transitionend", this.onTransitionEnd_);
            window.removeEventListener("resize", this.refresh);
            if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
            }
            if (this.mutationEventsAdded_) {
              document.removeEventListener("DOMSubtreeModified", this.refresh);
            }
            this.mutationsObserver_ = null;
            this.mutationEventsAdded_ = false;
            this.connected_ = false;
          };
          ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
            var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
            var isReflowProperty = transitionKeys.some(function(key) {
              return !!~propertyName.indexOf(key);
            });
            if (isReflowProperty) {
              this.refresh();
            }
          };
          ResizeObserverController2.getInstance = function() {
            if (!this.instance_) {
              this.instance_ = new ResizeObserverController2();
            }
            return this.instance_;
          };
          ResizeObserverController2.instance_ = null;
          return ResizeObserverController2;
        }()
      );
      var defineConfigurable = function(target, props) {
        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var key = _a[_i];
          Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
          });
        }
        return target;
      };
      var getWindowOf = function(target) {
        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
        return ownerGlobal || global$1;
      };
      var emptyRect = createRectInit(0, 0, 0, 0);
      function toFloat(value) {
        return parseFloat(value) || 0;
      }
      function getBordersSize(styles) {
        var positions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          positions[_i - 1] = arguments[_i];
        }
        return positions.reduce(function(size, position) {
          var value = styles["border-" + position + "-width"];
          return size + toFloat(value);
        }, 0);
      }
      function getPaddings(styles) {
        var positions = ["top", "right", "bottom", "left"];
        var paddings = {};
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var position = positions_1[_i];
          var value = styles["padding-" + position];
          paddings[position] = toFloat(value);
        }
        return paddings;
      }
      function getSVGContentRect(target) {
        var bbox = target.getBBox();
        return createRectInit(0, 0, bbox.width, bbox.height);
      }
      function getHTMLElementContentRect(target) {
        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
        if (!clientWidth && !clientHeight) {
          return emptyRect;
        }
        var styles = getWindowOf(target).getComputedStyle(target);
        var paddings = getPaddings(styles);
        var horizPad = paddings.left + paddings.right;
        var vertPad = paddings.top + paddings.bottom;
        var width = toFloat(styles.width), height = toFloat(styles.height);
        if (styles.boxSizing === "border-box") {
          if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, "left", "right") + horizPad;
          }
          if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, "top", "bottom") + vertPad;
          }
        }
        if (!isDocumentElement(target)) {
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;
          if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
          }
          if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
          }
        }
        return createRectInit(paddings.left, paddings.top, width, height);
      }
      var isSVGGraphicsElement = function() {
        if (typeof SVGGraphicsElement !== "undefined") {
          return function(target) {
            return target instanceof getWindowOf(target).SVGGraphicsElement;
          };
        }
        return function(target) {
          return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
        };
      }();
      function isDocumentElement(target) {
        return target === getWindowOf(target).document.documentElement;
      }
      function getContentRect(target) {
        if (!isBrowser2) {
          return emptyRect;
        }
        if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
        }
        return getHTMLElementContentRect(target);
      }
      function createReadOnlyRect(_a) {
        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
        var rect = Object.create(Constr.prototype);
        defineConfigurable(rect, {
          x,
          y,
          width,
          height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
        });
        return rect;
      }
      function createRectInit(x, y, width, height) {
        return { x, y, width, height };
      }
      var ResizeObservation = (
        /** @class */
        function() {
          function ResizeObservation2(target) {
            this.broadcastWidth = 0;
            this.broadcastHeight = 0;
            this.contentRect_ = createRectInit(0, 0, 0, 0);
            this.target = target;
          }
          ResizeObservation2.prototype.isActive = function() {
            var rect = getContentRect(this.target);
            this.contentRect_ = rect;
            return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
          };
          ResizeObservation2.prototype.broadcastRect = function() {
            var rect = this.contentRect_;
            this.broadcastWidth = rect.width;
            this.broadcastHeight = rect.height;
            return rect;
          };
          return ResizeObservation2;
        }()
      );
      var ResizeObserverEntry = (
        /** @class */
        /* @__PURE__ */ function() {
          function ResizeObserverEntry2(target, rectInit) {
            var contentRect = createReadOnlyRect(rectInit);
            defineConfigurable(this, { target, contentRect });
          }
          return ResizeObserverEntry2;
        }()
      );
      var ResizeObserverSPI = (
        /** @class */
        function() {
          function ResizeObserverSPI2(callback, controller, callbackCtx) {
            this.activeObservations_ = [];
            this.observations_ = new MapShim();
            if (typeof callback !== "function") {
              throw new TypeError("The callback provided as parameter 1 is not a function.");
            }
            this.callback_ = callback;
            this.controller_ = controller;
            this.callbackCtx_ = callbackCtx;
          }
          ResizeObserverSPI2.prototype.observe = function(target) {
            if (!arguments.length) {
              throw new TypeError("1 argument required, but only 0 present.");
            }
            if (typeof Element === "undefined" || !(Element instanceof Object)) {
              return;
            }
            if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            if (observations.has(target)) {
              return;
            }
            observations.set(target, new ResizeObservation(target));
            this.controller_.addObserver(this);
            this.controller_.refresh();
          };
          ResizeObserverSPI2.prototype.unobserve = function(target) {
            if (!arguments.length) {
              throw new TypeError("1 argument required, but only 0 present.");
            }
            if (typeof Element === "undefined" || !(Element instanceof Object)) {
              return;
            }
            if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            if (!observations.has(target)) {
              return;
            }
            observations.delete(target);
            if (!observations.size) {
              this.controller_.removeObserver(this);
            }
          };
          ResizeObserverSPI2.prototype.disconnect = function() {
            this.clearActive();
            this.observations_.clear();
            this.controller_.removeObserver(this);
          };
          ResizeObserverSPI2.prototype.gatherActive = function() {
            var _this = this;
            this.clearActive();
            this.observations_.forEach(function(observation) {
              if (observation.isActive()) {
                _this.activeObservations_.push(observation);
              }
            });
          };
          ResizeObserverSPI2.prototype.broadcastActive = function() {
            if (!this.hasActive()) {
              return;
            }
            var ctx = this.callbackCtx_;
            var entries = this.activeObservations_.map(function(observation) {
              return new ResizeObserverEntry(observation.target, observation.broadcastRect());
            });
            this.callback_.call(ctx, entries, ctx);
            this.clearActive();
          };
          ResizeObserverSPI2.prototype.clearActive = function() {
            this.activeObservations_.splice(0);
          };
          ResizeObserverSPI2.prototype.hasActive = function() {
            return this.activeObservations_.length > 0;
          };
          return ResizeObserverSPI2;
        }()
      );
      var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
      var ResizeObserver2 = (
        /** @class */
        /* @__PURE__ */ function() {
          function ResizeObserver3(callback) {
            if (!(this instanceof ResizeObserver3)) {
              throw new TypeError("Cannot call a class as a function.");
            }
            if (!arguments.length) {
              throw new TypeError("1 argument required, but only 0 present.");
            }
            var controller = ResizeObserverController.getInstance();
            var observer = new ResizeObserverSPI(callback, controller, this);
            observers.set(this, observer);
          }
          return ResizeObserver3;
        }()
      );
      [
        "observe",
        "unobserve",
        "disconnect"
      ].forEach(function(method) {
        ResizeObserver2.prototype[method] = function() {
          var _a;
          return (_a = observers.get(this))[method].apply(_a, arguments);
        };
      });
      var index = function() {
        if (typeof global$1.ResizeObserver !== "undefined") {
          return global$1.ResizeObserver;
        }
        return ResizeObserver2;
      }();
      return index;
    });
  }
});

// ../node_modules/react-grid-layout/build/components/WidthProvider.js
var require_WidthProvider = __commonJS({
  "../node_modules/react-grid-layout/build/components/WidthProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = WidthProvideRGL;
    var React62 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _resizeObserverPolyfill = _interopRequireDefault(require_ResizeObserver());
    var _clsx = _interopRequireDefault(require_clsx());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _extends() {
      return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t2 = arguments[e];
          for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
        }
        return n;
      }, _extends.apply(null, arguments);
    }
    function _defineProperty(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var layoutClassName = "react-grid-layout";
    function WidthProvideRGL(ComposedComponent) {
      var _WidthProvider;
      return _WidthProvider = class WidthProvider extends React62.Component {
        constructor() {
          super(...arguments);
          _defineProperty(this, "state", {
            width: 1280
          });
          _defineProperty(this, "elementRef", /* @__PURE__ */ React62.createRef());
          _defineProperty(this, "mounted", false);
          _defineProperty(this, "resizeObserver", void 0);
        }
        componentDidMount() {
          this.mounted = true;
          this.resizeObserver = new _resizeObserverPolyfill.default((entries) => {
            const node2 = this.elementRef.current;
            if (node2 instanceof HTMLElement) {
              const width = entries[0].contentRect.width;
              this.setState({
                width
              });
            }
          });
          const node = this.elementRef.current;
          if (node instanceof HTMLElement) {
            this.resizeObserver.observe(node);
          }
        }
        componentWillUnmount() {
          this.mounted = false;
          const node = this.elementRef.current;
          if (node instanceof HTMLElement) {
            this.resizeObserver.unobserve(node);
          }
          this.resizeObserver.disconnect();
        }
        render() {
          const {
            measureBeforeMount,
            ...rest
          } = this.props;
          if (measureBeforeMount && !this.mounted) {
            return /* @__PURE__ */ React62.createElement("div", {
              className: (0, _clsx.default)(this.props.className, layoutClassName),
              style: this.props.style,
              ref: this.elementRef
            });
          }
          return /* @__PURE__ */ React62.createElement(ComposedComponent, _extends({
            innerRef: this.elementRef
          }, rest, this.state));
        }
      }, _defineProperty(_WidthProvider, "defaultProps", {
        measureBeforeMount: false
      }), _defineProperty(_WidthProvider, "propTypes", {
        // If true, will not render children until mounted. Useful for getting the exact width before
        // rendering, to prevent any unsightly resizing.
        measureBeforeMount: _propTypes.default.bool
      }), _WidthProvider;
    }
  }
});

// ../node_modules/react-grid-layout/index.js
var require_react_grid_layout = __commonJS({
  "../node_modules/react-grid-layout/index.js"(exports, module) {
    module.exports = require_ReactGridLayout().default;
    module.exports.utils = require_utils();
    module.exports.calculateUtils = require_calculateUtils();
    module.exports.Responsive = require_ResponsiveReactGridLayout().default;
    module.exports.Responsive.utils = require_responsiveUtils();
    module.exports.WidthProvider = require_WidthProvider().default;
  }
});

// src/main.tsx
var import_client = __toESM(require_client(), 1);

// ../node_modules/react-router/dist/development/chunk-QMGIS6GS.mjs
var React3 = __toESM(require_react(), 1);
var React = __toESM(require_react(), 1);
var React2 = __toESM(require_react(), 1);
var React10 = __toESM(require_react(), 1);
var React9 = __toESM(require_react(), 1);
var React4 = __toESM(require_react(), 1);
var React8 = __toESM(require_react(), 1);
var React7 = __toESM(require_react(), 1);
var React5 = __toESM(require_react(), 1);
var React6 = __toESM(require_react(), 1);
var React11 = __toESM(require_react(), 1);
var React12 = __toESM(require_react(), 1);
var React13 = __toESM(require_react(), 1);
var import_cookie = __toESM(require_dist(), 1);
var PopStateEventType = "popstate";
function createHashHistory(options = {}) {
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substring(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      { pathname, search, hash },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base");
    let href2 = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href2 = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href2 + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function validateHashLocation(location, to) {
    warning(
      location.pathname.charAt(0) === "/",
      `relative pathnames are not supported in hash history.push(${JSON.stringify(
        to
      )})`
    );
  }
  return getUrlBasedHistory(
    createHashLocation,
    createHashHref,
    validateHashLocation,
    options
  );
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substring(2, 10);
}
function getHistoryState(location, index) {
  return {
    usr: location.state,
    key: location.key,
    idx: index
  };
}
function createLocation(current, to, state = null, key) {
  let location = {
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: "",
    ...typeof to === "string" ? parsePath(to) : to,
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  };
  return location;
}
function createPath({
  pathname = "/",
  search = "",
  hash = ""
}) {
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substring(hashIndex);
      path = path.substring(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substring(searchIndex);
      path = path.substring(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
  let { window: window2 = document.defaultView, v5Compat = false } = options;
  let globalHistory = window2.history;
  let action = "POP";
  let listener = null;
  let index = getIndex();
  if (index == null) {
    index = 0;
    globalHistory.replaceState({ ...globalHistory.state, idx: index }, "");
  }
  function getIndex() {
    let state = globalHistory.state || { idx: null };
    return state.idx;
  }
  function handlePop() {
    action = "POP";
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex;
    if (listener) {
      listener({ action, location: history.location, delta });
    }
  }
  function push(to, state) {
    action = "PUSH";
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index = getIndex() + 1;
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 1 });
    }
  }
  function replace2(to, state) {
    action = "REPLACE";
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index = getIndex();
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 0 });
    }
  }
  function createURL(to) {
    return createBrowserURLImpl(to);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref2(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
function createBrowserURLImpl(to, isAbsolute = false) {
  let base = "http://localhost";
  if (typeof window !== "undefined") {
    base = window.location.origin !== "null" ? window.location.origin : window.location.href;
  }
  invariant(base, "No window.location.(origin|href) available to create URL");
  let href2 = typeof to === "string" ? to : createPath(to);
  href2 = href2.replace(/ $/, "%20");
  if (!isAbsolute && href2.startsWith("//")) {
    href2 = base + href2;
  }
  return new URL(href2, base);
}
var _map;
_map = /* @__PURE__ */ new WeakMap();
function matchRoutes(routes, locationArg, basename = "/") {
  return matchRoutesImpl(routes, locationArg, basename, false);
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(
      branches[i],
      decoded,
      allowPartial
    );
  }
  return matches;
}
function convertRouteMatchToUiMatch(match, loaderData) {
  let { route, pathname, params } = match;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
  let flattenRoute = (route, index, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(
        meta.relativePath.startsWith(parentPath),
        `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
      );
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index) => {
    if (route.path === "" || !route.path?.includes("?")) {
      flattenRoute(route, index);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(
    ...restExploded.map(
      (subpath) => subpath === "" ? required : [required, subpath].join("/")
    )
  );
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map(
    (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
  );
}
function rankRouteBranches(branches) {
  branches.sort(
    (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(
      a.routesMeta.map((meta) => meta.childrenIndex),
      b.routesMeta.map((meta) => meta.childrenIndex)
    )
  );
}
var paramRe = /^:[\w-]+$/;
var dynamicSegmentValue = 3;
var indexRouteValue = 2;
var emptySegmentValue = 1;
var staticSegmentValue = 10;
var splatPenalty = -2;
var isSplat = (s) => s === "*";
function computeScore(path, index) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce(
    (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
    initialScore
  );
}
function compareIndexes(a, b) {
  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial = false) {
  let { routesMeta } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath(
      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
      remainingPathname
    );
    let route = meta.route;
    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match = matchPath(
        {
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        },
        remainingPathname
      );
    }
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(
        joinPaths([matchedPathname, match.pathnameBase])
      ),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = { path: pattern, caseSensitive: false, end: true };
  }
  let [matcher, compiledParams] = compilePath(
    pattern.path,
    pattern.caseSensitive,
    pattern.end
  );
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce(
    (memo2, { paramName, isOptional }, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index];
      if (isOptional && !value) {
        memo2[paramName] = void 0;
      } else {
        memo2[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo2;
    },
    {}
  );
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive = false, end = true) {
  warning(
    path === "*" || !path.endsWith("*") || path.endsWith("/*"),
    `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
  );
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
    /\/:([\w-]+)(\?)?/g,
    (_, paramName, isOptional) => {
      params.push({ paramName, isOptional: isOptional != null });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    }
  );
  if (path.endsWith("*")) {
    params.push({ paramName: "*" });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else {
  }
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(
      false,
      `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
    );
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname = "/") {
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
    path
  )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
}
function getPathContributingMatches(matches) {
  return matches.filter(
    (match, index) => index === 0 || match.route.path && match.route.path.length > 0
  );
}
function getResolveToMatches(matches) {
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches.map(
    (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
  );
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = { ...toArg };
    invariant(
      !to.pathname || !to.pathname.includes("?"),
      getInvalidPathError("?", "pathname", "search", to)
    );
    invariant(
      !to.pathname || !to.pathname.includes("#"),
      getInvalidPathError("#", "pathname", "hash", to)
    );
    invariant(
      !to.search || !to.search.includes("#"),
      getInvalidPathError("#", "search", "hash", to)
    );
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
var validMutationMethodsArr = [
  "POST",
  "PUT",
  "PATCH",
  "DELETE"
];
var validMutationMethods = new Set(
  validMutationMethodsArr
);
var validRequestMethodsArr = [
  "GET",
  ...validMutationMethodsArr
];
var validRequestMethods = new Set(validRequestMethodsArr);
var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
var DataRouterContext = React.createContext(null);
DataRouterContext.displayName = "DataRouter";
var DataRouterStateContext = React.createContext(null);
DataRouterStateContext.displayName = "DataRouterState";
var ViewTransitionContext = React.createContext({
  isTransitioning: false
});
ViewTransitionContext.displayName = "ViewTransition";
var FetchersContext = React.createContext(
  /* @__PURE__ */ new Map()
);
FetchersContext.displayName = "Fetchers";
var AwaitContext = React.createContext(null);
AwaitContext.displayName = "Await";
var NavigationContext = React.createContext(
  null
);
NavigationContext.displayName = "Navigation";
var LocationContext = React.createContext(
  null
);
LocationContext.displayName = "Location";
var RouteContext = React.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
RouteContext.displayName = "Route";
var RouteErrorContext = React.createContext(null);
RouteErrorContext.displayName = "RouteError";
var ENABLE_DEV_WARNINGS = true;
function useHref(to, { relative } = {}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useHref() may be used only in the context of a <Router> component.`
  );
  let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
  let { hash, pathname, search } = useResolvedPath(to, { relative });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({ pathname: joinedPathname, search, hash });
}
function useInRouterContext() {
  return React2.useContext(LocationContext) != null;
}
function useLocation() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useLocation() may be used only in the context of a <Router> component.`
  );
  return React2.useContext(LocationContext).location;
}
var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
function useIsomorphicLayoutEffect(cb) {
  let isStatic = React2.useContext(NavigationContext).static;
  if (!isStatic) {
    React2.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let { isDataRoute } = React2.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useNavigate() may be used only in the context of a <Router> component.`
  );
  let dataRouterContext = React2.useContext(DataRouterContext);
  let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
  let { matches } = React2.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  let activeRef = React2.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React2.useCallback(
    (to, options = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        options.relative === "path"
      );
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(
        path,
        options.state,
        options
      );
    },
    [
      basename,
      navigator2,
      routePathnamesJson,
      locationPathname,
      dataRouterContext
    ]
  );
  return navigate;
}
var OutletContext = React2.createContext(null);
function useParams() {
  let { matches } = React2.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, { relative } = {}) {
  let { matches } = React2.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  return React2.useMemo(
    () => resolveTo(
      to,
      JSON.parse(routePathnamesJson),
      locationPathname,
      relative === "path"
    ),
    [to, routePathnamesJson, locationPathname, relative]
  );
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useRoutes() may be used only in the context of a <Router> component.`
  );
  let { navigator: navigator2 } = React2.useContext(NavigationContext);
  let { matches: parentMatches } = React2.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  if (ENABLE_DEV_WARNINGS) {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(
      parentPathname,
      !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
      `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
    );
  }
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    invariant(
      parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
      `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
    );
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, { pathname: remainingPathname });
  if (ENABLE_DEV_WARNINGS) {
    warning(
      parentRoute || matches != null,
      `No routes matched location "${location.pathname}${location.search}${location.hash}" `
    );
    warning(
      matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
      `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
    );
  }
  let renderedMatches = _renderMatches(
    matches && matches.map(
      (match) => Object.assign({}, match, {
        params: Object.assign({}, parentParams, match.params),
        pathname: joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
        ]),
        pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
        ])
      })
    ),
    parentMatches,
    dataRouterState,
    future
  );
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ React2.createElement(
      LocationContext.Provider,
      {
        value: {
          location: {
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default",
            ...location
          },
          navigationType: "POP"
          /* Pop */
        }
      },
      renderedMatches
    );
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
  let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
  let devInfo = null;
  if (ENABLE_DEV_WARNINGS) {
    console.error(
      "Error handled by React Router default ErrorBoundary:",
      error
    );
    devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
}
var defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
var RenderErrorBoundary = class extends React2.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error(
      "React Router caught the following error during render",
      error,
      errorInfo
    );
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
      RouteErrorContext.Provider,
      {
        value: this.state.error,
        children: this.props.component
      }
    )) : this.props.children;
  }
};
function RenderedRoute({ routeContext, match, children }) {
  let dataRouterContext = React2.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
}
function _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {
  if (matches == null) {
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = dataRouterState?.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex(
      (m2) => m2.route.id && errors?.[m2.route.id] !== void 0
    );
    invariant(
      errorIndex >= 0,
      `Could not find a matching route for errors on route IDs: ${Object.keys(
        errors
      ).join(",")}`
    );
    renderedMatches = renderedMatches.slice(
      0,
      Math.min(renderedMatches.length, errorIndex + 1)
    );
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match = renderedMatches[i];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match.route.id) {
        let { loaderData, errors: errors2 } = dataRouterState;
        let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match, index) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match.route.id ? errors[match.route.id] : void 0;
      errorElement = match.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index === 0) {
          warningOnce(
            "route-fallback",
            false,
            "No `HydrateFallback` element provided to render during initial hydration"
          );
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match.route.Component) {
        children = /* @__PURE__ */ React2.createElement(match.route.Component, null);
      } else if (match.route.element) {
        children = match.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ React2.createElement(
        RenderedRoute,
        {
          match,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        }
      );
    };
    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(
      RenderErrorBoundary,
      {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: { outlet: null, matches: matches2, isDataRoute: true }
      }
    ) : getChildren();
  }, null);
}
function getDataRouterConsoleError(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError(hookName));
  return ctx;
}
function useDataRouterState(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError(hookName));
  return state;
}
function useRouteContext(hookName) {
  let route = React2.useContext(RouteContext);
  invariant(route, getDataRouterConsoleError(hookName));
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  invariant(
    thisRoute.route.id,
    `${hookName} can only be used on routes that contain a unique "id"`
  );
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(
    "useRouteId"
    /* UseRouteId */
  );
}
function useNavigation() {
  let state = useDataRouterState(
    "useNavigation"
    /* UseNavigation */
  );
  return state.navigation;
}
function useMatches() {
  let { matches, loaderData } = useDataRouterState(
    "useMatches"
    /* UseMatches */
  );
  return React2.useMemo(
    () => matches.map((m2) => convertRouteMatchToUiMatch(m2, loaderData)),
    [matches, loaderData]
  );
}
function useRouteError() {
  let error = React2.useContext(RouteErrorContext);
  let state = useDataRouterState(
    "useRouteError"
    /* UseRouteError */
  );
  let routeId = useCurrentRouteId(
    "useRouteError"
    /* UseRouteError */
  );
  if (error !== void 0) {
    return error;
  }
  return state.errors?.[routeId];
}
function useNavigateStable() {
  let { router } = useDataRouterContext(
    "useNavigate"
    /* UseNavigateStable */
  );
  let id2 = useCurrentRouteId(
    "useNavigate"
    /* UseNavigateStable */
  );
  let activeRef = React2.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React2.useCallback(
    async (to, options = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        await router.navigate(to, { fromRouteId: id2, ...options });
      }
    },
    [router, id2]
  );
  return navigate;
}
var alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
    warning(false, message);
  }
}
var MemoizedDataRoutes = React3.memo(DataRoutes);
function DataRoutes({
  routes,
  future,
  state
}) {
  return useRoutesImpl(routes, void 0, state, future);
}
function Navigate({
  to,
  replace: replace2,
  state,
  relative
}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    `<Navigate> may be used only in the context of a <Router> component.`
  );
  let { static: isStatic } = React3.useContext(NavigationContext);
  warning(
    !isStatic,
    `<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.`
  );
  let { matches } = React3.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(
    to,
    getResolveToMatches(matches),
    locationPathname,
    relative === "path"
  );
  let jsonPath = JSON.stringify(path);
  React3.useEffect(() => {
    navigate(JSON.parse(jsonPath), { replace: replace2, state, relative });
  }, [navigate, jsonPath, relative, replace2, state]);
  return null;
}
function Route(_props) {
  invariant(
    false,
    `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
  );
}
function Router({
  basename: basenameProp = "/",
  children = null,
  location: locationProp,
  navigationType = "POP",
  navigator: navigator2,
  static: staticProp = false
}) {
  invariant(
    !useInRouterContext(),
    `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
  );
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = React3.useMemo(
    () => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: {}
    }),
    [basename, navigator2, staticProp]
  );
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = React3.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  warning(
    locationContext != null,
    `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash}" because it does not start with the basename, so the <Router> won't render anything.`
  );
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
}
function Routes({
  children,
  location
}) {
  return useRoutes(createRoutesFromChildren(children), location);
}
function createRoutesFromChildren(children, parentPath = []) {
  let routes = [];
  React3.Children.forEach(children, (element, index) => {
    if (!React3.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index];
    if (element.type === React3.Fragment) {
      routes.push.apply(
        routes,
        createRoutesFromChildren(element.props.children, treePath)
      );
      return;
    }
    invariant(
      element.type === Route,
      `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
    );
    invariant(
      !element.props.index || !element.props.children,
      "An index route cannot have child routes."
    );
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      hydrateFallbackElement: element.props.hydrateFallbackElement,
      HydrateFallback: element.props.HydrateFallback,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(
        element.props.children,
        treePath
      );
    }
    routes.push(route);
  });
  return routes;
}
var defaultMethod = "get";
var defaultEncType = "application/x-www-form-urlencoded";
function isHtmlElement(object) {
  return object != null && typeof object.tagName === "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
var _formDataSupportsSubmitter = null;
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
var supportedFormEncTypes = /* @__PURE__ */ new Set([
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain"
]);
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    warning(
      false,
      `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
    );
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error(
        `Cannot submit a <button> or <input type="submit"> without a <form>`
      );
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let { name, type, value } = target;
      if (type === "image") {
        let prefix = name ? `${name}.` : "";
        formData.append(`${prefix}x`, "0");
        formData.append(`${prefix}y`, "0");
      } else if (name) {
        formData.append(name, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error(
      `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
    );
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return { action, method: method.toLowerCase(), encType, formData, body };
}
function invariant2(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache) {
    return routeModulesCache[route.id];
  }
  try {
    let routeModule = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      route.module
    );
    routeModulesCache[route.id] = routeModule;
    return routeModule;
  } catch (error) {
    console.error(
      `Error loading route module \`${route.module}\`, reloading page...`
    );
    console.error(error);
    if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
    import.meta.hot) {
      throw error;
    }
    window.location.reload();
    return new Promise(() => {
    });
  }
}
function isPageLinkDescriptor(object) {
  return object != null && typeof object.page === "string";
}
function isHtmlLinkDescriptor(object) {
  if (object == null) {
    return false;
  }
  if (object.href == null) {
    return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
  }
  return typeof object.rel === "string" && typeof object.href === "string";
}
async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
  let links = await Promise.all(
    matches.map(async (match) => {
      let route = manifest.routes[match.route.id];
      if (route) {
        let mod = await loadRouteModule(route, routeModules);
        return mod.links ? mod.links() : [];
      }
      return [];
    })
  );
  return dedupeLinkDescriptors(
    links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
      (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
    )
  );
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
  let isNew = (match, index) => {
    if (!currentMatches[index]) return true;
    return match.route.id !== currentMatches[index].route.id;
  };
  let matchPathChanged = (match, index) => {
    return (
      // param change, /users/123 -> /users/456
      currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path
      // e.g. /files/images/avatar.jpg -> files/finances.xls
      currentMatches[index].route.path?.endsWith("*") && currentMatches[index].params["*"] !== match.params["*"]
    );
  };
  if (mode === "assets") {
    return nextMatches.filter(
      (match, index) => isNew(match, index) || matchPathChanged(match, index)
    );
  }
  if (mode === "data") {
    return nextMatches.filter((match, index) => {
      let manifestRoute = manifest.routes[match.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return false;
      }
      if (isNew(match, index) || matchPathChanged(match, index)) {
        return true;
      }
      if (match.route.shouldRevalidate) {
        let routeChoice = match.route.shouldRevalidate({
          currentUrl: new URL(
            location.pathname + location.search + location.hash,
            window.origin
          ),
          currentParams: currentMatches[0]?.params || {},
          nextUrl: new URL(page, window.origin),
          nextParams: match.params,
          defaultShouldRevalidate: true
        });
        if (typeof routeChoice === "boolean") {
          return routeChoice;
        }
      }
      return true;
    });
  }
  return [];
}
function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
  return dedupeHrefs(
    matches.map((match) => {
      let route = manifest.routes[match.route.id];
      if (!route) return [];
      let hrefs = [route.module];
      if (route.clientActionModule) {
        hrefs = hrefs.concat(route.clientActionModule);
      }
      if (route.clientLoaderModule) {
        hrefs = hrefs.concat(route.clientLoaderModule);
      }
      if (includeHydrateFallback && route.hydrateFallbackModule) {
        hrefs = hrefs.concat(route.hydrateFallbackModule);
      }
      if (route.imports) {
        hrefs = hrefs.concat(route.imports);
      }
      return hrefs;
    }).flat(1)
  );
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function sortKeys(obj) {
  let sorted = {};
  let keys = Object.keys(obj).sort();
  for (let key of keys) {
    sorted[key] = obj[key];
  }
  return sorted;
}
function dedupeLinkDescriptors(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set();
  let preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
    if (alreadyModulePreload) {
      return deduped;
    }
    let key = JSON.stringify(sortKeys(descriptor));
    if (!set.has(key)) {
      set.add(key);
      deduped.push({ key, link: descriptor });
    }
    return deduped;
  }, []);
}
var objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
var SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
var NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([100, 101, 204, 205]);
function singleFetchUrl(reqUrl, basename) {
  let url = typeof reqUrl === "string" ? new URL(
    reqUrl,
    // This can be called during the SSR flow via PrefetchPageLinksImpl so
    // don't assume window is available
    typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
  ) : reqUrl;
  if (url.pathname === "/") {
    url.pathname = "_root.data";
  } else if (basename && stripBasename(url.pathname, basename) === "/") {
    url.pathname = `${basename.replace(/\/$/, "")}/_root.data`;
  } else {
    url.pathname = `${url.pathname.replace(/\/$/, "")}.data`;
  }
  return url;
}
function useDataRouterContext2() {
  let context = React9.useContext(DataRouterContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterContext.Provider> element"
  );
  return context;
}
function useDataRouterStateContext() {
  let context = React9.useContext(DataRouterStateContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterStateContext.Provider> element"
  );
  return context;
}
var FrameworkContext = React9.createContext(void 0);
FrameworkContext.displayName = "FrameworkContext";
function useFrameworkContext() {
  let context = React9.useContext(FrameworkContext);
  invariant2(
    context,
    "You must render this element inside a <HydratedRouter> element"
  );
  return context;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let frameworkContext = React9.useContext(FrameworkContext);
  let [maybePrefetch, setMaybePrefetch] = React9.useState(false);
  let [shouldPrefetch, setShouldPrefetch] = React9.useState(false);
  let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
  let ref = React9.useRef(null);
  React9.useEffect(() => {
    if (prefetch === "render") {
      setShouldPrefetch(true);
    }
    if (prefetch === "viewport") {
      let callback = (entries) => {
        entries.forEach((entry) => {
          setShouldPrefetch(entry.isIntersecting);
        });
      };
      let observer = new IntersectionObserver(callback, { threshold: 0.5 });
      if (ref.current) observer.observe(ref.current);
      return () => {
        observer.disconnect();
      };
    }
  }, [prefetch]);
  React9.useEffect(() => {
    if (maybePrefetch) {
      let id2 = setTimeout(() => {
        setShouldPrefetch(true);
      }, 100);
      return () => {
        clearTimeout(id2);
      };
    }
  }, [maybePrefetch]);
  let setIntent = () => {
    setMaybePrefetch(true);
  };
  let cancelIntent = () => {
    setMaybePrefetch(false);
    setShouldPrefetch(false);
  };
  if (!frameworkContext) {
    return [false, ref, {}];
  }
  if (prefetch !== "intent") {
    return [shouldPrefetch, ref, {}];
  }
  return [
    shouldPrefetch,
    ref,
    {
      onFocus: composeEventHandlers2(onFocus, setIntent),
      onBlur: composeEventHandlers2(onBlur, cancelIntent),
      onMouseEnter: composeEventHandlers2(onMouseEnter, setIntent),
      onMouseLeave: composeEventHandlers2(onMouseLeave, cancelIntent),
      onTouchStart: composeEventHandlers2(onTouchStart, setIntent)
    }
  ];
}
function composeEventHandlers2(theirHandler, ourHandler) {
  return (event) => {
    theirHandler && theirHandler(event);
    if (!event.defaultPrevented) {
      ourHandler(event);
    }
  };
}
function PrefetchPageLinks({
  page,
  ...dataLinkProps
}) {
  let { router } = useDataRouterContext2();
  let matches = React9.useMemo(
    () => matchRoutes(router.routes, page, router.basename),
    [router.routes, page, router.basename]
  );
  if (!matches) {
    return null;
  }
  return /* @__PURE__ */ React9.createElement(PrefetchPageLinksImpl, { page, matches, ...dataLinkProps });
}
function useKeyedPrefetchLinks(matches) {
  let { manifest, routeModules } = useFrameworkContext();
  let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React9.useState([]);
  React9.useEffect(() => {
    let interrupted = false;
    void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
      (links) => {
        if (!interrupted) {
          setKeyedPrefetchLinks(links);
        }
      }
    );
    return () => {
      interrupted = true;
    };
  }, [matches, manifest, routeModules]);
  return keyedPrefetchLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location = useLocation();
  let { manifest, routeModules } = useFrameworkContext();
  let { basename } = useDataRouterContext2();
  let { loaderData, matches } = useDataRouterStateContext();
  let newMatchesForData = React9.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location,
      "data"
    ),
    [page, nextMatches, matches, manifest, location]
  );
  let newMatchesForAssets = React9.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location,
      "assets"
    ),
    [page, nextMatches, matches, manifest, location]
  );
  let dataHrefs = React9.useMemo(() => {
    if (page === location.pathname + location.search + location.hash) {
      return [];
    }
    let routesParams = /* @__PURE__ */ new Set();
    let foundOptOutRoute = false;
    nextMatches.forEach((m2) => {
      let manifestRoute = manifest.routes[m2.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return;
      }
      if (!newMatchesForData.some((m22) => m22.route.id === m2.route.id) && m2.route.id in loaderData && routeModules[m2.route.id]?.shouldRevalidate) {
        foundOptOutRoute = true;
      } else if (manifestRoute.hasClientLoader) {
        foundOptOutRoute = true;
      } else {
        routesParams.add(m2.route.id);
      }
    });
    if (routesParams.size === 0) {
      return [];
    }
    let url = singleFetchUrl(page, basename);
    if (foundOptOutRoute && routesParams.size > 0) {
      url.searchParams.set(
        "_routes",
        nextMatches.filter((m2) => routesParams.has(m2.route.id)).map((m2) => m2.route.id).join(",")
      );
    }
    return [url.pathname + url.search];
  }, [
    basename,
    loaderData,
    location,
    manifest,
    newMatchesForData,
    nextMatches,
    page,
    routeModules
  ]);
  let moduleHrefs = React9.useMemo(
    () => getModuleLinkHrefs(newMatchesForAssets, manifest),
    [newMatchesForAssets, manifest]
  );
  let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, dataHrefs.map((href2) => /* @__PURE__ */ React9.createElement("link", { key: href2, rel: "prefetch", as: "fetch", href: href2, ...linkProps })), moduleHrefs.map((href2) => /* @__PURE__ */ React9.createElement("link", { key: href2, rel: "modulepreload", href: href2, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
    // these don't spread `linkProps` because they are full link descriptors
    // already with their own props
    /* @__PURE__ */ React9.createElement("link", { key, ...link })
  )));
}
function mergeRefs(...refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
try {
  if (isBrowser) {
    window.__reactRouterVersion = "7.6.3";
  }
} catch (e) {
}
function HashRouter({ basename, children, window: window2 }) {
  let historyRef = React10.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({ window: window2, v5Compat: true });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React10.useState({
    action: history.action,
    location: history.location
  });
  let setState = React10.useCallback(
    (newState) => {
      React10.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React10.createElement(
    Router,
    {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
function HistoryRouter({
  basename,
  children,
  history
}) {
  let [state, setStateImpl] = React10.useState({
    action: history.action,
    location: history.location
  });
  let setState = React10.useCallback(
    (newState) => {
      React10.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React10.createElement(
    Router,
    {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
HistoryRouter.displayName = "unstable_HistoryRouter";
var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
var Link2 = React10.forwardRef(
  function LinkWithRef({
    onClick,
    discover = "render",
    prefetch = "none",
    relative,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to,
    preventScrollReset,
    viewTransition,
    ...rest
  }, forwardedRef) {
    let { basename } = React10.useContext(NavigationContext);
    let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && isAbsolute) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e) {
          warning(
            false,
            `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
          );
        }
      }
    }
    let href2 = useHref(to, { relative });
    let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
      prefetch,
      rest
    );
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative,
      viewTransition
    });
    function handleClick(event) {
      if (onClick) onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    let link = (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React10.createElement(
        "a",
        {
          ...rest,
          ...prefetchHandlers,
          href: absoluteHref || href2,
          onClick: isExternal || reloadDocument ? onClick : handleClick,
          ref: mergeRefs(forwardedRef, prefetchRef),
          target,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      )
    );
    return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href2 })) : link;
  }
);
Link2.displayName = "Link";
var NavLink = React10.forwardRef(
  function NavLinkWithRef({
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to,
    viewTransition,
    children,
    ...rest
  }, ref) {
    let path = useResolvedPath(to, { relative: rest.relative });
    let location = useLocation();
    let routerState = React10.useContext(DataRouterStateContext);
    let { navigator: navigator2, basename } = React10.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path) && viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [
        classNameProp,
        isActive ? "active" : null,
        isPending ? "pending" : null,
        isTransitioning ? "transitioning" : null
      ].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ React10.createElement(
      Link2,
      {
        ...rest,
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to,
        viewTransition
      },
      typeof children === "function" ? children(renderProps) : children
    );
  }
);
NavLink.displayName = "NavLink";
var Form = React10.forwardRef(
  ({
    discover = "render",
    fetcherKey,
    navigate,
    reloadDocument,
    replace: replace2,
    state,
    method = defaultMethod,
    action,
    onSubmit,
    relative,
    preventScrollReset,
    viewTransition,
    ...props
  }, forwardedRef) => {
    let submit = useSubmit();
    let formAction = useFormAction(action, { relative });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented) return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = submitter?.getAttribute("formmethod") || method;
      submit(submitter || event.currentTarget, {
        fetcherKey,
        method: submitMethod,
        navigate,
        replace: replace2,
        state,
        relative,
        preventScrollReset,
        viewTransition
      });
    };
    return /* @__PURE__ */ React10.createElement(
      "form",
      {
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler,
        ...props,
        "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
      }
    );
  }
);
Form.displayName = "Form";
function ScrollRestoration({
  getKey,
  storageKey,
  ...props
}) {
  let remixContext = React10.useContext(FrameworkContext);
  let { basename } = React10.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  useScrollRestoration({ getKey, storageKey });
  let ssrKey = React10.useMemo(
    () => {
      if (!remixContext || !getKey) return null;
      let userKey = getScrollRestorationKey(
        location,
        matches,
        basename,
        getKey
      );
      return userKey !== location.key ? userKey : null;
    },
    // Nah, we only need this the first time for the SSR render
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  if (!remixContext || remixContext.isSpaMode) {
    return null;
  }
  let restoreScroll = ((storageKey2, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key = Math.random().toString(32).slice(2);
      window.history.replaceState({ key }, "");
    }
    try {
      let positions = JSON.parse(sessionStorage.getItem(storageKey2) || "{}");
      let storedY = positions[restoreKey || window.history.state.key];
      if (typeof storedY === "number") {
        window.scrollTo(0, storedY);
      }
    } catch (error) {
      console.error(error);
      sessionStorage.removeItem(storageKey2);
    }
  }).toString();
  return /* @__PURE__ */ React10.createElement(
    "script",
    {
      ...props,
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: {
        __html: `(${restoreScroll})(${JSON.stringify(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY
        )}, ${JSON.stringify(ssrKey)})`
      }
    }
  );
}
ScrollRestoration.displayName = "ScrollRestoration";
function getDataRouterConsoleError2(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext3(hookName) {
  let ctx = React10.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError2(hookName));
  return ctx;
}
function useDataRouterState2(hookName) {
  let state = React10.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError2(hookName));
  return state;
}
function useLinkClickHandler(to, {
  target,
  replace: replaceProp,
  state,
  preventScrollReset,
  relative,
  viewTransition
} = {}) {
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to, { relative });
  return React10.useCallback(
    (event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    },
    [
      location,
      navigate,
      path,
      replaceProp,
      state,
      target,
      to,
      preventScrollReset,
      relative,
      viewTransition
    ]
  );
}
var fetcherId = 0;
var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
function useSubmit() {
  let { router } = useDataRouterContext3(
    "useSubmit"
    /* UseSubmit */
  );
  let { basename } = React10.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return React10.useCallback(
    async (target, options = {}) => {
      let { action, method, encType, formData, body } = getFormSubmissionInfo(
        target,
        basename
      );
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        await router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          flushSync: options.flushSync
        });
      } else {
        await router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          flushSync: options.flushSync,
          viewTransition: options.viewTransition
        });
      }
    },
    [router, basename, currentRouteId]
  );
}
function useFormAction(action, { relative } = {}) {
  let { basename } = React10.useContext(NavigationContext);
  let routeContext = React10.useContext(RouteContext);
  invariant(routeContext, "useFormAction must be used inside a RouteContext");
  let [match] = routeContext.matches.slice(-1);
  let path = { ...useResolvedPath(action ? action : ".", { relative }) };
  let location = useLocation();
  if (action == null) {
    path.search = location.search;
    let params = new URLSearchParams(path.search);
    let indexValues = params.getAll("index");
    let hasNakedIndexParam = indexValues.some((v) => v === "");
    if (hasNakedIndexParam) {
      params.delete("index");
      indexValues.filter((v) => v).forEach((v) => params.append("index", v));
      let qs = params.toString();
      path.search = qs ? `?${qs}` : "";
    }
  }
  if ((!action || action === ".") && match.route.index) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
var savedScrollPositions = {};
function getScrollRestorationKey(location, matches, basename, getKey) {
  let key = null;
  if (getKey) {
    if (basename !== "/") {
      key = getKey(
        {
          ...location,
          pathname: stripBasename(location.pathname, basename) || location.pathname
        },
        matches
      );
    } else {
      key = getKey(location, matches);
    }
  }
  if (key == null) {
    key = location.key;
  }
  return key;
}
function useScrollRestoration({
  getKey,
  storageKey
} = {}) {
  let { router } = useDataRouterContext3(
    "useScrollRestoration"
    /* UseScrollRestoration */
  );
  let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
    "useScrollRestoration"
    /* UseScrollRestoration */
  );
  let { basename } = React10.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  React10.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(
    React10.useCallback(() => {
      if (navigation.state === "idle") {
        let key = getScrollRestorationKey(location, matches, basename, getKey);
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY,
          JSON.stringify(savedScrollPositions)
        );
      } catch (error) {
        warning(
          false,
          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`
        );
      }
      window.history.scrollRestoration = "auto";
    }, [navigation.state, getKey, basename, location, matches, storageKey])
  );
  if (typeof document !== "undefined") {
    React10.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY
        );
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e) {
      }
    }, [storageKey]);
    React10.useLayoutEffect(() => {
      let disableScrollRestoration = router?.enableScrollRestoration(
        savedScrollPositions,
        () => window.scrollY,
        getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename, getKey) : void 0
      );
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, basename, getKey]);
    React10.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(
          decodeURIComponent(location.hash.slice(1))
        );
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
}
function usePageHide(callback, options) {
  let { capture } = options || {};
  React10.useEffect(() => {
    let opts = capture != null ? { capture } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function useViewTransitionState(to, opts = {}) {
  let vtContext = React10.useContext(ViewTransitionContext);
  invariant(
    vtContext != null,
    "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
  );
  let { basename } = useDataRouterContext3(
    "useViewTransitionState"
    /* useViewTransitionState */
  );
  let path = useResolvedPath(to, { relative: opts.relative });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
var SERVER_NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([
  ...NO_BODY_STATUS_CODES,
  304
]);

// src/providers/TRPCProvider.tsx
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function TRPCProvider({ children }) {
  const [queryClient] = (0, import_react.useState)(
    () => new QueryClient({
      defaultOptions: {
        queries: {
          staleTime: 5 * 60 * 1e3,
          // 5 minutes
          refetchOnWindowFocus: false
        }
      }
    })
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(trpc.Provider, { client: trpcClient, queryClient, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(QueryClientProvider, { client: queryClient, children }) });
}

// src/App.tsx
var import_react36 = __toESM(require_react(), 1);

// src/pages/Test.tsx
var import_react10 = __toESM(require_react(), 1);

// src/components/forms/UniversalFormDemo.tsx
var import_react4 = __toESM(require_react(), 1);

// src/components/forms/UniversalInputForm.tsx
var import_react3 = __toESM(require_react(), 1);

// src/components/ui/dialog.tsx
var React14 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var Dialog = Root;
var DialogTrigger = Trigger;
var DialogPortal = Portal2;
var DialogOverlay = React14.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  Overlay,
  {
    ref,
    className: cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props
  }
));
DialogOverlay.displayName = Overlay.displayName;
var DialogContent = React14.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(DialogPortal, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DialogOverlay, {}),
  /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    Content,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      ),
      ...props,
      children: [
        children,
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground", children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(X, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
DialogContent.displayName = Content.displayName;
var DialogHeader = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    ),
    ...props
  }
);
DialogHeader.displayName = "DialogHeader";
var DialogFooter = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
DialogFooter.displayName = "DialogFooter";
var DialogTitle = React14.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  Title,
  {
    ref,
    className: cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    ),
    ...props
  }
));
DialogTitle.displayName = Title.displayName;
var DialogDescription = React14.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  Description,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
DialogDescription.displayName = Description.displayName;

// src/components/ui/label.tsx
var React16 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-label/dist/index.mjs
var React15 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var NAME = "Label";
var Label = React15.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    Primitive.label,
    {
      ...props,
      ref: forwardedRef,
      onMouseDown: (event) => {
        const target = event.target;
        if (target.closest("button, input, select, textarea")) return;
        props.onMouseDown?.(event);
        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
      }
    }
  );
});
Label.displayName = NAME;
var Root3 = Label;

// src/components/ui/label.tsx
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);
var Label2 = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
  Root3,
  {
    ref,
    className: cn(labelVariants(), className),
    ...props
  }
));
Label2.displayName = Root3.displayName;

// src/components/ui/textarea.tsx
var React17 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var Textarea = React17.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "textarea",
    {
      className: cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      ),
      ref,
      ...props
    }
  );
});
Textarea.displayName = "Textarea";

// ../node_modules/react-day-picker/dist/index.esm.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());

// ../node_modules/date-fns/addWeeks.mjs
function addWeeks(date, amount) {
  const days = amount * 7;
  return addDays(date, days);
}

// ../node_modules/date-fns/addYears.mjs
function addYears(date, amount) {
  return addMonths(date, amount * 12);
}

// ../node_modules/date-fns/max.mjs
function max(dates) {
  let result;
  dates.forEach(function(dirtyDate) {
    const currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// ../node_modules/date-fns/min.mjs
function min(dates) {
  let result;
  dates.forEach((dirtyDate) => {
    const date = toDate(dirtyDate);
    if (!result || result > date || isNaN(+date)) {
      result = date;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// ../node_modules/date-fns/differenceInCalendarWeeks.mjs
function differenceInCalendarWeeks(dateLeft, dateRight, options) {
  const startOfWeekLeft = startOfWeek(dateLeft, options);
  const startOfWeekRight = startOfWeek(dateRight, options);
  const timestampLeft = +startOfWeekLeft - getTimezoneOffsetInMilliseconds(startOfWeekLeft);
  const timestampRight = +startOfWeekRight - getTimezoneOffsetInMilliseconds(startOfWeekRight);
  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);
}

// ../node_modules/date-fns/endOfISOWeek.mjs
function endOfISOWeek(date) {
  return endOfWeek(date, { weekStartsOn: 1 });
}

// ../node_modules/date-fns/getDaysInMonth.mjs
function getDaysInMonth(date) {
  const _date = toDate(date);
  const year = _date.getFullYear();
  const monthIndex = _date.getMonth();
  const lastDayOfMonth2 = constructFrom(date, 0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// ../node_modules/date-fns/getUnixTime.mjs
function getUnixTime(date) {
  return Math.trunc(+toDate(date) / 1e3);
}

// ../node_modules/date-fns/lastDayOfMonth.mjs
function lastDayOfMonth(date) {
  const _date = toDate(date);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// ../node_modules/date-fns/getWeeksInMonth.mjs
function getWeeksInMonth(date, options) {
  return differenceInCalendarWeeks(
    lastDayOfMonth(date),
    startOfMonth(date),
    options
  ) + 1;
}

// ../node_modules/date-fns/isAfter.mjs
function isAfter(date, dateToCompare) {
  const _date = toDate(date);
  const _dateToCompare = toDate(dateToCompare);
  return _date.getTime() > _dateToCompare.getTime();
}

// ../node_modules/date-fns/isBefore.mjs
function isBefore(date, dateToCompare) {
  const _date = toDate(date);
  const _dateToCompare = toDate(dateToCompare);
  return +_date < +_dateToCompare;
}

// ../node_modules/date-fns/isSameYear.mjs
function isSameYear(dateLeft, dateRight) {
  const _dateLeft = toDate(dateLeft);
  const _dateRight = toDate(dateRight);
  return _dateLeft.getFullYear() === _dateRight.getFullYear();
}

// ../node_modules/date-fns/subDays.mjs
function subDays(date, amount) {
  return addDays(date, -amount);
}

// ../node_modules/date-fns/setMonth.mjs
function setMonth(date, month) {
  const _date = toDate(date);
  const year = _date.getFullYear();
  const day = _date.getDate();
  const dateWithDesiredMonth = constructFrom(date, 0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  const daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  _date.setMonth(month, Math.min(day, daysInMonth));
  return _date;
}

// ../node_modules/date-fns/setYear.mjs
function setYear(date, year) {
  const _date = toDate(date);
  if (isNaN(+_date)) {
    return constructFrom(date, NaN);
  }
  _date.setFullYear(year);
  return _date;
}

// ../node_modules/react-day-picker/dist/index.esm.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2)) t2[p2] = s[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t2 = {};
  for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
    t2[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t2[p2[i]] = s[p2[i]];
    }
  return t2;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function isDayPickerMultiple(props) {
  return props.mode === "multiple";
}
function isDayPickerRange(props) {
  return props.mode === "range";
}
function isDayPickerSingle(props) {
  return props.mode === "single";
}
var defaultClassNames = {
  root: "rdp",
  multiple_months: "rdp-multiple_months",
  with_weeknumber: "rdp-with_weeknumber",
  vhidden: "rdp-vhidden",
  button_reset: "rdp-button_reset",
  button: "rdp-button",
  caption: "rdp-caption",
  caption_start: "rdp-caption_start",
  caption_end: "rdp-caption_end",
  caption_between: "rdp-caption_between",
  caption_label: "rdp-caption_label",
  caption_dropdowns: "rdp-caption_dropdowns",
  dropdown: "rdp-dropdown",
  dropdown_month: "rdp-dropdown_month",
  dropdown_year: "rdp-dropdown_year",
  dropdown_icon: "rdp-dropdown_icon",
  months: "rdp-months",
  month: "rdp-month",
  table: "rdp-table",
  tbody: "rdp-tbody",
  tfoot: "rdp-tfoot",
  head: "rdp-head",
  head_row: "rdp-head_row",
  head_cell: "rdp-head_cell",
  nav: "rdp-nav",
  nav_button: "rdp-nav_button",
  nav_button_previous: "rdp-nav_button_previous",
  nav_button_next: "rdp-nav_button_next",
  nav_icon: "rdp-nav_icon",
  row: "rdp-row",
  weeknumber: "rdp-weeknumber",
  cell: "rdp-cell",
  day: "rdp-day",
  day_today: "rdp-day_today",
  day_outside: "rdp-day_outside",
  day_selected: "rdp-day_selected",
  day_disabled: "rdp-day_disabled",
  day_hidden: "rdp-day_hidden",
  day_range_start: "rdp-day_range_start",
  day_range_end: "rdp-day_range_end",
  day_range_middle: "rdp-day_range_middle"
};
function formatCaption(month, options) {
  return format(month, "LLLL y", options);
}
function formatDay(day, options) {
  return format(day, "d", options);
}
function formatMonthCaption(month, options) {
  return format(month, "LLLL", options);
}
function formatWeekNumber(weekNumber) {
  return "".concat(weekNumber);
}
function formatWeekdayName(weekday, options) {
  return format(weekday, "cccccc", options);
}
function formatYearCaption(year, options) {
  return format(year, "yyyy", options);
}
var formatters = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  formatCaption,
  formatDay,
  formatMonthCaption,
  formatWeekNumber,
  formatWeekdayName,
  formatYearCaption
});
var labelDay = function(day, activeModifiers, options) {
  return format(day, "do MMMM (EEEE)", options);
};
var labelMonthDropdown = function() {
  return "Month: ";
};
var labelNext = function() {
  return "Go to next month";
};
var labelPrevious = function() {
  return "Go to previous month";
};
var labelWeekday = function(day, options) {
  return format(day, "cccc", options);
};
var labelWeekNumber = function(n) {
  return "Week n. ".concat(n);
};
var labelYearDropdown = function() {
  return "Year: ";
};
var labels = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  labelDay,
  labelMonthDropdown,
  labelNext,
  labelPrevious,
  labelWeekNumber,
  labelWeekday,
  labelYearDropdown
});
function getDefaultContextValues() {
  var captionLayout = "buttons";
  var classNames = defaultClassNames;
  var locale = enUS;
  var modifiersClassNames = {};
  var modifiers = {};
  var numberOfMonths = 1;
  var styles = {};
  var today = /* @__PURE__ */ new Date();
  return {
    captionLayout,
    classNames,
    formatters,
    labels,
    locale,
    modifiersClassNames,
    modifiers,
    numberOfMonths,
    styles,
    today,
    mode: "default"
  };
}
function parseFromToProps(props) {
  var fromYear = props.fromYear, toYear = props.toYear, fromMonth = props.fromMonth, toMonth = props.toMonth;
  var fromDate = props.fromDate, toDate2 = props.toDate;
  if (fromMonth) {
    fromDate = startOfMonth(fromMonth);
  } else if (fromYear) {
    fromDate = new Date(fromYear, 0, 1);
  }
  if (toMonth) {
    toDate2 = endOfMonth(toMonth);
  } else if (toYear) {
    toDate2 = new Date(toYear, 11, 31);
  }
  return {
    fromDate: fromDate ? startOfDay(fromDate) : void 0,
    toDate: toDate2 ? startOfDay(toDate2) : void 0
  };
}
var DayPickerContext = (0, import_react2.createContext)(void 0);
function DayPickerProvider(props) {
  var _a;
  var initialProps = props.initialProps;
  var defaultContextValues = getDefaultContextValues();
  var _b = parseFromToProps(initialProps), fromDate = _b.fromDate, toDate2 = _b.toDate;
  var captionLayout = (_a = initialProps.captionLayout) !== null && _a !== void 0 ? _a : defaultContextValues.captionLayout;
  if (captionLayout !== "buttons" && (!fromDate || !toDate2)) {
    captionLayout = "buttons";
  }
  var onSelect;
  if (isDayPickerSingle(initialProps) || isDayPickerMultiple(initialProps) || isDayPickerRange(initialProps)) {
    onSelect = initialProps.onSelect;
  }
  var value = __assign(__assign(__assign({}, defaultContextValues), initialProps), { captionLayout, classNames: __assign(__assign({}, defaultContextValues.classNames), initialProps.classNames), components: __assign({}, initialProps.components), formatters: __assign(__assign({}, defaultContextValues.formatters), initialProps.formatters), fromDate, labels: __assign(__assign({}, defaultContextValues.labels), initialProps.labels), mode: initialProps.mode || defaultContextValues.mode, modifiers: __assign(__assign({}, defaultContextValues.modifiers), initialProps.modifiers), modifiersClassNames: __assign(__assign({}, defaultContextValues.modifiersClassNames), initialProps.modifiersClassNames), onSelect, styles: __assign(__assign({}, defaultContextValues.styles), initialProps.styles), toDate: toDate2 });
  return (0, import_jsx_runtime6.jsx)(DayPickerContext.Provider, { value, children: props.children });
}
function useDayPicker() {
  var context = (0, import_react2.useContext)(DayPickerContext);
  if (!context) {
    throw new Error("useDayPicker must be used within a DayPickerProvider.");
  }
  return context;
}
function CaptionLabel(props) {
  var _a = useDayPicker(), locale = _a.locale, classNames = _a.classNames, styles = _a.styles, formatCaption2 = _a.formatters.formatCaption;
  return (0, import_jsx_runtime6.jsx)("div", { className: classNames.caption_label, style: styles.caption_label, "aria-live": "polite", role: "presentation", id: props.id, children: formatCaption2(props.displayMonth, { locale }) });
}
function IconDropdown(props) {
  return (0, import_jsx_runtime6.jsx)("svg", __assign({ width: "8px", height: "8px", viewBox: "0 0 120 120", "data-testid": "iconDropdown" }, props, { children: (0, import_jsx_runtime6.jsx)("path", { d: "M4.22182541,48.2218254 C8.44222828,44.0014225 15.2388494,43.9273804 19.5496459,47.9996989 L19.7781746,48.2218254 L60,88.443 L100.221825,48.2218254 C104.442228,44.0014225 111.238849,43.9273804 115.549646,47.9996989 L115.778175,48.2218254 C119.998577,52.4422283 120.07262,59.2388494 116.000301,63.5496459 L115.778175,63.7781746 L67.7781746,111.778175 C63.5577717,115.998577 56.7611506,116.07262 52.4503541,112.000301 L52.2218254,111.778175 L4.22182541,63.7781746 C-0.0739418023,59.4824074 -0.0739418023,52.5175926 4.22182541,48.2218254 Z", fill: "currentColor", fillRule: "nonzero" }) }));
}
function Dropdown(props) {
  var _a, _b;
  var onChange = props.onChange, value = props.value, children = props.children, caption = props.caption, className = props.className, style = props.style;
  var dayPicker = useDayPicker();
  var IconDropdownComponent = (_b = (_a = dayPicker.components) === null || _a === void 0 ? void 0 : _a.IconDropdown) !== null && _b !== void 0 ? _b : IconDropdown;
  return (0, import_jsx_runtime6.jsxs)("div", { className, style, children: [(0, import_jsx_runtime6.jsx)("span", { className: dayPicker.classNames.vhidden, children: props["aria-label"] }), (0, import_jsx_runtime6.jsx)("select", { name: props.name, "aria-label": props["aria-label"], className: dayPicker.classNames.dropdown, style: dayPicker.styles.dropdown, value, onChange, children }), (0, import_jsx_runtime6.jsxs)("div", { className: dayPicker.classNames.caption_label, style: dayPicker.styles.caption_label, "aria-hidden": "true", children: [caption, (0, import_jsx_runtime6.jsx)(IconDropdownComponent, { className: dayPicker.classNames.dropdown_icon, style: dayPicker.styles.dropdown_icon })] })] });
}
function MonthsDropdown(props) {
  var _a;
  var _b = useDayPicker(), fromDate = _b.fromDate, toDate2 = _b.toDate, styles = _b.styles, locale = _b.locale, formatMonthCaption2 = _b.formatters.formatMonthCaption, classNames = _b.classNames, components = _b.components, labelMonthDropdown2 = _b.labels.labelMonthDropdown;
  if (!fromDate)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  if (!toDate2)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  var dropdownMonths = [];
  if (isSameYear(fromDate, toDate2)) {
    var date = startOfMonth(fromDate);
    for (var month = fromDate.getMonth(); month <= toDate2.getMonth(); month++) {
      dropdownMonths.push(setMonth(date, month));
    }
  } else {
    var date = startOfMonth(/* @__PURE__ */ new Date());
    for (var month = 0; month <= 11; month++) {
      dropdownMonths.push(setMonth(date, month));
    }
  }
  var handleChange = function(e) {
    var selectedMonth = Number(e.target.value);
    var newMonth = setMonth(startOfMonth(props.displayMonth), selectedMonth);
    props.onChange(newMonth);
  };
  var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown;
  return (0, import_jsx_runtime6.jsx)(DropdownComponent, { name: "months", "aria-label": labelMonthDropdown2(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: props.displayMonth.getMonth(), caption: formatMonthCaption2(props.displayMonth, { locale }), children: dropdownMonths.map(function(m2) {
    return (0, import_jsx_runtime6.jsx)("option", { value: m2.getMonth(), children: formatMonthCaption2(m2, { locale }) }, m2.getMonth());
  }) });
}
function YearsDropdown(props) {
  var _a;
  var displayMonth = props.displayMonth;
  var _b = useDayPicker(), fromDate = _b.fromDate, toDate2 = _b.toDate, locale = _b.locale, styles = _b.styles, classNames = _b.classNames, components = _b.components, formatYearCaption2 = _b.formatters.formatYearCaption, labelYearDropdown2 = _b.labels.labelYearDropdown;
  var years = [];
  if (!fromDate)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  if (!toDate2)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  var fromYear = fromDate.getFullYear();
  var toYear = toDate2.getFullYear();
  for (var year = fromYear; year <= toYear; year++) {
    years.push(setYear(startOfYear(/* @__PURE__ */ new Date()), year));
  }
  var handleChange = function(e) {
    var newMonth = setYear(startOfMonth(displayMonth), Number(e.target.value));
    props.onChange(newMonth);
  };
  var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown;
  return (0, import_jsx_runtime6.jsx)(DropdownComponent, { name: "years", "aria-label": labelYearDropdown2(), className: classNames.dropdown_year, style: styles.dropdown_year, onChange: handleChange, value: displayMonth.getFullYear(), caption: formatYearCaption2(displayMonth, { locale }), children: years.map(function(year2) {
    return (0, import_jsx_runtime6.jsx)("option", { value: year2.getFullYear(), children: formatYearCaption2(year2, { locale }) }, year2.getFullYear());
  }) });
}
function useControlledValue(defaultValue, controlledValue) {
  var _a = (0, import_react2.useState)(defaultValue), uncontrolledValue = _a[0], setValue = _a[1];
  var value = controlledValue === void 0 ? uncontrolledValue : controlledValue;
  return [value, setValue];
}
function getInitialMonth(context) {
  var month = context.month, defaultMonth = context.defaultMonth, today = context.today;
  var initialMonth = month || defaultMonth || today || /* @__PURE__ */ new Date();
  var toDate2 = context.toDate, fromDate = context.fromDate, _a = context.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
  if (toDate2 && differenceInCalendarMonths(toDate2, initialMonth) < 0) {
    var offset = -1 * (numberOfMonths - 1);
    initialMonth = addMonths(toDate2, offset);
  }
  if (fromDate && differenceInCalendarMonths(initialMonth, fromDate) < 0) {
    initialMonth = fromDate;
  }
  return startOfMonth(initialMonth);
}
function useNavigationState() {
  var context = useDayPicker();
  var initialMonth = getInitialMonth(context);
  var _a = useControlledValue(initialMonth, context.month), month = _a[0], setMonth2 = _a[1];
  var goToMonth = function(date) {
    var _a2;
    if (context.disableNavigation)
      return;
    var month2 = startOfMonth(date);
    setMonth2(month2);
    (_a2 = context.onMonthChange) === null || _a2 === void 0 ? void 0 : _a2.call(context, month2);
  };
  return [month, goToMonth];
}
function getDisplayMonths(month, _a) {
  var reverseMonths = _a.reverseMonths, numberOfMonths = _a.numberOfMonths;
  var start = startOfMonth(month);
  var end = startOfMonth(addMonths(start, numberOfMonths));
  var monthsDiff = differenceInCalendarMonths(end, start);
  var months = [];
  for (var i = 0; i < monthsDiff; i++) {
    var nextMonth = addMonths(start, i);
    months.push(nextMonth);
  }
  if (reverseMonths)
    months = months.reverse();
  return months;
}
function getNextMonth(startingMonth, options) {
  if (options.disableNavigation) {
    return void 0;
  }
  var toDate2 = options.toDate, pagedNavigation = options.pagedNavigation, _a = options.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
  var offset = pagedNavigation ? numberOfMonths : 1;
  var month = startOfMonth(startingMonth);
  if (!toDate2) {
    return addMonths(month, offset);
  }
  var monthsDiff = differenceInCalendarMonths(toDate2, startingMonth);
  if (monthsDiff < numberOfMonths) {
    return void 0;
  }
  return addMonths(month, offset);
}
function getPreviousMonth(startingMonth, options) {
  if (options.disableNavigation) {
    return void 0;
  }
  var fromDate = options.fromDate, pagedNavigation = options.pagedNavigation, _a = options.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
  var offset = pagedNavigation ? numberOfMonths : 1;
  var month = startOfMonth(startingMonth);
  if (!fromDate) {
    return addMonths(month, -offset);
  }
  var monthsDiff = differenceInCalendarMonths(month, fromDate);
  if (monthsDiff <= 0) {
    return void 0;
  }
  return addMonths(month, -offset);
}
var NavigationContext2 = (0, import_react2.createContext)(void 0);
function NavigationProvider(props) {
  var dayPicker = useDayPicker();
  var _a = useNavigationState(), currentMonth = _a[0], goToMonth = _a[1];
  var displayMonths = getDisplayMonths(currentMonth, dayPicker);
  var nextMonth = getNextMonth(currentMonth, dayPicker);
  var previousMonth = getPreviousMonth(currentMonth, dayPicker);
  var isDateDisplayed = function(date) {
    return displayMonths.some(function(displayMonth) {
      return isSameMonth(date, displayMonth);
    });
  };
  var goToDate = function(date, refDate) {
    if (isDateDisplayed(date)) {
      return;
    }
    if (refDate && isBefore(date, refDate)) {
      goToMonth(addMonths(date, 1 + dayPicker.numberOfMonths * -1));
    } else {
      goToMonth(date);
    }
  };
  var value = {
    currentMonth,
    displayMonths,
    goToMonth,
    goToDate,
    previousMonth,
    nextMonth,
    isDateDisplayed
  };
  return (0, import_jsx_runtime6.jsx)(NavigationContext2.Provider, { value, children: props.children });
}
function useNavigation2() {
  var context = (0, import_react2.useContext)(NavigationContext2);
  if (!context) {
    throw new Error("useNavigation must be used within a NavigationProvider");
  }
  return context;
}
function CaptionDropdowns(props) {
  var _a;
  var _b = useDayPicker(), classNames = _b.classNames, styles = _b.styles, components = _b.components;
  var goToMonth = useNavigation2().goToMonth;
  var handleMonthChange = function(newMonth) {
    goToMonth(addMonths(newMonth, props.displayIndex ? -props.displayIndex : 0));
  };
  var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;
  var captionLabel = (0, import_jsx_runtime6.jsx)(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth });
  return (0, import_jsx_runtime6.jsxs)("div", { className: classNames.caption_dropdowns, style: styles.caption_dropdowns, children: [(0, import_jsx_runtime6.jsx)("div", { className: classNames.vhidden, children: captionLabel }), (0, import_jsx_runtime6.jsx)(MonthsDropdown, { onChange: handleMonthChange, displayMonth: props.displayMonth }), (0, import_jsx_runtime6.jsx)(YearsDropdown, { onChange: handleMonthChange, displayMonth: props.displayMonth })] });
}
function IconLeft(props) {
  return (0, import_jsx_runtime6.jsx)("svg", __assign({ width: "16px", height: "16px", viewBox: "0 0 120 120" }, props, { children: (0, import_jsx_runtime6.jsx)("path", { d: "M69.490332,3.34314575 C72.6145263,0.218951416 77.6798462,0.218951416 80.8040405,3.34314575 C83.8617626,6.40086786 83.9268205,11.3179931 80.9992143,14.4548388 L80.8040405,14.6568542 L35.461,60 L80.8040405,105.343146 C83.8617626,108.400868 83.9268205,113.317993 80.9992143,116.454839 L80.8040405,116.656854 C77.7463184,119.714576 72.8291931,119.779634 69.6923475,116.852028 L69.490332,116.656854 L18.490332,65.6568542 C15.4326099,62.5991321 15.367552,57.6820069 18.2951583,54.5451612 L18.490332,54.3431458 L69.490332,3.34314575 Z", fill: "currentColor", fillRule: "nonzero" }) }));
}
function IconRight(props) {
  return (0, import_jsx_runtime6.jsx)("svg", __assign({ width: "16px", height: "16px", viewBox: "0 0 120 120" }, props, { children: (0, import_jsx_runtime6.jsx)("path", { d: "M49.8040405,3.34314575 C46.6798462,0.218951416 41.6145263,0.218951416 38.490332,3.34314575 C35.4326099,6.40086786 35.367552,11.3179931 38.2951583,14.4548388 L38.490332,14.6568542 L83.8333725,60 L38.490332,105.343146 C35.4326099,108.400868 35.367552,113.317993 38.2951583,116.454839 L38.490332,116.656854 C41.5480541,119.714576 46.4651794,119.779634 49.602025,116.852028 L49.8040405,116.656854 L100.804041,65.6568542 C103.861763,62.5991321 103.926821,57.6820069 100.999214,54.5451612 L100.804041,54.3431458 L49.8040405,3.34314575 Z", fill: "currentColor" }) }));
}
var Button2 = (0, import_react2.forwardRef)(function(props, ref) {
  var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
  var classNamesArr = [classNames.button_reset, classNames.button];
  if (props.className) {
    classNamesArr.push(props.className);
  }
  var className = classNamesArr.join(" ");
  var style = __assign(__assign({}, styles.button_reset), styles.button);
  if (props.style) {
    Object.assign(style, props.style);
  }
  return (0, import_jsx_runtime6.jsx)("button", __assign({}, props, { ref, type: "button", className, style }));
});
function Navigation(props) {
  var _a, _b;
  var _c = useDayPicker(), dir = _c.dir, locale = _c.locale, classNames = _c.classNames, styles = _c.styles, _d = _c.labels, labelPrevious2 = _d.labelPrevious, labelNext2 = _d.labelNext, components = _c.components;
  if (!props.nextMonth && !props.previousMonth) {
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  }
  var previousLabel = labelPrevious2(props.previousMonth, { locale });
  var previousClassName = [
    classNames.nav_button,
    classNames.nav_button_previous
  ].join(" ");
  var nextLabel = labelNext2(props.nextMonth, { locale });
  var nextClassName = [
    classNames.nav_button,
    classNames.nav_button_next
  ].join(" ");
  var IconRightComponent = (_a = components === null || components === void 0 ? void 0 : components.IconRight) !== null && _a !== void 0 ? _a : IconRight;
  var IconLeftComponent = (_b = components === null || components === void 0 ? void 0 : components.IconLeft) !== null && _b !== void 0 ? _b : IconLeft;
  return (0, import_jsx_runtime6.jsxs)("div", { className: classNames.nav, style: styles.nav, children: [!props.hidePrevious && (0, import_jsx_runtime6.jsx)(Button2, { name: "previous-month", "aria-label": previousLabel, className: previousClassName, style: styles.nav_button_previous, disabled: !props.previousMonth, onClick: props.onPreviousClick, children: dir === "rtl" ? (0, import_jsx_runtime6.jsx)(IconRightComponent, { className: classNames.nav_icon, style: styles.nav_icon }) : (0, import_jsx_runtime6.jsx)(IconLeftComponent, { className: classNames.nav_icon, style: styles.nav_icon }) }), !props.hideNext && (0, import_jsx_runtime6.jsx)(Button2, { name: "next-month", "aria-label": nextLabel, className: nextClassName, style: styles.nav_button_next, disabled: !props.nextMonth, onClick: props.onNextClick, children: dir === "rtl" ? (0, import_jsx_runtime6.jsx)(IconLeftComponent, { className: classNames.nav_icon, style: styles.nav_icon }) : (0, import_jsx_runtime6.jsx)(IconRightComponent, { className: classNames.nav_icon, style: styles.nav_icon }) })] });
}
function CaptionNavigation(props) {
  var numberOfMonths = useDayPicker().numberOfMonths;
  var _a = useNavigation2(), previousMonth = _a.previousMonth, nextMonth = _a.nextMonth, goToMonth = _a.goToMonth, displayMonths = _a.displayMonths;
  var displayIndex = displayMonths.findIndex(function(month) {
    return isSameMonth(props.displayMonth, month);
  });
  var isFirst = displayIndex === 0;
  var isLast = displayIndex === displayMonths.length - 1;
  var hideNext = numberOfMonths > 1 && (isFirst || !isLast);
  var hidePrevious = numberOfMonths > 1 && (isLast || !isFirst);
  var handlePreviousClick = function() {
    if (!previousMonth)
      return;
    goToMonth(previousMonth);
  };
  var handleNextClick = function() {
    if (!nextMonth)
      return;
    goToMonth(nextMonth);
  };
  return (0, import_jsx_runtime6.jsx)(Navigation, { displayMonth: props.displayMonth, hideNext, hidePrevious, nextMonth, previousMonth, onPreviousClick: handlePreviousClick, onNextClick: handleNextClick });
}
function Caption(props) {
  var _a;
  var _b = useDayPicker(), classNames = _b.classNames, disableNavigation = _b.disableNavigation, styles = _b.styles, captionLayout = _b.captionLayout, components = _b.components;
  var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;
  var caption;
  if (disableNavigation) {
    caption = (0, import_jsx_runtime6.jsx)(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth });
  } else if (captionLayout === "dropdown") {
    caption = (0, import_jsx_runtime6.jsx)(CaptionDropdowns, { displayMonth: props.displayMonth, id: props.id });
  } else if (captionLayout === "dropdown-buttons") {
    caption = (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(CaptionDropdowns, { displayMonth: props.displayMonth, displayIndex: props.displayIndex, id: props.id }), (0, import_jsx_runtime6.jsx)(CaptionNavigation, { displayMonth: props.displayMonth, displayIndex: props.displayIndex, id: props.id })] });
  } else {
    caption = (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth, displayIndex: props.displayIndex }), (0, import_jsx_runtime6.jsx)(CaptionNavigation, { displayMonth: props.displayMonth, id: props.id })] });
  }
  return (0, import_jsx_runtime6.jsx)("div", { className: classNames.caption, style: styles.caption, children: caption });
}
function Footer(props) {
  var _a = useDayPicker(), footer = _a.footer, styles = _a.styles, tfoot = _a.classNames.tfoot;
  if (!footer)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  return (0, import_jsx_runtime6.jsx)("tfoot", { className: tfoot, style: styles.tfoot, children: (0, import_jsx_runtime6.jsx)("tr", { children: (0, import_jsx_runtime6.jsx)("td", { colSpan: 8, children: footer }) }) });
}
function getWeekdays(locale, weekStartsOn, ISOWeek) {
  var start = ISOWeek ? startOfISOWeek(/* @__PURE__ */ new Date()) : startOfWeek(/* @__PURE__ */ new Date(), { locale, weekStartsOn });
  var days = [];
  for (var i = 0; i < 7; i++) {
    var day = addDays(start, i);
    days.push(day);
  }
  return days;
}
function HeadRow() {
  var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles, showWeekNumber = _a.showWeekNumber, locale = _a.locale, weekStartsOn = _a.weekStartsOn, ISOWeek = _a.ISOWeek, formatWeekdayName2 = _a.formatters.formatWeekdayName, labelWeekday2 = _a.labels.labelWeekday;
  var weekdays = getWeekdays(locale, weekStartsOn, ISOWeek);
  return (0, import_jsx_runtime6.jsxs)("tr", { style: styles.head_row, className: classNames.head_row, children: [showWeekNumber && (0, import_jsx_runtime6.jsx)("td", { style: styles.head_cell, className: classNames.head_cell }), weekdays.map(function(weekday, i) {
    return (0, import_jsx_runtime6.jsx)("th", { scope: "col", className: classNames.head_cell, style: styles.head_cell, "aria-label": labelWeekday2(weekday, { locale }), children: formatWeekdayName2(weekday, { locale }) }, i);
  })] });
}
function Head() {
  var _a;
  var _b = useDayPicker(), classNames = _b.classNames, styles = _b.styles, components = _b.components;
  var HeadRowComponent = (_a = components === null || components === void 0 ? void 0 : components.HeadRow) !== null && _a !== void 0 ? _a : HeadRow;
  return (0, import_jsx_runtime6.jsx)("thead", { style: styles.head, className: classNames.head, children: (0, import_jsx_runtime6.jsx)(HeadRowComponent, {}) });
}
function DayContent(props) {
  var _a = useDayPicker(), locale = _a.locale, formatDay2 = _a.formatters.formatDay;
  return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: formatDay2(props.date, { locale }) });
}
var SelectMultipleContext = (0, import_react2.createContext)(void 0);
function SelectMultipleProvider(props) {
  if (!isDayPickerMultiple(props.initialProps)) {
    var emptyContextValue = {
      selected: void 0,
      modifiers: {
        disabled: []
      }
    };
    return (0, import_jsx_runtime6.jsx)(SelectMultipleContext.Provider, { value: emptyContextValue, children: props.children });
  }
  return (0, import_jsx_runtime6.jsx)(SelectMultipleProviderInternal, { initialProps: props.initialProps, children: props.children });
}
function SelectMultipleProviderInternal(_a) {
  var initialProps = _a.initialProps, children = _a.children;
  var selected = initialProps.selected, min2 = initialProps.min, max2 = initialProps.max;
  var onDayClick = function(day, activeModifiers, e) {
    var _a2, _b;
    (_a2 = initialProps.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(initialProps, day, activeModifiers, e);
    var isMinSelected = Boolean(activeModifiers.selected && min2 && (selected === null || selected === void 0 ? void 0 : selected.length) === min2);
    if (isMinSelected) {
      return;
    }
    var isMaxSelected = Boolean(!activeModifiers.selected && max2 && (selected === null || selected === void 0 ? void 0 : selected.length) === max2);
    if (isMaxSelected) {
      return;
    }
    var selectedDays = selected ? __spreadArray([], selected, true) : [];
    if (activeModifiers.selected) {
      var index = selectedDays.findIndex(function(selectedDay) {
        return isSameDay(day, selectedDay);
      });
      selectedDays.splice(index, 1);
    } else {
      selectedDays.push(day);
    }
    (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, selectedDays, day, activeModifiers, e);
  };
  var modifiers = {
    disabled: []
  };
  if (selected) {
    modifiers.disabled.push(function(day) {
      var isMaxSelected = max2 && selected.length > max2 - 1;
      var isSelected = selected.some(function(selectedDay) {
        return isSameDay(selectedDay, day);
      });
      return Boolean(isMaxSelected && !isSelected);
    });
  }
  var contextValue = {
    selected,
    onDayClick,
    modifiers
  };
  return (0, import_jsx_runtime6.jsx)(SelectMultipleContext.Provider, { value: contextValue, children });
}
function useSelectMultiple() {
  var context = (0, import_react2.useContext)(SelectMultipleContext);
  if (!context) {
    throw new Error("useSelectMultiple must be used within a SelectMultipleProvider");
  }
  return context;
}
function addToRange(day, range) {
  var _a = range || {}, from = _a.from, to = _a.to;
  if (from && to) {
    if (isSameDay(to, day) && isSameDay(from, day)) {
      return void 0;
    }
    if (isSameDay(to, day)) {
      return { from: to, to: void 0 };
    }
    if (isSameDay(from, day)) {
      return void 0;
    }
    if (isAfter(from, day)) {
      return { from: day, to };
    }
    return { from, to: day };
  }
  if (to) {
    if (isAfter(day, to)) {
      return { from: to, to: day };
    }
    return { from: day, to };
  }
  if (from) {
    if (isBefore(day, from)) {
      return { from: day, to: from };
    }
    return { from, to: day };
  }
  return { from: day, to: void 0 };
}
var SelectRangeContext = (0, import_react2.createContext)(void 0);
function SelectRangeProvider(props) {
  if (!isDayPickerRange(props.initialProps)) {
    var emptyContextValue = {
      selected: void 0,
      modifiers: {
        range_start: [],
        range_end: [],
        range_middle: [],
        disabled: []
      }
    };
    return (0, import_jsx_runtime6.jsx)(SelectRangeContext.Provider, { value: emptyContextValue, children: props.children });
  }
  return (0, import_jsx_runtime6.jsx)(SelectRangeProviderInternal, { initialProps: props.initialProps, children: props.children });
}
function SelectRangeProviderInternal(_a) {
  var initialProps = _a.initialProps, children = _a.children;
  var selected = initialProps.selected;
  var _b = selected || {}, selectedFrom = _b.from, selectedTo = _b.to;
  var min2 = initialProps.min;
  var max2 = initialProps.max;
  var onDayClick = function(day, activeModifiers, e) {
    var _a2, _b2;
    (_a2 = initialProps.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(initialProps, day, activeModifiers, e);
    var newRange = addToRange(day, selected);
    (_b2 = initialProps.onSelect) === null || _b2 === void 0 ? void 0 : _b2.call(initialProps, newRange, day, activeModifiers, e);
  };
  var modifiers = {
    range_start: [],
    range_end: [],
    range_middle: [],
    disabled: []
  };
  if (selectedFrom) {
    modifiers.range_start = [selectedFrom];
    if (!selectedTo) {
      modifiers.range_end = [selectedFrom];
    } else {
      modifiers.range_end = [selectedTo];
      if (!isSameDay(selectedFrom, selectedTo)) {
        modifiers.range_middle = [
          {
            after: selectedFrom,
            before: selectedTo
          }
        ];
      }
    }
  } else if (selectedTo) {
    modifiers.range_start = [selectedTo];
    modifiers.range_end = [selectedTo];
  }
  if (min2) {
    if (selectedFrom && !selectedTo) {
      modifiers.disabled.push({
        after: subDays(selectedFrom, min2 - 1),
        before: addDays(selectedFrom, min2 - 1)
      });
    }
    if (selectedFrom && selectedTo) {
      modifiers.disabled.push({
        after: selectedFrom,
        before: addDays(selectedFrom, min2 - 1)
      });
    }
    if (!selectedFrom && selectedTo) {
      modifiers.disabled.push({
        after: subDays(selectedTo, min2 - 1),
        before: addDays(selectedTo, min2 - 1)
      });
    }
  }
  if (max2) {
    if (selectedFrom && !selectedTo) {
      modifiers.disabled.push({
        before: addDays(selectedFrom, -max2 + 1)
      });
      modifiers.disabled.push({
        after: addDays(selectedFrom, max2 - 1)
      });
    }
    if (selectedFrom && selectedTo) {
      var selectedCount = differenceInCalendarDays(selectedTo, selectedFrom) + 1;
      var offset = max2 - selectedCount;
      modifiers.disabled.push({
        before: subDays(selectedFrom, offset)
      });
      modifiers.disabled.push({
        after: addDays(selectedTo, offset)
      });
    }
    if (!selectedFrom && selectedTo) {
      modifiers.disabled.push({
        before: addDays(selectedTo, -max2 + 1)
      });
      modifiers.disabled.push({
        after: addDays(selectedTo, max2 - 1)
      });
    }
  }
  return (0, import_jsx_runtime6.jsx)(SelectRangeContext.Provider, { value: { selected, onDayClick, modifiers }, children });
}
function useSelectRange() {
  var context = (0, import_react2.useContext)(SelectRangeContext);
  if (!context) {
    throw new Error("useSelectRange must be used within a SelectRangeProvider");
  }
  return context;
}
function matcherToArray(matcher) {
  if (Array.isArray(matcher)) {
    return __spreadArray([], matcher, true);
  } else if (matcher !== void 0) {
    return [matcher];
  } else {
    return [];
  }
}
function getCustomModifiers(dayModifiers) {
  var customModifiers = {};
  Object.entries(dayModifiers).forEach(function(_a) {
    var modifier = _a[0], matcher = _a[1];
    customModifiers[modifier] = matcherToArray(matcher);
  });
  return customModifiers;
}
var InternalModifier;
(function(InternalModifier2) {
  InternalModifier2["Outside"] = "outside";
  InternalModifier2["Disabled"] = "disabled";
  InternalModifier2["Selected"] = "selected";
  InternalModifier2["Hidden"] = "hidden";
  InternalModifier2["Today"] = "today";
  InternalModifier2["RangeStart"] = "range_start";
  InternalModifier2["RangeEnd"] = "range_end";
  InternalModifier2["RangeMiddle"] = "range_middle";
})(InternalModifier || (InternalModifier = {}));
var Selected = InternalModifier.Selected;
var Disabled = InternalModifier.Disabled;
var Hidden = InternalModifier.Hidden;
var Today = InternalModifier.Today;
var RangeEnd = InternalModifier.RangeEnd;
var RangeMiddle = InternalModifier.RangeMiddle;
var RangeStart = InternalModifier.RangeStart;
var Outside = InternalModifier.Outside;
function getInternalModifiers(dayPicker, selectMultiple, selectRange) {
  var _a;
  var internalModifiers = (_a = {}, _a[Selected] = matcherToArray(dayPicker.selected), _a[Disabled] = matcherToArray(dayPicker.disabled), _a[Hidden] = matcherToArray(dayPicker.hidden), _a[Today] = [dayPicker.today], _a[RangeEnd] = [], _a[RangeMiddle] = [], _a[RangeStart] = [], _a[Outside] = [], _a);
  if (dayPicker.fromDate) {
    internalModifiers[Disabled].push({ before: dayPicker.fromDate });
  }
  if (dayPicker.toDate) {
    internalModifiers[Disabled].push({ after: dayPicker.toDate });
  }
  if (isDayPickerMultiple(dayPicker)) {
    internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectMultiple.modifiers[Disabled]);
  } else if (isDayPickerRange(dayPicker)) {
    internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectRange.modifiers[Disabled]);
    internalModifiers[RangeStart] = selectRange.modifiers[RangeStart];
    internalModifiers[RangeMiddle] = selectRange.modifiers[RangeMiddle];
    internalModifiers[RangeEnd] = selectRange.modifiers[RangeEnd];
  }
  return internalModifiers;
}
var ModifiersContext = (0, import_react2.createContext)(void 0);
function ModifiersProvider(props) {
  var dayPicker = useDayPicker();
  var selectMultiple = useSelectMultiple();
  var selectRange = useSelectRange();
  var internalModifiers = getInternalModifiers(dayPicker, selectMultiple, selectRange);
  var customModifiers = getCustomModifiers(dayPicker.modifiers);
  var modifiers = __assign(__assign({}, internalModifiers), customModifiers);
  return (0, import_jsx_runtime6.jsx)(ModifiersContext.Provider, { value: modifiers, children: props.children });
}
function useModifiers() {
  var context = (0, import_react2.useContext)(ModifiersContext);
  if (!context) {
    throw new Error("useModifiers must be used within a ModifiersProvider");
  }
  return context;
}
function isDateInterval(matcher) {
  return Boolean(matcher && typeof matcher === "object" && "before" in matcher && "after" in matcher);
}
function isDateRange(value) {
  return Boolean(value && typeof value === "object" && "from" in value);
}
function isDateAfterType(value) {
  return Boolean(value && typeof value === "object" && "after" in value);
}
function isDateBeforeType(value) {
  return Boolean(value && typeof value === "object" && "before" in value);
}
function isDayOfWeekType(value) {
  return Boolean(value && typeof value === "object" && "dayOfWeek" in value);
}
function isDateInRange(date, range) {
  var _a;
  var from = range.from, to = range.to;
  if (from && to) {
    var isRangeInverted = differenceInCalendarDays(to, from) < 0;
    if (isRangeInverted) {
      _a = [to, from], from = _a[0], to = _a[1];
    }
    var isInRange = differenceInCalendarDays(date, from) >= 0 && differenceInCalendarDays(to, date) >= 0;
    return isInRange;
  }
  if (to) {
    return isSameDay(to, date);
  }
  if (from) {
    return isSameDay(from, date);
  }
  return false;
}
function isDateType(value) {
  return isDate(value);
}
function isArrayOfDates(value) {
  return Array.isArray(value) && value.every(isDate);
}
function isMatch(day, matchers) {
  return matchers.some(function(matcher) {
    if (typeof matcher === "boolean") {
      return matcher;
    }
    if (isDateType(matcher)) {
      return isSameDay(day, matcher);
    }
    if (isArrayOfDates(matcher)) {
      return matcher.includes(day);
    }
    if (isDateRange(matcher)) {
      return isDateInRange(day, matcher);
    }
    if (isDayOfWeekType(matcher)) {
      return matcher.dayOfWeek.includes(day.getDay());
    }
    if (isDateInterval(matcher)) {
      var diffBefore = differenceInCalendarDays(matcher.before, day);
      var diffAfter = differenceInCalendarDays(matcher.after, day);
      var isDayBefore = diffBefore > 0;
      var isDayAfter = diffAfter < 0;
      var isClosedInterval = isAfter(matcher.before, matcher.after);
      if (isClosedInterval) {
        return isDayAfter && isDayBefore;
      } else {
        return isDayBefore || isDayAfter;
      }
    }
    if (isDateAfterType(matcher)) {
      return differenceInCalendarDays(day, matcher.after) > 0;
    }
    if (isDateBeforeType(matcher)) {
      return differenceInCalendarDays(matcher.before, day) > 0;
    }
    if (typeof matcher === "function") {
      return matcher(day);
    }
    return false;
  });
}
function getActiveModifiers(day, modifiers, displayMonth) {
  var matchedModifiers = Object.keys(modifiers).reduce(function(result, key) {
    var modifier = modifiers[key];
    if (isMatch(day, modifier)) {
      result.push(key);
    }
    return result;
  }, []);
  var activeModifiers = {};
  matchedModifiers.forEach(function(modifier) {
    return activeModifiers[modifier] = true;
  });
  if (displayMonth && !isSameMonth(day, displayMonth)) {
    activeModifiers.outside = true;
  }
  return activeModifiers;
}
function getInitialFocusTarget(displayMonths, modifiers) {
  var firstDayInMonth = startOfMonth(displayMonths[0]);
  var lastDayInMonth = endOfMonth(displayMonths[displayMonths.length - 1]);
  var firstFocusableDay;
  var today;
  var date = firstDayInMonth;
  while (date <= lastDayInMonth) {
    var activeModifiers = getActiveModifiers(date, modifiers);
    var isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;
    if (!isFocusable) {
      date = addDays(date, 1);
      continue;
    }
    if (activeModifiers.selected) {
      return date;
    }
    if (activeModifiers.today && !today) {
      today = date;
    }
    if (!firstFocusableDay) {
      firstFocusableDay = date;
    }
    date = addDays(date, 1);
  }
  if (today) {
    return today;
  } else {
    return firstFocusableDay;
  }
}
var MAX_RETRY = 365;
function getNextFocus(focusedDay, options) {
  var moveBy = options.moveBy, direction = options.direction, context = options.context, modifiers = options.modifiers, _a = options.retry, retry = _a === void 0 ? { count: 0, lastFocused: focusedDay } : _a;
  var weekStartsOn = context.weekStartsOn, fromDate = context.fromDate, toDate2 = context.toDate, locale = context.locale;
  var moveFns = {
    day: addDays,
    week: addWeeks,
    month: addMonths,
    year: addYears,
    startOfWeek: function(date) {
      return context.ISOWeek ? startOfISOWeek(date) : startOfWeek(date, { locale, weekStartsOn });
    },
    endOfWeek: function(date) {
      return context.ISOWeek ? endOfISOWeek(date) : endOfWeek(date, { locale, weekStartsOn });
    }
  };
  var newFocusedDay = moveFns[moveBy](focusedDay, direction === "after" ? 1 : -1);
  if (direction === "before" && fromDate) {
    newFocusedDay = max([fromDate, newFocusedDay]);
  } else if (direction === "after" && toDate2) {
    newFocusedDay = min([toDate2, newFocusedDay]);
  }
  var isFocusable = true;
  if (modifiers) {
    var activeModifiers = getActiveModifiers(newFocusedDay, modifiers);
    isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;
  }
  if (isFocusable) {
    return newFocusedDay;
  } else {
    if (retry.count > MAX_RETRY) {
      return retry.lastFocused;
    }
    return getNextFocus(newFocusedDay, {
      moveBy,
      direction,
      context,
      modifiers,
      retry: __assign(__assign({}, retry), { count: retry.count + 1 })
    });
  }
}
var FocusContext = (0, import_react2.createContext)(void 0);
function FocusProvider(props) {
  var navigation = useNavigation2();
  var modifiers = useModifiers();
  var _a = (0, import_react2.useState)(), focusedDay = _a[0], setFocusedDay = _a[1];
  var _b = (0, import_react2.useState)(), lastFocused = _b[0], setLastFocused = _b[1];
  var initialFocusTarget = getInitialFocusTarget(navigation.displayMonths, modifiers);
  var focusTarget = (focusedDay !== null && focusedDay !== void 0 ? focusedDay : lastFocused && navigation.isDateDisplayed(lastFocused)) ? lastFocused : initialFocusTarget;
  var blur = function() {
    setLastFocused(focusedDay);
    setFocusedDay(void 0);
  };
  var focus = function(date) {
    setFocusedDay(date);
  };
  var context = useDayPicker();
  var moveFocus = function(moveBy, direction) {
    if (!focusedDay)
      return;
    var nextFocused = getNextFocus(focusedDay, {
      moveBy,
      direction,
      context,
      modifiers
    });
    if (isSameDay(focusedDay, nextFocused))
      return void 0;
    navigation.goToDate(nextFocused, focusedDay);
    focus(nextFocused);
  };
  var value = {
    focusedDay,
    focusTarget,
    blur,
    focus,
    focusDayAfter: function() {
      return moveFocus("day", "after");
    },
    focusDayBefore: function() {
      return moveFocus("day", "before");
    },
    focusWeekAfter: function() {
      return moveFocus("week", "after");
    },
    focusWeekBefore: function() {
      return moveFocus("week", "before");
    },
    focusMonthBefore: function() {
      return moveFocus("month", "before");
    },
    focusMonthAfter: function() {
      return moveFocus("month", "after");
    },
    focusYearBefore: function() {
      return moveFocus("year", "before");
    },
    focusYearAfter: function() {
      return moveFocus("year", "after");
    },
    focusStartOfWeek: function() {
      return moveFocus("startOfWeek", "before");
    },
    focusEndOfWeek: function() {
      return moveFocus("endOfWeek", "after");
    }
  };
  return (0, import_jsx_runtime6.jsx)(FocusContext.Provider, { value, children: props.children });
}
function useFocusContext() {
  var context = (0, import_react2.useContext)(FocusContext);
  if (!context) {
    throw new Error("useFocusContext must be used within a FocusProvider");
  }
  return context;
}
function useActiveModifiers(day, displayMonth) {
  var modifiers = useModifiers();
  var activeModifiers = getActiveModifiers(day, modifiers, displayMonth);
  return activeModifiers;
}
var SelectSingleContext = (0, import_react2.createContext)(void 0);
function SelectSingleProvider(props) {
  if (!isDayPickerSingle(props.initialProps)) {
    var emptyContextValue = {
      selected: void 0
    };
    return (0, import_jsx_runtime6.jsx)(SelectSingleContext.Provider, { value: emptyContextValue, children: props.children });
  }
  return (0, import_jsx_runtime6.jsx)(SelectSingleProviderInternal, { initialProps: props.initialProps, children: props.children });
}
function SelectSingleProviderInternal(_a) {
  var initialProps = _a.initialProps, children = _a.children;
  var onDayClick = function(day, activeModifiers, e) {
    var _a2, _b, _c;
    (_a2 = initialProps.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(initialProps, day, activeModifiers, e);
    if (activeModifiers.selected && !initialProps.required) {
      (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, void 0, day, activeModifiers, e);
      return;
    }
    (_c = initialProps.onSelect) === null || _c === void 0 ? void 0 : _c.call(initialProps, day, day, activeModifiers, e);
  };
  var contextValue = {
    selected: initialProps.selected,
    onDayClick
  };
  return (0, import_jsx_runtime6.jsx)(SelectSingleContext.Provider, { value: contextValue, children });
}
function useSelectSingle() {
  var context = (0, import_react2.useContext)(SelectSingleContext);
  if (!context) {
    throw new Error("useSelectSingle must be used within a SelectSingleProvider");
  }
  return context;
}
function useDayEventHandlers(date, activeModifiers) {
  var dayPicker = useDayPicker();
  var single = useSelectSingle();
  var multiple = useSelectMultiple();
  var range = useSelectRange();
  var _a = useFocusContext(), focusDayAfter = _a.focusDayAfter, focusDayBefore = _a.focusDayBefore, focusWeekAfter = _a.focusWeekAfter, focusWeekBefore = _a.focusWeekBefore, blur = _a.blur, focus = _a.focus, focusMonthBefore = _a.focusMonthBefore, focusMonthAfter = _a.focusMonthAfter, focusYearBefore = _a.focusYearBefore, focusYearAfter = _a.focusYearAfter, focusStartOfWeek = _a.focusStartOfWeek, focusEndOfWeek = _a.focusEndOfWeek;
  var onClick = function(e) {
    var _a2, _b, _c, _d;
    if (isDayPickerSingle(dayPicker)) {
      (_a2 = single.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(single, date, activeModifiers, e);
    } else if (isDayPickerMultiple(dayPicker)) {
      (_b = multiple.onDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, activeModifiers, e);
    } else if (isDayPickerRange(dayPicker)) {
      (_c = range.onDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, activeModifiers, e);
    } else {
      (_d = dayPicker.onDayClick) === null || _d === void 0 ? void 0 : _d.call(dayPicker, date, activeModifiers, e);
    }
  };
  var onFocus = function(e) {
    var _a2;
    focus(date);
    (_a2 = dayPicker.onDayFocus) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onBlur = function(e) {
    var _a2;
    blur();
    (_a2 = dayPicker.onDayBlur) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onMouseEnter = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayMouseEnter) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onMouseLeave = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayMouseLeave) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onPointerEnter = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayPointerEnter) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onPointerLeave = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayPointerLeave) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchCancel = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchCancel) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchEnd = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchEnd) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchMove = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchMove) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchStart = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchStart) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onKeyUp = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayKeyUp) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onKeyDown = function(e) {
    var _a2;
    switch (e.key) {
      case "ArrowLeft":
        e.preventDefault();
        e.stopPropagation();
        dayPicker.dir === "rtl" ? focusDayAfter() : focusDayBefore();
        break;
      case "ArrowRight":
        e.preventDefault();
        e.stopPropagation();
        dayPicker.dir === "rtl" ? focusDayBefore() : focusDayAfter();
        break;
      case "ArrowDown":
        e.preventDefault();
        e.stopPropagation();
        focusWeekAfter();
        break;
      case "ArrowUp":
        e.preventDefault();
        e.stopPropagation();
        focusWeekBefore();
        break;
      case "PageUp":
        e.preventDefault();
        e.stopPropagation();
        e.shiftKey ? focusYearBefore() : focusMonthBefore();
        break;
      case "PageDown":
        e.preventDefault();
        e.stopPropagation();
        e.shiftKey ? focusYearAfter() : focusMonthAfter();
        break;
      case "Home":
        e.preventDefault();
        e.stopPropagation();
        focusStartOfWeek();
        break;
      case "End":
        e.preventDefault();
        e.stopPropagation();
        focusEndOfWeek();
        break;
    }
    (_a2 = dayPicker.onDayKeyDown) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var eventHandlers = {
    onClick,
    onFocus,
    onBlur,
    onKeyDown,
    onKeyUp,
    onMouseEnter,
    onMouseLeave,
    onPointerEnter,
    onPointerLeave,
    onTouchCancel,
    onTouchEnd,
    onTouchMove,
    onTouchStart
  };
  return eventHandlers;
}
function useSelectedDays() {
  var dayPicker = useDayPicker();
  var single = useSelectSingle();
  var multiple = useSelectMultiple();
  var range = useSelectRange();
  var selectedDays = isDayPickerSingle(dayPicker) ? single.selected : isDayPickerMultiple(dayPicker) ? multiple.selected : isDayPickerRange(dayPicker) ? range.selected : void 0;
  return selectedDays;
}
function isInternalModifier(modifier) {
  return Object.values(InternalModifier).includes(modifier);
}
function getDayClassNames(dayPicker, activeModifiers) {
  var classNames = [dayPicker.classNames.day];
  Object.keys(activeModifiers).forEach(function(modifier) {
    var customClassName = dayPicker.modifiersClassNames[modifier];
    if (customClassName) {
      classNames.push(customClassName);
    } else if (isInternalModifier(modifier)) {
      var internalClassName = dayPicker.classNames["day_".concat(modifier)];
      if (internalClassName) {
        classNames.push(internalClassName);
      }
    }
  });
  return classNames;
}
function getDayStyle(dayPicker, activeModifiers) {
  var style = __assign({}, dayPicker.styles.day);
  Object.keys(activeModifiers).forEach(function(modifier) {
    var _a;
    style = __assign(__assign({}, style), (_a = dayPicker.modifiersStyles) === null || _a === void 0 ? void 0 : _a[modifier]);
  });
  return style;
}
function useDayRender(day, displayMonth, buttonRef) {
  var _a;
  var _b, _c;
  var dayPicker = useDayPicker();
  var focusContext = useFocusContext();
  var activeModifiers = useActiveModifiers(day, displayMonth);
  var eventHandlers = useDayEventHandlers(day, activeModifiers);
  var selectedDays = useSelectedDays();
  var isButton = Boolean(dayPicker.onDayClick || dayPicker.mode !== "default");
  (0, import_react2.useEffect)(function() {
    var _a2;
    if (activeModifiers.outside)
      return;
    if (!focusContext.focusedDay)
      return;
    if (!isButton)
      return;
    if (isSameDay(focusContext.focusedDay, day)) {
      (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [
    focusContext.focusedDay,
    day,
    buttonRef,
    isButton,
    activeModifiers.outside
  ]);
  var className = getDayClassNames(dayPicker, activeModifiers).join(" ");
  var style = getDayStyle(dayPicker, activeModifiers);
  var isHidden = Boolean(activeModifiers.outside && !dayPicker.showOutsideDays || activeModifiers.hidden);
  var DayContentComponent = (_c = (_b = dayPicker.components) === null || _b === void 0 ? void 0 : _b.DayContent) !== null && _c !== void 0 ? _c : DayContent;
  var children = (0, import_jsx_runtime6.jsx)(DayContentComponent, { date: day, displayMonth, activeModifiers });
  var divProps = {
    style,
    className,
    children,
    role: "gridcell"
  };
  var isFocusTarget = focusContext.focusTarget && isSameDay(focusContext.focusTarget, day) && !activeModifiers.outside;
  var isFocused = focusContext.focusedDay && isSameDay(focusContext.focusedDay, day);
  var buttonProps = __assign(__assign(__assign({}, divProps), (_a = { disabled: activeModifiers.disabled, role: "gridcell" }, _a["aria-selected"] = activeModifiers.selected, _a.tabIndex = isFocused || isFocusTarget ? 0 : -1, _a)), eventHandlers);
  var dayRender = {
    isButton,
    isHidden,
    activeModifiers,
    selectedDays,
    buttonProps,
    divProps
  };
  return dayRender;
}
function Day(props) {
  var buttonRef = (0, import_react2.useRef)(null);
  var dayRender = useDayRender(props.date, props.displayMonth, buttonRef);
  if (dayRender.isHidden) {
    return (0, import_jsx_runtime6.jsx)("div", { role: "gridcell" });
  }
  if (!dayRender.isButton) {
    return (0, import_jsx_runtime6.jsx)("div", __assign({}, dayRender.divProps));
  }
  return (0, import_jsx_runtime6.jsx)(Button2, __assign({ name: "day", ref: buttonRef }, dayRender.buttonProps));
}
function WeekNumber(props) {
  var weekNumber = props.number, dates = props.dates;
  var _a = useDayPicker(), onWeekNumberClick = _a.onWeekNumberClick, styles = _a.styles, classNames = _a.classNames, locale = _a.locale, labelWeekNumber2 = _a.labels.labelWeekNumber, formatWeekNumber2 = _a.formatters.formatWeekNumber;
  var content = formatWeekNumber2(Number(weekNumber), { locale });
  if (!onWeekNumberClick) {
    return (0, import_jsx_runtime6.jsx)("span", { className: classNames.weeknumber, style: styles.weeknumber, children: content });
  }
  var label = labelWeekNumber2(Number(weekNumber), { locale });
  var handleClick = function(e) {
    onWeekNumberClick(weekNumber, dates, e);
  };
  return (0, import_jsx_runtime6.jsx)(Button2, { name: "week-number", "aria-label": label, className: classNames.weeknumber, style: styles.weeknumber, onClick: handleClick, children: content });
}
function Row(props) {
  var _a, _b;
  var _c = useDayPicker(), styles = _c.styles, classNames = _c.classNames, showWeekNumber = _c.showWeekNumber, components = _c.components;
  var DayComponent = (_a = components === null || components === void 0 ? void 0 : components.Day) !== null && _a !== void 0 ? _a : Day;
  var WeeknumberComponent = (_b = components === null || components === void 0 ? void 0 : components.WeekNumber) !== null && _b !== void 0 ? _b : WeekNumber;
  var weekNumberCell;
  if (showWeekNumber) {
    weekNumberCell = (0, import_jsx_runtime6.jsx)("td", { className: classNames.cell, style: styles.cell, children: (0, import_jsx_runtime6.jsx)(WeeknumberComponent, { number: props.weekNumber, dates: props.dates }) });
  }
  return (0, import_jsx_runtime6.jsxs)("tr", { className: classNames.row, style: styles.row, children: [weekNumberCell, props.dates.map(function(date) {
    return (0, import_jsx_runtime6.jsx)("td", { className: classNames.cell, style: styles.cell, role: "presentation", children: (0, import_jsx_runtime6.jsx)(DayComponent, { displayMonth: props.displayMonth, date }) }, getUnixTime(date));
  })] });
}
function daysToMonthWeeks(fromDate, toDate2, options) {
  var toWeek = (options === null || options === void 0 ? void 0 : options.ISOWeek) ? endOfISOWeek(toDate2) : endOfWeek(toDate2, options);
  var fromWeek = (options === null || options === void 0 ? void 0 : options.ISOWeek) ? startOfISOWeek(fromDate) : startOfWeek(fromDate, options);
  var nOfDays = differenceInCalendarDays(toWeek, fromWeek);
  var days = [];
  for (var i = 0; i <= nOfDays; i++) {
    days.push(addDays(fromWeek, i));
  }
  var weeksInMonth = days.reduce(function(result, date) {
    var weekNumber = (options === null || options === void 0 ? void 0 : options.ISOWeek) ? getISOWeek(date) : getWeek(date, options);
    var existingWeek = result.find(function(value) {
      return value.weekNumber === weekNumber;
    });
    if (existingWeek) {
      existingWeek.dates.push(date);
      return result;
    }
    result.push({
      weekNumber,
      dates: [date]
    });
    return result;
  }, []);
  return weeksInMonth;
}
function getMonthWeeks(month, options) {
  var weeksInMonth = daysToMonthWeeks(startOfMonth(month), endOfMonth(month), options);
  if (options === null || options === void 0 ? void 0 : options.useFixedWeeks) {
    var nrOfMonthWeeks = getWeeksInMonth(month, options);
    if (nrOfMonthWeeks < 6) {
      var lastWeek = weeksInMonth[weeksInMonth.length - 1];
      var lastDate = lastWeek.dates[lastWeek.dates.length - 1];
      var toDate2 = addWeeks(lastDate, 6 - nrOfMonthWeeks);
      var extraWeeks = daysToMonthWeeks(addWeeks(lastDate, 1), toDate2, options);
      weeksInMonth.push.apply(weeksInMonth, extraWeeks);
    }
  }
  return weeksInMonth;
}
function Table(props) {
  var _a, _b, _c;
  var _d = useDayPicker(), locale = _d.locale, classNames = _d.classNames, styles = _d.styles, hideHead = _d.hideHead, fixedWeeks = _d.fixedWeeks, components = _d.components, weekStartsOn = _d.weekStartsOn, firstWeekContainsDate = _d.firstWeekContainsDate, ISOWeek = _d.ISOWeek;
  var weeks = getMonthWeeks(props.displayMonth, {
    useFixedWeeks: Boolean(fixedWeeks),
    ISOWeek,
    locale,
    weekStartsOn,
    firstWeekContainsDate
  });
  var HeadComponent = (_a = components === null || components === void 0 ? void 0 : components.Head) !== null && _a !== void 0 ? _a : Head;
  var RowComponent = (_b = components === null || components === void 0 ? void 0 : components.Row) !== null && _b !== void 0 ? _b : Row;
  var FooterComponent = (_c = components === null || components === void 0 ? void 0 : components.Footer) !== null && _c !== void 0 ? _c : Footer;
  return (0, import_jsx_runtime6.jsxs)("table", { id: props.id, className: classNames.table, style: styles.table, role: "grid", "aria-labelledby": props["aria-labelledby"], children: [!hideHead && (0, import_jsx_runtime6.jsx)(HeadComponent, {}), (0, import_jsx_runtime6.jsx)("tbody", { className: classNames.tbody, style: styles.tbody, children: weeks.map(function(week) {
    return (0, import_jsx_runtime6.jsx)(RowComponent, { displayMonth: props.displayMonth, dates: week.dates, weekNumber: week.weekNumber }, week.weekNumber);
  }) }), (0, import_jsx_runtime6.jsx)(FooterComponent, { displayMonth: props.displayMonth })] });
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var useIsomorphicLayoutEffect2 = canUseDOM() ? import_react2.useLayoutEffect : import_react2.useEffect;
var serverHandoffComplete = false;
var id = 0;
function genId() {
  return "react-day-picker-".concat(++id);
}
function useId3(providedId) {
  var _a;
  var initialId = providedId !== null && providedId !== void 0 ? providedId : serverHandoffComplete ? genId() : null;
  var _b = (0, import_react2.useState)(initialId), id2 = _b[0], setId = _b[1];
  useIsomorphicLayoutEffect2(function() {
    if (id2 === null) {
      setId(genId());
    }
  }, []);
  (0, import_react2.useEffect)(function() {
    if (serverHandoffComplete === false) {
      serverHandoffComplete = true;
    }
  }, []);
  return (_a = providedId !== null && providedId !== void 0 ? providedId : id2) !== null && _a !== void 0 ? _a : void 0;
}
function Month(props) {
  var _a;
  var _b;
  var dayPicker = useDayPicker();
  var dir = dayPicker.dir, classNames = dayPicker.classNames, styles = dayPicker.styles, components = dayPicker.components;
  var displayMonths = useNavigation2().displayMonths;
  var captionId = useId3(dayPicker.id ? "".concat(dayPicker.id, "-").concat(props.displayIndex) : void 0);
  var tableId = dayPicker.id ? "".concat(dayPicker.id, "-grid-").concat(props.displayIndex) : void 0;
  var className = [classNames.month];
  var style = styles.month;
  var isStart = props.displayIndex === 0;
  var isEnd = props.displayIndex === displayMonths.length - 1;
  var isCenter = !isStart && !isEnd;
  if (dir === "rtl") {
    _a = [isStart, isEnd], isEnd = _a[0], isStart = _a[1];
  }
  if (isStart) {
    className.push(classNames.caption_start);
    style = __assign(__assign({}, style), styles.caption_start);
  }
  if (isEnd) {
    className.push(classNames.caption_end);
    style = __assign(__assign({}, style), styles.caption_end);
  }
  if (isCenter) {
    className.push(classNames.caption_between);
    style = __assign(__assign({}, style), styles.caption_between);
  }
  var CaptionComponent = (_b = components === null || components === void 0 ? void 0 : components.Caption) !== null && _b !== void 0 ? _b : Caption;
  return (0, import_jsx_runtime6.jsxs)("div", { className: className.join(" "), style, children: [(0, import_jsx_runtime6.jsx)(CaptionComponent, { id: captionId, displayMonth: props.displayMonth, displayIndex: props.displayIndex }), (0, import_jsx_runtime6.jsx)(Table, { id: tableId, "aria-labelledby": captionId, displayMonth: props.displayMonth })] }, props.displayIndex);
}
function Months(props) {
  var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
  return (0, import_jsx_runtime6.jsx)("div", { className: classNames.months, style: styles.months, children: props.children });
}
function Root4(_a) {
  var _b, _c;
  var initialProps = _a.initialProps;
  var dayPicker = useDayPicker();
  var focusContext = useFocusContext();
  var navigation = useNavigation2();
  var _d = (0, import_react2.useState)(false), hasInitialFocus = _d[0], setHasInitialFocus = _d[1];
  (0, import_react2.useEffect)(function() {
    if (!dayPicker.initialFocus)
      return;
    if (!focusContext.focusTarget)
      return;
    if (hasInitialFocus)
      return;
    focusContext.focus(focusContext.focusTarget);
    setHasInitialFocus(true);
  }, [
    dayPicker.initialFocus,
    hasInitialFocus,
    focusContext.focus,
    focusContext.focusTarget,
    focusContext
  ]);
  var classNames = [dayPicker.classNames.root, dayPicker.className];
  if (dayPicker.numberOfMonths > 1) {
    classNames.push(dayPicker.classNames.multiple_months);
  }
  if (dayPicker.showWeekNumber) {
    classNames.push(dayPicker.classNames.with_weeknumber);
  }
  var style = __assign(__assign({}, dayPicker.styles.root), dayPicker.style);
  var dataAttributes = Object.keys(initialProps).filter(function(key) {
    return key.startsWith("data-");
  }).reduce(function(attrs, key) {
    var _a2;
    return __assign(__assign({}, attrs), (_a2 = {}, _a2[key] = initialProps[key], _a2));
  }, {});
  var MonthsComponent = (_c = (_b = initialProps.components) === null || _b === void 0 ? void 0 : _b.Months) !== null && _c !== void 0 ? _c : Months;
  return (0, import_jsx_runtime6.jsx)("div", __assign({ className: classNames.join(" "), style, dir: dayPicker.dir, id: dayPicker.id, nonce: initialProps.nonce, title: initialProps.title, lang: initialProps.lang }, dataAttributes, { children: (0, import_jsx_runtime6.jsx)(MonthsComponent, { children: navigation.displayMonths.map(function(month, i) {
    return (0, import_jsx_runtime6.jsx)(Month, { displayIndex: i, displayMonth: month }, i);
  }) }) }));
}
function RootProvider(props) {
  var children = props.children, initialProps = __rest(props, ["children"]);
  return (0, import_jsx_runtime6.jsx)(DayPickerProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(NavigationProvider, { children: (0, import_jsx_runtime6.jsx)(SelectSingleProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(SelectMultipleProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(SelectRangeProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(ModifiersProvider, { children: (0, import_jsx_runtime6.jsx)(FocusProvider, { children }) }) }) }) }) }) });
}
function DayPicker(props) {
  return (0, import_jsx_runtime6.jsx)(RootProvider, __assign({}, props, { children: (0, import_jsx_runtime6.jsx)(Root4, { initialProps: props }) }));
}

// src/components/ui/calendar.tsx
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function Calendar2({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
    DayPicker,
    {
      showOutsideDays,
      className: cn("p-3", className),
      classNames: {
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range" ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md" : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames
      },
      components: {
        IconLeft: ({ className: className2, ...props2 }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ChevronLeft, { className: cn("h-4 w-4", className2), ...props2 }),
        IconRight: ({ className: className2, ...props2 }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ChevronRight, { className: cn("h-4 w-4", className2), ...props2 })
      },
      ...props
    }
  );
}
Calendar2.displayName = "Calendar";

// src/components/ui/popover.tsx
var React19 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-popover/dist/index.mjs
var React18 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var POPOVER_NAME = "Popover";
var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
  createPopperScope
]);
var usePopperScope = createPopperScope();
var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
var Popover = (props) => {
  const {
    __scopePopover,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = false
  } = props;
  const popperScope = usePopperScope(__scopePopover);
  const triggerRef = React18.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React18.useState(false);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: POPOVER_NAME
  });
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Root2, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    PopoverProvider,
    {
      scope: __scopePopover,
      contentId: useId(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: React18.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      hasCustomAnchor,
      onCustomAnchorAdd: React18.useCallback(() => setHasCustomAnchor(true), []),
      onCustomAnchorRemove: React18.useCallback(() => setHasCustomAnchor(false), []),
      modal,
      children
    }
  ) });
};
Popover.displayName = POPOVER_NAME;
var ANCHOR_NAME = "PopoverAnchor";
var PopoverAnchor = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    React18.useEffect(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [onCustomAnchorAdd, onCustomAnchorRemove]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
PopoverAnchor.displayName = ANCHOR_NAME;
var TRIGGER_NAME = "PopoverTrigger";
var PopoverTrigger = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
    const trigger = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      Primitive.button,
      {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
      }
    );
    return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Anchor, { asChild: true, ...popperScope, children: trigger });
  }
);
PopoverTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "PopoverPortal";
var [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {
  forceMount: void 0
});
var PopoverPortal = (props) => {
  const { __scopePopover, forceMount, children, container } = props;
  const context = usePopoverContext(PORTAL_NAME, __scopePopover);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PortalProvider, { scope: __scopePopover, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Portal, { asChild: true, container, children }) }) });
};
PopoverPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "PopoverContent";
var PopoverContent = React18.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
  }
);
PopoverContent.displayName = CONTENT_NAME;
var Slot = createSlot("PopoverContent.RemoveScroll");
var PopoverContentModal = React18.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const contentRef = React18.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const isRightClickOutsideRef = React18.useRef(false);
    React18.useEffect(() => {
      const content = contentRef.current;
      if (content) return hideOthers(content);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          event.preventDefault();
          if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();
        }),
        onPointerDownOutside: composeEventHandlers(
          props.onPointerDownOutside,
          (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            isRightClickOutsideRef.current = isRightClick;
          },
          { checkForDefaultPrevented: false }
        ),
        onFocusOutside: composeEventHandlers(
          props.onFocusOutside,
          (event) => event.preventDefault(),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
var PopoverContentNonModal = React18.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = React18.useRef(false);
    const hasPointerDownOutsideRef = React18.useRef(false);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event) => {
          props.onCloseAutoFocus?.(event);
          if (!event.defaultPrevented) {
            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
          hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          props.onInteractOutside?.(event);
          if (!event.defaultPrevented) {
            hasInteractedOutsideRef.current = true;
            if (event.detail.originalEvent.type === "pointerdown") {
              hasPointerDownOutsideRef.current = true;
            }
          }
          const target = event.target;
          const targetIsTrigger = context.triggerRef.current?.contains(target);
          if (targetIsTrigger) event.preventDefault();
          if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
            event.preventDefault();
          }
        }
      }
    );
  }
);
var PopoverContentImpl = React18.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopePopover,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      ...contentProps
    } = props;
    const context = usePopoverContext(CONTENT_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    useFocusGuards();
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      FocusScope,
      {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          DismissableLayer,
          {
            asChild: true,
            disableOutsidePointerEvents,
            onInteractOutside,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside,
            onDismiss: () => context.onOpenChange(false),
            children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
              Content2,
              {
                "data-state": getState(context.open),
                role: "dialog",
                id: context.contentId,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                  ...contentProps.style,
                  // re-namespace exposed content custom properties
                  ...{
                    "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                  }
                }
              }
            )
          }
        )
      }
    );
  }
);
var CLOSE_NAME = "PopoverClose";
var PopoverClose = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
      }
    );
  }
);
PopoverClose.displayName = CLOSE_NAME;
var ARROW_NAME = "PopoverArrow";
var PopoverArrow = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
PopoverArrow.displayName = ARROW_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
var Root22 = Popover;
var Trigger2 = PopoverTrigger;
var Portal3 = PopoverPortal;
var Content22 = PopoverContent;

// src/components/ui/popover.tsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var Popover2 = Root22;
var PopoverTrigger2 = Trigger2;
var PopoverContent2 = React19.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Portal3, { children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
  Content22,
  {
    ref,
    align,
    sideOffset,
    className: cn(
      "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
) }));
PopoverContent2.displayName = Content22.displayName;

// src/components/ui/switch.tsx
var React21 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-switch/dist/index.mjs
var React20 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var SWITCH_NAME = "Switch";
var [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);
var [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);
var Switch = React20.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSwitch,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      disabled,
      value = "on",
      onCheckedChange,
      form,
      ...switchProps
    } = props;
    const [button, setButton] = React20.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React20.useRef(false);
    const isFormControl = button ? form || !!button.closest("form") : true;
    const [checked, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked ?? false,
      onChange: onCheckedChange,
      caller: SWITCH_NAME
    });
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "switch",
          "aria-checked": checked,
          "aria-required": required,
          "data-state": getState2(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...switchProps,
          ref: composedRefs,
          onClick: composeEventHandlers(props.onClick, (event) => {
            setChecked((prevChecked) => !prevChecked);
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
            }
          })
        }
      ),
      isFormControl && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        SwitchBubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          form,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Switch.displayName = SWITCH_NAME;
var THUMB_NAME = "SwitchThumb";
var SwitchThumb = React20.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSwitch, ...thumbProps } = props;
    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      Primitive.span,
      {
        "data-state": getState2(context.checked),
        "data-disabled": context.disabled ? "" : void 0,
        ...thumbProps,
        ref: forwardedRef
      }
    );
  }
);
SwitchThumb.displayName = THUMB_NAME;
var BUBBLE_INPUT_NAME = "SwitchBubbleInput";
var SwitchBubbleInput = React20.forwardRef(
  ({
    __scopeSwitch,
    control,
    checked,
    bubbles = true,
    ...props
  }, forwardedRef) => {
    const ref = React20.useRef(null);
    const composedRefs = useComposedRefs(ref, forwardedRef);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React20.useEffect(() => {
      const input = ref.current;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "input",
      {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: checked,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        }
      }
    );
  }
);
SwitchBubbleInput.displayName = BUBBLE_INPUT_NAME;
function getState2(checked) {
  return checked ? "checked" : "unchecked";
}
var Root5 = Switch;
var Thumb = SwitchThumb;

// src/components/ui/switch.tsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var Switch2 = React21.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  Root5,
  {
    className: cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    ),
    ...props,
    ref,
    children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      Thumb,
      {
        className: cn(
          "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
        )
      }
    )
  }
));
Switch2.displayName = Root5.displayName;

// src/components/ui/checkbox.tsx
var React23 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-checkbox/dist/index.mjs
var React22 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var CHECKBOX_NAME = "Checkbox";
var [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);
var [CheckboxProviderImpl, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
function CheckboxProvider(props) {
  const {
    __scopeCheckbox,
    checked: checkedProp,
    children,
    defaultChecked,
    disabled,
    form,
    name,
    onCheckedChange,
    required,
    value = "on",
    // @ts-expect-error
    internal_do_not_use_render
  } = props;
  const [checked, setChecked] = useControllableState({
    prop: checkedProp,
    defaultProp: defaultChecked ?? false,
    onChange: onCheckedChange,
    caller: CHECKBOX_NAME
  });
  const [control, setControl] = React22.useState(null);
  const [bubbleInput, setBubbleInput] = React22.useState(null);
  const hasConsumerStoppedPropagationRef = React22.useRef(false);
  const isFormControl = control ? !!form || !!control.closest("form") : (
    // We set this to true by default so that events bubble to forms without JS (SSR)
    true
  );
  const context = {
    checked,
    disabled,
    setChecked,
    control,
    setControl,
    name,
    form,
    value,
    hasConsumerStoppedPropagationRef,
    required,
    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,
    isFormControl,
    bubbleInput,
    setBubbleInput
  };
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    CheckboxProviderImpl,
    {
      scope: __scopeCheckbox,
      ...context,
      children: isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children
    }
  );
}
var TRIGGER_NAME2 = "CheckboxTrigger";
var CheckboxTrigger = React22.forwardRef(
  ({ __scopeCheckbox, onKeyDown, onClick, ...checkboxProps }, forwardedRef) => {
    const {
      control,
      value,
      disabled,
      checked,
      required,
      setControl,
      setChecked,
      hasConsumerStoppedPropagationRef,
      isFormControl,
      bubbleInput
    } = useCheckboxContext(TRIGGER_NAME2, __scopeCheckbox);
    const composedRefs = useComposedRefs(forwardedRef, setControl);
    const initialCheckedStateRef = React22.useRef(checked);
    React22.useEffect(() => {
      const form = control?.form;
      if (form) {
        const reset = () => setChecked(initialCheckedStateRef.current);
        form.addEventListener("reset", reset);
        return () => form.removeEventListener("reset", reset);
      }
    }, [control, setChecked]);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Primitive.button,
      {
        type: "button",
        role: "checkbox",
        "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
        "aria-required": required,
        "data-state": getState3(checked),
        "data-disabled": disabled ? "" : void 0,
        disabled,
        value,
        ...checkboxProps,
        ref: composedRefs,
        onKeyDown: composeEventHandlers(onKeyDown, (event) => {
          if (event.key === "Enter") event.preventDefault();
        }),
        onClick: composeEventHandlers(onClick, (event) => {
          setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);
          if (bubbleInput && isFormControl) {
            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
            if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
          }
        })
      }
    );
  }
);
CheckboxTrigger.displayName = TRIGGER_NAME2;
var Checkbox = React22.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeCheckbox,
      name,
      checked,
      defaultChecked,
      required,
      disabled,
      value,
      onCheckedChange,
      form,
      ...checkboxProps
    } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      CheckboxProvider,
      {
        __scopeCheckbox,
        checked,
        defaultChecked,
        disabled,
        required,
        onCheckedChange,
        name,
        form,
        value,
        internal_do_not_use_render: ({ isFormControl }) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            CheckboxTrigger,
            {
              ...checkboxProps,
              ref: forwardedRef,
              __scopeCheckbox
            }
          ),
          isFormControl && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            CheckboxBubbleInput,
            {
              __scopeCheckbox
            }
          )
        ] })
      }
    );
  }
);
Checkbox.displayName = CHECKBOX_NAME;
var INDICATOR_NAME = "CheckboxIndicator";
var CheckboxIndicator = React22.forwardRef(
  (props, forwardedRef) => {
    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;
    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Presence,
      {
        present: forceMount || isIndeterminate(context.checked) || context.checked === true,
        children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          Primitive.span,
          {
            "data-state": getState3(context.checked),
            "data-disabled": context.disabled ? "" : void 0,
            ...indicatorProps,
            ref: forwardedRef,
            style: { pointerEvents: "none", ...props.style }
          }
        )
      }
    );
  }
);
CheckboxIndicator.displayName = INDICATOR_NAME;
var BUBBLE_INPUT_NAME2 = "CheckboxBubbleInput";
var CheckboxBubbleInput = React22.forwardRef(
  ({ __scopeCheckbox, ...props }, forwardedRef) => {
    const {
      control,
      hasConsumerStoppedPropagationRef,
      checked,
      defaultChecked,
      required,
      disabled,
      name,
      value,
      form,
      bubbleInput,
      setBubbleInput
    } = useCheckboxContext(BUBBLE_INPUT_NAME2, __scopeCheckbox);
    const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React22.useEffect(() => {
      const input = bubbleInput;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      const bubbles = !hasConsumerStoppedPropagationRef.current;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        input.indeterminate = isIndeterminate(checked);
        setChecked.call(input, isIndeterminate(checked) ? false : checked);
        input.dispatchEvent(event);
      }
    }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);
    const defaultCheckedRef = React22.useRef(isIndeterminate(checked) ? false : checked);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Primitive.input,
      {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: defaultChecked ?? defaultCheckedRef.current,
        required,
        disabled,
        name,
        value,
        form,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0,
          // We transform because the input is absolutely positioned but we have
          // rendered it **after** the button. This pulls it back to sit on top
          // of the button.
          transform: "translateX(-100%)"
        }
      }
    );
  }
);
CheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME2;
function isFunction(value) {
  return typeof value === "function";
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState3(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}

// src/components/ui/checkbox.tsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var Checkbox2 = React23.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
  Checkbox,
  {
    ref,
    className: cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    ),
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      CheckboxIndicator,
      {
        className: cn("flex items-center justify-center text-current"),
        children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Check, { className: "h-4 w-4" })
      }
    )
  }
));
Checkbox2.displayName = Checkbox.displayName;

// src/components/ui/separator.tsx
var React25 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-separator/dist/index.mjs
var React24 = __toESM(require_react(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var NAME2 = "Separator";
var DEFAULT_ORIENTATION = "horizontal";
var ORIENTATIONS = ["horizontal", "vertical"];
var Separator = React24.forwardRef((props, forwardedRef) => {
  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;
  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;
  const ariaOrientation = orientation === "vertical" ? orientation : void 0;
  const semanticProps = decorative ? { role: "none" } : { "aria-orientation": ariaOrientation, role: "separator" };
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    Primitive.div,
    {
      "data-orientation": orientation,
      ...semanticProps,
      ...domProps,
      ref: forwardedRef
    }
  );
});
Separator.displayName = NAME2;
function isValidOrientation(orientation) {
  return ORIENTATIONS.includes(orientation);
}
var Root6 = Separator;

// src/components/ui/separator.tsx
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var Separator2 = React25.forwardRef(
  ({ className, orientation = "horizontal", decorative = true, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    Root6,
    {
      ref,
      decorative,
      orientation,
      className: cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      ),
      ...props
    }
  )
);
Separator2.displayName = Root6.displayName;

// src/types/universal-form.ts
var ContentType = /* @__PURE__ */ ((ContentType2) => {
  ContentType2["TASK"] = "TASK";
  ContentType2["NOTE"] = "NOTE";
  ContentType2["CALENDAR_EVENT"] = "CALENDAR_EVENT";
  ContentType2["MIXED"] = "MIXED";
  return ContentType2;
})(ContentType || {});

// src/components/forms/UniversalInputForm.tsx
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var PRIORITY_CONFIGS = {
  ["low" /* LOW */]: { level: "low" /* LOW */, dots: 1, color: "bg-krushr-priority-low" },
  ["medium" /* MEDIUM */]: { level: "medium" /* MEDIUM */, dots: 2, color: "bg-krushr-priority-medium" },
  ["high" /* HIGH */]: { level: "high" /* HIGH */, dots: 3, color: "bg-krushr-priority-high" },
  ["critical" /* CRITICAL */]: { level: "critical" /* CRITICAL */, dots: 4, color: "bg-krushr-priority-critical" }
};
var DEFAULT_WORKFLOW = {
  createVideoMeeting: true,
  createCall: true,
  kanbanTaskBoard: true,
  notes: true,
  ganttTimeline: true,
  ganttDependency: false,
  reminder: true,
  notifyTeam: false,
  changesNotifyTeam: false,
  reminders: [
    { enabled: true, timeBefore: "1d", type: "notification" },
    { enabled: true, timeBefore: "1h", type: "notification" }
  ]
};
var DEFAULT_RECURRING = {
  enabled: false,
  pattern: "weekly",
  interval: 1,
  daysOfWeek: []
};
function UniversalInputForm({
  open,
  onClose,
  onSuccess,
  initialData,
  contentType = "TASK" /* TASK */,
  workspaceId,
  projectId,
  kanbanColumnId,
  showWorkflowToggles = true,
  showFileUploads = true,
  allowContentTypeSwitch = false,
  compactMode = false,
  requiredFields = ["title"],
  maxTitleLength = 200,
  maxDescriptionLength = 5e3
}) {
  const [formData, setFormData] = (0, import_react3.useState)(() => ({
    contentType,
    title: "",
    description: "",
    priority: "medium" /* MEDIUM */,
    tags: [],
    allDay: false,
    status: "TODO" /* TODO */,
    teamMembers: [],
    checklist: [],
    subtasks: [],
    attachments: [],
    workflow: DEFAULT_WORKFLOW,
    recurring: DEFAULT_RECURRING,
    workspaceId,
    ...initialData
  }));
  const [currentTag, setCurrentTag] = (0, import_react3.useState)("");
  const [newChecklistItem, setNewChecklistItem] = (0, import_react3.useState)("");
  const [expandedSections, setExpandedSections] = (0, import_react3.useState)({
    dates: true,
    description: true,
    checklist: false,
    subtasks: false,
    files: false,
    workflow: true
  });
  const [validation, setValidation] = (0, import_react3.useState)({
    isValid: true,
    errors: {},
    warnings: {}
  });
  const { data: users = [] } = trpc.user.listWorkspaceMembers.useQuery(
    { workspaceId },
    { enabled: !!workspaceId }
  );
  const { data: projects = [] } = trpc.project.list.useQuery(
    { workspaceId },
    { enabled: !!workspaceId }
  );
  const { data: templates = [] } = trpc.template.list.useQuery(
    { workspaceId },
    { enabled: !!workspaceId }
  );
  const createTaskMutation = trpc.task.create.useMutation({
    onSuccess: (data2) => {
      onSuccess?.(formData, "TASK" /* TASK */);
      onClose();
      resetForm();
    }
  });
  const createNoteMutation = trpc.notes?.create?.useMutation?.({
    onSuccess: (data2) => {
      onSuccess?.(formData, "NOTE" /* NOTE */);
      onClose();
      resetForm();
    }
  }) || { mutate: () => {
  }, isLoading: false };
  const uploadFileMutation = trpc.upload.uploadTaskFile?.useMutation?.() || { mutate: () => {
  }, isLoading: false };
  const updateField = (0, import_react3.useCallback)((field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  }, []);
  const handleFileUpload = (0, import_react3.useCallback)(async (files) => {
    try {
      const newAttachments = [];
      for (const file of files) {
        const attachment = {
          name: file.name,
          size: file.size,
          type: file.type,
          file
        };
        newAttachments.push(attachment);
      }
      updateField("attachments", [...formData.attachments, ...newAttachments]);
    } catch (error) {
      console.error("File preparation error:", error);
    }
  }, [formData.attachments, updateField]);
  const handleRemoveFile = (0, import_react3.useCallback)((index) => {
    const newAttachments = formData.attachments.filter((_, i) => i !== index);
    updateField("attachments", newAttachments);
  }, [formData.attachments, updateField]);
  const isEditMode = (0, import_react3.useMemo)(() => !!formData.id, [formData.id]);
  const isLoading = (0, import_react3.useMemo)(
    () => createTaskMutation.isLoading || createNoteMutation.isLoading || uploadFileMutation.isLoading,
    [createTaskMutation.isLoading, createNoteMutation.isLoading, uploadFileMutation.isLoading]
  );
  const resetForm = (0, import_react3.useCallback)(() => {
    setFormData({
      contentType,
      title: "",
      description: "",
      priority: "medium" /* MEDIUM */,
      tags: [],
      allDay: false,
      status: "TODO" /* TODO */,
      teamMembers: [],
      checklist: [],
      subtasks: [],
      attachments: [],
      workflow: DEFAULT_WORKFLOW,
      recurring: DEFAULT_RECURRING,
      workspaceId,
      ...initialData
    });
    setCurrentTag("");
    setNewChecklistItem("");
    setValidation({ isValid: true, errors: {}, warnings: {} });
  }, [contentType, workspaceId, initialData]);
  const validateForm = (0, import_react3.useCallback)(() => {
    const errors = {};
    const warnings = {};
    if (requiredFields.includes("title") && !formData.title.trim()) {
      errors.title = "Title is required";
    }
    if (formData.title.length > maxTitleLength) {
      errors.title = `Title must be less than ${maxTitleLength} characters`;
    }
    if (formData.description.length > maxDescriptionLength) {
      errors.description = `Description must be less than ${maxDescriptionLength} characters`;
    }
    if (formData.startDate && formData.endDate && formData.startDate > formData.endDate) {
      errors.dates = "Start date must be before end date";
    }
    if (formData.contentType === "TASK" /* TASK */ && !formData.assigneeId) {
      warnings.assignee = "Consider assigning this task to someone";
    }
    const result = {
      isValid: Object.keys(errors).length === 0,
      errors,
      warnings
    };
    setValidation(result);
    return result;
  }, [formData, requiredFields, maxTitleLength, maxDescriptionLength]);
  const handleSubmit = (0, import_react3.useCallback)(async () => {
    const validation2 = validateForm();
    if (!validation2.isValid) return;
    try {
      switch (formData.contentType) {
        case "TASK" /* TASK */:
          await createTaskMutation.mutateAsync({
            title: formData.title,
            description: formData.description,
            priority: formData.priority,
            status: formData.status,
            dueDate: formData.endDate?.toISOString(),
            assigneeId: formData.assigneeId,
            estimatedHours: formData.estimatedHours,
            tags: formData.tags,
            workspaceId: formData.workspaceId,
            projectId: projectId || formData.projectId,
            kanbanColumnId: kanbanColumnId || formData.kanbanColumnId
          });
          break;
        case "NOTE" /* NOTE */:
          createNoteMutation.mutate({
            title: formData.title,
            content: formData.description,
            tags: formData.tags,
            workspaceId: formData.workspaceId
          });
          break;
        case "CALENDAR_EVENT" /* CALENDAR_EVENT */:
          console.log("Calendar event creation not yet implemented");
          break;
        case "MIXED" /* MIXED */:
          console.log("Mixed content creation not yet implemented");
          break;
      }
    } catch (error) {
      console.error("Form submission error:", error);
    }
  }, [formData, validateForm, createTaskMutation, createNoteMutation, projectId, kanbanColumnId]);
  const toggleSection = (0, import_react3.useCallback)((section) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }));
  }, []);
  const handleAddTag = (0, import_react3.useCallback)(() => {
    if (currentTag && !formData.tags.includes(currentTag)) {
      updateField("tags", [...formData.tags, currentTag]);
      setCurrentTag("");
    }
  }, [currentTag, formData.tags, updateField]);
  const handleRemoveTag = (0, import_react3.useCallback)((tag) => {
    updateField("tags", formData.tags.filter((t2) => t2 !== tag));
  }, [formData.tags, updateField]);
  const handleAddChecklistItem = (0, import_react3.useCallback)(() => {
    if (newChecklistItem.trim()) {
      const newItem = {
        text: newChecklistItem.trim(),
        completed: false,
        order: formData.checklist.length
      };
      updateField("checklist", [...formData.checklist, newItem]);
      setNewChecklistItem("");
    }
  }, [newChecklistItem, formData.checklist, updateField]);
  const handleUpdateChecklistItem = (0, import_react3.useCallback)((index, updates) => {
    const newChecklist = [...formData.checklist];
    newChecklist[index] = { ...newChecklist[index], ...updates };
    updateField("checklist", newChecklist);
  }, [formData.checklist, updateField]);
  const handleRemoveChecklistItem = (0, import_react3.useCallback)((index) => {
    updateField("checklist", formData.checklist.filter((_, i) => i !== index));
  }, [formData.checklist, updateField]);
  const renderPriorityDots = (0, import_react3.useCallback)((priority) => {
    const config = PRIORITY_CONFIGS[priority];
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "flex items-center gap-1", children: Array.from({ length: 5 }, (_, i) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
      "div",
      {
        className: cn(
          "w-3 h-3 rounded-full",
          i < config.dots ? config.color : "bg-gray-200"
        )
      },
      i
    )) });
  }, []);
  const renderSectionHeader = (0, import_react3.useCallback)((title, sectionKey, showEditIcon = false) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between mb-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { className: "text-base font-medium", children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
      showEditIcon && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SquarePen, { className: "h-4 w-4 text-gray-400" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "h-8 w-8 p-0",
          onClick: () => toggleSection(sectionKey),
          children: expandedSections[sectionKey] ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ChevronUp, { className: "h-4 w-4 text-gray-400" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ChevronDown, { className: "h-4 w-4 text-gray-400" })
        }
      )
    ] })
  ] }), [expandedSections, toggleSection]);
  (0, import_react3.useEffect)(() => {
    if (initialData) {
      setFormData((prev) => ({ ...prev, ...initialData }));
    }
  }, [initialData]);
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Dialog, { open, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(DialogContent, { className: "max-w-5xl max-h-[95vh] overflow-hidden p-0", children: [
    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(DialogHeader, { className: "px-6 py-4 border-b", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(DialogTitle, { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: isEditMode ? "Edit Item" : "New Item" }),
      allowContentTypeSwitch && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
        Select,
        {
          value: formData.contentType,
          onValueChange: (value) => updateField("contentType", value),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectTrigger, { className: "w-40", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectValue, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(SelectContent, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "TASK" /* TASK */, children: "Task" }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "NOTE" /* NOTE */, children: "Note" }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "CALENDAR_EVENT" /* CALENDAR_EVENT */, children: "Calendar Event" }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "MIXED" /* MIXED */, children: "Mixed" })
            ] })
          ]
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ScrollArea, { className: "flex-1 px-6", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "py-6 space-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "pt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex gap-4 mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-32 h-20 bg-gradient-to-br from-blue-100 to-blue-200 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Paperclip, { className: "w-8 h-8 text-blue-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-32 h-20 bg-gradient-to-br from-green-100 to-green-200 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Tag, { className: "w-8 h-8 text-green-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-32 h-20 bg-gradient-to-br from-purple-100 to-purple-200 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Users, { className: "w-8 h-8 text-purple-600" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex justify-between items-start mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2 mb-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                FloatingInput,
                {
                  value: formData.title,
                  onChange: (e) => updateField("title", e.target.value),
                  label: "Enter title...",
                  className: "text-2xl font-medium text-krushr-primary",
                  maxLength: maxTitleLength
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SquarePen, { className: "h-4 w-4 text-gray-400" }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2 mb-4", children: [
              formData.tags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Badge, { variant: "secondary", className: "gap-1", children: [
                tag,
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-4 w-4 p-0 hover:text-destructive",
                    onClick: () => handleRemoveTag(tag),
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(X, { className: "h-3 w-3" })
                  }
                )
              ] }, tag)),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  FloatingInput,
                  {
                    value: currentTag,
                    onChange: (e) => setCurrentTag(e.target.value),
                    onKeyPress: (e) => e.key === "Enter" && handleAddTag(),
                    label: "+ Add Tag",
                    className: "w-24 h-7 text-xs"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Button,
                  {
                    variant: "outline",
                    size: "sm",
                    onClick: handleAddTag,
                    className: "h-7 px-2",
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Plus, { className: "w-3 h-3" })
                  }
                )
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "ml-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { className: "text-sm text-gray-600 mb-2 block", children: "Priority" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
              Select,
              {
                value: formData.priority,
                onValueChange: (value) => updateField("priority", value),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectTrigger, { className: "w-32", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectValue, { children: renderPriorityDots(formData.priority) }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectContent, { children: Object.values(Priority).map((priority) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: priority, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
                    renderPriorityDots(priority),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "capitalize", children: priority.toLowerCase() })
                  ] }) }, priority)) })
                ]
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex -space-x-2 mr-2", children: [
            formData.teamMembers.slice(0, 3).map((member, index) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Avatar, { className: "w-8 h-8 border-2 border-white", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(AvatarImage, { src: member.avatar }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(AvatarFallback, { className: "text-xs", children: member.name.charAt(0) })
            ] }, member.userId)),
            formData.teamMembers.length > 3 && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-8 h-8 rounded-full bg-gray-200 border-2 border-white flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "text-xs font-medium", children: [
              "+",
              formData.teamMembers.length - 3
            ] }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "font-medium", children: "Design Team" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "text-sm text-gray-500", children: [
              "Last updated by ",
              formData.lastUpdatedBy || "Unknown",
              " at ",
              format(/* @__PURE__ */ new Date(), "h:mm a, M/d/yy")
            ] })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "grid grid-cols-3 gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "col-span-2 space-y-6", children: [
          (formData.contentType === "CALENDAR_EVENT" /* CALENDAR_EVENT */ || formData.contentType === "MIXED" /* MIXED */) && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { children: "All Day" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
              Switch2,
              {
                checked: formData.allDay,
                onCheckedChange: (checked) => updateField("allDay", checked)
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Dates", "dates") }),
            expandedSections.dates && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "grid grid-cols-3 gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { className: "text-xs text-gray-500 uppercase tracking-wide", children: "Start Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Popover2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
                      Button,
                      {
                        variant: "outline",
                        className: cn(
                          "w-full justify-start text-left font-normal mt-1",
                          !formData.startDate && "text-muted-foreground"
                        ),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                          formData.startDate ? format(formData.startDate, "MMM dd") : "Start Date"
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                      Calendar2,
                      {
                        mode: "single",
                        selected: formData.startDate,
                        onSelect: (date) => updateField("startDate", date),
                        initialFocus: true
                      }
                    ) })
                  ] })
                ] }),
                !formData.allDay && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  FloatingInput,
                  {
                    type: "time",
                    value: formData.startTime || "",
                    onChange: (e) => updateField("startTime", e.target.value),
                    label: "Time",
                    className: "mt-1"
                  }
                ) }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { className: "text-xs text-gray-500 uppercase tracking-wide", children: "Duration" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
                    Select,
                    {
                      value: formData.duration || "",
                      onValueChange: (value) => updateField("duration", value),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectTrigger, { className: "mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectValue, { placeholder: "Duration" }) }),
                        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(SelectContent, { children: [
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "15m", children: "15 minutes" }),
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "30m", children: "30 minutes" }),
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "1h", children: "1 hour" }),
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "2h", children: "2 hours" }),
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "4h", children: "4 hours" }),
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SelectItem, { value: "1d", children: "1 day" })
                        ] })
                      ]
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { className: "text-xs text-gray-500 uppercase tracking-wide", children: "End Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Popover2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
                      Button,
                      {
                        variant: "outline",
                        className: cn(
                          "w-full justify-start text-left font-normal mt-1",
                          !formData.endDate && "text-muted-foreground"
                        ),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                          formData.endDate ? format(formData.endDate, "MMM dd") : "End Date"
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                      Calendar2,
                      {
                        mode: "single",
                        selected: formData.endDate,
                        onSelect: (date) => updateField("endDate", date),
                        initialFocus: true
                      }
                    ) })
                  ] })
                ] }),
                !formData.allDay && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  FloatingInput,
                  {
                    type: "time",
                    value: formData.endTime || "",
                    onChange: (e) => updateField("endTime", e.target.value),
                    label: "End Time",
                    className: "mt-1"
                  }
                ) })
              ] })
            ] })
          ] }),
          (formData.contentType === "CALENDAR_EVENT" /* CALENDAR_EVENT */ || formData.contentType === "MIXED" /* MIXED */) && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
            FloatingInput,
            {
              value: formData.calendar || "",
              onChange: (e) => updateField("calendar", e.target.value),
              label: "Calendar Email",
              className: "mt-1"
            }
          ) }),
          (formData.contentType === "CALENDAR_EVENT" /* CALENDAR_EVENT */ || formData.contentType === "MIXED" /* MIXED */) && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { children: "Recurring" }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                Switch2,
                {
                  checked: formData.recurring.enabled,
                  onCheckedChange: (checked) => updateField("recurring", { ...formData.recurring, enabled: checked })
                }
              )
            ] }),
            formData.recurring.enabled && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Popover2, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { variant: "outline", className: "justify-start", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                  formData.recurring.startDate ? format(formData.recurring.startDate, "PPP") : "Start Date"
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Calendar2,
                  {
                    mode: "single",
                    selected: formData.recurring.startDate,
                    onSelect: (date) => updateField("recurring", { ...formData.recurring, startDate: date }),
                    initialFocus: true
                  }
                ) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Popover2, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { variant: "outline", className: "justify-start", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                  formData.recurring.endDate ? format(formData.recurring.endDate, "PPP") : "End Date"
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Calendar2,
                  {
                    mode: "single",
                    selected: formData.recurring.endDate,
                    onSelect: (date) => updateField("recurring", { ...formData.recurring, endDate: date }),
                    initialFocus: true
                  }
                ) })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Description & Notes", "description", true) }),
            expandedSections.description && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "border rounded-lg p-4", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                Textarea,
                {
                  value: formData.description,
                  onChange: (e) => updateField("description", e.target.value),
                  placeholder: "Add a detailed description...",
                  className: "min-h-[120px] border-0 resize-none focus-visible:ring-0",
                  maxLength: maxDescriptionLength
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-center gap-1 py-2 border-t", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(SquarePen, { className: "h-4 w-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(X, { className: "h-4 w-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Separator2, { orientation: "vertical", className: "h-6" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", className: "font-bold", children: "B" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", className: "italic", children: "I" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", className: "underline", children: "U" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Separator2, { orientation: "vertical", className: "h-6" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: "\u2022" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: "1." }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Link, { className: "h-4 w-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: "@" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", children: "\u{1F60A}" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Tag" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Checklist", "checklist", true) }),
            expandedSections.checklist && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "space-y-4", children: [
              formData.checklist.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Checkbox2,
                  {
                    checked: item.completed,
                    onCheckedChange: (checked) => handleUpdateChecklistItem(index, { completed: !!checked })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  FloatingInput,
                  {
                    label: "Checklist item",
                    value: item.text,
                    onChange: (e) => handleUpdateChecklistItem(index, { text: e.target.value }),
                    className: "flex-1"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => handleRemoveChecklistItem(index),
                    className: "h-8 w-8 p-0 text-krushr-secondary hover:text-krushr-secondary-600",
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(X, { className: "h-4 w-4" })
                  }
                )
              ] }, index)),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  FloatingInput,
                  {
                    value: newChecklistItem,
                    onChange: (e) => setNewChecklistItem(e.target.value),
                    onKeyPress: (e) => e.key === "Enter" && handleAddChecklistItem(),
                    label: "Add new item...",
                    className: "flex-1"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Button,
                  {
                    variant: "outline",
                    size: "sm",
                    onClick: handleAddChecklistItem,
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Plus, { className: "w-4 h-4" })
                  }
                )
              ] })
            ] })
          ] }),
          showFileUploads && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Files", "files", true) }),
            expandedSections.files && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "space-y-4", children: [
              formData.attachments.map((file, index) => {
                const sizeInKB = (file.size / 1024).toFixed(1);
                const isImage = file.type?.startsWith("image/");
                return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-3 p-3 border rounded-lg", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden", children: isImage && file.file ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                    "img",
                    {
                      src: URL.createObjectURL(file.file),
                      alt: file.name,
                      className: "w-full h-full object-cover"
                    }
                  ) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Paperclip, { className: "w-6 h-6 text-gray-500" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "font-medium truncate", children: file.name }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "text-sm text-gray-500", children: [
                      sizeInKB,
                      " KB"
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
                    file.url && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                      Button,
                      {
                        variant: "ghost",
                        size: "sm",
                        className: "h-8 w-8 p-0 text-krushr-info hover:text-krushr-info-600",
                        onClick: () => window.open(file.url, "_blank"),
                        children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Download, { className: "h-4 w-4" })
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                      Button,
                      {
                        variant: "ghost",
                        size: "sm",
                        className: "h-8 w-8 p-0 text-krushr-secondary hover:text-krushr-secondary-600",
                        onClick: () => handleRemoveFile(index),
                        children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Trash2, { className: "h-4 w-4" })
                      }
                    )
                  ] })
                ] }, index);
              }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                FileUpload,
                {
                  onUpload: handleFileUpload,
                  accept: {
                    "image/*": [".jpg", ".jpeg", ".png", ".gif", ".webp"],
                    "application/pdf": [".pdf"],
                    "text/*": [".txt", ".md"],
                    "application/msword": [".doc"],
                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [".docx"]
                  },
                  maxSize: 10 * 1024 * 1024,
                  maxFiles: 5,
                  className: "mt-4"
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardTitle, { children: "Workflow" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardContent, { className: "space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { variant: "outline", className: "w-full justify-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Play, { className: "w-4 h-4 mr-2 text-krushr-success" }),
                "Load Template"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { variant: "outline", className: "w-full justify-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(WandSparkles, { className: "w-4 h-4 mr-2 text-krushr-secondary" }),
                "Set As Template"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { variant: "outline", className: "w-full justify-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Share2, { className: "w-4 h-4 mr-2 text-krushr-info" }),
                "Share"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { className: "w-full justify-start bg-krushr-secondary hover:bg-krushr-secondary-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
                "Team"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Button, { className: "w-full justify-start bg-krushr-primary hover:bg-krushr-primary-700", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
                "User"
              ] })
            ] }) })
          ] }),
          showWorkflowToggles && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CardTitle, { children: "Workflow Additions" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "space-y-4", children: [
              Object.entries({
                "Create video meeting": "createVideoMeeting",
                "Create call": "createCall",
                "Kanban task board": "kanbanTaskBoard",
                "Notes": "notes",
                "Gantt timeline": "ganttTimeline",
                "Gantt Dependency": "ganttDependency",
                "Reminder": "reminder",
                "Notify team": "notifyTeam",
                "Changes notify team": "changesNotifyTeam"
              }).map(([label, key]) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Label2, { className: "text-sm", children: label }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                    Switch2,
                    {
                      checked: formData.workflow[key],
                      onCheckedChange: (checked) => updateField("workflow", {
                        ...formData.workflow,
                        [key]: checked
                      })
                    }
                  ),
                  ["kanbanTaskBoard", "notes", "ganttTimeline"].includes(key) && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ChevronDown, { className: "h-4 w-4 text-gray-400" }) })
                ] })
              ] }, key)),
              formData.workflow.reminder && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "pl-6 space-y-2 border-l-2 border-gray-200", children: [
                formData.workflow.reminders.map((reminder, index) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center text-gray-700", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-warning mr-3" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "text-sm", children: reminder.timeBefore === "1d" ? "1 Day Prior" : "1 Hour Prior" })
                ] }, index)),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "text-krushr-primary text-lg font-bold cursor-pointer hover:text-krushr-primary-700", children: "+" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(CardContent, { className: "pt-6 space-y-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
              Button,
              {
                className: "w-full justify-start bg-krushr-success hover:bg-krushr-success-600",
                onClick: () => {
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CircleCheckBig, { className: "w-4 h-4 mr-2" }),
                  "Mark As Complete"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
              Button,
              {
                variant: "destructive",
                className: "w-full justify-start",
                onClick: () => {
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Trash2, { className: "w-4 h-4 mr-2" }),
                  "Delete"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
              Button,
              {
                className: "w-full justify-start bg-krushr-primary hover:bg-krushr-primary-700",
                onClick: handleSubmit,
                disabled: isLoading || !validation.isValid,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Save, { className: "w-4 h-4 mr-2" }),
                  isLoading ? "Saving..." : "Save Changes"
                ]
              }
            )
          ] }) })
        ] })
      ] })
    ] }) }),
    Object.keys(validation.errors).length > 0 && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "px-6 py-3 border-t bg-krushr-secondary-50", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "text-sm text-krushr-secondary-600", children: Object.values(validation.errors).join(", ") }) })
  ] }) });
}

// src/components/forms/UniversalFormDemo.tsx
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
function UniversalFormDemo() {
  const [isFormOpen, setIsFormOpen] = (0, import_react4.useState)(false);
  const [selectedContentType, setSelectedContentType] = (0, import_react4.useState)("TASK" /* TASK */);
  const [recentItems, setRecentItems] = (0, import_react4.useState)([]);
  const handleFormSuccess = (data2, contentType) => {
    console.log("Form submitted successfully:", { data: data2, contentType });
    const newItem = {
      id: Date.now().toString(),
      title: data2.title,
      type: contentType,
      createdAt: /* @__PURE__ */ new Date()
    };
    setRecentItems((prev) => [newItem, ...prev.slice(0, 4)]);
  };
  const openForm = (type) => {
    setSelectedContentType(type);
    setIsFormOpen(true);
  };
  const getContentTypeIcon = (type) => {
    switch (type) {
      case "TASK" /* TASK */:
        return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Kanban, { className: "w-4 h-4" });
      case "NOTE" /* NOTE */:
        return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(FileText, { className: "w-4 h-4" });
      case "CALENDAR_EVENT" /* CALENDAR_EVENT */:
        return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Calendar, { className: "w-4 h-4" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Plus, { className: "w-4 h-4" });
    }
  };
  const getContentTypeColor = (type) => {
    switch (type) {
      case "TASK" /* TASK */:
        return "bg-blue-100 text-blue-800";
      case "NOTE" /* NOTE */:
        return "bg-green-100 text-green-800";
      case "CALENDAR_EVENT" /* CALENDAR_EVENT */:
        return "bg-purple-100 text-purple-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "p-6 max-w-4xl mx-auto space-y-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h1", { className: "text-3xl font-bold text-gray-900 mb-2", children: "Universal Input Form Demo" }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-gray-600", children: "Comprehensive form for creating tasks, notes, calendar events, and mixed content" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { children: "Quick Actions" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
            Button,
            {
              onClick: () => openForm("TASK" /* TASK */),
              className: "h-24 flex flex-col items-center justify-center gap-2",
              variant: "outline",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Kanban, { className: "w-8 h-8 text-blue-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: "Create Task" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
            Button,
            {
              onClick: () => openForm("NOTE" /* NOTE */),
              className: "h-24 flex flex-col items-center justify-center gap-2",
              variant: "outline",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(FileText, { className: "w-8 h-8 text-green-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: "Create Note" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
            Button,
            {
              onClick: () => openForm("CALENDAR_EVENT" /* CALENDAR_EVENT */),
              className: "h-24 flex flex-col items-center justify-center gap-2",
              variant: "outline",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Calendar, { className: "w-8 h-8 text-purple-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: "Create Event" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "mt-4 pt-4 border-t", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
          Button,
          {
            onClick: () => openForm("MIXED" /* MIXED */),
            className: "w-full",
            variant: "default",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
              "Universal Form (All Types)"
            ]
          }
        ) })
      ] })
    ] }),
    recentItems.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { children: "Recently Created" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "space-y-3", children: recentItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
        "div",
        {
          className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-3", children: [
              getContentTypeIcon(item.type),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "font-medium", children: item.title }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-sm text-gray-500", children: item.createdAt.toLocaleString() })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Badge, { variant: "secondary", className: getContentTypeColor(item.type), children: item.type.toLowerCase().replace("_", " ") })
          ]
        },
        item.id
      )) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { children: "Form Features" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h3", { className: "font-semibold mb-3", children: "Content Creation" }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("ul", { className: "space-y-2 text-sm text-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Multi-content type support" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Rich text editing with toolbar" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Priority and tag management" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Team assignment" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Due dates and scheduling" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h3", { className: "font-semibold mb-3", children: "Advanced Features" }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("ul", { className: "space-y-2 text-sm text-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 File attachments with drag & drop" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Recurring events" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Workflow automation toggles" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Checklist and subtasks" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("li", { children: "\u2022 Form validation and error handling" })
          ] })
        ] })
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      UniversalInputForm,
      {
        open: isFormOpen,
        onClose: () => setIsFormOpen(false),
        onSuccess: handleFormSuccess,
        contentType: selectedContentType,
        workspaceId: "demo-workspace-id",
        projectId: "demo-project-id",
        kanbanColumnId: "demo-column-id",
        showWorkflowToggles: true,
        showFileUploads: true,
        allowContentTypeSwitch: selectedContentType === "MIXED" /* MIXED */,
        initialData: {
          priority: "medium" /* MEDIUM */,
          status: "TODO" /* TODO */,
          tags: [],
          workflow: {
            createVideoMeeting: true,
            createCall: true,
            kanbanTaskBoard: true,
            notes: true,
            ganttTimeline: true,
            ganttDependency: false,
            reminder: true,
            notifyTeam: false,
            changesNotifyTeam: false,
            reminders: [
              { enabled: true, timeBefore: "1d", type: "notification" },
              { enabled: true, timeBefore: "1h", type: "notification" }
            ]
          }
        }
      }
    )
  ] });
}

// src/components/forms/UniversalInputFormCompact.tsx
var import_react5 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var DEFAULT_FORM_DATA = {
  contentType: "TASK" /* TASK */,
  title: "",
  description: "",
  priority: "medium" /* MEDIUM */,
  tags: [],
  allDay: false,
  status: "TODO" /* TODO */,
  teamMembers: [],
  checklist: [],
  subtasks: [],
  attachments: [],
  assigneeId: void 0,
  workflow: {
    createVideoMeeting: false,
    createCall: false,
    kanbanTaskBoard: false,
    notes: false,
    ganttTimeline: false,
    ganttDependency: false,
    reminder: false,
    notifyTeam: false,
    changesNotifyTeam: false,
    reminders: []
  },
  recurring: {
    enabled: false,
    pattern: "weekly",
    endDate: void 0
  },
  workspaceId: ""
};
function UniversalInputFormCompact({
  contentType = "TASK" /* TASK */,
  workspaceId,
  initialData = {},
  onSuccess,
  onClose,
  integrationMode = "panel",
  maxHeight = "400px",
  showHeader = true
}) {
  const [formData, setFormData] = (0, import_react5.useState)({
    ...DEFAULT_FORM_DATA,
    contentType,
    workspaceId,
    ...initialData
  });
  const [currentTag, setCurrentTag] = (0, import_react5.useState)("");
  const [expandedSections, setExpandedSections] = (0, import_react5.useState)({
    basic: true,
    dates: false,
    team: false,
    workflow: false
  });
  const updateField = (0, import_react5.useCallback)((field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  }, []);
  const createTaskMutation = trpc.task.create.useMutation({
    onSuccess: (data2) => {
      onSuccess?.(formData, "TASK" /* TASK */);
      onClose?.();
    }
  });
  const createNoteMutation = trpc.notes?.create?.useMutation?.({
    onSuccess: (data2) => {
      onSuccess?.(formData, "NOTE" /* NOTE */);
      onClose?.();
    }
  }) || { mutate: () => {
  }, isLoading: false };
  const toggleSection = (section) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }));
  };
  const addTag = () => {
    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {
      updateField("tags", [...formData.tags, currentTag.trim()]);
      setCurrentTag("");
    }
  };
  const removeTag = (tag) => {
    updateField("tags", formData.tags.filter((t2) => t2 !== tag));
  };
  const renderPriorityDots = (priority) => {
    const colors = {
      ["low" /* LOW */]: "bg-krushr-priority-low",
      ["medium" /* MEDIUM */]: "bg-krushr-priority-medium",
      ["high" /* HIGH */]: "bg-krushr-priority-high",
      ["critical" /* CRITICAL */]: "bg-krushr-priority-critical"
    };
    const count2 = {
      ["low" /* LOW */]: 1,
      ["medium" /* MEDIUM */]: 2,
      ["high" /* HIGH */]: 3,
      ["critical" /* CRITICAL */]: 4
    };
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex gap-0.5", children: Array.from({ length: count2[priority] }).map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: cn("w-1.5 h-1.5 rounded-full", colors[priority]) }, i)) });
  };
  const handleSubmit = async () => {
    if (!formData.title.trim()) return;
    try {
      switch (formData.contentType) {
        case "TASK" /* TASK */:
          createTaskMutation.mutate({
            title: formData.title,
            description: formData.description,
            priority: formData.priority,
            status: formData.status,
            workspaceId: formData.workspaceId,
            tags: formData.tags,
            startDate: formData.startDate,
            endDate: formData.endDate,
            assigneeId: formData.assigneeId
          });
          break;
        case "NOTE" /* NOTE */:
          createNoteMutation.mutate({
            title: formData.title,
            content: formData.description,
            workspaceId: formData.workspaceId,
            tags: formData.tags
          });
          break;
        default:
          console.log("Creating:", formData.contentType, formData);
      }
    } catch (error) {
      console.error("Failed to create item:", error);
    }
  };
  const isLoading = createTaskMutation.isLoading || createNoteMutation.isLoading;
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: cn(
    "bg-white border rounded-lg overflow-hidden",
    integrationMode === "modal" && "shadow-lg",
    integrationMode === "panel" && "border-gray-200",
    integrationMode === "inline" && "border-transparent"
  ), children: [
    showHeader && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between p-3 border-b bg-gray-50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
          Select,
          {
            value: formData.contentType,
            onValueChange: (value) => updateField("contentType", value),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectTrigger, { className: "h-7 w-auto text-sm border-none bg-transparent p-1", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectValue, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(SelectContent, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "TASK" /* TASK */, children: "\u{1F4CB} Task" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "NOTE" /* NOTE */, children: "\u{1F4DD} Note" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: ContentType.EVENT, children: "\u{1F4C5} Event" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "CALENDAR_EVENT" /* CALENDAR_EVENT */, children: "\u{1F5D3}\uFE0F Calendar" })
              ] })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex items-center gap-1", children: renderPriorityDots(formData.priority) })
      ] }),
      onClose && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: onClose,
          className: "h-6 w-6 p-0",
          children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(X, { className: "h-3 w-3" })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      "div",
      {
        className: "overflow-y-auto",
        style: { maxHeight },
        children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "p-3 space-y-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
              FloatingInput,
              {
                label: "What needs to be done?",
                value: formData.title,
                onChange: (e) => updateField("title", e.target.value),
                className: "font-medium border-none shadow-none p-0 text-base focus-visible:ring-0",
                autoFocus: true
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
              Textarea,
              {
                placeholder: "Add description...",
                value: formData.description,
                onChange: (e) => updateField("description", e.target.value),
                className: "min-h-[60px] resize-none border-none shadow-none p-0 text-base placeholder:text-gray-400 focus-visible:ring-0",
                rows: 2
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex items-center gap-2 text-sm" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "space-y-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex flex-wrap gap-1", children: formData.tags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
              Badge,
              {
                variant: "secondary",
                className: "text-sm h-5 px-1.5 gap-1",
                children: [
                  tag,
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: () => removeTag(tag),
                      className: "h-3 w-3 p-0 hover:bg-transparent",
                      children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(X, { className: "h-2 w-2" })
                    }
                  )
                ]
              },
              tag
            )) }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                FloatingInput,
                {
                  label: "Add tag",
                  value: currentTag,
                  onChange: (e) => setCurrentTag(e.target.value),
                  onKeyDown: (e) => e.key === "Enter" && addTag(),
                  className: "h-6 text-sm flex-1"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: addTag,
                  className: "h-6 w-6 p-0",
                  children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Plus, { className: "h-3 w-3" })
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("dates"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "\u{1F4C5} Dates & Timing" }),
                  expandedSections.dates ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.dates && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "p-2 border-t border-gray-100 space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex-1 grid grid-cols-3 gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm text-gray-500", children: "Priority" }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex items-center gap-1 mt-1", children: [1, 2, 3].map((level) => {
                      const isActive = formData.priority === "low" /* LOW */ && level <= 1 || formData.priority === "medium" /* MEDIUM */ && level <= 2 || formData.priority === "high" /* HIGH */ && level <= 3;
                      const targetPriority = level === 1 ? "low" /* LOW */ : level === 2 ? "medium" /* MEDIUM */ : "high" /* HIGH */;
                      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                        "button",
                        {
                          onClick: () => updateField("priority", targetPriority),
                          className: cn(
                            "w-3 h-3 rounded-full transition-colors border-2",
                            isActive ? "bg-krushr-secondary border-krushr-secondary" : "bg-white border-gray-300 hover:border-krushr-secondary/50"
                          ),
                          title: `${level === 1 ? "Low" : level === 2 ? "Medium" : "High"} Priority`
                        },
                        level
                      );
                    }) })
                  ] }),
                  formData.contentType === "TASK" /* TASK */ && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm text-gray-500", children: "Column" }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
                      Select,
                      {
                        value: formData.status,
                        onValueChange: (value) => updateField("status", value),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectTrigger, { className: "h-7 w-full border border-gray-200 text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectValue, {}) }),
                          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(SelectContent, { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "TODO" /* TODO */, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-task-todo" }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "To Do" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "IN_PROGRESS" /* IN_PROGRESS */, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-task-progress" }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "In Progress" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "DONE" /* DONE */, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-task-done" }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Done" })
                            ] }) })
                          ] })
                        ]
                      }
                    )
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm text-gray-500", children: "Assign To" }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
                      Select,
                      {
                        value: formData.assigneeId || "",
                        onValueChange: (value) => updateField("assigneeId", value),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectTrigger, { className: "h-7 w-full border border-gray-200 text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectValue, { placeholder: "Unassigned" }) }),
                          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(SelectContent, { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AvatarFallback, { className: "text-xs bg-gray-200", children: "?" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Unassigned" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "user1", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AvatarFallback, { className: "text-xs bg-krushr-primary text-white", children: "ME" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Assign to me" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "user2", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AvatarFallback, { className: "text-xs bg-krushr-secondary text-white", children: "JS" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "John Smith" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SelectItem, { value: "user3", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AvatarFallback, { className: "text-xs bg-krushr-success text-white", children: "AD" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Alice Davis" })
                            ] }) })
                          ] })
                        ]
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex-shrink-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-xs text-gray-500", children: "Start Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Popover2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
                      Button,
                      {
                        variant: "outline",
                        className: "w-full h-7 justify-start text-left text-sm",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Calendar, { className: "mr-1 h-3 w-3" }),
                          formData.startDate ? format(formData.startDate, "MMM dd") : "Date"
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                      Calendar2,
                      {
                        mode: "single",
                        selected: formData.startDate,
                        onSelect: (date) => updateField("startDate", date),
                        initialFocus: true
                      }
                    ) })
                  ] })
                ] })
              ] }),
              !formData.allDay && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex-1" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex-shrink-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm text-gray-500", children: "Start Time" }),
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                    FloatingInput,
                    {
                      type: "time",
                      label: "Time",
                      value: formData.startTime || "",
                      onChange: (e) => updateField("startTime", e.target.value),
                      className: "h-7 text-sm"
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm", children: "All Day" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  Switch2,
                  {
                    checked: formData.allDay,
                    onCheckedChange: (checked) => updateField("allDay", checked)
                  }
                )
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("team"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "\u{1F465} Team & Assignment" }),
                  expandedSections.team ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.team && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "p-2 border-t border-gray-100", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-500", children: "Team assignment features coming soon..." }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("workflow"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "\u26A1 Workflow & Automation" }),
                  expandedSections.workflow ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.workflow && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "p-2 border-t border-gray-100 space-y-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm", children: "Auto-assign to team" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  Switch2,
                  {
                    checked: formData.workflow.autoAssign,
                    onCheckedChange: (checked) => updateField("workflow", { ...formData.workflow, autoAssign: checked })
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Label2, { className: "text-sm", children: "Notify team members" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                  Switch2,
                  {
                    checked: formData.workflow.notifyTeam,
                    onCheckedChange: (checked) => updateField("workflow", { ...formData.workflow, notifyTeam: checked })
                  }
                )
              ] })
            ] })
          ] })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between p-3 border-t bg-gray-50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Upload, { className: "h-3 w-3" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("span", { className: "text-sm text-gray-500", children: [
          formData.attachments.length,
          " files"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-2", children: [
        onClose && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: onClose,
            className: "h-7 text-sm",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          Button,
          {
            onClick: handleSubmit,
            disabled: !formData.title.trim() || isLoading,
            size: "sm",
            className: "h-7 text-xs",
            children: isLoading ? "Creating..." : "Create"
          }
        )
      ] })
    ] })
  ] });
}

// src/components/kanban/KanbanQuickCreate.tsx
var import_react6 = __toESM(require_react(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
function KanbanQuickCreate({
  workspaceId,
  projectId,
  columnId,
  columnStatus,
  onTaskCreated,
  className
}) {
  const [isOpen, setIsOpen] = (0, import_react6.useState)(false);
  const contextualDefaults = {
    status: columnStatus,
    projectId,
    kanbanColumnId: columnId,
    priority: "medium" /* MEDIUM */
  };
  const handleSuccess = (data2, type) => {
    onTaskCreated?.(data2);
    setIsOpen(false);
  };
  const handleClose = () => {
    setIsOpen(false);
  };
  if (!isOpen) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
      Button,
      {
        variant: "ghost",
        className: cn(
          "w-full h-8 justify-start text-base text-krushr-secondary hover:text-krushr-secondary",
          "border-2 border-dashed border-krushr-secondary/30 hover:border-krushr-secondary/50 hover:bg-krushr-secondary/5",
          "rounded-lg mb-2 font-medium",
          className
        ),
        onClick: () => setIsOpen(true),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Plus, { className: "h-4 w-4 mr-2" }),
          "Add a card"
        ]
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Card, { className: cn("mb-2", className), children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
    UniversalInputFormCompact,
    {
      workspaceId,
      contentType: "TASK" /* TASK */,
      initialData: contextualDefaults,
      onSuccess: handleSuccess,
      onClose: handleClose,
      integrationMode: "inline",
      maxHeight: "300px",
      showHeader: false
    }
  ) });
}

// src/components/workspace/WorkspaceHeader.tsx
var import_react9 = __toESM(require_react(), 1);

// src/components/workspace/QuickCreatePanel.tsx
var import_react8 = __toESM(require_react(), 1);

// src/components/forms/SimpleCreatePanel.tsx
var import_react7 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
function SimpleCreatePanel({
  workspaceId,
  kanbanColumnId,
  open,
  onClose,
  onSuccess
}) {
  const [title, setTitle] = (0, import_react7.useState)("");
  const [description, setDescription] = (0, import_react7.useState)("");
  const [priority, setPriority] = (0, import_react7.useState)("medium" /* MEDIUM */);
  const [status, setStatus] = (0, import_react7.useState)("TODO" /* TODO */);
  const [comment, setComment] = (0, import_react7.useState)("");
  const [comments, setComments] = (0, import_react7.useState)([]);
  const [attachments, setAttachments] = (0, import_react7.useState)([]);
  const [checklistItems, setChecklistItems] = (0, import_react7.useState)([]);
  const [newChecklistItem, setNewChecklistItem] = (0, import_react7.useState)("");
  const [assigneeId, setAssigneeId] = (0, import_react7.useState)(null);
  const [dueDate, setDueDate] = (0, import_react7.useState)("");
  const [showAssigneeDropdown, setShowAssigneeDropdown] = (0, import_react7.useState)(false);
  const [showDatePicker, setShowDatePicker] = (0, import_react7.useState)(false);
  const workspaceMembersQuery = trpc.user.listWorkspaceMembers.useQuery({ workspaceId });
  const workspaceMembers = workspaceMembersQuery.data || [];
  const assigneeRef = (0, import_react7.useRef)(null);
  const datePickerRef = (0, import_react7.useRef)(null);
  (0, import_react7.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (assigneeRef.current && !assigneeRef.current.contains(event.target)) {
        setShowAssigneeDropdown(false);
      }
      if (datePickerRef.current && !datePickerRef.current.contains(event.target)) {
        setShowDatePicker(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const resetForm = () => {
    setTitle("");
    setDescription("");
    setPriority("medium" /* MEDIUM */);
    setStatus("TODO" /* TODO */);
    setComment("");
    setComments([]);
    setAttachments([]);
    setChecklistItems([]);
    setNewChecklistItem("");
    setAssigneeId(null);
    setDueDate("");
    setShowAssigneeDropdown(false);
    setShowDatePicker(false);
  };
  const handleClose = () => {
    resetForm();
    onClose();
  };
  const createTaskMutation = trpc.task.create.useMutation({
    onSuccess: async (newTask) => {
      try {
        for (const localComment of comments) {
          await addCommentMutation.mutateAsync({
            taskId: newTask.id,
            content: localComment.content
          });
        }
        for (const attachment of attachments) {
          if (attachment.file) {
            const formData = new FormData();
            formData.append("file", attachment.file);
            formData.append("taskId", newTask.id);
            try {
              await fetch("/api/upload", {
                method: "POST",
                body: formData
              });
            } catch (uploadError) {
              console.error("Failed to upload file:", attachment.name, uploadError);
            }
          }
        }
      } catch (error) {
        console.error("Failed to process post-creation actions:", error);
      }
      resetForm();
      onSuccess?.();
      onClose();
    },
    onError: (error) => {
      console.error("Failed to create task:", error);
    }
  });
  const addCommentMutation = trpc.comment.create.useMutation({
    onSuccess: () => {
      setComment("");
    }
  });
  const handleAddComment = () => {
    if (comment.trim()) {
      const newComment = {
        id: Date.now().toString(),
        content: comment.trim(),
        user: { name: "You" },
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        isLocal: true
        // Mark as local until task is created
      };
      setComments((prev) => [...prev, newComment]);
      setComment("");
    }
  };
  const handleSubmit = () => {
    if (title.trim()) {
      createTaskMutation.mutate({
        title: title.trim(),
        description: description.trim(),
        priority,
        status,
        workspaceId,
        kanbanColumnId,
        assigneeId,
        dueDate: dueDate || void 0
      });
    }
  };
  const getPriorityColor = (priority2) => {
    const colors = {
      ["low" /* LOW */]: "text-green-500 bg-green-50 border-green-200",
      ["medium" /* MEDIUM */]: "text-orange-500 bg-orange-50 border-orange-200",
      ["high" /* HIGH */]: "text-red-500 bg-red-50 border-red-200"
    };
    return colors[priority2];
  };
  const getStatusIcon = (status2) => {
    switch (status2) {
      case "DONE" /* DONE */:
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(CircleCheck, { className: "w-4 h-4 text-green-500" });
      case "IN_PROGRESS" /* IN_PROGRESS */:
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(CircleAlert, { className: "w-4 h-4 text-blue-500" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Circle, { className: "w-4 h-4 text-gray-400" });
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Sheet, { open, onOpenChange: handleClose, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(SheetContent, { className: "w-full sm:max-w-2xl overflow-y-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(SheetHeader, { className: "space-y-0", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(SheetTitle, { className: "text-xl font-brand", children: "Create New Task" }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-8 w-8 p-0 text-gray-500 hover:text-gray-700",
            onClick: handleClose,
            title: "Cancel creation",
            children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Trash2, { className: "w-4 h-4" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-8 w-8 p-0 text-gray-500 hover:text-gray-700",
            onClick: handleClose,
            title: "Close panel",
            children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(X, { className: "w-4 h-4" })
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "mt-4 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { className: "text-sm font-medium text-gray-700 block mb-2 font-manrope", children: "Task Title" }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          FloatingInput,
          {
            label: "Task Title",
            value: title,
            onChange: (e) => setTitle(e.target.value),
            className: "text-lg font-medium border border-gray-200 rounded-lg px-3 py-2 focus:border-krushr-blue focus:ring-2 focus:ring-krushr-blue/20",
            autoFocus: true
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "flex gap-1", children: ["TODO" /* TODO */, "IN_PROGRESS" /* IN_PROGRESS */, TaskStatus.REVIEW, "DONE" /* DONE */].map((statusOption) => {
          const labels2 = {
            ["TODO" /* TODO */]: "To Do",
            ["IN_PROGRESS" /* IN_PROGRESS */]: "In Progress",
            [TaskStatus.REVIEW]: "Review",
            ["DONE" /* DONE */]: "Done"
          };
          const colors = {
            ["TODO" /* TODO */]: status === statusOption ? "bg-blue-50 text-krushr-blue border-krushr-blue/30" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-blue/30",
            ["IN_PROGRESS" /* IN_PROGRESS */]: status === statusOption ? "bg-orange-50 text-orange-700 border-orange-300" : "bg-white text-gray-600 border-gray-200 hover:border-orange-300",
            [TaskStatus.REVIEW]: status === statusOption ? "bg-purple-50 text-purple-700 border-purple-300" : "bg-white text-gray-600 border-gray-200 hover:border-purple-300",
            ["DONE" /* DONE */]: status === statusOption ? "bg-green-50 text-green-700 border-green-300" : "bg-white text-gray-600 border-gray-200 hover:border-green-300"
          };
          return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
            "button",
            {
              onClick: () => setStatus(statusOption),
              className: cn(
                "px-3 py-1.5 text-sm font-medium rounded-md border transition-all duration-200",
                colors[statusOption]
              ),
              children: labels2[statusOption]
            },
            statusOption
          );
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-sm font-medium text-gray-700", children: "Priority:" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "flex gap-1", children: [1, 2, 3].map((level) => {
            const isActive = priority === "low" /* LOW */ && level <= 1 || priority === "medium" /* MEDIUM */ && level <= 2 || priority === "high" /* HIGH */ && level <= 3;
            const targetPriority = level === 1 ? "low" /* LOW */ : level === 2 ? "medium" /* MEDIUM */ : "high" /* HIGH */;
            return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "button",
              {
                onClick: () => setPriority(targetPriority),
                className: cn(
                  "w-3 h-3 rounded-full transition-colors border-2",
                  isActive ? "bg-krushr-secondary border-krushr-secondary" : "bg-white border-gray-300 hover:border-krushr-secondary/50"
                ),
                title: `${level === 1 ? "Low" : level === 2 ? "Medium" : "High"} Priority`
              },
              level
            );
          }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { className: "text-sm font-medium text-gray-700", children: "Description & Notes" }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Textarea,
          {
            placeholder: "Add a description...",
            value: description,
            onChange: (e) => setDescription(e.target.value),
            className: "min-h-[100px] resize-y text-sm border-gray-200 rounded-lg p-4 focus:border-krushr-blue focus:ring-2 focus:ring-krushr-blue/20",
            onKeyPress: (e) => {
              if (e.key === "Enter" && e.ctrlKey && !createTaskMutation.isLoading) {
                e.preventDefault();
                handleSubmit();
              }
            }
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "grid grid-cols-3 gap-4 py-3 border-t border-gray-100", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "relative", ref: assigneeRef, children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            "div",
            {
              className: "flex items-center gap-2 p-2 rounded-lg border border-gray-200 cursor-pointer hover:border-krushr-blue/50 transition-colors",
              onClick: () => setShowAssigneeDropdown(!showAssigneeDropdown),
              children: [
                assigneeId ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(import_jsx_runtime20.Fragment, { children: (() => {
                  const assignee = workspaceMembers.find((m2) => m2.id === assigneeId);
                  return assignee ? /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "w-4 h-4 rounded-full bg-krushr-blue text-white text-xs flex items-center justify-center", children: assignee.name?.charAt(0) }),
                    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-sm text-gray-900", children: assignee.name })
                  ] }) : /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(User, { className: "w-4 h-4 text-gray-500" }),
                    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-sm text-gray-600", children: "Unassigned" })
                  ] });
                })() }) : /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(User, { className: "w-4 h-4 text-gray-500" }),
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-sm text-gray-600", children: "Unassigned" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ChevronDown, { className: "w-3 h-3 text-gray-400 ml-auto" })
              ]
            }
          ),
          showAssigneeDropdown && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-h-40 overflow-y-auto", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "div",
              {
                className: "p-2 hover:bg-gray-50 cursor-pointer text-sm",
                onClick: () => {
                  setAssigneeId(null);
                  setShowAssigneeDropdown(false);
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(User, { className: "w-4 h-4 text-gray-500" }),
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-gray-600", children: "Unassigned" })
                ] })
              }
            ),
            workspaceMembers.map((member) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "div",
              {
                className: "p-2 hover:bg-gray-50 cursor-pointer text-sm",
                onClick: () => {
                  setAssigneeId(member.id);
                  setShowAssigneeDropdown(false);
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "w-4 h-4 rounded-full bg-krushr-blue text-white text-xs flex items-center justify-center", children: member.name?.charAt(0) }),
                  /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-gray-900", children: member.name })
                ] })
              },
              member.id
            ))
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "relative", ref: datePickerRef, children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
            "div",
            {
              className: "flex items-center gap-2 p-2 rounded-lg border border-gray-200 cursor-pointer hover:border-krushr-blue/50 transition-colors",
              onClick: () => setShowDatePicker(!showDatePicker),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Calendar, { className: "w-4 h-4 text-gray-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-sm text-gray-600", children: dueDate ? new Date(dueDate).toLocaleDateString() : "No date" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ChevronDown, { className: "w-3 h-3 text-gray-400 ml-auto" })
              ]
            }
          ),
          showDatePicker && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-10 p-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "input",
              {
                type: "date",
                value: dueDate,
                onChange: (e) => {
                  setDueDate(e.target.value);
                  setShowDatePicker(false);
                },
                className: "w-full p-2 border border-gray-200 rounded text-sm focus:ring-2 focus:ring-krushr-blue focus:border-krushr-blue"
              }
            ),
            dueDate && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "button",
              {
                onClick: () => {
                  setDueDate("");
                  setShowDatePicker(false);
                },
                className: "mt-2 text-xs text-red-500 hover:text-red-700",
                children: "Clear date"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2 p-2 rounded-lg bg-gray-50", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Clock, { className: "w-4 h-4 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-sm text-gray-500", children: "Just now" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-gray-50 rounded-lg p-3 space-y-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(MessageSquare, { className: "w-4 h-4 text-krushr-blue" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("h4", { className: "text-sm font-medium text-gray-900", children: [
              "Comments (",
              comments.length,
              ")"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              Textarea,
              {
                value: comment,
                onChange: (e) => setComment(e.target.value),
                placeholder: "Add a comment...",
                className: "flex-1 min-h-[60px] text-sm resize-none border-gray-200 focus:border-krushr-blue focus:ring-2 focus:ring-krushr-blue/20",
                onKeyPress: (e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    handleAddComment();
                  }
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              Button,
              {
                size: "sm",
                onClick: handleAddComment,
                disabled: !comment.trim(),
                className: "h-10 px-3 bg-krushr-blue hover:bg-krushr-blue/90",
                children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Send, { className: "w-3 h-3" })
              }
            )
          ] }),
          comments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "space-y-2 max-h-32 overflow-y-auto", children: comments.map((comment2) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-white rounded p-2 border", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center justify-between mb-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-xs font-medium text-gray-900", children: comment2.user?.name }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "text-xs text-gray-500", children: comment2.isLocal ? "Just now" : "Unknown" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "text-xs text-gray-600", children: comment2.content })
          ] }, comment2.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Paperclip, { className: "w-4 h-4 text-gray-500" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { className: "text-sm font-medium text-gray-700", children: [
              "Files (",
              attachments.length,
              ")"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "border border-dashed border-gray-200 rounded-lg p-2 text-center hover:border-krushr-blue/50 transition-colors", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Upload, { className: "h-4 w-4 mx-auto text-gray-400 mb-1" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "input",
              {
                type: "file",
                multiple: true,
                className: "hidden",
                id: "file-upload",
                onChange: (e) => {
                  const files = Array.from(e.target.files || []);
                  const newAttachments = files.map((file) => ({
                    id: Date.now() + Math.random(),
                    name: file.name,
                    size: file.size,
                    type: file.type,
                    file,
                    isLocal: true
                  }));
                  setAttachments((prev) => [...prev, ...newAttachments]);
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "text-xs text-gray-600 hover:text-gray-800 p-0",
                onClick: () => document.getElementById("file-upload")?.click(),
                children: "Drop files or click to upload"
              }
            )
          ] }),
          attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "space-y-1 max-h-24 overflow-y-auto", children: attachments.map((attachment) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center justify-between p-2 bg-gray-50 rounded text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2 flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Paperclip, { className: "w-3 h-3 text-gray-500 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { className: "truncate", children: attachment.name }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("span", { className: "text-xs text-gray-400", children: [
                "(",
                (attachment.size / 1024).toFixed(1),
                " KB)"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-5 w-5 p-0 text-red-500 hover:text-red-700 flex-shrink-0",
                onClick: () => {
                  setAttachments((prev) => prev.filter((a) => a.id !== attachment.id));
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(X, { className: "w-3 h-3" })
              }
            )
          ] }, attachment.id)) })
        ] }),
        (comments.length > 0 || attachments.length > 0) && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-gray-50 rounded-lg p-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Clock, { className: "w-4 h-4 text-gray-500" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h4", { className: "text-sm font-medium text-gray-700", children: "Ready to Create" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "space-y-1 text-sm text-gray-600", children: [
            comments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
              comments.length,
              " comment",
              comments.length > 1 ? "s" : "",
              " prepared"
            ] }),
            attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
              attachments.length,
              " file",
              attachments.length > 1 ? "s" : "",
              " ready to upload"
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex justify-end gap-3 pt-4 border-t border-gray-100", children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Button,
          {
            variant: "ghost",
            onClick: onClose,
            disabled: createTaskMutation.isLoading,
            className: "h-10 px-4 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-50",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Button,
          {
            onClick: handleSubmit,
            disabled: !title.trim() || createTaskMutation.isLoading,
            className: "h-10 px-6 text-sm gap-2 bg-krushr-secondary hover:bg-krushr-secondary/90 focus:ring-2 focus:ring-krushr-secondary/50 text-white font-medium",
            children: createTaskMutation.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(import_jsx_runtime20.Fragment, { children: "Creating..." }) : /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Send, { className: "w-4 h-4" }),
              "Create Task"
            ] })
          }
        )
      ] })
    ] })
  ] }) });
}

// src/components/workspace/QuickCreatePanel.tsx
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
function QuickCreatePanel({
  workspaceId,
  isOpen = false,
  onToggle,
  position = "floating"
}) {
  const [isMinimized, setIsMinimized] = (0, import_react8.useState)(false);
  const [isDragging, setIsDragging] = (0, import_react8.useState)(false);
  const [panelPosition, setPanelPosition] = (0, import_react8.useState)({ x: 20, y: 20 });
  const handleSuccess = () => {
    onToggle?.();
  };
  const handleClose = () => {
    onToggle?.();
  };
  if (!isOpen) {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      Button,
      {
        onClick: onToggle,
        className: cn(
          "fixed bottom-6 right-6 h-12 w-12 rounded-full shadow-lg z-50",
          "bg-krushr-coral-red hover:bg-krushr-coral-red/90 text-white",
          "flex items-center justify-center"
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Plus, { className: "h-6 w-6" })
      }
    );
  }
  if (position === "modal") {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      SimpleCreatePanel,
      {
        workspaceId,
        open: isOpen,
        onClose: handleClose,
        onSuccess: handleSuccess
      }
    );
  }
  if (position === "floating") {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
      Card,
      {
        className: cn(
          "fixed z-50 shadow-xl border-2",
          "w-80 max-h-96",
          isDragging && "cursor-move"
        ),
        style: {
          left: panelPosition.x,
          top: panelPosition.y
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
            "div",
            {
              className: "flex items-center justify-between p-2 bg-gray-50 border-b cursor-move",
              onMouseDown: (e) => {
                setIsDragging(true);
                const startX = e.clientX - panelPosition.x;
                const startY = e.clientY - panelPosition.y;
                const handleMouseMove = (e2) => {
                  setPanelPosition({
                    x: e2.clientX - startX,
                    y: e2.clientY - startY
                  });
                };
                const handleMouseUp = () => {
                  setIsDragging(false);
                  document.removeEventListener("mousemove", handleMouseMove);
                  document.removeEventListener("mouseup", handleMouseUp);
                };
                document.addEventListener("mousemove", handleMouseMove);
                document.addEventListener("mouseup", handleMouseUp);
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "text-sm font-medium", children: "Quick Create" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center gap-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: () => setIsMinimized(!isMinimized),
                      className: "h-6 w-6 p-0",
                      children: isMinimized ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Maximize, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Minimize, { className: "h-3 w-3" })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: handleClose,
                      className: "h-6 w-6 p-0",
                      children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(X, { className: "h-3 w-3" })
                    }
                  )
                ] })
              ]
            }
          ),
          !isMinimized && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "p-3 text-center text-sm text-gray-500", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { children: "Click to open task creator" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Button, { onClick: () => {
              setIsMinimized(true);
              onToggle?.();
            }, className: "mt-2", size: "sm", children: "Create Task" })
          ] })
        ]
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
    SimpleCreatePanel,
    {
      workspaceId,
      open: isOpen,
      onClose: handleClose,
      onSuccess: handleSuccess
    }
  );
}

// src/components/workspace/WorkspaceHeader.tsx
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
function WorkspaceHeader({
  workspaceName,
  workspaceId,
  currentPanel,
  onPanelChange
}) {
  const [isQuickCreateOpen, setIsQuickCreateOpen] = (0, import_react9.useState)(false);
  const { user } = useAuthStore();
  const handleQuickCreateToggle = () => {
    setIsQuickCreateOpen(!isQuickCreateOpen);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(import_jsx_runtime22.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("header", { className: "h-14 border-b bg-white px-4 flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h1", { className: "text-lg font-semibold text-gray-900", children: workspaceName }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
          Button,
          {
            onClick: handleQuickCreateToggle,
            className: "h-8 gap-2 bg-krushr-coral-red hover:bg-krushr-coral-red/90 text-white",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Plus, { className: "h-4 w-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "hidden sm:inline", children: "Create" })
            ]
          }
        ),
        currentPanel && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(Badge, { variant: "secondary", className: "text-xs", children: [
          currentPanel === "kanban" && "\u{1F4CB}",
          currentPanel === "calendar" && "\u{1F4C5}",
          currentPanel === "notes" && "\u{1F4DD}",
          currentPanel === "chat" && "\u{1F4AC}",
          currentPanel?.charAt(0).toUpperCase() + currentPanel?.slice(1)
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "flex-1 max-w-md mx-8", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          FloatingInput,
          {
            label: "Search workspace",
            className: "pl-10 h-8 bg-gray-50 border-gray-200"
          }
        )
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0 relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Bell, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Badge, { className: "absolute -top-1 -right-1 h-4 w-4 p-0 text-xs", children: "3" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Settings, { className: "h-4 w-4" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(Avatar, { className: "h-8 w-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AvatarImage, { src: user?.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AvatarFallback, { className: "text-xs", children: user?.name?.charAt(0) || "U" })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      QuickCreatePanel,
      {
        workspaceId,
        isOpen: isQuickCreateOpen,
        onToggle: handleQuickCreateToggle,
        position: "modal"
      }
    )
  ] });
}

// src/pages/Test.tsx
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
function Test() {
  const [email, setEmail] = (0, import_react10.useState)("alice@krushr.dev");
  const [password, setPassword] = (0, import_react10.useState)("password123");
  const [name, setName] = (0, import_react10.useState)("Test User");
  const [isRegistering, setIsRegistering] = (0, import_react10.useState)(false);
  const { user, isAuthenticated, setUser, setToken, logout } = useAuthStore();
  const navigate = useNavigate();
  const loginMutation = trpc.auth.login.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      console.log("\u2705 Login successful:", data2);
    },
    onError: (error) => {
      console.error("\u274C Login failed:", error.message);
    }
  });
  const registerMutation = trpc.auth.register.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      console.log("\u2705 Registration successful:", data2);
    },
    onError: (error) => {
      console.error("\u274C Registration failed:", error.message);
    }
  });
  const meQuery = trpc.auth.me.useQuery(void 0, {
    enabled: isAuthenticated
  });
  const handleLogin = () => {
    console.log("\u{1F510} Attempting login with:", { email, password });
    loginMutation.mutate({ email, password });
  };
  const handleRegister = () => {
    console.log("\u{1F4DD} Attempting registration with:", { email, password, name });
    registerMutation.mutate({ email, password, name });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "p-8 max-w-md mx-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h1", { className: "text-2xl font-bold text-gray-900 mb-6", children: "\u{1F680} Krushr tRPC Test" }),
    isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "p-4 bg-green-50 border border-green-200 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { className: "text-lg font-semibold text-green-800", children: "\u2705 Authenticated!" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("p", { className: "text-green-700", children: [
          "Welcome, ",
          user?.name,
          "!"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-sm text-green-600", children: user?.email })
      ] }),
      meQuery.data && /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "p-4 bg-blue-50 border border-blue-200 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h3", { className: "font-semibold text-blue-800", children: "Profile from API:" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("pre", { className: "text-sm text-blue-700 mt-2", children: JSON.stringify(meQuery.data, null, 2) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
        "button",
        {
          onClick: logout,
          className: "w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700",
          children: "Logout"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "mt-8 pt-8 border-t border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { className: "text-xl font-semibold text-gray-800 mb-4", children: "\u{1F3A8} Universal Input Form Demo" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(UniversalFormDemo, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "mt-8 pt-8 border-t border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { className: "text-xl font-semibold text-gray-800 mb-4", children: "\u{1F527} Workspace Panel Integration" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h3", { className: "text-lg font-medium mb-3", children: "Compact Panel Form" }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "border rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              UniversalInputFormCompact,
              {
                workspaceId: "demo-workspace",
                contentType: "TASK" /* TASK */,
                maxHeight: "400px",
                integrationMode: "panel"
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h3", { className: "text-lg font-medium mb-3", children: "Kanban Quick Create" }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "space-y-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "bg-gray-50 p-3 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "text-sm font-medium text-gray-600 mb-2", children: "To Do Column" }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
                  KanbanQuickCreate,
                  {
                    workspaceId: "demo-workspace",
                    columnId: "todo",
                    columnStatus: "TODO" /* TODO */
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "bg-gray-50 p-3 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "text-sm font-medium text-gray-600 mb-2", children: "In Progress Column" }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
                  KanbanQuickCreate,
                  {
                    workspaceId: "demo-workspace",
                    columnId: "in-progress",
                    columnStatus: "IN_PROGRESS" /* IN_PROGRESS */
                  }
                )
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "mt-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h3", { className: "text-lg font-medium mb-3", children: "Workspace Header Integration" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "border rounded-lg overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            WorkspaceHeader,
            {
              workspaceName: "Demo Workspace",
              workspaceId: "demo-workspace",
              currentPanel: "kanban"
            }
          ) })
        ] })
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Email" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          FloatingInput,
          {
            id: "email",
            type: "email",
            label: "Email",
            value: email,
            onChange: (e) => setEmail(e.target.value),
            autoComplete: "email"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Password" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          FloatingInput,
          {
            id: "password",
            type: "password",
            label: "Password",
            value: password,
            onChange: (e) => setPassword(e.target.value),
            autoComplete: "current-password"
          }
        )
      ] }),
      isRegistering && /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Name" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          FloatingInput,
          {
            id: "name",
            type: "text",
            label: "Name",
            value: name,
            onChange: (e) => setName(e.target.value),
            autoComplete: "name"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "button",
          {
            onClick: isRegistering ? handleRegister : handleLogin,
            disabled: loginMutation.isPending || registerMutation.isPending,
            className: "w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50",
            children: loginMutation.isPending || registerMutation.isPending ? "Loading..." : isRegistering ? "Register" : "Login"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "button",
          {
            onClick: () => setIsRegistering(!isRegistering),
            className: "w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200",
            children: isRegistering ? "Switch to Login" : "Switch to Register"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "text-sm text-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Demo credentials:" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Email: alice@krushr.dev" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Password: password123" })
      ] })
    ] })
  ] });
}

// src/pages/Login.tsx
var import_react11 = __toESM(require_react(), 1);

// src/components/ui/alert.tsx
var React34 = __toESM(require_react(), 1);
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);
var Alert = React34.forwardRef(({ className, variant, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
  "div",
  {
    ref,
    role: "alert",
    className: cn(alertVariants({ variant }), className),
    ...props
  }
));
Alert.displayName = "Alert";
var AlertTitle = React34.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
  "h5",
  {
    ref,
    className: cn("mb-1 font-medium leading-none tracking-tight", className),
    ...props
  }
));
AlertTitle.displayName = "AlertTitle";
var AlertDescription = React34.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
  "div",
  {
    ref,
    className: cn("text-sm [&_p]:leading-relaxed", className),
    ...props
  }
));
AlertDescription.displayName = "AlertDescription";

// src/components/common/KrushrLogo.tsx
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
function KrushrLogo({
  size = "md",
  className,
  showText = true
}) {
  const sizeClasses = {
    sm: "h-6",
    md: "h-8",
    lg: "h-12",
    xl: "h-16"
  };
  const textSizeClasses = {
    sm: "text-sm",
    md: "text-lg",
    lg: "text-xl",
    xl: "text-2xl"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: cn("flex items-center gap-2", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      "img",
      {
        src: "/krushr.svg",
        alt: "Krushr",
        className: cn("object-contain", sizeClasses[size])
      }
    ),
    showText && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", { className: cn("font-bold text-krushr-primary", textSizeClasses[size]) })
  ] });
}

// src/pages/Login.tsx
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
function Login() {
  const navigate = useNavigate();
  const { setUser, setToken } = useAuthStore();
  const [email, setEmail] = (0, import_react11.useState)("alice@krushr.dev");
  const [password, setPassword] = (0, import_react11.useState)("password123");
  const [error, setError] = (0, import_react11.useState)("");
  const loginMutation = trpc.auth.login.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      navigate("/board");
    },
    onError: (error2) => {
      setError(error2.message || "Invalid email or password");
    }
  });
  const handleSubmit = (e) => {
    e.preventDefault();
    setError("");
    if (!email || !password) {
      setError("Please fill in all fields");
      return;
    }
    loginMutation.mutate({ email, password });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-blue-100 py-12 px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "max-w-md w-full space-y-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(KrushrLogo, { size: "xl" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: "text-muted-foreground", children: "Welcome back! Please sign in to continue." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(CardHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(CardTitle, { children: "Sign in to your account" }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(CardDescription, { children: "Enter your email and password to access your workspace" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
        error && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(Alert, { variant: "destructive", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(CircleAlert, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AlertDescription, { children: error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Mail, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
            FloatingInput,
            {
              id: "email",
              type: "email",
              label: "Email address",
              value: email,
              onChange: (e) => setEmail(e.target.value),
              className: "pl-10",
              autoComplete: "email",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Lock, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
            FloatingInput,
            {
              id: "password",
              type: "password",
              label: "Password",
              value: password,
              onChange: (e) => setPassword(e.target.value),
              className: "pl-10",
              autoComplete: "current-password",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("label", { className: "flex items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
              "input",
              {
                type: "checkbox",
                className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "ml-2 text-sm text-gray-600", children: "Remember me" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
            Link2,
            {
              to: "/forgot-password",
              className: "text-sm text-blue-600 hover:text-blue-500",
              children: "Forgot password?"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          Button,
          {
            type: "submit",
            className: "w-full",
            style: { backgroundColor: "#143197", color: "white" },
            disabled: loginMutation.isLoading,
            children: loginMutation.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(import_jsx_runtime26.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(LoaderCircle, { className: "mr-2 h-4 w-4 animate-spin" }),
              "Signing in..."
            ] }) : "Sign in"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "absolute inset-0 flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "w-full border-t" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "relative flex justify-center text-xs uppercase", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "bg-white px-2 text-gray-500", children: "New to Krushr?" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Link2, { to: "/register", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          Button,
          {
            type: "button",
            variant: "outline",
            className: "w-full",
            disabled: loginMutation.isLoading,
            children: "Create Free Account"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "text-center text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "text-gray-600", children: "Don't have an account? " }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
            Link2,
            {
              to: "/register",
              className: "font-medium text-blue-600 hover:text-blue-500",
              children: "Sign up"
            }
          )
        ] })
      ] }) })
    ] })
  ] }) });
}

// src/pages/Register.tsx
var import_react12 = __toESM(require_react(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
function Register() {
  const navigate = useNavigate();
  const { setUser, setToken } = useAuthStore();
  const [formData, setFormData] = (0, import_react12.useState)({
    name: "",
    email: "",
    password: "",
    confirmPassword: ""
  });
  const [error, setError] = (0, import_react12.useState)("");
  const registerMutation = trpc.auth.register.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      navigate("/board");
    },
    onError: (error2) => {
      setError(error2.message || "Registration failed");
    }
  });
  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    setError("");
    if (!formData.name || !formData.email || !formData.password) {
      setError("Please fill in all fields");
      return;
    }
    if (formData.password.length < 6) {
      setError("Password must be at least 6 characters");
      return;
    }
    if (formData.password !== formData.confirmPassword) {
      setError("Passwords do not match");
      return;
    }
    registerMutation.mutate({
      name: formData.name,
      email: formData.email,
      password: formData.password
    });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-red-100 py-12 px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "max-w-md w-full space-y-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(KrushrLogo, { size: "xl" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-muted-foreground", children: "Create your account to get started" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(CardHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardTitle, { children: "Sign up for an account" }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardDescription, { children: "Join Krushr to manage your projects and collaborate with your team" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
        error && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(Alert, { variant: "destructive", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CircleAlert, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AlertDescription, { children: error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(User, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            FloatingInput,
            {
              id: "name",
              name: "name",
              type: "text",
              label: "Full name",
              value: formData.name,
              onChange: handleChange,
              className: "pl-10",
              autoComplete: "name",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Mail, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            FloatingInput,
            {
              id: "email",
              name: "email",
              type: "email",
              label: "Email address",
              value: formData.email,
              onChange: handleChange,
              className: "pl-10",
              autoComplete: "email",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Lock, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
              FloatingInput,
              {
                id: "password",
                name: "password",
                type: "password",
                label: "Password",
                value: formData.password,
                onChange: handleChange,
                className: "pl-10",
                autoComplete: "new-password",
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-xs text-gray-500", children: "Must be at least 6 characters long" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Lock, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            FloatingInput,
            {
              id: "confirmPassword",
              name: "confirmPassword",
              type: "password",
              label: "Confirm password",
              value: formData.confirmPassword,
              onChange: handleChange,
              className: "pl-10",
              autoComplete: "new-password",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("label", { className: "flex items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            "input",
            {
              type: "checkbox",
              className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-0.5",
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { className: "ml-2 text-sm text-gray-600", children: [
            "I agree to the",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Link2, { to: "/terms", className: "text-primary hover:text-primary/80", children: "Terms of Service" }),
            " ",
            "and",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Link2, { to: "/privacy", className: "text-primary hover:text-primary/80", children: "Privacy Policy" })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
          Button,
          {
            type: "submit",
            className: "w-full bg-primary hover:bg-primary/90",
            disabled: registerMutation.isLoading,
            children: registerMutation.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(import_jsx_runtime27.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(LoaderCircle, { className: "mr-2 h-4 w-4 animate-spin" }),
              "Creating account..."
            ] }) : "Create account"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "text-center text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "text-gray-600", children: "Already have an account? " }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            Link2,
            {
              to: "/login",
              className: "font-medium text-blue-600 hover:text-blue-500",
              children: "Sign in"
            }
          )
        ] })
      ] }) })
    ] })
  ] }) });
}

// src/pages/Home.tsx
var import_react20 = __toESM(require_react(), 1);

// src/components/layout/ResponsiveLayout.tsx
var import_react19 = __toESM(require_react(), 1);

// src/components/project/Sidebar.tsx
var import_react13 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
function Sidebar({ currentPage, onPageChange }) {
  const [isCollapsed, setIsCollapsed] = (0, import_react13.useState)(false);
  const [isBrandkitOpen, setIsBrandkitOpen] = (0, import_react13.useState)(false);
  const { user, logout } = useAuthStore();
  const navigate = useNavigate();
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const activeWorkspace = workspaces2[0];
  const { data: workspaceMembers = [], isLoading: membersLoading, error: membersError } = trpc.user.listWorkspaceMembers.useQuery(
    { workspaceId: activeWorkspace?.id || "" },
    {
      enabled: !!activeWorkspace?.id,
      staleTime: 5 * 60 * 1e3,
      // Cache for 5 minutes
      retry: 3,
      refetchOnWindowFocus: false
    }
  );
  const displayMembers = workspaceMembers.length > 0 ? workspaceMembers : [];
  const shouldShowMembersList = activeWorkspace && !membersError;
  const navigation = [
    { name: "Dashboard", icon: House, href: "/home", key: "home" },
    { name: "Workspace", icon: PanelsTopLeft, href: "/workspace", key: "workspace" },
    { name: "Board", icon: FolderOpen, href: "/board", key: "board" },
    { name: "Calendar", icon: Calendar, href: "/calendar", key: "calendar" },
    { name: "Chat", icon: MessageCircle, href: "/chat", key: "chat" },
    { name: "Notes", icon: StickyNote, href: "/notes", key: "notes" },
    { name: "Teams", icon: Users, href: "/teams", key: "teams" },
    { name: "Projects", icon: FolderOpen, href: "/projects", key: "projects" },
    { name: "Contacts", icon: User, href: "/contacts", key: "contacts" }
  ];
  const brandkitItems = [
    { name: "Brandkit", icon: Palette, href: "/brandkit.html", key: "brandkit" },
    { name: "Brandkit 2", icon: Palette, href: "/brandkit-2.html", key: "brandkit2" },
    { name: "Landing Design System", icon: BookOpen, href: "/design-system-landing.html", key: "landingkit" }
  ];
  const getInitials = (name) => {
    return name.split(" ").map((n) => n[0]).join("").toUpperCase().substring(0, 2);
  };
  const handleLogout = () => {
    logout();
    navigate("/login");
  };
  return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: `${isCollapsed ? "w-16" : "w-48"} bg-sidebar border-r border-sidebar-border flex flex-col h-full transition-all duration-300`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "p-4 border-b border-sidebar-border", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(KrushrLogo, { size: isCollapsed ? "sm" : "md", showText: !isCollapsed }) }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
        "button",
        {
          onClick: () => setIsCollapsed(!isCollapsed),
          className: "p-1 hover:bg-sidebar-accent rounded transition-colors ml-2",
          title: isCollapsed ? "Expand sidebar" : "Collapse sidebar",
          children: isCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Menu, { className: "w-5 h-5 text-sidebar-foreground" }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ChevronLeft, { className: "w-5 h-5 text-sidebar-foreground" })
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "p-4 border-b border-sidebar-border", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("nav", { className: "space-y-1", children: [
      navigation.map((item) => {
        const isActive = currentPage === item.key;
        return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
          "button",
          {
            onClick: (e) => {
              e.preventDefault();
              onPageChange(item.key);
            },
            className: `w-full flex items-center ${isCollapsed ? "justify-center px-2" : "px-3"} py-2 text-sm font-light rounded-lg transition-colors ${isActive ? "bg-krushr-primary text-white font-medium" : "text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"}`,
            title: isCollapsed ? item.name : void 0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(item.icon, { className: `w-4 h-4 ${isCollapsed ? "" : "mr-3"} ${isActive ? "" : "text-sidebar-icon"}` }),
              !isCollapsed && item.name
            ]
          },
          item.key
        );
      }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
          "button",
          {
            onClick: () => setIsBrandkitOpen(!isBrandkitOpen),
            className: `w-full flex items-center ${isCollapsed ? "justify-center px-2" : "px-3"} py-2 text-sm font-light rounded-lg transition-colors text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground`,
            title: isCollapsed ? "Design System" : void 0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Palette, { className: `w-4 h-4 ${isCollapsed ? "" : "mr-3"} text-sidebar-icon` }),
              !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "flex-1 text-left", children: "Design System" }),
                isBrandkitOpen ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ChevronDown, { className: "w-4 h-4 text-sidebar-icon" }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ChevronRight, { className: "w-4 h-4 text-sidebar-icon" })
              ] })
            ]
          }
        ),
        isBrandkitOpen && !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "ml-6 mt-1 space-y-1", children: brandkitItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
          "a",
          {
            href: item.href,
            target: "_blank",
            rel: "noopener noreferrer",
            className: "w-full flex items-center px-3 py-2 text-sm font-light rounded-lg transition-colors text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(item.icon, { className: "w-4 h-4 mr-3 text-sidebar-icon" }),
              item.name
            ]
          },
          item.key
        )) })
      ] })
    ] }) }),
    shouldShowMembersList && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: `${isCollapsed ? "p-2" : "p-4"} border-t border-sidebar-border flex-1`, children: [
      !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center justify-between mb-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("h3", { className: "text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wide", children: [
          "Team ",
          membersLoading ? "..." : `(${displayMembers.length})`
        ] }),
        membersLoading && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "w-3 h-3 border border-sidebar-foreground/30 border-t-sidebar-foreground rounded-full animate-spin" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: `space-y-2 ${isCollapsed ? "flex flex-col items-center" : ""}`, children: [
        membersLoading && displayMembers.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: `flex ${isCollapsed ? "justify-center" : "items-center space-x-3"} p-2`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "w-8 h-8 rounded-full bg-sidebar-accent animate-pulse" }),
          !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "h-3 bg-sidebar-accent rounded animate-pulse mb-1" }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "h-2 bg-sidebar-accent/60 rounded w-3/4 animate-pulse" })
          ] })
        ] }),
        displayMembers.slice(0, isCollapsed ? 6 : 5).map((member) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
          "div",
          {
            className: `group transition-colors cursor-pointer ${isCollapsed ? "flex justify-center mb-1" : "flex items-center space-x-3 p-2 rounded-lg hover:bg-sidebar-accent"}`,
            title: isCollapsed ? `${member.name} (${member.email})` : void 0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "relative", children: [
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "w-8 h-8 rounded-full bg-gradient-to-br from-krushr-primary to-krushr-primary/80 flex items-center justify-center text-white text-xs font-medium group-hover:scale-105 transition-transform", children: getInitials(member.name || "U") }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-emerald-400 border-2 border-sidebar rounded-full" })
              ] }),
              !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex-1 min-w-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-sm font-medium text-sidebar-foreground truncate", children: member.name }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-xs text-sidebar-foreground/60 truncate", children: member.email.split("@")[0] })
              ] })
            ]
          },
          member.id
        )),
        displayMembers.length > (isCollapsed ? 6 : 5) && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: `${isCollapsed ? "flex justify-center" : "text-center pt-2"}`, children: isCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "w-8 h-8 rounded-full bg-sidebar-accent flex items-center justify-center text-sidebar-foreground text-xs font-medium", title: `+${displayMembers.length - 6} more members`, children: [
          "+",
          displayMembers.length - 6
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { className: "text-xs text-sidebar-foreground/60 hover:text-sidebar-foreground transition-colors", children: [
          "+",
          displayMembers.length - 5,
          " more members"
        ] }) }),
        !membersLoading && displayMembers.length === 0 && !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "text-xs text-sidebar-foreground/60 text-center py-2", children: "No team members yet" })
      ] })
    ] }),
    !shouldShowMembersList && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "flex-1" }),
    user && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "p-4 border-t border-sidebar-border", children: !isCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center space-x-3 p-2 rounded-lg hover:bg-sidebar-accent transition-colors", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(Avatar, { className: "w-8 h-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AvatarImage, { src: user.avatar }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AvatarFallback, { className: "bg-gradient-to-br from-pink-400 to-red-500 text-white text-xs font-medium", children: getInitials(user.name || "U") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex-1 min-w-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-sm font-medium text-sidebar-foreground truncate", children: user.name }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-xs text-sidebar-foreground/60 truncate", children: user.email })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex space-x-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "button",
          {
            onClick: () => navigate("/settings"),
            className: "p-1 hover:bg-sidebar-accent rounded transition-colors",
            title: "Settings",
            children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Settings, { className: "w-4 h-4 text-sidebar-foreground/60" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "button",
          {
            onClick: handleLogout,
            className: "p-1 hover:bg-red-100 hover:text-red-600 rounded transition-colors",
            title: "Logout",
            children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(LogOut, { className: "w-4 h-4 text-sidebar-foreground/60" })
          }
        )
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex flex-col items-center space-y-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(Avatar, { className: "w-8 h-8", title: user.name, children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AvatarImage, { src: user.avatar }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AvatarFallback, { className: "bg-gradient-to-br from-pink-400 to-red-500 text-white text-xs font-medium", children: getInitials(user.name || "U") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex flex-col space-y-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "button",
          {
            onClick: () => navigate("/settings"),
            className: "p-1 hover:bg-sidebar-accent rounded transition-colors",
            title: "Settings",
            children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Settings, { className: "w-4 h-4 text-sidebar-foreground/60" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "button",
          {
            onClick: handleLogout,
            className: "p-1 hover:bg-red-100 hover:text-red-600 rounded transition-colors",
            title: "Logout",
            children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(LogOut, { className: "w-4 h-4 text-sidebar-foreground/60" })
          }
        )
      ] })
    ] }) })
  ] });
}

// src/components/layout/MobileNavigation.tsx
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
function MobileNavigation({
  currentPage,
  onPageChange,
  className
}) {
  const { notifications: notifications2 } = useAppStore();
  const unreadCount = notifications2.filter((n) => !n.is_read).length;
  const navigationItems = [
    {
      key: "home",
      label: "Home",
      icon: House,
      href: "/",
      badge: null
    },
    {
      key: "board",
      label: "Board",
      icon: ChartColumn,
      href: "/board",
      badge: null
    },
    {
      key: "calendar",
      label: "Calendar",
      icon: Calendar,
      href: "/calendar",
      badge: null
    },
    {
      key: "chat",
      label: "Chat",
      icon: MessageCircle,
      href: "/chat",
      badge: unreadCount > 0 ? unreadCount : null
    },
    {
      key: "notes",
      label: "Notes",
      icon: StickyNote,
      href: "/notes",
      badge: null
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("nav", { className: cn(
    "fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-50 md:hidden",
    className
  ), children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "grid grid-cols-5 h-16", children: navigationItems.map((item) => {
    const IconComponent = item.icon;
    const isActive = currentPage === item.key;
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
      Button,
      {
        variant: "ghost",
        className: cn(
          "h-full rounded-none flex flex-col items-center justify-center space-y-1 relative",
          isActive && "text-blue-600 bg-blue-50"
        ),
        onClick: () => onPageChange(item.key),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(IconComponent, { className: cn(
              "w-5 h-5",
              isActive ? "text-blue-600" : "text-gray-900/90"
            ) }),
            item.badge && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Badge, { className: "absolute -top-2 -right-2 h-4 w-4 p-0 flex items-center justify-center text-xs bg-red-500", children: item.badge > 9 ? "9+" : item.badge })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: cn(
            "text-xs font-light",
            isActive ? "text-blue-600" : "text-gray-900/90"
          ), children: item.label })
        ]
      },
      item.key
    );
  }) }) });
}

// src/components/notifications/NotificationBell.tsx
var import_react15 = __toESM(require_react(), 1);

// src/components/notifications/NotificationCenter.tsx
var import_react14 = __toESM(require_react(), 1);

// src/components/ui/tabs.tsx
var React39 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-tabs/dist/index.mjs
var React38 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-roving-focus/dist/index.mjs
var React37 = __toESM(require_react(), 1);
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var EVENT_OPTIONS = { bubbles: false, cancelable: true };
var GROUP_NAME = "RovingFocusGroup";
var [Collection, useCollection, createCollectionScope] = createCollection(GROUP_NAME);
var [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(
  GROUP_NAME,
  [createCollectionScope]
);
var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);
var RovingFocusGroup = React37.forwardRef(
  (props, forwardedRef) => {
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Collection.Provider, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Collection.Slot, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });
  }
);
RovingFocusGroup.displayName = GROUP_NAME;
var RovingFocusGroupImpl = React37.forwardRef((props, forwardedRef) => {
  const {
    __scopeRovingFocusGroup,
    orientation,
    loop = false,
    dir,
    currentTabStopId: currentTabStopIdProp,
    defaultCurrentTabStopId,
    onCurrentTabStopIdChange,
    onEntryFocus,
    preventScrollOnEntryFocus = false,
    ...groupProps
  } = props;
  const ref = React37.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const direction = useDirection(dir);
  const [currentTabStopId, setCurrentTabStopId] = useControllableState({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId ?? null,
    onChange: onCurrentTabStopIdChange,
    caller: GROUP_NAME
  });
  const [isTabbingBackOut, setIsTabbingBackOut] = React37.useState(false);
  const handleEntryFocus = useCallbackRef(onEntryFocus);
  const getItems = useCollection(__scopeRovingFocusGroup);
  const isClickFocusRef = React37.useRef(false);
  const [focusableItemsCount, setFocusableItemsCount] = React37.useState(0);
  React37.useEffect(() => {
    const node = ref.current;
    if (node) {
      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
    }
  }, [handleEntryFocus]);
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
    RovingFocusProvider,
    {
      scope: __scopeRovingFocusGroup,
      orientation,
      dir: direction,
      loop,
      currentTabStopId,
      onItemFocus: React37.useCallback(
        (tabStopId) => setCurrentTabStopId(tabStopId),
        [setCurrentTabStopId]
      ),
      onItemShiftTab: React37.useCallback(() => setIsTabbingBackOut(true), []),
      onFocusableItemAdd: React37.useCallback(
        () => setFocusableItemsCount((prevCount) => prevCount + 1),
        []
      ),
      onFocusableItemRemove: React37.useCallback(
        () => setFocusableItemsCount((prevCount) => prevCount - 1),
        []
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        Primitive.div,
        {
          tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
          "data-orientation": orientation,
          ...groupProps,
          ref: composedRefs,
          style: { outline: "none", ...props.style },
          onMouseDown: composeEventHandlers(props.onMouseDown, () => {
            isClickFocusRef.current = true;
          }),
          onFocus: composeEventHandlers(props.onFocus, (event) => {
            const isKeyboardFocus = !isClickFocusRef.current;
            if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
              const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
              event.currentTarget.dispatchEvent(entryFocusEvent);
              if (!entryFocusEvent.defaultPrevented) {
                const items = getItems().filter((item) => item.focusable);
                const activeItem = items.find((item) => item.active);
                const currentItem = items.find((item) => item.id === currentTabStopId);
                const candidateItems = [activeItem, currentItem, ...items].filter(
                  Boolean
                );
                const candidateNodes = candidateItems.map((item) => item.ref.current);
                focusFirst(candidateNodes, preventScrollOnEntryFocus);
              }
            }
            isClickFocusRef.current = false;
          }),
          onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
        }
      )
    }
  );
});
var ITEM_NAME = "RovingFocusGroupItem";
var RovingFocusGroupItem = React37.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeRovingFocusGroup,
      focusable = true,
      active = false,
      tabStopId,
      children,
      ...itemProps
    } = props;
    const autoId = useId();
    const id2 = tabStopId || autoId;
    const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);
    const isCurrentTabStop = context.currentTabStopId === id2;
    const getItems = useCollection(__scopeRovingFocusGroup);
    const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context;
    React37.useEffect(() => {
      if (focusable) {
        onFocusableItemAdd();
        return () => onFocusableItemRemove();
      }
    }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
      Collection.ItemSlot,
      {
        scope: __scopeRovingFocusGroup,
        id: id2,
        focusable,
        active,
        children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          Primitive.span,
          {
            tabIndex: isCurrentTabStop ? 0 : -1,
            "data-orientation": context.orientation,
            ...itemProps,
            ref: forwardedRef,
            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
              if (!focusable) event.preventDefault();
              else context.onItemFocus(id2);
            }),
            onFocus: composeEventHandlers(props.onFocus, () => context.onItemFocus(id2)),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if (event.key === "Tab" && event.shiftKey) {
                context.onItemShiftTab();
                return;
              }
              if (event.target !== event.currentTarget) return;
              const focusIntent = getFocusIntent(event, context.orientation, context.dir);
              if (focusIntent !== void 0) {
                if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;
                event.preventDefault();
                const items = getItems().filter((item) => item.focusable);
                let candidateNodes = items.map((item) => item.ref.current);
                if (focusIntent === "last") candidateNodes.reverse();
                else if (focusIntent === "prev" || focusIntent === "next") {
                  if (focusIntent === "prev") candidateNodes.reverse();
                  const currentIndex = candidateNodes.indexOf(event.currentTarget);
                  candidateNodes = context.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                }
                setTimeout(() => focusFirst(candidateNodes));
              }
            }),
            children: typeof children === "function" ? children({ isCurrentTabStop, hasTabStop: currentTabStopId != null }) : children
          }
        )
      }
    );
  }
);
RovingFocusGroupItem.displayName = ITEM_NAME;
var MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function getDirectionAwareKey(key, dir) {
  if (dir !== "rtl") return key;
  return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function getFocusIntent(event, orientation, dir) {
  const key = getDirectionAwareKey(event.key, dir);
  if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key)) return void 0;
  if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key)) return void 0;
  return MAP_KEY_TO_FOCUS_INTENT[key];
}
function focusFirst(candidates, preventScroll = false) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
    candidate.focus({ preventScroll });
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
  }
}
function wrapArray(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}
var Root7 = RovingFocusGroup;
var Item = RovingFocusGroupItem;

// ../node_modules/@radix-ui/react-tabs/dist/index.mjs
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var TABS_NAME = "Tabs";
var [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
  createRovingFocusGroupScope
]);
var useRovingFocusGroupScope = createRovingFocusGroupScope();
var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
var Tabs = React38.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeTabs,
      value: valueProp,
      onValueChange,
      defaultValue,
      orientation = "horizontal",
      dir,
      activationMode = "automatic",
      ...tabsProps
    } = props;
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue ?? "",
      caller: TABS_NAME
    });
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      TabsProvider,
      {
        scope: __scopeTabs,
        baseId: useId(),
        value,
        onValueChange: setValue,
        orientation,
        dir: direction,
        activationMode,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          Primitive.div,
          {
            dir: direction,
            "data-orientation": orientation,
            ...tabsProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
Tabs.displayName = TABS_NAME;
var TAB_LIST_NAME = "TabsList";
var TabsList = React38.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Root7,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation: context.orientation,
        dir: context.dir,
        loop,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          Primitive.div,
          {
            role: "tablist",
            "aria-orientation": context.orientation,
            ...listProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
TabsList.displayName = TAB_LIST_NAME;
var TRIGGER_NAME3 = "TabsTrigger";
var TabsTrigger = React38.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = useTabsContext(TRIGGER_NAME3, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        active: isSelected,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          Primitive.button,
          {
            type: "button",
            role: "tab",
            "aria-selected": isSelected,
            "aria-controls": contentId,
            "data-state": isSelected ? "active" : "inactive",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            id: triggerId,
            ...triggerProps,
            ref: forwardedRef,
            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onValueChange(value);
              } else {
                event.preventDefault();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if ([" ", "Enter"].includes(event.key)) context.onValueChange(value);
            }),
            onFocus: composeEventHandlers(props.onFocus, () => {
              const isAutomaticActivation = context.activationMode !== "manual";
              if (!isSelected && !disabled && isAutomaticActivation) {
                context.onValueChange(value);
              }
            })
          }
        )
      }
    );
  }
);
TabsTrigger.displayName = TRIGGER_NAME3;
var CONTENT_NAME2 = "TabsContent";
var TabsContent = React38.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
    const context = useTabsContext(CONTENT_NAME2, __scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    const isMountAnimationPreventedRef = React38.useRef(isSelected);
    React38.useEffect(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Presence, { present: forceMount || isSelected, children: ({ present }) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Primitive.div,
      {
        "data-state": isSelected ? "active" : "inactive",
        "data-orientation": context.orientation,
        role: "tabpanel",
        "aria-labelledby": triggerId,
        hidden: !present,
        id: contentId,
        tabIndex: 0,
        ...contentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
        },
        children: present && children
      }
    ) });
  }
);
TabsContent.displayName = CONTENT_NAME2;
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
var Root23 = Tabs;
var List2 = TabsList;
var Trigger3 = TabsTrigger;
var Content3 = TabsContent;

// src/components/ui/tabs.tsx
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var Tabs2 = Root23;
var TabsList2 = React39.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
  List2,
  {
    ref,
    className: cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    ),
    ...props
  }
));
TabsList2.displayName = List2.displayName;
var TabsTrigger2 = React39.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
  Trigger3,
  {
    ref,
    className: cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    ),
    ...props
  }
));
TabsTrigger2.displayName = Trigger3.displayName;
var TabsContent2 = React39.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
  Content3,
  {
    ref,
    className: cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    ),
    ...props
  }
));
TabsContent2.displayName = Content3.displayName;

// src/components/notifications/NotificationCenter.tsx
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
function NotificationCenter({ className }) {
  const [activeTab, setActiveTab] = (0, import_react14.useState)("all");
  const [searchTerm, setSearchTerm] = (0, import_react14.useState)("");
  const { notifications: notifications2, markNotificationRead } = useAppStore();
  const filteredNotifications = notifications2.filter((notification) => {
    const matchesSearch = !searchTerm || notification.title.toLowerCase().includes(searchTerm.toLowerCase()) || notification.message.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesTab = activeTab === "all" || activeTab === "unread" && !notification.is_read || activeTab === "mentions" && notification.type.includes("mention") || activeTab === "tasks" && notification.type.includes("task");
    return matchesSearch && matchesTab;
  });
  const unreadCount = notifications2.filter((n) => !n.is_read).length;
  const getNotificationIcon = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CircleCheck, { className: "w-4 h-4 text-blue-600" });
      case "comment_added":
      case "mention":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(MessageCircle, { className: "w-4 h-4 text-purple-600" });
      case "meeting_scheduled":
      case "deadline_reminder":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Calendar, { className: "w-4 h-4 text-green-600" });
      case "team_invitation":
      case "user_invited":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(UserPlus, { className: "w-4 h-4 text-indigo-600" });
      case "file_shared":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(FileText, { className: "w-4 h-4 text-orange-600" });
      case "system_alert":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TriangleAlert, { className: "w-4 h-4 text-red-600" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Bell, { className: "w-4 h-4 text-gray-600" });
    }
  };
  const getNotificationColor = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return "border-l-blue-500 bg-blue-50";
      case "comment_added":
      case "mention":
        return "border-l-purple-500 bg-purple-50";
      case "meeting_scheduled":
      case "deadline_reminder":
        return "border-l-green-500 bg-green-50";
      case "team_invitation":
      case "user_invited":
        return "border-l-indigo-500 bg-indigo-50";
      case "file_shared":
        return "border-l-orange-500 bg-orange-50";
      case "system_alert":
        return "border-l-red-500 bg-red-50";
      default:
        return "border-l-gray-300 bg-white";
    }
  };
  const handleMarkAsRead = (notificationId) => {
    markNotificationRead(notificationId);
  };
  const handleMarkAllAsRead = () => {
    notifications2.filter((n) => !n.is_read).forEach((notification) => markNotificationRead(notification.id));
  };
  const formatNotificationType = (type) => {
    return type.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase());
  };
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(CardHeader, { className: "flex-shrink-0 pb-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Notifications" }),
          unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Badge, { variant: "secondary", className: "bg-red-100 text-red-700", children: [
            unreadCount,
            " new"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Funnel, { className: "w-4 h-4" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Settings, { className: "w-4 h-4" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "input",
          {
            type: "text",
            placeholder: "Search notifications...",
            value: searchTerm,
            onChange: (e) => setSearchTerm(e.target.value),
            className: "w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-shrink-0 px-6", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Tabs2, { value: activeTab, onValueChange: setActiveTab, children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(TabsList2, { className: "grid w-full grid-cols-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TabsTrigger2, { value: "all", className: "text-xs", children: "All" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(TabsTrigger2, { value: "unread", className: "text-xs", children: [
          "Unread",
          unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Badge, { variant: "secondary", className: "ml-1 h-4 w-4 p-0 text-xs", children: unreadCount > 9 ? "9+" : unreadCount })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TabsTrigger2, { value: "mentions", className: "text-xs", children: "Mentions" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TabsTrigger2, { value: "tasks", className: "text-xs", children: "Tasks" })
      ] }),
      unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex items-center justify-between mt-3", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: handleMarkAllAsRead,
          className: "text-blue-600 hover:text-blue-700",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CheckCheck, { className: "w-4 h-4 mr-2" }),
            "Mark all as read"
          ]
        }
      ) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ScrollArea, { className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "p-6 pt-4 space-y-3", children: filteredNotifications.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "text-center py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Bell, { className: "w-12 h-12 mx-auto text-gray-400 mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: searchTerm ? "No matching notifications" : "No notifications" }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "text-gray-500", children: searchTerm ? "Try adjusting your search terms" : "You're all caught up! New notifications will appear here." })
    ] }) : filteredNotifications.map((notification) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      "div",
      {
        className: cn(
          "group p-4 rounded-lg border-l-4 transition-all duration-200 hover:shadow-sm cursor-pointer",
          notification.is_read ? "bg-white" : getNotificationColor(notification.type),
          !notification.is_read && "shadow-sm"
        ),
        onClick: () => !notification.is_read && handleMarkAsRead(notification.id),
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-start space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-shrink-0 mt-1", children: getNotificationIcon(notification.type) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex-1 min-w-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-start justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex-1 pr-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h4", { className: "font-medium text-gray-900 text-sm", children: notification.title }),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: notification.message }),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-3 mt-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-xs text-gray-500", children: formatDateTime(notification.created_at) }),
                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Badge, { variant: "outline", className: "text-xs", children: formatNotificationType(notification.type) }),
                  notification.sender && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Avatar, { className: "w-4 h-4", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AvatarImage, { src: notification.sender.avatar }),
                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AvatarFallback, { className: "text-xs bg-gray-100", children: notification.sender.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-xs text-gray-500", children: notification.sender.name })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity", children: [
                !notification.is_read && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0",
                    onClick: (e) => {
                      e.stopPropagation();
                      handleMarkAsRead(notification.id);
                    },
                    title: "Mark as read",
                    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Check, { className: "w-3 h-3" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0",
                    title: "Open",
                    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ExternalLink, { className: "w-3 h-3" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0",
                    title: "Dismiss",
                    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(X, { className: "w-3 h-3" })
                  }
                )
              ] })
            ] }),
            !notification.is_read && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "absolute left-2 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-blue-600 rounded-full" })
          ] })
        ] })
      },
      notification.id
    )) }) })
  ] });
}

// src/components/notifications/NotificationBell.tsx
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
function NotificationBell({
  className,
  variant = "desktop"
}) {
  const [isOpen, setIsOpen] = (0, import_react15.useState)(false);
  const { notifications: notifications2 } = useAppStore();
  const unreadCount = notifications2.filter((n) => !n.is_read).length;
  return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(Popover2, { open: isOpen, onOpenChange: setIsOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
      Button,
      {
        variant: "ghost",
        size: variant === "mobile" ? "sm" : "default",
        className: cn(
          "relative",
          variant === "mobile" && "p-2",
          className
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Bell, { className: cn(
            variant === "mobile" ? "w-5 h-5" : "w-5 h-5"
          ) }),
          unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Badge, { className: cn(
            "absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-red-500",
            variant === "mobile" && "h-4 w-4"
          ), children: unreadCount > 9 ? "9+" : unreadCount })
        ]
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
      PopoverContent2,
      {
        className: "w-96 p-0",
        align: "end",
        side: variant === "mobile" ? "bottom" : "bottom",
        sideOffset: 8,
        children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(NotificationCenter, { className: "border-0 shadow-none" })
      }
    )
  ] });
}

// src/components/notifications/ToastContainer.tsx
var import_react17 = __toESM(require_react(), 1);

// src/components/notifications/NotificationToast.tsx
var import_react16 = __toESM(require_react(), 1);
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
function NotificationToast({
  notification,
  onClose,
  onAction,
  className
}) {
  const [isVisible, setIsVisible] = (0, import_react16.useState)(false);
  const [isClosing, setIsClosing] = (0, import_react16.useState)(false);
  (0, import_react16.useEffect)(() => {
    const timer = setTimeout(() => setIsVisible(true), 100);
    return () => clearTimeout(timer);
  }, []);
  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      onClose();
    }, 200);
  };
  const getNotificationIcon = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(CircleCheck, { className: "w-5 h-5 text-blue-600" });
      case "comment_added":
      case "mention":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(MessageCircle, { className: "w-5 h-5 text-purple-600" });
      case "meeting_scheduled":
      case "deadline_reminder":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Calendar, { className: "w-5 h-5 text-green-600" });
      case "team_invitation":
      case "user_invited":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(UserPlus, { className: "w-5 h-5 text-indigo-600" });
      case "file_shared":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(FileText, { className: "w-5 h-5 text-orange-600" });
      case "system_alert":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TriangleAlert, { className: "w-5 h-5 text-red-600" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Bell, { className: "w-5 h-5 text-gray-600" });
    }
  };
  const getNotificationColor = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return "border-l-blue-500 bg-blue-50";
      case "comment_added":
      case "mention":
        return "border-l-purple-500 bg-purple-50";
      case "meeting_scheduled":
      case "deadline_reminder":
        return "border-l-green-500 bg-green-50";
      case "team_invitation":
      case "user_invited":
        return "border-l-indigo-500 bg-indigo-50";
      case "file_shared":
        return "border-l-orange-500 bg-orange-50";
      case "system_alert":
        return "border-l-red-500 bg-red-50";
      default:
        return "border-l-gray-300 bg-white";
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Card, { className: cn(
    "fixed top-4 right-4 w-96 max-w-[calc(100vw-2rem)] shadow-lg border-l-4 z-50 transition-all duration-200",
    getNotificationColor(notification.type),
    isVisible && !isClosing ? "translate-x-0 opacity-100" : "translate-x-full opacity-0",
    className
  ), children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-start space-x-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "flex-shrink-0 mt-0.5", children: getNotificationIcon(notification.type) }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex-1 min-w-0", children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-start justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex-1 pr-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h4", { className: "font-medium text-gray-900 text-sm", children: notification.title }),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("p", { className: "text-sm text-gray-600 mt-1 line-clamp-2", children: notification.message }),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "flex items-center justify-between mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "text-xs text-gray-500", children: formatDateTime(notification.created_at) }),
            notification.sender && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center space-x-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(Avatar, { className: "w-4 h-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(AvatarImage, { src: notification.sender.avatar }),
                /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(AvatarFallback, { className: "text-xs bg-gray-100", children: notification.sender.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "text-xs text-gray-500", children: notification.sender.name })
            ] })
          ] }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-6 w-6 p-0 text-gray-400 hover:text-gray-600",
            onClick: handleClose,
            children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(X, { className: "w-4 h-4" })
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center space-x-2 mt-3", children: [
        onAction && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
          Button,
          {
            variant: "outline",
            size: "sm",
            className: "h-7 text-xs",
            onClick: onAction,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ExternalLink, { className: "w-3 h-3 mr-1" }),
              "View"
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-7 text-xs text-gray-500 hover:text-gray-700",
            onClick: handleClose,
            children: "Dismiss"
          }
        )
      ] })
    ] })
  ] }) }) });
}

// src/components/notifications/ToastContainer.tsx
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
function ToastContainer() {
  const [toasts, setToasts] = (0, import_react17.useState)([]);
  const { notifications: notifications2, markNotificationRead } = useAppStore();
  (0, import_react17.useEffect)(() => {
    const newNotifications = notifications2.filter((n) => !n.is_read).filter((n) => !toasts.some((t2) => t2.id === n.id)).slice(0, 3);
    if (newNotifications.length > 0) {
      const newToasts = newNotifications.map((notification) => ({
        ...notification,
        toastId: `toast-${notification.id}-${Date.now()}`,
        timestamp: Date.now()
      }));
      setToasts((prev) => [...prev, ...newToasts]);
    }
  }, [notifications2, toasts]);
  (0, import_react17.useEffect)(() => {
    toasts.forEach((toast3) => {
      const timer = setTimeout(() => {
        handleDismissToast(toast3.toastId);
      }, 5e3);
      return () => clearTimeout(timer);
    });
  }, [toasts]);
  const handleDismissToast = (toastId) => {
    setToasts((prev) => prev.filter((t2) => t2.toastId !== toastId));
  };
  const handleToastAction = (notification) => {
    markNotificationRead(notification.id);
    handleDismissToast(notification.toastId);
    console.log("Navigate to:", notification.type, notification.id);
  };
  const handleToastClose = (notification) => {
    markNotificationRead(notification.id);
    handleDismissToast(notification.toastId);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "fixed top-0 right-0 z-50 p-4 space-y-3 pointer-events-none", children: toasts.map((toast3, index) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
    "div",
    {
      className: "pointer-events-auto",
      style: {
        transform: `translateY(${index * 10}px)`,
        zIndex: 1e3 - index
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
        NotificationToast,
        {
          notification: toast3,
          onClose: () => handleToastClose(toast3),
          onAction: () => handleToastAction(toast3)
        }
      )
    },
    toast3.toastId
  )) });
}

// src/components/common/GlobalSearch.tsx
var import_react18 = __toESM(require_react(), 1);

// ../node_modules/cmdk/dist/chunk-NZJY6EH4.mjs
var U = 1;
var Y = 0.9;
var H = 0.8;
var J = 0.17;
var p = 0.1;
var u = 0.999;
var $ = 0.9999;
var k = 0.99;
var m = /[\\\/_+.#"@\[\(\{&]/;
var B = /[\\\/_+.#"@\[\(\{&]/g;
var K = /[\s-]/;
var X2 = /[\s-]/g;
function G(_, C, h, P2, A, f, O) {
  if (f === C.length) return A === _.length ? U : k;
  var T2 = `${A},${f}`;
  if (O[T2] !== void 0) return O[T2];
  for (var L2 = P2.charAt(f), c = h.indexOf(L2, A), S = 0, E, N2, R, M; c >= 0; ) E = G(_, C, h, P2, c + 1, f + 1, O), E > S && (c === A ? E *= U : m.test(_.charAt(c - 1)) ? (E *= H, R = _.slice(A, c - 1).match(B), R && A > 0 && (E *= Math.pow(u, R.length))) : K.test(_.charAt(c - 1)) ? (E *= Y, M = _.slice(A, c - 1).match(X2), M && A > 0 && (E *= Math.pow(u, M.length))) : (E *= J, A > 0 && (E *= Math.pow(u, c - A))), _.charAt(c) !== C.charAt(f) && (E *= $)), (E < p && h.charAt(c - 1) === P2.charAt(f + 1) || P2.charAt(f + 1) === P2.charAt(f) && h.charAt(c - 1) !== P2.charAt(f)) && (N2 = G(_, C, h, P2, c + 1, f + 2, O), N2 * p > E && (E = N2 * p)), E > S && (S = E), c = h.indexOf(L2, c + 1);
  return O[T2] = S, S;
}
function D(_) {
  return _.toLowerCase().replace(X2, " ");
}
function W(_, C, h) {
  return _ = h && h.length > 0 ? `${_ + " " + h.join(" ")}` : _, G(_, C, D(_), D(C), 0, 0, {});
}

// ../node_modules/cmdk/dist/index.mjs
var t = __toESM(require_react(), 1);
var N = '[cmdk-group=""]';
var Y2 = '[cmdk-group-items=""]';
var be = '[cmdk-group-heading=""]';
var le = '[cmdk-item=""]';
var ce = `${le}:not([aria-disabled="true"])`;
var Z = "cmdk-item-select";
var T = "data-value";
var Re = (r, o, n) => W(r, o, n);
var ue = t.createContext(void 0);
var K2 = () => t.useContext(ue);
var de = t.createContext(void 0);
var ee = () => t.useContext(de);
var fe = t.createContext(void 0);
var me = t.forwardRef((r, o) => {
  let n = L(() => {
    var e, a;
    return { search: "", value: (a = (e = r.value) != null ? e : r.defaultValue) != null ? a : "", selectedItemId: void 0, filtered: { count: 0, items: /* @__PURE__ */ new Map(), groups: /* @__PURE__ */ new Set() } };
  }), u2 = L(() => /* @__PURE__ */ new Set()), c = L(() => /* @__PURE__ */ new Map()), d = L(() => /* @__PURE__ */ new Map()), f = L(() => /* @__PURE__ */ new Set()), p2 = pe(r), { label: b, children: m2, value: R, onValueChange: x, filter: C, shouldFilter: S, loop: A, disablePointerSelection: ge = false, vimBindings: j = true, ...O } = r, $2 = useId(), q = useId(), _ = useId(), I = t.useRef(null), v = ke();
  k2(() => {
    if (R !== void 0) {
      let e = R.trim();
      n.current.value = e, E.emit();
    }
  }, [R]), k2(() => {
    v(6, ne);
  }, []);
  let E = t.useMemo(() => ({ subscribe: (e) => (f.current.add(e), () => f.current.delete(e)), snapshot: () => n.current, setState: (e, a, s) => {
    var i, l, g, y;
    if (!Object.is(n.current[e], a)) {
      if (n.current[e] = a, e === "search") J2(), z(), v(1, W2);
      else if (e === "value") {
        if (document.activeElement.hasAttribute("cmdk-input") || document.activeElement.hasAttribute("cmdk-root")) {
          let h = document.getElementById(_);
          h ? h.focus() : (i = document.getElementById($2)) == null || i.focus();
        }
        if (v(7, () => {
          var h;
          n.current.selectedItemId = (h = M()) == null ? void 0 : h.id, E.emit();
        }), s || v(5, ne), ((l = p2.current) == null ? void 0 : l.value) !== void 0) {
          let h = a != null ? a : "";
          (y = (g = p2.current).onValueChange) == null || y.call(g, h);
          return;
        }
      }
      E.emit();
    }
  }, emit: () => {
    f.current.forEach((e) => e());
  } }), []), U2 = t.useMemo(() => ({ value: (e, a, s) => {
    var i;
    a !== ((i = d.current.get(e)) == null ? void 0 : i.value) && (d.current.set(e, { value: a, keywords: s }), n.current.filtered.items.set(e, te(a, s)), v(2, () => {
      z(), E.emit();
    }));
  }, item: (e, a) => (u2.current.add(e), a && (c.current.has(a) ? c.current.get(a).add(e) : c.current.set(a, /* @__PURE__ */ new Set([e]))), v(3, () => {
    J2(), z(), n.current.value || W2(), E.emit();
  }), () => {
    d.current.delete(e), u2.current.delete(e), n.current.filtered.items.delete(e);
    let s = M();
    v(4, () => {
      J2(), (s == null ? void 0 : s.getAttribute("id")) === e && W2(), E.emit();
    });
  }), group: (e) => (c.current.has(e) || c.current.set(e, /* @__PURE__ */ new Set()), () => {
    d.current.delete(e), c.current.delete(e);
  }), filter: () => p2.current.shouldFilter, label: b || r["aria-label"], getDisablePointerSelection: () => p2.current.disablePointerSelection, listId: $2, inputId: _, labelId: q, listInnerRef: I }), []);
  function te(e, a) {
    var i, l;
    let s = (l = (i = p2.current) == null ? void 0 : i.filter) != null ? l : Re;
    return e ? s(e, n.current.search, a) : 0;
  }
  function z() {
    if (!n.current.search || p2.current.shouldFilter === false) return;
    let e = n.current.filtered.items, a = [];
    n.current.filtered.groups.forEach((i) => {
      let l = c.current.get(i), g = 0;
      l.forEach((y) => {
        let h = e.get(y);
        g = Math.max(h, g);
      }), a.push([i, g]);
    });
    let s = I.current;
    V().sort((i, l) => {
      var h, F;
      let g = i.getAttribute("id"), y = l.getAttribute("id");
      return ((h = e.get(y)) != null ? h : 0) - ((F = e.get(g)) != null ? F : 0);
    }).forEach((i) => {
      let l = i.closest(Y2);
      l ? l.appendChild(i.parentElement === l ? i : i.closest(`${Y2} > *`)) : s.appendChild(i.parentElement === s ? i : i.closest(`${Y2} > *`));
    }), a.sort((i, l) => l[1] - i[1]).forEach((i) => {
      var g;
      let l = (g = I.current) == null ? void 0 : g.querySelector(`${N}[${T}="${encodeURIComponent(i[0])}"]`);
      l == null || l.parentElement.appendChild(l);
    });
  }
  function W2() {
    let e = V().find((s) => s.getAttribute("aria-disabled") !== "true"), a = e == null ? void 0 : e.getAttribute(T);
    E.setState("value", a || void 0);
  }
  function J2() {
    var a, s, i, l;
    if (!n.current.search || p2.current.shouldFilter === false) {
      n.current.filtered.count = u2.current.size;
      return;
    }
    n.current.filtered.groups = /* @__PURE__ */ new Set();
    let e = 0;
    for (let g of u2.current) {
      let y = (s = (a = d.current.get(g)) == null ? void 0 : a.value) != null ? s : "", h = (l = (i = d.current.get(g)) == null ? void 0 : i.keywords) != null ? l : [], F = te(y, h);
      n.current.filtered.items.set(g, F), F > 0 && e++;
    }
    for (let [g, y] of c.current) for (let h of y) if (n.current.filtered.items.get(h) > 0) {
      n.current.filtered.groups.add(g);
      break;
    }
    n.current.filtered.count = e;
  }
  function ne() {
    var a, s, i;
    let e = M();
    e && (((a = e.parentElement) == null ? void 0 : a.firstChild) === e && ((i = (s = e.closest(N)) == null ? void 0 : s.querySelector(be)) == null || i.scrollIntoView({ block: "nearest" })), e.scrollIntoView({ block: "nearest" }));
  }
  function M() {
    var e;
    return (e = I.current) == null ? void 0 : e.querySelector(`${le}[aria-selected="true"]`);
  }
  function V() {
    var e;
    return Array.from(((e = I.current) == null ? void 0 : e.querySelectorAll(ce)) || []);
  }
  function X3(e) {
    let s = V()[e];
    s && E.setState("value", s.getAttribute(T));
  }
  function Q(e) {
    var g;
    let a = M(), s = V(), i = s.findIndex((y) => y === a), l = s[i + e];
    (g = p2.current) != null && g.loop && (l = i + e < 0 ? s[s.length - 1] : i + e === s.length ? s[0] : s[i + e]), l && E.setState("value", l.getAttribute(T));
  }
  function re(e) {
    let a = M(), s = a == null ? void 0 : a.closest(N), i;
    for (; s && !i; ) s = e > 0 ? we(s, N) : De(s, N), i = s == null ? void 0 : s.querySelector(ce);
    i ? E.setState("value", i.getAttribute(T)) : Q(e);
  }
  let oe = () => X3(V().length - 1), ie = (e) => {
    e.preventDefault(), e.metaKey ? oe() : e.altKey ? re(1) : Q(1);
  }, se = (e) => {
    e.preventDefault(), e.metaKey ? X3(0) : e.altKey ? re(-1) : Q(-1);
  };
  return t.createElement(Primitive.div, { ref: o, tabIndex: -1, ...O, "cmdk-root": "", onKeyDown: (e) => {
    var s;
    (s = O.onKeyDown) == null || s.call(O, e);
    let a = e.nativeEvent.isComposing || e.keyCode === 229;
    if (!(e.defaultPrevented || a)) switch (e.key) {
      case "n":
      case "j": {
        j && e.ctrlKey && ie(e);
        break;
      }
      case "ArrowDown": {
        ie(e);
        break;
      }
      case "p":
      case "k": {
        j && e.ctrlKey && se(e);
        break;
      }
      case "ArrowUp": {
        se(e);
        break;
      }
      case "Home": {
        e.preventDefault(), X3(0);
        break;
      }
      case "End": {
        e.preventDefault(), oe();
        break;
      }
      case "Enter": {
        e.preventDefault();
        let i = M();
        if (i) {
          let l = new Event(Z);
          i.dispatchEvent(l);
        }
      }
    }
  } }, t.createElement("label", { "cmdk-label": "", htmlFor: U2.inputId, id: U2.labelId, style: Te }, b), B2(r, (e) => t.createElement(de.Provider, { value: E }, t.createElement(ue.Provider, { value: U2 }, e))));
});
var he = t.forwardRef((r, o) => {
  var _, I;
  let n = useId(), u2 = t.useRef(null), c = t.useContext(fe), d = K2(), f = pe(r), p2 = (I = (_ = f.current) == null ? void 0 : _.forceMount) != null ? I : c == null ? void 0 : c.forceMount;
  k2(() => {
    if (!p2) return d.item(n, c == null ? void 0 : c.id);
  }, [p2]);
  let b = ve(n, u2, [r.value, r.children, u2], r.keywords), m2 = ee(), R = P((v) => v.value && v.value === b.current), x = P((v) => p2 || d.filter() === false ? true : v.search ? v.filtered.items.get(n) > 0 : true);
  t.useEffect(() => {
    let v = u2.current;
    if (!(!v || r.disabled)) return v.addEventListener(Z, C), () => v.removeEventListener(Z, C);
  }, [x, r.onSelect, r.disabled]);
  function C() {
    var v, E;
    S(), (E = (v = f.current).onSelect) == null || E.call(v, b.current);
  }
  function S() {
    m2.setState("value", b.current, true);
  }
  if (!x) return null;
  let { disabled: A, value: ge, onSelect: j, forceMount: O, keywords: $2, ...q } = r;
  return t.createElement(Primitive.div, { ref: composeRefs(u2, o), ...q, id: n, "cmdk-item": "", role: "option", "aria-disabled": !!A, "aria-selected": !!R, "data-disabled": !!A, "data-selected": !!R, onPointerMove: A || d.getDisablePointerSelection() ? void 0 : S, onClick: A ? void 0 : C }, r.children);
});
var Ee = t.forwardRef((r, o) => {
  let { heading: n, children: u2, forceMount: c, ...d } = r, f = useId(), p2 = t.useRef(null), b = t.useRef(null), m2 = useId(), R = K2(), x = P((S) => c || R.filter() === false ? true : S.search ? S.filtered.groups.has(f) : true);
  k2(() => R.group(f), []), ve(f, p2, [r.value, r.heading, b]);
  let C = t.useMemo(() => ({ id: f, forceMount: c }), [c]);
  return t.createElement(Primitive.div, { ref: composeRefs(p2, o), ...d, "cmdk-group": "", role: "presentation", hidden: x ? void 0 : true }, n && t.createElement("div", { ref: b, "cmdk-group-heading": "", "aria-hidden": true, id: m2 }, n), B2(r, (S) => t.createElement("div", { "cmdk-group-items": "", role: "group", "aria-labelledby": n ? m2 : void 0 }, t.createElement(fe.Provider, { value: C }, S))));
});
var ye = t.forwardRef((r, o) => {
  let { alwaysRender: n, ...u2 } = r, c = t.useRef(null), d = P((f) => !f.search);
  return !n && !d ? null : t.createElement(Primitive.div, { ref: composeRefs(c, o), ...u2, "cmdk-separator": "", role: "separator" });
});
var Se = t.forwardRef((r, o) => {
  let { onValueChange: n, ...u2 } = r, c = r.value != null, d = ee(), f = P((m2) => m2.search), p2 = P((m2) => m2.selectedItemId), b = K2();
  return t.useEffect(() => {
    r.value != null && d.setState("search", r.value);
  }, [r.value]), t.createElement(Primitive.input, { ref: o, ...u2, "cmdk-input": "", autoComplete: "off", autoCorrect: "off", spellCheck: false, "aria-autocomplete": "list", role: "combobox", "aria-expanded": true, "aria-controls": b.listId, "aria-labelledby": b.labelId, "aria-activedescendant": p2, id: b.inputId, type: "text", value: c ? r.value : f, onChange: (m2) => {
    c || d.setState("search", m2.target.value), n == null || n(m2.target.value);
  } });
});
var Ce = t.forwardRef((r, o) => {
  let { children: n, label: u2 = "Suggestions", ...c } = r, d = t.useRef(null), f = t.useRef(null), p2 = P((m2) => m2.selectedItemId), b = K2();
  return t.useEffect(() => {
    if (f.current && d.current) {
      let m2 = f.current, R = d.current, x, C = new ResizeObserver(() => {
        x = requestAnimationFrame(() => {
          let S = m2.offsetHeight;
          R.style.setProperty("--cmdk-list-height", S.toFixed(1) + "px");
        });
      });
      return C.observe(m2), () => {
        cancelAnimationFrame(x), C.unobserve(m2);
      };
    }
  }, []), t.createElement(Primitive.div, { ref: composeRefs(d, o), ...c, "cmdk-list": "", role: "listbox", tabIndex: -1, "aria-activedescendant": p2, "aria-label": u2, id: b.listId }, B2(r, (m2) => t.createElement("div", { ref: composeRefs(f, b.listInnerRef), "cmdk-list-sizer": "" }, m2)));
});
var xe = t.forwardRef((r, o) => {
  let { open: n, onOpenChange: u2, overlayClassName: c, contentClassName: d, container: f, ...p2 } = r;
  return t.createElement(Root, { open: n, onOpenChange: u2 }, t.createElement(Portal2, { container: f }, t.createElement(Overlay, { "cmdk-overlay": "", className: c }), t.createElement(Content, { "aria-label": r.label, "cmdk-dialog": "", className: d }, t.createElement(me, { ref: o, ...p2 }))));
});
var Ie = t.forwardRef((r, o) => P((u2) => u2.filtered.count === 0) ? t.createElement(Primitive.div, { ref: o, ...r, "cmdk-empty": "", role: "presentation" }) : null);
var Pe = t.forwardRef((r, o) => {
  let { progress: n, children: u2, label: c = "Loading...", ...d } = r;
  return t.createElement(Primitive.div, { ref: o, ...d, "cmdk-loading": "", role: "progressbar", "aria-valuenow": n, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": c }, B2(r, (f) => t.createElement("div", { "aria-hidden": true }, f)));
});
var _e = Object.assign(me, { List: Ce, Item: he, Input: Se, Group: Ee, Separator: ye, Dialog: xe, Empty: Ie, Loading: Pe });
function we(r, o) {
  let n = r.nextElementSibling;
  for (; n; ) {
    if (n.matches(o)) return n;
    n = n.nextElementSibling;
  }
}
function De(r, o) {
  let n = r.previousElementSibling;
  for (; n; ) {
    if (n.matches(o)) return n;
    n = n.previousElementSibling;
  }
}
function pe(r) {
  let o = t.useRef(r);
  return k2(() => {
    o.current = r;
  }), o;
}
var k2 = typeof window == "undefined" ? t.useEffect : t.useLayoutEffect;
function L(r) {
  let o = t.useRef();
  return o.current === void 0 && (o.current = r()), o;
}
function P(r) {
  let o = ee(), n = () => r(o.snapshot());
  return t.useSyncExternalStore(o.subscribe, n, n);
}
function ve(r, o, n, u2 = []) {
  let c = t.useRef(), d = K2();
  return k2(() => {
    var b;
    let f = (() => {
      var m2;
      for (let R of n) {
        if (typeof R == "string") return R.trim();
        if (typeof R == "object" && "current" in R) return R.current ? (m2 = R.current.textContent) == null ? void 0 : m2.trim() : c.current;
      }
    })(), p2 = u2.map((m2) => m2.trim());
    d.value(r, f, p2), (b = o.current) == null || b.setAttribute(T, f), c.current = f;
  }), c;
}
var ke = () => {
  let [r, o] = t.useState(), n = L(() => /* @__PURE__ */ new Map());
  return k2(() => {
    n.current.forEach((u2) => u2()), n.current = /* @__PURE__ */ new Map();
  }, [r]), (u2, c) => {
    n.current.set(u2, c), o({});
  };
};
function Me(r) {
  let o = r.type;
  return typeof o == "function" ? o(r.props) : "render" in o ? o.render(r.props) : r;
}
function B2({ asChild: r, children: o }, n) {
  return r && t.isValidElement(o) ? t.cloneElement(Me(o), { ref: o.ref }, n(o.props.children)) : n(o);
}
var Te = { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0" };

// src/components/common/GlobalSearch.tsx
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
function GlobalSearch({ open, onClose }) {
  const navigate = useNavigate();
  const inputRef = (0, import_react18.useRef)(null);
  const [query, setQuery] = (0, import_react18.useState)("");
  const [selectedIndex, setSelectedIndex] = (0, import_react18.useState)(0);
  const { data: searchResults, isLoading } = trpc.search.global.useQuery(
    { query },
    {
      enabled: query.length > 2,
      debounceMs: 300
    }
  );
  (0, import_react18.useEffect)(() => {
    if (!open) {
      setQuery("");
      setSelectedIndex(0);
    }
  }, [open]);
  (0, import_react18.useEffect)(() => {
    if (open && inputRef.current) {
      inputRef.current.focus();
    }
  }, [open]);
  const getIcon = (type) => {
    switch (type) {
      case "task":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(SquareCheckBig, { className: "w-4 h-4" });
      case "project":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Folder, { className: "w-4 h-4" });
      case "team":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Users, { className: "w-4 h-4" });
      case "workspace":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Hash, { className: "w-4 h-4" });
      case "document":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(FileText, { className: "w-4 h-4" });
      case "event":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Calendar, { className: "w-4 h-4" });
      case "message":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(MessageSquare, { className: "w-4 h-4" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(FileText, { className: "w-4 h-4" });
    }
  };
  const getTypeColor = (type) => {
    switch (type) {
      case "task":
        return "bg-blue-100 text-blue-700";
      case "project":
        return "bg-purple-100 text-purple-700";
      case "team":
        return "bg-green-100 text-green-700";
      case "workspace":
        return "bg-gray-100 text-gray-700";
      case "document":
        return "bg-orange-100 text-orange-700";
      case "event":
        return "bg-red-100 text-red-700";
      case "message":
        return "bg-indigo-100 text-indigo-700";
      default:
        return "bg-gray-100 text-gray-700";
    }
  };
  const handleSelect = (result) => {
    switch (result.type) {
      case "task":
        navigate(`/board?task=${result.id}`);
        break;
      case "project":
        navigate(`/projects/${result.id}`);
        break;
      case "team":
        navigate(`/teams/${result.id}`);
        break;
      case "workspace":
        navigate(`/workspaces/${result.id}`);
        break;
      default:
        break;
    }
    onClose();
  };
  const allResults = [
    ...(searchResults?.tasks || []).map((t2) => ({ ...t2, type: "task" })),
    ...(searchResults?.projects || []).map((p2) => ({ ...p2, type: "project" })),
    ...(searchResults?.teams || []).map((t2) => ({ ...t2, type: "team" })),
    ...(searchResults?.workspaces || []).map((w) => ({ ...w, type: "workspace" }))
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Dialog, { open, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(DialogContent, { className: "max-w-2xl p-0", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(_e, { className: "rounded-lg shadow-md", children: [
    /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex items-center border-b px-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Search, { className: "mr-2 h-4 w-4 shrink-0 opacity-50" }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        FloatingInput,
        {
          ref: inputRef,
          label: "Search everything",
          value: query,
          onChange: (e) => setQuery(e.target.value),
          className: "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none disabled:cursor-not-allowed disabled:opacity-50 border-0 focus:ring-0"
        }
      ),
      query && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: () => setQuery(""),
          className: "h-6 w-6 p-0",
          children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(X, { className: "h-4 w-4" })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(_e.List, { className: "max-h-[400px] overflow-y-auto p-2", children: [
      isLoading && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "flex items-center justify-center py-6", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(LoaderCircle, { className: "h-6 w-6 animate-spin text-gray-400" }) }),
      !isLoading && query.length > 2 && allResults.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "py-6 text-center text-sm text-gray-500", children: [
        'No results found for "',
        query,
        '"'
      ] }),
      !isLoading && query.length <= 2 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "py-6 text-center text-sm text-gray-500", children: "Type at least 3 characters to search" }),
      !isLoading && allResults.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
        searchResults?.tasks && searchResults.tasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(_e.Group, { heading: "Tasks", children: searchResults.tasks.map((task, index) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          _e.Item,
          {
            value: task.id,
            onSelect: () => handleSelect({ ...task, type: "task" }),
            className: cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-sm cursor-pointer",
              "hover:bg-gray-100",
              selectedIndex === index && "bg-gray-100"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: cn("p-1 rounded", getTypeColor("task")), children: getIcon("task") }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-medium", children: task.title }),
                task.project && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("p", { className: "text-xs text-gray-500", children: [
                  "in ",
                  task.project.name
                ] })
              ] }),
              task.status && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Badge, { variant: "outline", className: "text-xs", children: task.status })
            ]
          },
          task.id
        )) }),
        searchResults?.projects && searchResults.projects.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(_e.Group, { heading: "Projects", children: searchResults.projects.map((project) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          _e.Item,
          {
            value: project.id,
            onSelect: () => handleSelect({ ...project, type: "project" }),
            className: cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-sm cursor-pointer",
              "hover:bg-gray-100"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: cn("p-1 rounded", getTypeColor("project")), children: getIcon("project") }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-medium", children: project.name }),
                project.description && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "text-xs text-gray-500", children: project.description })
              ] })
            ]
          },
          project.id
        )) }),
        searchResults?.teams && searchResults.teams.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(_e.Group, { heading: "Teams", children: searchResults.teams.map((team) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          _e.Item,
          {
            value: team.id,
            onSelect: () => handleSelect({ ...team, type: "team" }),
            className: cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-sm cursor-pointer",
              "hover:bg-gray-100"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: cn("p-1 rounded", getTypeColor("team")), children: getIcon("team") }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-medium", children: team.name }),
                team._count?.members && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("p", { className: "text-xs text-gray-500", children: [
                  team._count.members,
                  " members"
                ] })
              ] })
            ]
          },
          team.id
        )) })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "border-t px-3 py-2", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("p", { className: "text-xs text-gray-500", children: [
      "Press ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "\u2191" }),
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "\u2193" }),
      " to navigate,",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "Enter" }),
      " to select,",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "Esc" }),
      " to close"
    ] }) })
  ] }) }) });
}

// src/components/layout/ResponsiveLayout.tsx
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
function ResponsiveLayout({ children }) {
  const navigate = useNavigate();
  const [currentPage, setCurrentPage] = (0, import_react19.useState)("home");
  const [sidebarOpen, setSidebarOpen] = (0, import_react19.useState)(false);
  const [isMobile, setIsMobile] = (0, import_react19.useState)(false);
  const [showSearch, setShowSearch] = (0, import_react19.useState)(false);
  const { user } = useAuthStore();
  const isConnected = true;
  const activeWorkspace = null;
  (0, import_react19.useEffect)(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);
    return () => window.removeEventListener("resize", checkScreenSize);
  }, []);
  (0, import_react19.useEffect)(() => {
    const path = window.location.pathname.slice(1) || "home";
    setCurrentPage(path);
  }, []);
  const handlePageChange = (page) => {
    setCurrentPage(page);
    const routes = {
      home: "/home",
      workspace: "/workspace",
      board: "/board",
      calendar: "/calendar",
      chat: "/chat",
      notes: "/notes",
      teams: "/teams",
      projects: "/projects"
    };
    if (routes[page]) {
      navigate(routes[page]);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "h-screen flex flex-col bg-gray-50", children: [
    isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("header", { className: "bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between md:hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Sheet, { open: sidebarOpen, onOpenChange: setSidebarOpen, children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SheetTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { variant: "ghost", size: "sm", className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Menu, { className: "w-5 h-5" }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SheetContent, { side: "left", className: "w-80 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Sidebar, { currentPage, onPageChange: handlePageChange }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(KrushrLogo, { size: "md" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          Badge,
          {
            variant: isConnected ? "default" : "outline",
            className: cn(
              "text-xs",
              isConnected ? "bg-emerald-100 text-emerald-700 border-emerald-200" : "bg-amber-100 text-amber-700 border-amber-300"
            ),
            children: isConnected ? "Live" : "Offline"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { variant: "ghost", size: "sm", className: "p-2", onClick: () => setShowSearch(true), children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Search, { className: "w-5 h-5" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(NotificationBell, { variant: "mobile" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Avatar, { className: "w-8 h-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarImage, { src: user?.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarFallback, { className: "text-xs bg-secondary text-secondary-foreground", children: user?.name?.split(" ").map((n) => n[0]).join("").toUpperCase() || "U" })
        ] })
      ] })
    ] }),
    !isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("header", { className: "bg-white/95 backdrop-blur-sm border-b border-border px-6 py-4 hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(KrushrLogo, { size: "sm", showText: false }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h1", { className: "text-xl font-semibold text-foreground", children: activeWorkspace?.name || "Workspace" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          Badge,
          {
            variant: isConnected ? "default" : "outline",
            className: cn(
              "text-xs",
              isConnected ? "bg-emerald-100 text-emerald-700 border-emerald-200" : "bg-amber-100 text-amber-700 border-amber-300"
            ),
            children: isConnected ? "Live" : "Connecting..."
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
          Button,
          {
            variant: "outline",
            className: "w-64 justify-start text-muted-foreground hover:text-foreground",
            onClick: () => setShowSearch(true),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Search, { className: "mr-2 h-4 w-4" }),
              "Search..."
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(NotificationBell, { variant: "desktop" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Avatar, { className: "w-8 h-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarImage, { src: user?.avatar }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarFallback, { className: "text-xs bg-secondary text-secondary-foreground", children: user?.name?.split(" ").map((n) => n[0]).join("").toUpperCase() || "U" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "hidden lg:block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-sm font-medium text-foreground", children: user?.name || "User" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-xs text-gray-500", children: user?.email || "user@example.com" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ChevronDown, { className: "w-4 h-4" }) })
        ] })
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex-1 flex overflow-hidden", children: [
      !isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Sidebar, { currentPage, onPageChange: handlePageChange }) }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("main", { className: cn(
        "flex-1 overflow-auto",
        isMobile && "pb-16"
        // Add padding for mobile navigation
      ), children })
    ] }),
    isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      MobileNavigation,
      {
        currentPage,
        onPageChange: handlePageChange
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("footer", { className: "bg-gray-900 text-white w-full", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "w-full px-4 sm:px-6 lg:px-8 py-8", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex flex-col lg:flex-row lg:justify-between items-center gap-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-sm text-gray-400", children: "Copyright \xA9 krushr.io" }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center gap-4 text-sm text-gray-400", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("a", { href: "/privacy", className: "hover:text-white transition-colors", children: "Privacy" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("a", { href: "/terms", className: "hover:text-white transition-colors", children: "Terms" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("a", { href: "/contact", className: "hover:text-white transition-colors", children: "Contact" })
      ] })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ToastContainer, {}),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      GlobalSearch,
      {
        open: showSearch,
        onClose: () => setShowSearch(false)
      }
    )
  ] });
}

// src/components/dashboard/ActivityFeed.tsx
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
function ActivityFeed({ className }) {
  const activities = [
    {
      id: "1",
      type: "task_completed",
      user: { id: "1", name: "Sarah Chen", avatar: "" },
      description: "completed task",
      target: { type: "task", id: "1", name: "Database Migration" },
      timestamp: new Date(Date.now() - 5 * 60 * 1e3).toISOString(),
      priority: "high"
    },
    {
      id: "2",
      type: "comment_added",
      user: { id: "2", name: "Mike Johnson", avatar: "" },
      description: "added a comment to",
      target: { type: "task", id: "2", name: "API Documentation" },
      timestamp: new Date(Date.now() - 15 * 60 * 1e3).toISOString()
    },
    {
      id: "3",
      type: "task_created",
      user: { id: "3", name: "Emma Davis", avatar: "" },
      description: "created new task",
      target: { type: "task", id: "3", name: "User Interface Design" },
      timestamp: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
      priority: "medium"
    },
    {
      id: "4",
      type: "task_assigned",
      user: { id: "1", name: "Sarah Chen", avatar: "" },
      description: "assigned task to Alex Kim",
      target: { type: "task", id: "4", name: "Code Review" },
      timestamp: new Date(Date.now() - 45 * 60 * 1e3).toISOString()
    },
    {
      id: "5",
      type: "meeting_scheduled",
      user: { id: "4", name: "Alex Kim", avatar: "" },
      description: "scheduled a meeting for",
      target: { type: "project", id: "1", name: "Q1 Planning" },
      timestamp: new Date(Date.now() - 60 * 60 * 1e3).toISOString()
    }
  ];
  const getActivityIcon = (type) => {
    switch (type) {
      case "task_completed":
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(CircleCheck, { className: "w-4 h-4 text-green-600" });
      case "task_created":
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Plus, { className: "w-4 h-4 text-blue-600" });
      case "task_assigned":
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Users, { className: "w-4 h-4 text-purple-600" });
      case "comment_added":
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(MessageCircle, { className: "w-4 h-4 text-orange-600" });
      case "file_uploaded":
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(FileText, { className: "w-4 h-4 text-gray-600" });
      case "meeting_scheduled":
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Calendar, { className: "w-4 h-4 text-indigo-600" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Clock, { className: "w-4 h-4 text-gray-400" });
    }
  };
  const getActivityColor = (type) => {
    switch (type) {
      case "task_completed":
        return "bg-green-50 border-green-200";
      case "task_created":
        return "bg-blue-50 border-blue-200";
      case "task_assigned":
        return "bg-purple-50 border-purple-200";
      case "comment_added":
        return "bg-orange-50 border-orange-200";
      case "file_uploaded":
        return "bg-gray-50 border-gray-200";
      case "meeting_scheduled":
        return "bg-indigo-50 border-indigo-200";
      default:
        return "bg-gray-50 border-gray-200";
    }
  };
  const formatTimeAgo = (timestamp) => {
    const now = /* @__PURE__ */ new Date();
    const time = new Date(timestamp);
    const diffInMinutes = Math.floor((now.getTime() - time.getTime()) / (1e3 * 60));
    if (diffInMinutes < 1) return "Just now";
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
    return `${Math.floor(diffInMinutes / 1440)}d ago`;
  };
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(CardHeader, { className: "flex-shrink-0 pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Recent Activity" }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(RefreshCw, { className: "w-4 h-4" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(CardContent, { className: "flex-1 p-0 overflow-y-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "space-y-1", children: activities.map((activity, index) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
        "div",
        {
          className: cn(
            "p-4 border-l-4 hover:bg-gray-50 transition-colors cursor-pointer",
            getActivityColor(activity.type),
            index === 0 && "bg-opacity-50"
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex items-start space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(Avatar, { className: "w-8 h-8 flex-shrink-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AvatarImage, { src: activity.user.avatar }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AvatarFallback, { className: "text-xs bg-gray-100", children: activity.user.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex items-center space-x-2 mb-1", children: [
                getActivityIcon(activity.type),
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "text-sm font-medium text-gray-900 truncate", children: activity.user.name }),
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "text-xs text-gray-500 flex-shrink-0", children: formatTimeAgo(activity.timestamp) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("p", { className: "text-sm text-gray-600 leading-relaxed", children: [
                activity.description,
                " ",
                activity.target && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "font-medium text-gray-900", children: activity.target.name })
              ] }),
              activity.priority && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
                Badge,
                {
                  variant: "outline",
                  className: cn(
                    "text-xs",
                    activity.priority === "high" && "border-red-200 text-red-700 bg-red-50",
                    activity.priority === "medium" && "border-orange-200 text-orange-700 bg-orange-50",
                    activity.priority === "low" && "border-green-200 text-green-700 bg-green-50"
                  ),
                  children: [
                    activity.priority,
                    " priority"
                  ]
                }
              ) })
            ] })
          ] })
        },
        activity.id
      )) }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "p-4 text-center border-t", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "text-gray-600 hover:text-gray-900",
          onClick: () => console.log("Loading more activity..."),
          children: "Load more activity"
        }
      ) })
    ] })
  ] });
}

// src/components/dashboard/QuickActions.tsx
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
function QuickActions({ className }) {
  const navigate = useNavigate();
  const actions = [
    {
      id: "create-task",
      title: "Create Task",
      description: "Add a new task to your board",
      icon: Plus,
      color: "text-blue-600 bg-blue-50 hover:bg-blue-100",
      action: () => {
        navigate("/board");
      }
    },
    {
      id: "schedule-meeting",
      title: "Schedule Meeting",
      description: "Set up a team meeting",
      icon: Calendar,
      color: "text-green-600 bg-green-50 hover:bg-green-100",
      action: () => {
        navigate("/calendar");
      }
    },
    {
      id: "start-chat",
      title: "Start Chat",
      description: "Begin a team conversation",
      icon: MessageCircle,
      color: "text-purple-600 bg-purple-50 hover:bg-purple-100",
      action: () => {
        navigate("/chat");
      }
    },
    {
      id: "create-note",
      title: "Quick Note",
      description: "Capture an idea or note",
      icon: FileText,
      color: "text-orange-600 bg-orange-50 hover:bg-orange-100",
      action: () => {
        navigate("/notes");
      }
    },
    {
      id: "invite-member",
      title: "Invite Member",
      description: "Add someone to your team",
      icon: Users,
      color: "text-indigo-600 bg-indigo-50 hover:bg-indigo-100",
      action: () => {
        navigate("/teams");
      }
    },
    {
      id: "start-call",
      title: "Start Call",
      description: "Begin a video call",
      icon: Video,
      color: "text-red-600 bg-red-50 hover:bg-red-100",
      action: () => {
        navigate("/chat");
      }
    },
    {
      id: "track-time",
      title: "Track Time",
      description: "Start time tracking",
      icon: Clock,
      color: "text-teal-600 bg-teal-50 hover:bg-teal-100",
      action: () => {
        navigate("/board");
      }
    },
    {
      id: "set-goal",
      title: "Set Goal",
      description: "Define a new objective",
      icon: Target,
      color: "text-pink-600 bg-pink-50 hover:bg-pink-100",
      action: () => {
        navigate("/projects");
      }
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Card, { className: cn("h-full", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CardHeader, { className: "pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Quick Actions" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CardContent, { className: "grid grid-cols-2 gap-3", children: actions.map((action) => {
      const IconComponent = action.icon;
      return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
        Button,
        {
          variant: "ghost",
          className: cn(
            "h-auto p-4 flex flex-col items-center text-center space-y-2 hover:scale-105 transition-all duration-200",
            action.color
          ),
          onClick: action.action,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(IconComponent, { className: "w-6 h-6" }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "font-medium text-sm", children: action.title }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "text-xs opacity-75", children: action.description })
            ] })
          ]
        },
        action.id
      );
    }) })
  ] });
}

// src/components/dashboard/TasksSummary.tsx
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
function TasksSummary({ className }) {
  const navigate = useNavigate();
  const tasks2 = [
    { id: "1", title: "Complete Dashboard", due_date: "2025-06-27", priority: "high", kanban_column_id: "in-progress" },
    { id: "2", title: "Review Code", due_date: "2025-06-28", priority: "medium", kanban_column_id: "done" },
    { id: "3", title: "Update Documentation", due_date: "2025-06-25", priority: "low", kanban_column_id: "todo" },
    { id: "4", title: "Fix Bug #123", due_date: "2025-06-24", priority: "high", kanban_column_id: "done" }
  ];
  const totalTasks = tasks2.length;
  const completedTasks = tasks2.filter(
    (task) => task.kanban_column_id.includes("done") || task.kanban_column_id.includes("complete")
  ).length;
  const inProgressTasks = tasks2.filter(
    (task) => task.kanban_column_id.includes("progress") || task.kanban_column_id.includes("review")
  ).length;
  const overdueTasks = tasks2.filter((task) => {
    if (!task.due_date) return false;
    return new Date(task.due_date) < /* @__PURE__ */ new Date();
  }).length;
  const dueSoonTasks = tasks2.filter((task) => {
    if (!task.due_date) return false;
    const dueDate = new Date(task.due_date);
    const now = /* @__PURE__ */ new Date();
    const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1e3);
    return dueDate > now && dueDate <= oneDayFromNow;
  }).length;
  const completionRate = totalTasks > 0 ? Math.round(completedTasks / totalTasks * 100) : 0;
  const stats = [
    {
      label: "Total Tasks",
      value: totalTasks,
      icon: CircleCheck,
      color: "text-gray-600",
      bgColor: "bg-gray-50"
    },
    {
      label: "In Progress",
      value: inProgressTasks,
      icon: Clock,
      color: "text-blue-600",
      bgColor: "bg-blue-50"
    },
    {
      label: "Completed",
      value: completedTasks,
      icon: CircleCheck,
      color: "text-green-600",
      bgColor: "bg-green-50"
    },
    {
      label: "Overdue",
      value: overdueTasks,
      icon: TriangleAlert,
      color: "text-red-600",
      bgColor: "bg-red-50"
    }
  ];
  const upcomingTasks = tasks2.filter((task) => task.due_date && new Date(task.due_date) > /* @__PURE__ */ new Date()).sort((a, b) => new Date(a.due_date).getTime() - new Date(b.due_date).getTime()).slice(0, 3);
  const formatDueDate = (dateString) => {
    const date = new Date(dateString);
    const now = /* @__PURE__ */ new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Tomorrow";
    if (diffDays < 7) return `${diffDays} days`;
    return date.toLocaleDateString("en-US", { month: "short", day: "numeric" });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardHeader, { className: "flex-shrink-0 pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Tasks Overview" }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Badge, { variant: "outline", className: "text-green-700 border-green-200 bg-green-50", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TrendingUp, { className: "w-3 h-3 mr-1" }),
        completionRate,
        "% Complete"
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(CardContent, { className: "flex-1 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "grid grid-cols-2 gap-4", children: stats.map((stat) => {
        const IconComponent = stat.icon;
        return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
          "div",
          {
            className: cn(
              "p-4 rounded-lg border transition-colors hover:shadow-sm",
              stat.bgColor
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(IconComponent, { className: cn("w-5 h-5", stat.color) }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: cn("text-2xl font-bold", stat.color), children: stat.value })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm text-gray-600 font-medium", children: stat.label })
            ]
          },
          stat.label
        );
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center justify-between text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "text-gray-600", children: "Overall Progress" }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("span", { className: "font-medium", children: [
            completedTasks,
            "/",
            totalTasks
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Progress, { value: completionRate, className: "h-2" })
      ] }),
      dueSoonTasks > 0 && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "p-3 bg-orange-50 border border-orange-200 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TriangleAlert, { className: "w-4 h-4 text-orange-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("span", { className: "text-sm font-medium text-orange-800", children: [
          dueSoonTasks,
          " task",
          dueSoonTasks > 1 ? "s" : "",
          " due within 24 hours"
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h4", { className: "text-sm font-semibold text-gray-900", children: "Upcoming Deadlines" }),
        upcomingTasks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "text-center py-4 text-gray-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Calendar, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-sm", children: "No upcoming deadlines" })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "space-y-2", children: upcomingTasks.map((task) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
          "div",
          {
            className: "flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex-1 min-w-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-sm font-medium text-gray-900 truncate", children: task.title }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center space-x-2 mt-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                    Badge,
                    {
                      variant: "outline",
                      className: cn(
                        "text-xs",
                        task.priority === "high" && "border-red-200 text-red-700",
                        task.priority === "medium" && "border-orange-200 text-orange-700",
                        task.priority === "low" && "border-green-200 text-green-700"
                      ),
                      children: task.priority
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center space-x-1 text-xs text-gray-500", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(User, { className: "w-3 h-3" }),
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { children: "Assigned" })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center space-x-2 text-xs text-gray-500", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Calendar, { className: "w-3 h-3" }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "font-medium", children: formatDueDate(task.due_date) })
              ] })
            ]
          },
          task.id
        )) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "pt-2 border-t", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
        Button,
        {
          variant: "ghost",
          className: "w-full justify-between text-gray-600 hover:text-gray-900",
          onClick: () => navigate("/board"),
          children: [
            "View all tasks",
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ArrowRight, { className: "w-4 h-4" })
          ]
        }
      ) })
    ] })
  ] });
}

// src/pages/Home.tsx
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
function Home() {
  const { user, isAuthenticated } = useAuthStore();
  const navigate = useNavigate();
  const [showUniversalForm, setShowUniversalForm] = (0, import_react20.useState)(false);
  (0, import_react20.useEffect)(() => {
    if (!isAuthenticated) {
      navigate("/login");
    }
  }, [isAuthenticated, navigate]);
  const { data: notificationData } = trpc.notification.list.useQuery({});
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const notifications2 = notificationData?.notifications || [];
  const activeWorkspace = workspaces2[0];
  const unreadNotifications = notifications2.filter((n) => !n.isRead).length;
  const quickNavItems = [
    {
      title: "Board",
      icon: ChartColumn,
      href: "/board",
      description: "Manage your kanban boards",
      color: "text-blue-600 bg-blue-50"
    },
    {
      title: "Calendar",
      icon: Calendar,
      href: "/calendar",
      description: "View deadlines and schedule",
      color: "text-green-600 bg-green-50"
    },
    {
      title: "Chat",
      icon: MessageCircle,
      href: "/chat",
      description: "Team conversations",
      color: "text-purple-600 bg-purple-50"
    },
    {
      title: "Notes",
      icon: StickyNote,
      href: "/notes",
      description: "Capture ideas and knowledge",
      color: "text-orange-600 bg-orange-50"
    }
  ];
  if (!isAuthenticated) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(ResponsiveLayout, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "h-full flex flex-col bg-gray-50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "bg-white border-b border-gray-200 px-6 py-6", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("h1", { className: "text-2xl font-bold text-gray-900", children: [
            "Welcome back, ",
            user?.name?.split(" ")[0] || "User",
            "!"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-gray-600 mt-1", children: activeWorkspace ? `Working in ${activeWorkspace.name}` : "Here's what's happening today" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(Button, { variant: "ghost", size: "sm", className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Bell, { className: "w-5 h-5" }),
            unreadNotifications > 0 && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Badge, { className: "absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-red-500", children: unreadNotifications > 9 ? "9+" : unreadNotifications })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(Button, { onClick: () => setShowUniversalForm(true), children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
            "Create Item"
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "flex-1 p-6 overflow-auto", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6 h-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CardHeader, { className: "pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Quick Navigation" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CardContent, { className: "space-y-2", children: quickNavItems.map((item) => {
              const IconComponent = item.icon;
              return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
                Button,
                {
                  variant: "ghost",
                  className: "w-full justify-between h-auto p-4 hover:bg-gray-50",
                  onClick: () => {
                    console.log("Button clicked:", item.title, item.href);
                    navigate(item.href);
                  },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex items-center space-x-3", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: `p-2 rounded-lg ${item.color}`, children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(IconComponent, { className: "w-4 h-4" }) }),
                      /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "text-left", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "font-medium text-gray-900", children: item.title }),
                        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "text-xs text-gray-500", children: item.description })
                      ] })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ChevronRight, { className: "w-4 h-4 text-gray-400" })
                  ]
                },
                item.title
              );
            }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(QuickActions, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(TasksSummary, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ActivityFeed, {}) })
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
      UniversalInputForm,
      {
        open: showUniversalForm,
        onClose: () => setShowUniversalForm(false),
        onSuccess: (data2, type) => {
          console.log("Created:", { data: data2, type });
          setShowUniversalForm(false);
        },
        contentType: "MIXED" /* MIXED */,
        workspaceId: activeWorkspace?.id || "demo-workspace",
        allowContentTypeSwitch: true,
        showWorkflowToggles: true,
        showFileUploads: true
      }
    )
  ] });
}

// src/pages/Board.tsx
var import_react22 = __toESM(require_react(), 1);

// src/components/project/Layout.tsx
var import_react21 = __toESM(require_react(), 1);
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
function Layout({ children }) {
  const navigate = useNavigate();
  const location = useLocation();
  const [currentPage, setCurrentPage] = (0, import_react21.useState)("home");
  (0, import_react21.useEffect)(() => {
    const pathToPageMap = {
      "/": "home",
      "/home": "home",
      "/workspace": "workspace",
      "/board": "board",
      "/calendar": "calendar",
      "/chat": "chat",
      "/notes": "notes",
      "/teams": "teams",
      "/projects": "projects"
    };
    const currentPath = location.pathname;
    const page = pathToPageMap[currentPath] || "home";
    setCurrentPage(page);
  }, [location.pathname]);
  const handlePageChange = (page) => {
    console.log("Navigation clicked:", page);
    setCurrentPage(page);
    const routes = {
      home: "/home",
      workspace: "/workspace",
      board: "/board",
      calendar: "/calendar",
      chat: "/chat",
      notes: "/notes",
      teams: "/teams",
      projects: "/projects"
    };
    console.log("Will navigate to:", routes[page]);
    if (routes[page]) {
      console.log("Navigating to:", routes[page]);
      navigate(routes[page]);
    } else {
      console.log("No route found for page:", page);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex h-screen bg-gray-50", children: [
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Sidebar, { currentPage, onPageChange: handlePageChange }),
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("main", { className: "flex-1 overflow-x-visible overflow-y-auto", children })
  ] });
}

// src/components/common/KrushrLoader.tsx
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
function KrushrLoader({
  size = "md",
  text = "Loading...",
  className
}) {
  const sizeClasses = {
    sm: "w-16 h-16",
    md: "w-20 h-20",
    lg: "w-24 h-24"
  };
  const textSizeClasses = {
    sm: "text-sm",
    md: "text-base",
    lg: "text-lg"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: cn("flex flex-col items-center justify-center space-y-4", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: cn(
      "relative",
      sizeClasses[size]
    ), children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "absolute inset-0 border-4 border-muted rounded-full border-t-primary animate-spin" }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "font-bold text-blue-600 text-sm", children: "K" }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: cn(
      "text-muted-foreground font-medium",
      textSizeClasses[size]
    ), children: text })
  ] });
}

// src/components/ui/floating-action-button.tsx
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var iconMap = {
  plus: Plus,
  message: MessageCircle,
  calendar: Calendar,
  note: FileText,
  team: Users
};
function FloatingActionButton({
  onClick,
  className,
  variant = "primary",
  size = "md",
  icon = "plus",
  tooltip
}) {
  const IconComponent = iconMap[icon];
  const sizeClasses = {
    sm: "w-12 h-12",
    md: "w-14 h-14",
    lg: "w-16 h-16"
  };
  const iconSizes = {
    sm: "w-5 h-5",
    md: "w-6 h-6",
    lg: "w-7 h-7"
  };
  const variantClasses = {
    primary: "bg-krushr-secondary hover:bg-krushr-secondary/90 text-white shadow-lg hover:shadow-xl",
    secondary: "bg-krushr-blue hover:bg-krushr-blue/90 text-white shadow-lg hover:shadow-xl"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
    Button,
    {
      onClick,
      className: cn(
        "fixed bottom-6 right-6 rounded-full transition-all duration-200 hover:scale-105 active:scale-95 z-50",
        sizeClasses[size],
        variantClasses[variant],
        className
      ),
      title: tooltip,
      children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(IconComponent, { className: iconSizes[size] })
    }
  );
}

// src/pages/Board.tsx
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
function Board() {
  const { isAuthenticated } = useAuthStore();
  const [selectedKanban, setSelectedKanban] = (0, import_react22.useState)(null);
  const [showQuickTaskModal, setShowQuickTaskModal] = (0, import_react22.useState)(false);
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const activeWorkspace = workspaces2[0];
  const { data: kanbans2 = [], isLoading, error } = trpc.kanban.list.useQuery(
    { workspaceId: activeWorkspace?.id || "" },
    { enabled: !!activeWorkspace?.id }
  );
  (0, import_react22.useEffect)(() => {
    if (kanbans2.length > 0 && !selectedKanban) {
      setSelectedKanban(kanbans2[0].id);
    }
  }, [kanbans2, selectedKanban]);
  if (!isAuthenticated) {
    return null;
  }
  const currentKanban = kanbans2.find((k3) => k3.id === selectedKanban);
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(KrushrLoader, { text: "Loading your kanban boards..." }) }) });
  }
  if (error) {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Card, { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(CardContent, { className: "p-6 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(KrushrLogo, { size: "md", showText: false }) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-destructive mb-4", children: error?.message || "An error occurred" }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Button, { onClick: () => window.location.reload(), className: "bg-primary", children: "Reload Page" })
    ] }) }) }) });
  }
  if (kanbans2.length === 0) {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Card, { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(CardContent, { className: "p-8 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex justify-center mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(KrushrLogo, { size: "lg" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h3", { className: "text-xl font-semibold mb-3 text-foreground", children: "Welcome to Krushr!" }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-muted-foreground mb-6", children: "Create your first kanban board to start organizing tasks and boosting productivity." }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Button, { className: "bg-primary hover:bg-primary/90", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
        "Create Your First Board"
      ] })
    ] }) }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Layout, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "h-full flex flex-col", children: [
      kanbans2.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "bg-white border-b border-gray-200 px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { className: "text-sm font-medium text-gray-700", children: "Board:" }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex space-x-2", children: kanbans2.map((kanban) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
          Button,
          {
            variant: selectedKanban === kanban.id ? "default" : "outline",
            size: "sm",
            onClick: () => setSelectedKanban(kanban.id),
            children: kanban.title
          },
          kanban.id
        )) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex-1", children: currentKanban && activeWorkspace?.id ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(KanbanBoard, { kanban: { ...currentKanban, workspaceId: activeWorkspace.id } }) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Card, { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardContent, { className: "p-6 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-gray-600", children: !currentKanban ? "Select a kanban board to view tasks." : "Loading workspace..." }) }) }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        FloatingActionButton,
        {
          icon: "plus",
          tooltip: "Create New Task",
          onClick: () => setShowQuickTaskModal(true)
        }
      )
    ] }),
    showQuickTaskModal && activeWorkspace && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      SimpleCreatePanel,
      {
        workspaceId: activeWorkspace.id,
        open: showQuickTaskModal,
        onClose: () => setShowQuickTaskModal(false),
        onSuccess: () => {
          setShowQuickTaskModal(false);
        }
      }
    )
  ] });
}

// src/components/calendar/CalendarView.tsx
var import_react23 = __toESM(require_react(), 1);
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
function CalendarView({ className }) {
  const [currentDate, setCurrentDate] = (0, import_react23.useState)(/* @__PURE__ */ new Date());
  const [view, setView] = (0, import_react23.useState)("month");
  const [selectedDate, setSelectedDate] = (0, import_react23.useState)(null);
  const [showFilters, setShowFilters] = (0, import_react23.useState)(false);
  const { tasks: tasks2 } = useAppStore();
  const calendarEvents = (0, import_react23.useMemo)(() => {
    const events = [];
    tasks2.forEach((task) => {
      if (task.due_date) {
        events.push({
          id: `task-${task.id}`,
          title: task.title,
          type: "task",
          date: new Date(task.due_date),
          priority: task.priority,
          assignees: task.assignees,
          color: task.priority === "high" ? "bg-red-500" : task.priority === "medium" ? "bg-orange-500" : "bg-green-500"
        });
      }
    });
    const now = /* @__PURE__ */ new Date();
    events.push(
      {
        id: "meeting-1",
        title: "Team Standup",
        type: "meeting",
        date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 9, 0),
        time: "9:00 AM",
        assignees: [
          { id: "1", name: "Team Lead", avatar: "" },
          { id: "2", name: "Developer", avatar: "" }
        ],
        color: "bg-blue-500"
      },
      {
        id: "milestone-1",
        title: "Sprint Review",
        type: "milestone",
        date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7),
        project: "Q1 Development",
        color: "bg-purple-500"
      }
    );
    return events;
  }, [tasks2]);
  const getMonthCalendar = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    const calendar = [];
    const current = new Date(startDate);
    for (let week = 0; week < 6; week++) {
      const weekDays = [];
      for (let day = 0; day < 7; day++) {
        const date = new Date(current);
        const dayEvents = calendarEvents.filter(
          (event) => event.date.toDateString() === date.toDateString()
        );
        weekDays.push({
          date: new Date(date),
          isCurrentMonth: date.getMonth() === month,
          isToday: date.toDateString() === (/* @__PURE__ */ new Date()).toDateString(),
          events: dayEvents
        });
        current.setDate(current.getDate() + 1);
      }
      calendar.push(weekDays);
    }
    return calendar;
  };
  const monthCalendar = getMonthCalendar();
  const navigateMonth = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + (direction === "next" ? 1 : -1));
    setCurrentDate(newDate);
  };
  const getEventIcon = (type) => {
    switch (type) {
      case "task":
        return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CircleCheck, { className: "w-3 h-3" });
      case "meeting":
        return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Users, { className: "w-3 h-3" });
      case "deadline":
        return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(TriangleAlert, { className: "w-3 h-3" });
      case "milestone":
        return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Calendar, { className: "w-3 h-3" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Clock, { className: "w-3 h-3" });
    }
  };
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(CardHeader, { className: "flex-shrink-0 pb-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(CardTitle, { className: "text-xl font-bold", children: [
            monthNames[currentDate.getMonth()],
            " ",
            currentDate.getFullYear()
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => navigateMonth("prev"),
                children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ChevronLeft, { className: "w-4 h-4" })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => setCurrentDate(/* @__PURE__ */ new Date()),
                children: "Today"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => navigateMonth("next"),
                children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ChevronRight, { className: "w-4 h-4" })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex border rounded-lg overflow-hidden", children: ["month", "week", "day"].map((viewType) => /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            Button,
            {
              variant: view === viewType ? "default" : "ghost",
              size: "sm",
              className: "rounded-none",
              onClick: () => setView(viewType),
              children: viewType.charAt(0).toUpperCase() + viewType.slice(1)
            },
            viewType
          )) }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
            Button,
            {
              variant: "outline",
              size: "sm",
              onClick: () => setShowFilters(!showFilters),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Funnel, { className: "w-4 h-4 mr-2" }),
                "Filter"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
            Button,
            {
              variant: "outline",
              size: "sm",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Download, { className: "w-4 h-4 mr-2" }),
                "Export"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(Button, { size: "sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
            "Add Event"
          ] })
        ] })
      ] }),
      showFilters && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "mt-4 p-4 bg-gray-50 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex items-center space-x-4", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "text-sm font-medium", children: "Show:" }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Tasks" }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Meetings" }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Deadlines" }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Milestones" })
      ] }) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CardContent, { className: "flex-1 p-0 overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "h-full flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "grid grid-cols-7 border-b bg-gray-50", children: dayNames.map((day) => /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "p-3 text-center text-sm font-medium text-gray-600", children: day }, day)) }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex-1 overflow-y-auto", children: monthCalendar.map((week, weekIndex) => /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "grid grid-cols-7 border-b min-h-[120px]", children: week.map((day, dayIndex) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
        "div",
        {
          className: cn(
            "border-r p-2 cursor-pointer hover:bg-gray-50 transition-colors",
            !day.isCurrentMonth && "bg-gray-25 text-gray-400",
            day.isToday && "bg-blue-50 border-blue-200",
            selectedDate?.toDateString() === day.date.toDateString() && "bg-blue-100"
          ),
          onClick: () => setSelectedDate(day.date),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center justify-between mb-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: cn(
                "text-sm font-medium",
                day.isToday && "text-blue-600",
                !day.isCurrentMonth && "text-gray-400"
              ), children: day.date.getDate() }),
              day.events.length > 3 && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("span", { className: "text-xs text-gray-500", children: [
                "+",
                day.events.length - 3
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "space-y-1", children: day.events.slice(0, 3).map((event) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(Tooltip, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
                "div",
                {
                  className: cn(
                    "text-xs p-1 rounded text-white truncate flex items-center space-x-1 cursor-pointer hover:opacity-90 transition-opacity",
                    event.color
                  ),
                  children: [
                    getEventIcon(event.type),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "truncate", children: event.title })
                  ]
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(TooltipContent, { side: "right", className: "max-w-xs", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "space-y-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "font-semibold text-sm", children: event.title }),
                /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "text-xs space-y-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "font-medium", children: "Type:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { variant: "secondary", className: "text-xs", children: event.type })
                  ] }),
                  event.time && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Clock, { className: "w-3 h-3" }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { children: event.time })
                  ] }),
                  event.priority && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "font-medium", children: "Priority:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
                      Badge,
                      {
                        variant: event.priority === "high" ? "destructive" : event.priority === "medium" ? "default" : "secondary",
                        className: "text-xs",
                        children: event.priority
                      }
                    )
                  ] }),
                  event.project && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "font-medium", children: "Project:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { children: event.project })
                  ] }),
                  event.assignees && event.assignees.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Users, { className: "w-3 h-3" }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("span", { children: [
                      event.assignees.length,
                      " assignee",
                      event.assignees.length > 1 ? "s" : ""
                    ] })
                  ] })
                ] })
              ] }) })
            ] }, event.id)) })
          ]
        },
        dayIndex
      )) }, weekIndex)) })
    ] }) }),
    selectedDate && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex-shrink-0 border-t bg-red-100 p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("h4", { className: "font-medium text-gray-900 mb-2", children: [
        "SELECTED: ",
        formatDateShort(selectedDate.toISOString())
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "space-y-2", children: calendarEvents.filter((event) => event.date.toDateString() === selectedDate.toDateString()).map((event) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-3 p-2 bg-white rounded border", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: cn("w-3 h-3 rounded-full", event.color) }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "font-medium text-sm", children: event.title }),
          event.time && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "text-xs text-gray-500", children: event.time })
        ] }),
        event.assignees && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex -space-x-1", children: event.assignees.slice(0, 2).map((assignee) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(Avatar, { className: "w-6 h-6 border-2 border-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(AvatarImage, { src: assignee.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(AvatarFallback, { className: "text-xs", children: assignee.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
        ] }, assignee.id)) }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Ellipsis, { className: "w-3 h-3" }) })
      ] }, event.id)) })
    ] })
  ] }) });
}

// src/hooks/use-realtime.ts
var import_react24 = __toESM(require_react(), 1);

// src/lib/api.ts
var API_BASE_URL = false ? "https://api.krushr.app" : "http://localhost:8000/api";
var ApiClient = class {
  constructor(baseURL) {
    this.token = null;
    this.baseURL = baseURL;
    this.token = localStorage.getItem("auth_token");
  }
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      headers: {
        "Content-Type": "application/json",
        ...this.token && { Authorization: `Bearer ${this.token}` },
        ...options.headers
      },
      ...options
    };
    try {
      const response = await fetch(url, config);
      const data2 = await response.json();
      if (!response.ok) {
        throw new Error(data2.message || "API request failed");
      }
      return data2;
    } catch (error) {
      console.error("API Error:", error);
      throw error;
    }
  }
  // Auth methods
  async login(email, password) {
    const response = await this.request(API_ENDPOINTS.LOGIN, {
      method: "POST",
      body: JSON.stringify({ email, password })
    });
    if (response.success && response.data?.token) {
      this.token = response.data.token;
      localStorage.setItem("auth_token", this.token);
    }
    return response;
  }
  async logout() {
    await this.request(API_ENDPOINTS.LOGOUT, { method: "POST" });
    this.token = null;
    localStorage.removeItem("auth_token");
  }
  async me() {
    return this.request(API_ENDPOINTS.ME);
  }
  async getWorkspaces() {
    return this.request(API_ENDPOINTS.WORKSPACES);
  }
  async createWorkspace(data2) {
    return this.request(API_ENDPOINTS.WORKSPACES, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async getTeams() {
    return this.request(API_ENDPOINTS.TEAMS);
  }
  async createTeam(data2) {
    return this.request(API_ENDPOINTS.TEAMS, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async getKanbans() {
    return this.request(API_ENDPOINTS.KANBANS);
  }
  async getKanban(id2) {
    return this.request(`${API_ENDPOINTS.KANBANS}/${id2}`);
  }
  async createKanban(data2) {
    return this.request(API_ENDPOINTS.KANBANS, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async updateKanban(id2, data2) {
    return this.request(`${API_ENDPOINTS.KANBANS}/${id2}`, {
      method: "PUT",
      body: JSON.stringify(data2)
    });
  }
  async getTasks(kanbanId) {
    const endpoint = kanbanId ? `${API_ENDPOINTS.TASKS}?kanban_id=${kanbanId}` : API_ENDPOINTS.TASKS;
    return this.request(endpoint);
  }
  async createTask(data2) {
    return this.request(API_ENDPOINTS.TASKS, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async updateTask(id2, data2) {
    return this.request(`${API_ENDPOINTS.TASKS}/${id2}`, {
      method: "PUT",
      body: JSON.stringify(data2)
    });
  }
  async deleteTask(id2) {
    return this.request(`${API_ENDPOINTS.TASKS}/${id2}`, {
      method: "DELETE"
    });
  }
  async getNotifications() {
    return this.request(API_ENDPOINTS.NOTIFICATIONS);
  }
  async markNotificationRead(id2) {
    return this.request(`${API_ENDPOINTS.NOTIFICATIONS}/${id2}/read`, {
      method: "PUT"
    });
  }
};
var api = new ApiClient(API_BASE_URL);
var auth = {
  login: api.login.bind(api),
  logout: api.logout.bind(api),
  me: api.me.bind(api)
};
var workspaces = {
  list: api.getWorkspaces.bind(api),
  create: api.createWorkspace.bind(api)
};
var teams = {
  list: api.getTeams.bind(api),
  create: api.createTeam.bind(api)
};
var kanbans = {
  list: api.getKanbans.bind(api),
  get: api.getKanban.bind(api),
  create: api.createKanban.bind(api),
  update: api.updateKanban.bind(api)
};
var tasks = {
  list: api.getTasks.bind(api),
  create: api.createTask.bind(api),
  update: api.updateTask.bind(api),
  delete: api.deleteTask.bind(api)
};
var notifications = {
  list: api.getNotifications.bind(api),
  markRead: api.markNotificationRead.bind(api)
};

// src/hooks/use-realtime.ts
function useRealtimeConnection() {
  const {
    user,
    isAuthenticated,
    connectWebSocket,
    disconnectWebSocket,
    setWorkspaces,
    setKanbans,
    setTasks,
    setNotifications,
    setLoading,
    setError
  } = useAppStore();
  const initializeData = (0, import_react24.useCallback)(async () => {
    if (!isAuthenticated) return;
    setLoading(true);
    setError(null);
    try {
      const [workspacesRes, kanbansRes, tasksRes, notificationsRes] = await Promise.all([
        api.getWorkspaces(),
        api.getKanbans(),
        api.getTasks(),
        api.getNotifications()
      ]);
      if (workspacesRes.success && workspacesRes.data) {
        setWorkspaces(workspacesRes.data);
      }
      if (kanbansRes.success && kanbansRes.data) {
        setKanbans(kanbansRes.data);
      }
      if (tasksRes.success && tasksRes.data) {
        setTasks(tasksRes.data);
      }
      if (notificationsRes.success && notificationsRes.data) {
        setNotifications(notificationsRes.data);
      }
    } catch (error) {
      console.error("Failed to load initial data:", error);
      setError("Failed to load application data");
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated, setWorkspaces, setKanbans, setTasks, setNotifications, setLoading, setError]);
  (0, import_react24.useEffect)(() => {
    if (isAuthenticated && user) {
      connectWebSocket();
      initializeData();
    } else {
      disconnectWebSocket();
    }
    return () => {
      disconnectWebSocket();
    };
  }, [isAuthenticated, user, connectWebSocket, disconnectWebSocket, initializeData]);
  return {
    isConnected: useAppStore((state) => state.websocket.connected),
    isLoading: useAppStore((state) => state.loading),
    error: useAppStore((state) => state.error)
  };
}

// src/pages/Calendar.tsx
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
function Calendar3() {
  const { isLoading } = useRealtimeConnection();
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-gray-600", children: "Loading calendar..." })
    ] }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(CalendarView, {}) }) });
}

// src/components/ErrorBoundary.tsx
var import_react25 = __toESM(require_react(), 1);
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var ErrorBoundary = class extends import_react25.Component {
  constructor(props) {
    super(props);
    this.handleRetry = () => {
      this.setState({ hasError: false, error: void 0, errorInfo: void 0 });
    };
    this.handleGoHome = () => {
      window.location.href = "/#/workspace";
    };
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    console.error("ErrorBoundary caught an error:", error, errorInfo);
    this.setState({
      error,
      errorInfo
    });
    this.props.onError?.(error, errorInfo);
    if (false) {
      console.error("Production error:", {
        message: error.message,
        stack: error.stack,
        componentStack: errorInfo.componentStack
      });
    }
  }
  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }
      const { level = "component" } = this.props;
      if (level === "critical") {
        return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-krushr-gray-50 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center max-w-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "w-20 h-20 bg-krushr-danger-50 rounded-full flex items-center justify-center mx-auto mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TriangleAlert, { className: "w-10 h-10 text-krushr-danger" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h1", { className: "text-2xl font-brand font-bold text-krushr-gray-900 mb-4", children: "Critical Error" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-base font-brand text-krushr-gray-600 mb-6", children: "The application encountered a critical error and needs to be restarted. Your work may not be saved." }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "space-y-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
              "button",
              {
                onClick: () => window.location.reload(),
                className: "w-full bg-krushr-danger text-white px-6 py-3 rounded-button font-medium hover:bg-krushr-danger-600 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(RefreshCw, { className: "w-5 h-5" }),
                  "Restart Application"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
              "button",
              {
                onClick: this.handleGoHome,
                className: "w-full border border-krushr-gray-300 text-krushr-gray-700 px-6 py-3 rounded-button font-medium hover:bg-krushr-gray-50 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(House, { className: "w-5 h-5" }),
                  "Go to Dashboard"
                ]
              }
            )
          ] })
        ] }) });
      }
      if (level === "page") {
        return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "min-h-[60vh] flex items-center justify-center p-6", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "w-16 h-16 bg-krushr-warning-50 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TriangleAlert, { className: "w-8 h-8 text-krushr-warning" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h2", { className: "text-xl font-brand font-semibold text-krushr-gray-800 mb-3", children: "Page Error" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-sm font-brand text-krushr-gray-600 mb-4", children: "This page encountered an error, but the rest of the application is still working." }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
              "button",
              {
                onClick: this.handleRetry,
                className: "w-full bg-krushr-primary text-white px-4 py-2 rounded-button font-medium hover:bg-krushr-primary-700 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(RefreshCw, { className: "w-4 h-4" }),
                  "Retry Page"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
              "button",
              {
                onClick: this.handleGoHome,
                className: "w-full border border-krushr-gray-300 text-krushr-gray-700 px-4 py-2 rounded-button font-medium hover:bg-krushr-gray-50 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(House, { className: "w-4 h-4" }),
                  "Go to Dashboard"
                ]
              }
            )
          ] })
        ] }) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "flex items-center justify-center min-h-[200px] p-4 bg-krushr-gray-50 rounded-lg border border-krushr-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center max-w-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "w-12 h-12 bg-krushr-info-50 rounded-full flex items-center justify-center mx-auto mb-3", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TriangleAlert, { className: "w-6 h-6 text-krushr-info" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-base font-brand font-medium text-krushr-gray-800 mb-2", children: "Component Error" }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-sm font-brand text-krushr-gray-600 mb-3", children: "This component failed to load, but other features are still available." }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
          "button",
          {
            onClick: this.handleRetry,
            className: "bg-krushr-primary text-white px-3 py-1.5 rounded-button text-sm font-medium hover:bg-krushr-primary-700 transition-colors flex items-center justify-center gap-1.5 mx-auto",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(RefreshCw, { className: "w-3 h-3" }),
              "Retry"
            ]
          }
        ),
        this.state.error && /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("details", { className: "mt-3 text-left", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("summary", { className: "text-xs text-krushr-gray-500 cursor-pointer hover:text-krushr-gray-700", children: "Error Details" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("pre", { className: "text-xs text-krushr-gray-600 mt-2 p-2 bg-white rounded border overflow-auto max-h-32", children: this.state.error.toString() })
        ] })
      ] }) });
    }
    return this.props.children;
  }
};
var PageErrorBoundary = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ErrorBoundary, { level: "page", children });
var CriticalErrorBoundary = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ErrorBoundary, { level: "critical", children });

// src/pages/Notes.tsx
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
function Notes() {
  const { currentWorkspace } = useAuthStore();
  if (!currentWorkspace) {
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { children: "Loading..." });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(PageErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(NotesPanel_default, { workspaceId: currentWorkspace.id }) }) });
}

// src/components/chat/ChatInterface.tsx
var import_react26 = __toESM(require_react(), 1);

// src/components/ui/input.tsx
var React48 = __toESM(require_react(), 1);
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var Input = React48.forwardRef(
  ({ className, type, ...props }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      "input",
      {
        type,
        className: cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        ),
        ref,
        ...props
      }
    );
  }
);
Input.displayName = "Input";

// src/components/common/AttachmentList.tsx
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var getFileIcon = (mimeType) => {
  if (!mimeType || typeof mimeType !== "string") return File;
  if (mimeType.startsWith("image/")) return FileImage;
  if (mimeType.startsWith("video/")) return FileVideo;
  if (mimeType.includes("pdf") || mimeType.includes("document") || mimeType.includes("text")) return FileText;
  if (mimeType.includes("zip") || mimeType.includes("rar") || mimeType.includes("7z")) return FileArchive;
  return File;
};
var getFileTypeColor = (mimeType) => {
  if (!mimeType || typeof mimeType !== "string") return "bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300";
  if (mimeType.startsWith("image/")) return "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300";
  if (mimeType.startsWith("video/")) return "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300";
  if (mimeType.startsWith("audio/")) return "bg-pink-100 text-pink-700 dark:bg-pink-900 dark:text-pink-300";
  if (mimeType.includes("pdf")) return "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300";
  if (mimeType.includes("document") || mimeType.includes("text")) return "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300";
  if (mimeType.includes("zip") || mimeType.includes("rar")) return "bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300";
  return "bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300";
};
var formatFileSize = (bytes) => {
  if (bytes === 0) return "0 Bytes";
  const k3 = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k3));
  return parseFloat((bytes / Math.pow(k3, i)).toFixed(1)) + " " + sizes[i];
};
var formatDate2 = (date) => {
  const d = new Date(date);
  const now = /* @__PURE__ */ new Date();
  const diffTime = Math.abs(now.getTime() - d.getTime());
  const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
  if (diffDays === 1) return "Today";
  if (diffDays === 2) return "Yesterday";
  if (diffDays <= 7) return `${diffDays} days ago`;
  return d.toLocaleDateString();
};
var AttachmentList = ({
  attachments,
  canDelete = false,
  onDelete,
  className,
  compact = false
}) => {
  if (attachments.length === 0) {
    return null;
  }
  const handleDownload = (attachment) => {
    const link = document.createElement("a");
    link.href = attachment.downloadUrl;
    link.download = attachment.filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  const handleDelete = (attachment) => {
    if (onDelete) {
      onDelete(attachment.id);
    }
  };
  const handlePreview = (attachment) => {
    if (!attachment.mimeType) {
      toast.info("Preview not available for this file type");
      return;
    }
    if (attachment.mimeType.startsWith("image/")) {
      window.open(attachment.downloadUrl, "_blank");
    } else if (attachment.mimeType === "application/pdf") {
      window.open(attachment.downloadUrl, "_blank");
    } else {
      toast.info("Preview not available for this file type");
    }
  };
  if (compact) {
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: cn("flex flex-wrap gap-2", className), children: attachments.map((attachment) => {
      const FileIcon = getFileIcon(attachment.mimeType);
      const isImage = attachment.mimeType && attachment.mimeType.startsWith("image/");
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
        "div",
        {
          className: "flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg text-sm",
          children: [
            isImage && attachment.thumbnailUrl ? /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              "img",
              {
                src: attachment.thumbnailUrl,
                alt: attachment.filename,
                className: "h-8 w-8 rounded object-cover",
                onError: (e) => {
                  e.currentTarget.style.display = "none";
                  e.currentTarget.parentElement?.querySelector(".fallback-icon")?.classList.remove("hidden");
                }
              }
            ) : null,
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(FileIcon, { className: cn("h-4 w-4 text-gray-500", isImage && attachment.thumbnailUrl ? "hidden fallback-icon" : "") }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "font-medium truncate max-w-[150px]", children: attachment.filename }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "text-gray-500", children: formatFileSize(attachment.size) }),
            attachment.compressed && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Compressed" }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-6 w-6 p-0",
                onClick: () => handleDownload(attachment),
                title: "Download",
                children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Download, { className: "h-3 w-3" })
              }
            )
          ]
        },
        attachment.id
      );
    }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: cn("space-y-3", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("h4", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: [
      "Attachments (",
      attachments.length,
      ")"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "space-y-2", children: attachments.map((attachment) => {
      const FileIcon = getFileIcon(attachment.mimeType);
      const typeColor = getFileTypeColor(attachment.mimeType);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Card, { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-start gap-3", children: [
        attachment.mimeType && attachment.mimeType.startsWith("image/") && attachment.thumbnailUrl ? /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
            "img",
            {
              src: attachment.thumbnailUrl,
              alt: attachment.filename,
              className: "w-16 h-16 rounded-lg object-cover",
              onError: (e) => {
                e.currentTarget.style.display = "none";
                const fallback = e.currentTarget.parentElement?.querySelector(".thumbnail-fallback");
                if (fallback) fallback.classList.remove("hidden");
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: cn("hidden p-2 rounded-lg w-16 h-16 flex items-center justify-center thumbnail-fallback", typeColor), children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(FileIcon, { className: "h-5 w-5" }) })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: cn("p-2 rounded-lg", typeColor), children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(FileIcon, { className: "h-5 w-5" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "flex-1 min-w-0", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-start justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "min-w-0 flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100 truncate", children: [
            attachment.filename,
            /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("span", { className: "text-xs text-gray-500 font-normal ml-2", children: [
              "\u2022 ",
              formatFileSize(attachment.size),
              " \u2022 ",
              formatDate2(attachment.uploadedAt),
              attachment.compressed && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [
                " ",
                "\u2022 ",
                /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "secondary", className: "text-xs inline", children: "Compressed" })
              ] })
            ] })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-1 ml-2", children: [
            attachment.mimeType && (attachment.mimeType.startsWith("image/") || attachment.mimeType === "application/pdf") && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-8 w-8 p-0",
                onClick: () => handlePreview(attachment),
                title: "Preview",
                children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Eye, { className: "h-4 w-4" })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-8 w-8 p-0",
                onClick: () => handleDownload(attachment),
                title: "Download",
                children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Download, { className: "h-4 w-4" })
              }
            ),
            canDelete && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50",
                onClick: () => handleDelete(attachment),
                title: "Delete",
                children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Trash2, { className: "h-4 w-4" })
              }
            )
          ] })
        ] }) })
      ] }) }, attachment.id);
    }) })
  ] });
};
var AttachmentList_default = AttachmentList;

// src/components/chat/ChatInterface.tsx
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
function ChatInterface({ className }) {
  const [selectedChannel, setSelectedChannel] = (0, import_react26.useState)(null);
  const [message, setMessage] = (0, import_react26.useState)("");
  const [searchTerm, setSearchTerm] = (0, import_react26.useState)("");
  const [replyingTo, setReplyingTo] = (0, import_react26.useState)(null);
  const [showEmojiPicker, setShowEmojiPicker] = (0, import_react26.useState)(false);
  const [showAttachmentUpload, setShowAttachmentUpload] = (0, import_react26.useState)(false);
  const messageInputRef = (0, import_react26.useRef)(null);
  const messagesEndRef = (0, import_react26.useRef)(null);
  const fileInputRef = (0, import_react26.useRef)(null);
  const { user } = useAppStore();
  const { connected, sendMessage } = useWebSocket();
  const channels = [
    {
      id: "general",
      name: "general",
      type: "team",
      description: "General team discussion",
      members: 12,
      isPrivate: false
    },
    {
      id: "project-alpha",
      name: "project-alpha",
      type: "project",
      description: "Alpha project coordination",
      members: 5,
      isPrivate: false,
      projectId: "alpha-123"
    },
    {
      id: "design-team",
      name: "design-team",
      type: "team",
      description: "Design team collaboration",
      members: 4,
      isPrivate: false
    }
  ];
  const messages = [
    {
      id: "1",
      content: "Hey team! Just finished the design mockups for the new dashboard",
      type: "text",
      sender: { id: "1", name: "Sarah Chen", avatar: "" },
      timestamp: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
      reactions: [
        { emoji: "\u{1F44D}", users: ["2", "3"], count: 2 },
        { emoji: "\u{1F389}", users: ["4"], count: 1 }
      ]
    },
    {
      id: "2",
      content: "Awesome work! Could you share the files?",
      type: "text",
      sender: { id: "2", name: "Mike Johnson", avatar: "" },
      timestamp: new Date(Date.now() - 25 * 60 * 1e3).toISOString(),
      replyTo: "1"
    },
    {
      id: "3",
      content: "dashboard-mockups-v2.fig",
      type: "file",
      sender: { id: "1", name: "Sarah Chen", avatar: "" },
      timestamp: new Date(Date.now() - 20 * 60 * 1e3).toISOString(),
      attachments: [
        {
          id: "file-1",
          name: "dashboard-mockups-v2.fig",
          size: 2458e3,
          type: "application/figma",
          url: "#"
        }
      ]
    },
    {
      id: "4",
      content: "I've updated the API documentation task with the new endpoints",
      type: "task_reference",
      sender: { id: "3", name: "Emma Davis", avatar: "" },
      timestamp: new Date(Date.now() - 10 * 60 * 1e3).toISOString(),
      taskReference: {
        id: "task-123",
        title: "Update API Documentation",
        status: "in_progress"
      }
    }
  ];
  const currentChannel = channels.find((c) => c.id === selectedChannel) || channels[0];
  (0, import_react26.useEffect)(() => {
    if (!selectedChannel && channels.length > 0) {
      setSelectedChannel(channels[0].id);
    }
  }, [selectedChannel, channels]);
  (0, import_react26.useEffect)(() => {
    const scrollContainer = messagesEndRef.current?.closest("[data-radix-scroll-area-viewport]");
    if (scrollContainer && messagesEndRef.current) {
      scrollContainer.scrollTop = scrollContainer.scrollHeight;
    }
  }, [messages]);
  const handleSendMessage = () => {
    if (!message.trim() || !connected) return;
    const newMessage = {
      content: message,
      channelId: selectedChannel,
      replyTo: replyingTo,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    sendMessage("chat-message", newMessage);
    setMessage("");
    setReplyingTo(null);
  };
  const handleFileUpload = () => {
    setShowAttachmentUpload(!showAttachmentUpload);
  };
  const handleKeyPress = (event) => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };
  const addReaction = (messageId, emoji) => {
    console.log("Adding reaction:", messageId, emoji);
  };
  const formatFileSize2 = (bytes) => {
    if (bytes === 0) return "0 Bytes";
    const k3 = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k3));
    return parseFloat((bytes / Math.pow(k3, i)).toFixed(2)) + " " + sizes[i];
  };
  const getChannelIcon = (type) => {
    switch (type) {
      case "project":
        return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Hash, { className: "w-4 h-4" });
      case "team":
        return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Users, { className: "w-4 h-4" });
      case "direct":
        return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Avatar, { className: "w-4 h-4" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Hash, { className: "w-4 h-4" });
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: cn("h-full flex bg-white", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "w-64 border-r border-gray-200 flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "p-4 border-b border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h2", { className: "font-semibold text-gray-900", children: "Channels" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Ellipsis, { className: "w-4 h-4" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "mt-3", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            Input,
            {
              placeholder: "Search channels...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "pl-10 h-8"
            }
          )
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ScrollArea, { className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "p-2 space-y-1", children: channels.filter(
        (channel) => channel.name.toLowerCase().includes(searchTerm.toLowerCase())
      ).map((channel) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
        Button,
        {
          variant: selectedChannel === channel.id ? "secondary" : "ghost",
          className: "w-full justify-start h-auto p-3",
          onClick: () => setSelectedChannel(channel.id),
          children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-3 w-full", children: [
            getChannelIcon(channel.type),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex-1 text-left", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "font-medium text-sm", children: [
                "#",
                channel.name
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "text-xs text-gray-500 truncate", children: [
                channel.members,
                " members"
              ] })
            ] }),
            channel.isPrivate && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Badge, { variant: "outline", className: "text-xs", children: "Private" })
          ] })
        },
        channel.id
      )) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex-1 flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "p-4 border-b border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-3", children: [
          getChannelIcon(currentChannel.type),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("h3", { className: "font-semibold text-gray-900", children: [
              "#",
              currentChannel.name
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-sm text-gray-500", children: currentChannel.description })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Badge, { variant: "outline", className: "text-green-700 border-green-200", children: connected ? "Connected" : "Disconnected" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Phone, { className: "w-4 h-4" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Video, { className: "w-4 h-4" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Ellipsis, { className: "w-4 h-4" }) })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ScrollArea, { className: "flex-1 p-4", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "space-y-4", children: [
        messages.map((msg) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "group", children: [
          msg.replyTo && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "ml-12 mb-1 text-xs text-gray-500 flex items-center space-x-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Reply, { className: "w-3 h-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { children: "Replying to previous message" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-start space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Avatar, { className: "w-8 h-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(AvatarImage, { src: msg.sender.avatar }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(AvatarFallback, { className: "text-xs", children: msg.sender.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-2 mb-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "font-medium text-sm text-gray-900", children: msg.sender.name }),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "text-xs text-gray-500", children: formatDateTime(msg.timestamp) }),
                msg.editedAt && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Badge, { variant: "outline", className: "text-xs", children: "edited" })
              ] }),
              msg.type === "text" && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-sm text-gray-900", children: msg.content }),
              msg.attachments && msg.attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                AttachmentList_default,
                {
                  attachments: msg.attachments,
                  compact: true,
                  canDelete: false
                }
              ) }),
              msg.type === "task_reference" && msg.taskReference && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "p-3 bg-blue-50 rounded-lg border border-blue-200", children: [
                /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Badge, { variant: "outline", className: "text-blue-700 border-blue-300", children: "Task" }),
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "font-medium text-sm", children: msg.taskReference.title }),
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                    Badge,
                    {
                      variant: "outline",
                      className: cn(
                        "text-xs",
                        msg.taskReference.status === "completed" && "text-green-700 border-green-300",
                        msg.taskReference.status === "in_progress" && "text-blue-700 border-blue-300",
                        msg.taskReference.status === "todo" && "text-gray-700 border-gray-300"
                      ),
                      children: msg.taskReference.status.replace("_", " ")
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: msg.content })
              ] }),
              msg.reactions && msg.reactions.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-1 mt-2", children: [
                msg.reactions.map((reaction, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
                  Button,
                  {
                    variant: "outline",
                    size: "sm",
                    className: "h-6 px-2 text-xs",
                    onClick: () => addReaction(msg.id, reaction.emoji),
                    children: [
                      reaction.emoji,
                      " ",
                      reaction.count
                    ]
                  },
                  index
                )),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity",
                    onClick: () => setShowEmojiPicker(!showEmojiPicker),
                    children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Smile, { className: "w-3 h-3" })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "opacity-0 group-hover:opacity-100 transition-opacity flex items-center space-x-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  className: "h-6 w-6 p-0",
                  onClick: () => setReplyingTo(msg.id),
                  children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Reply, { className: "w-3 h-3" })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Pin, { className: "w-3 h-3" }) }),
              msg.sender.id === user?.id && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(import_jsx_runtime53.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(SquarePen, { className: "w-3 h-3" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Trash2, { className: "w-3 h-3" }) })
              ] })
            ] })
          ] })
        ] }, msg.id)),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { ref: messagesEndRef })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "p-4 border-t border-gray-200", children: [
        replyingTo && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "mb-2 p-2 bg-gray-50 rounded text-sm text-gray-600 flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { children: "Replying to message..." }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              className: "h-6 w-6 p-0",
              onClick: () => setReplyingTo(null),
              children: "\xD7"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              onClick: handleFileUpload,
              children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Paperclip, { className: "w-4 h-4" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "flex-1 relative", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            FloatingInput,
            {
              ref: messageInputRef,
              label: `Message #${currentChannel.name}`,
              value: message,
              onChange: (e) => setMessage(e.target.value),
              onKeyPress: handleKeyPress,
              disabled: !connected
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              onClick: () => setShowEmojiPicker(!showEmojiPicker),
              children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Smile, { className: "w-4 h-4" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            Button,
            {
              onClick: handleSendMessage,
              disabled: !message.trim() || !connected,
              size: "sm",
              children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Send, { className: "w-4 h-4" })
            }
          )
        ] }),
        showAttachmentUpload && currentChannel && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "mt-4 p-4 bg-gray-50 rounded-lg border", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h4", { className: "text-sm font-medium", children: "Upload Attachments" }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => setShowAttachmentUpload(false),
                className: "h-6 w-6 p-0",
                children: "\xD7"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            AttachmentUpload_default,
            {
              type: "chat",
              targetId: currentChannel.id,
              onUploadComplete: (attachments) => {
                console.log("Chat attachments uploaded:", attachments);
                setShowAttachmentUpload(false);
              },
              className: "mt-2"
            }
          )
        ] })
      ] })
    ] })
  ] });
}

// src/pages/Chat.tsx
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
function Chat() {
  const { isAuthenticated } = useAuthStore();
  const { data: threads = [], isLoading } = trpc.chat.getThreads.useQuery();
  if (!isAuthenticated) {
    return null;
  }
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "text-gray-600", children: "Loading chat..." })
    ] }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ChatInterface, { threads }) }) });
}

// src/pages/Teams.tsx
var import_react27 = __toESM(require_react(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
function Teams() {
  const { isAuthenticated, user } = useAuthStore();
  const [searchTerm, setSearchTerm] = (0, import_react27.useState)("");
  const [teamFilter, setTeamFilter] = (0, import_react27.useState)("all");
  const { data: teams2 = [], isLoading: teamsLoading } = trpc.team.getAll.useQuery();
  const { data: workspaces2 = [] } = trpc.workspace.getAll.useQuery();
  if (!isAuthenticated) {
    return null;
  }
  if (teamsLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-600", children: "Loading teams..." })
    ] }) }) });
  }
  const allMembers = teams2.flatMap(
    (team) => team.members?.map((member) => ({
      ...member,
      teamName: team.name,
      teamId: team.id
    })) || []
  );
  const filteredMembers = allMembers.filter((member) => {
    const matchesSearch = member.user?.name?.toLowerCase().includes(searchTerm.toLowerCase()) || member.user?.email?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesTeam = teamFilter === "all" || member.teamId === teamFilter;
    return matchesSearch && matchesTeam;
  });
  const getTeamColor = (index) => {
    const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-orange-500", "bg-pink-500", "bg-indigo-500"];
    return colors[index % colors.length];
  };
  const getMemberColor = (index) => {
    const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-orange-500", "bg-pink-500", "bg-indigo-500"];
    return colors[index % colors.length];
  };
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "h-full flex flex-col", children: [
    /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "bg-white border-b border-gray-200 p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Teams" }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-600 mt-1", children: "Manage your team members and collaboration" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("button", { className: "flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
          "Add Member"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "mt-4 flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "relative flex-1 max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Search, { className: "w-4 h-4 absolute left-3 top-3 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
            FloatingInput,
            {
              id: "search",
              type: "text",
              label: "Search team members...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "pl-10"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
          "select",
          {
            value: teamFilter,
            onChange: (e) => setTeamFilter(e.target.value),
            className: "px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("option", { value: "all", children: "All Teams" }),
              teams2.map((team) => /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("option", { value: team.id, children: team.name }, team.id))
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex-1 p-6 overflow-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6 mb-8", children: teams2.map((team, index) => /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: `w-12 h-12 rounded-lg ${getTeamColor(index)} flex items-center justify-center`, children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "text-white font-bold text-lg", children: team.name.split(" ").map((word) => word[0]).join("") }) }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(EllipsisVertical, { className: "w-4 h-4" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h3", { className: "text-lg font-semibold text-gray-900", children: team.name }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-600 text-sm mb-4", children: team.description || "No description available" }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center justify-between text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("span", { className: "text-gray-500", children: [
            team.members?.length || 0,
            " Members"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("span", { className: "text-gray-500", children: [
            team.projects?.length || 0,
            " Projects"
          ] })
        ] })
      ] }, team.id)) }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "p-6 border-b border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: "Team Members" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "divide-y divide-gray-200", children: filteredMembers.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "p-6 text-center text-gray-500", children: "No team members found matching your criteria." }) : filteredMembers.map((member, index) => /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "p-6 hover:bg-gray-50 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center space-x-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: `w-12 h-12 rounded-full ${getMemberColor(index)} flex items-center justify-center relative`, children: [
              member.user?.avatar ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
                "img",
                {
                  src: member.user.avatar,
                  alt: member.user.name,
                  className: "w-full h-full rounded-full object-cover"
                }
              ) : /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "text-white font-medium", children: member.user?.name?.split(" ").map((n) => n[0]).join("").slice(0, 2) || "U" }),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white bg-green-500" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h3", { className: "font-semibold text-gray-900", children: member.user?.name || "Unknown User" }),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "text-gray-600 text-sm", children: member.role?.charAt(0).toUpperCase() + member.role?.slice(1) || "Member" }),
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "flex items-center space-x-4 mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center text-gray-500 text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Mail, { className: "w-3 h-3 mr-1" }),
                member.user?.email || "No email"
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full", children: member.teamName }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(EllipsisVertical, { className: "w-4 h-4" }) })
          ] })
        ] }) }, `${member.teamId}-${member.user?.id}`)) })
      ] })
    ] })
  ] }) });
}

// src/pages/Projects.tsx
var import_react28 = __toESM(require_react(), 1);
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
function Projects() {
  const { isAuthenticated } = useAuthStore();
  const [searchTerm, setSearchTerm] = (0, import_react28.useState)("");
  const [statusFilter, setStatusFilter] = (0, import_react28.useState)("all");
  const { data: projects = [], isLoading } = trpc.project.getAll.useQuery();
  const { data: teams2 = [] } = trpc.team.getAll.useQuery();
  if (!isAuthenticated) {
    return null;
  }
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600", children: "Loading projects..." })
    ] }) }) });
  }
  const filteredProjects = projects.filter((project) => {
    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) || project.description?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "all" || project.status.toLowerCase() === statusFilter.toLowerCase();
    return matchesSearch && matchesStatus;
  });
  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case "active":
        return "bg-green-100 text-green-800";
      case "planning":
        return "bg-orange-100 text-orange-800";
      case "completed":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-blue-100 text-blue-800";
    }
  };
  const getProjectColor = (index) => {
    const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-orange-500", "bg-pink-500", "bg-indigo-500"];
    return colors[index % colors.length];
  };
  const formatDate3 = (dateString) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric"
    });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "h-full flex flex-col", children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white border-b border-gray-200 p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Projects" }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600 mt-1", children: "Manage and track all your projects" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("button", { className: "flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
          "New Project"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "mt-4 flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "relative flex-1 max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Search, { className: "w-4 h-4 absolute left-3 top-3 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            FloatingInput,
            {
              id: "search",
              type: "text",
              label: "Search projects...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "pl-10"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
          "select",
          {
            value: statusFilter,
            onChange: (e) => setStatusFilter(e.target.value),
            className: "px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "all", children: "All Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "active", children: "Active" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "planning", children: "Planning" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "completed", children: "Completed" })
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex-1 p-6 overflow-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600 text-sm", children: "Total Projects" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: filteredProjects.length })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Activity, { className: "w-6 h-6 text-blue-600" }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600 text-sm", children: "Active Projects" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: projects.filter((p2) => p2.status.toLowerCase() === "active").length })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Activity, { className: "w-6 h-6 text-green-600" }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600 text-sm", children: "Completed" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: projects.filter((p2) => p2.status.toLowerCase() === "completed").length })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Activity, { className: "w-6 h-6 text-gray-600" }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600 text-sm", children: "Team Members" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: teams2.reduce((total, team) => total + (team.members?.length || 0), 0) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Users, { className: "w-6 h-6 text-purple-600" }) })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: filteredProjects.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "col-span-full text-center py-12", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-500", children: "No projects found matching your criteria." }) }) : filteredProjects.map((project, index) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-start justify-between mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: `w-10 h-10 rounded-lg ${getProjectColor(index)} flex items-center justify-center`, children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "text-white font-bold text-sm", children: project.name.split(" ").map((word) => word[0]).join("").slice(0, 2) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h3", { className: "font-semibold text-gray-900", children: project.name }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(project.status)}`, children: project.status.charAt(0).toUpperCase() + project.status.slice(1) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("button", { className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(EllipsisVertical, { className: "w-4 h-4" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-gray-600 text-sm mb-4", children: project.description }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "flex items-center space-x-4 text-sm text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Calendar, { className: "w-4 h-4 mr-1" }),
            project.endDate ? formatDate3(project.endDate) : "No due date"
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "flex -space-x-1", children: [
            project.team?.members?.slice(0, 3).map((member, idx) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              "div",
              {
                className: "w-6 h-6 rounded-full bg-gray-400 border-2 border-white flex items-center justify-center",
                children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "text-white text-xs font-medium", children: member.user?.name?.split(" ").map((n) => n[0]).join("").slice(0, 2) || "U" })
              },
              idx
            )) || /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-6 h-6 rounded-full bg-gray-300 border-2 border-white flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "text-gray-600 text-xs", children: "No team" }) }),
            (project.team?.members?.length || 0) > 3 && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "w-6 h-6 rounded-full bg-gray-300 border-2 border-white flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("span", { className: "text-gray-600 text-xs", children: [
              "+",
              (project.team?.members?.length || 0) - 3
            ] }) })
          ] })
        ] })
      ] }, project.id)) })
    ] })
  ] }) });
}

// src/pages/Profile.tsx
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
function Profile() {
  const userStats = [
    { label: "Tasks Completed", value: "147", color: "bg-green-100 text-green-800" },
    { label: "Projects Active", value: "8", color: "bg-blue-100 text-blue-800" },
    { label: "Team Members", value: "12", color: "bg-purple-100 text-purple-800" },
    { label: "Hours Logged", value: "284", color: "bg-orange-100 text-orange-800" }
  ];
  const recentActivity = [
    {
      id: 1,
      action: "Completed task",
      target: "Birthday Cake Planning",
      time: "2 hours ago",
      color: "bg-green-500"
    },
    {
      id: 2,
      action: "Added comment to",
      target: "New MVP Build",
      time: "4 hours ago",
      color: "bg-blue-500"
    },
    {
      id: 3,
      action: "Created new project",
      target: "Website Redesign",
      time: "1 day ago",
      color: "bg-purple-500"
    },
    {
      id: 4,
      action: "Assigned task to",
      target: "Blaine Cottrell",
      time: "2 days ago",
      color: "bg-orange-500"
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "h-full overflow-auto", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "max-w-4xl mx-auto p-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-start justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center space-x-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-white text-2xl font-bold", children: "LJ" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Lisa Jackson" }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-gray-600 text-lg", children: "Team Lead & Project Manager" }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center space-x-4 mt-2 text-gray-500", children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Mail, { className: "w-4 h-4 mr-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-sm", children: "lisa.jackson@company.com" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(MapPin, { className: "w-4 h-4 mr-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-sm", children: "San Francisco, CA" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Calendar, { className: "w-4 h-4 mr-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-sm", children: "Joined March 2021" })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("button", { className: "flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(PenLine, { className: "w-4 h-4 mr-2" }),
        "Edit Profile"
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "lg:col-span-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6 mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h2", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Performance Overview" }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: userStats.map((stat, index) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: `mx-auto w-16 h-16 rounded-full ${stat.color} flex items-center justify-center mb-2`, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-xl font-bold", children: stat.value }) }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-sm text-gray-600", children: stat.label })
          ] }, index)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: "Recent Activity" }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Activity, { className: "w-5 h-5 text-gray-400" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "space-y-4", children: recentActivity.map((activity) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-start space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: `w-8 h-8 rounded-full ${activity.color} flex items-center justify-center`, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "w-2 h-2 bg-white rounded-full" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("p", { className: "text-sm text-gray-900", children: [
                activity.action,
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "font-medium", children: activity.target })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-xs text-gray-500", children: activity.time })
            ] })
          ] }, activity.id)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Skills" }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "space-y-3", children: [
            { name: "Project Management", level: 95 },
            { name: "Team Leadership", level: 90 },
            { name: "Strategic Planning", level: 85 },
            { name: "Communication", level: 92 }
          ].map((skill, index) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center justify-between mb-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-sm font-medium text-gray-700", children: skill.name }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("span", { className: "text-sm text-gray-500", children: [
                skill.level,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-2", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              "div",
              {
                className: "bg-blue-600 h-2 rounded-full transition-all duration-300",
                style: { width: `${skill.level}%` }
              }
            ) })
          ] }, index)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Current Projects" }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "space-y-3", children: [
            { name: "Birthday Event Planning", progress: 75, color: "bg-blue-500" },
            { name: "New MVP Development", progress: 45, color: "bg-green-500" },
            { name: "Website Redesign", progress: 20, color: "bg-purple-500" }
          ].map((project, index) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: `w-3 h-3 rounded-full ${project.color}` }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "text-sm font-medium text-gray-900", children: project.name }),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-1 mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                "div",
                {
                  className: `h-1 rounded-full ${project.color}`,
                  style: { width: `${project.progress}%` }
                }
              ) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("span", { className: "text-xs text-gray-500", children: [
              project.progress,
              "%"
            ] })
          ] }, index)) })
        ] })
      ] })
    ] })
  ] }) }) });
}

// src/pages/Settings.tsx
var import_react29 = __toESM(require_react(), 1);
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
function Settings4() {
  const [currentUser, setCurrentUser] = (0, import_react29.useState)(null);
  const [preferences, setPreferences] = (0, import_react29.useState)(null);
  const [activeSessions, setActiveSessions] = (0, import_react29.useState)([]);
  const [profileForm, setProfileForm] = (0, import_react29.useState)({
    name: "",
    avatar: "",
    timezone: "",
    dateFormat: "",
    language: ""
  });
  const [passwordForm, setPasswordForm] = (0, import_react29.useState)({
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  });
  const [showPasswords, setShowPasswords] = (0, import_react29.useState)(false);
  const [showProfileModal, setShowProfileModal] = (0, import_react29.useState)(false);
  const [showPasswordModal, setShowPasswordModal] = (0, import_react29.useState)(false);
  const [showSessionsModal, setShowSessionsModal] = (0, import_react29.useState)(false);
  const userQuery = trpc.user.me.useQuery();
  const preferencesQuery = trpc.user.getPreferences.useQuery();
  const sessionsQuery = trpc.user.getActiveSessions.useQuery();
  const updateProfileMutation = trpc.user.updateProfile.useMutation();
  const updatePasswordMutation = trpc.user.updatePassword.useMutation();
  const updatePreferencesMutation = trpc.user.updatePreferences.useMutation();
  const exportDataMutation = trpc.user.exportData.useMutation();
  const revokeSessionMutation = trpc.user.revokeSession.useMutation();
  (0, import_react29.useEffect)(() => {
    if (userQuery.data) {
      setCurrentUser(userQuery.data);
      setProfileForm({
        name: userQuery.data.name || "",
        avatar: userQuery.data.avatar || "",
        timezone: userQuery.data.timezone || "UTC",
        dateFormat: userQuery.data.dateFormat || "MM/DD/YYYY",
        language: userQuery.data.language || "en"
      });
    }
  }, [userQuery.data]);
  (0, import_react29.useEffect)(() => {
    if (preferencesQuery.data) {
      setPreferences(preferencesQuery.data);
    }
  }, [preferencesQuery.data]);
  (0, import_react29.useEffect)(() => {
    if (sessionsQuery.data) {
      setActiveSessions(sessionsQuery.data);
    }
  }, [sessionsQuery.data]);
  const handleProfileUpdate = async (e) => {
    e.preventDefault();
    try {
      await updateProfileMutation.mutateAsync(profileForm);
      toast.success("Profile updated successfully");
      userQuery.refetch();
    } catch (error) {
      toast.error("Failed to update profile");
    }
  };
  const handlePasswordUpdate = async (e) => {
    e.preventDefault();
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error("New passwords do not match");
      return;
    }
    try {
      await updatePasswordMutation.mutateAsync({
        currentPassword: passwordForm.currentPassword,
        newPassword: passwordForm.newPassword
      });
      toast.success("Password updated successfully");
      setPasswordForm({ currentPassword: "", newPassword: "", confirmPassword: "" });
    } catch (error) {
      toast.error(error.message || "Failed to update password");
    }
  };
  const handlePreferenceChange = async (key, value) => {
    try {
      await updatePreferencesMutation.mutateAsync({ [key]: value });
      setPreferences({ ...preferences, [key]: value });
      toast.success("Preference updated");
    } catch (error) {
      toast.error("Failed to update preference");
    }
  };
  const handleExportData = async () => {
    try {
      const result = await exportDataMutation.mutateAsync();
      const dataStr = JSON.stringify(result.data, null, 2);
      const dataUri = "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);
      const exportFileDefaultName = `krushr-data-${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.json`;
      const linkElement = document.createElement("a");
      linkElement.setAttribute("href", dataUri);
      linkElement.setAttribute("download", exportFileDefaultName);
      document.body.appendChild(linkElement);
      linkElement.click();
      document.body.removeChild(linkElement);
      toast.success("Data exported successfully");
    } catch (error) {
      toast.error("Failed to export data");
    }
  };
  const handleRevokeSession = async (sessionId) => {
    try {
      await revokeSessionMutation.mutateAsync({ sessionId });
      toast.success("Session revoked");
      sessionsQuery.refetch();
    } catch (error) {
      toast.error("Failed to revoke session");
    }
  };
  if (userQuery.isLoading || preferencesQuery.isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "h-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "animate-spin rounded-full h-12 w-12 border-b-2 border-krushr-coral-red mx-auto mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-gray-600", children: "Loading settings..." })
    ] }) }) });
  }
  const settingsGroups = [
    {
      title: "Profile Settings",
      icon: User,
      settings: [
        { name: "Personal Information", description: "Update your profile details", type: "link", action: () => setShowProfileModal(true) },
        { name: "Change Password", description: "Update your account password", type: "link", action: () => setShowPasswordModal(true) },
        { name: "Active Sessions", description: "Manage your active sessions", type: "link", action: () => setShowSessionsModal(true) }
      ]
    },
    {
      title: "Notifications",
      icon: Bell,
      settings: [
        {
          name: "Desktop Notifications",
          description: "Get notified on your desktop",
          type: "toggle",
          enabled: preferences?.desktopNotifications ?? true,
          onChange: (value) => handlePreferenceChange("desktopNotifications", value)
        },
        {
          name: "Email Notifications",
          description: "Receive notifications via email",
          type: "toggle",
          enabled: preferences?.emailNotifications ?? true,
          onChange: (value) => handlePreferenceChange("emailNotifications", value)
        },
        {
          name: "Task Assignments",
          description: "Notify me about task assignments",
          type: "toggle",
          enabled: preferences?.notifyTaskAssignments ?? true,
          onChange: (value) => handlePreferenceChange("notifyTaskAssignments", value)
        },
        {
          name: "Comments & Mentions",
          description: "Notify me about comments and mentions",
          type: "toggle",
          enabled: preferences?.notifyCommentsMentions ?? true,
          onChange: (value) => handlePreferenceChange("notifyCommentsMentions", value)
        },
        {
          name: "Team Invitations",
          description: "Notify me about team invitations",
          type: "toggle",
          enabled: preferences?.notifyTeamInvitations ?? true,
          onChange: (value) => handlePreferenceChange("notifyTeamInvitations", value)
        },
        {
          name: "Project Deadlines",
          description: "Notify me about project deadlines",
          type: "toggle",
          enabled: preferences?.notifyProjectDeadlines ?? true,
          onChange: (value) => handlePreferenceChange("notifyProjectDeadlines", value)
        },
        {
          name: "File Uploads",
          description: "Notify me about file uploads",
          type: "toggle",
          enabled: preferences?.notifyFileUploads ?? false,
          onChange: (value) => handlePreferenceChange("notifyFileUploads", value)
        }
      ]
    },
    {
      title: "Appearance",
      icon: Palette,
      settings: [
        {
          name: "Theme",
          description: "Choose your preferred theme",
          type: "select",
          options: ["light", "dark", "system"],
          value: preferences?.theme ?? "system",
          onChange: (value) => handlePreferenceChange("theme", value)
        },
        {
          name: "Color Scheme",
          description: "Customize your color preferences",
          type: "select",
          options: ["blue", "green", "purple", "orange"],
          value: preferences?.colorScheme ?? "blue",
          onChange: (value) => handlePreferenceChange("colorScheme", value)
        },
        {
          name: "Compact Mode",
          description: "Use a more compact interface",
          type: "toggle",
          enabled: preferences?.compactMode ?? false,
          onChange: (value) => handlePreferenceChange("compactMode", value)
        }
      ]
    },
    {
      title: "Security",
      icon: Shield,
      settings: [
        { name: "Two-Factor Authentication", description: "Add an extra layer of security (Coming Soon)", type: "toggle", enabled: false, disabled: true },
        { name: "Session Management", description: "Manage your active sessions", type: "link", action: () => setShowSessionsModal(true) },
        { name: "Change Password", description: "Update your account password", type: "link", action: () => setShowPasswordModal(true) }
      ]
    },
    {
      title: "Language & Region",
      icon: Globe,
      settings: [
        {
          name: "Language",
          description: "Choose your preferred language",
          type: "select",
          options: ["en", "es", "fr", "de"],
          optionLabels: ["English", "Spanish", "French", "German"],
          value: currentUser?.language ?? "en",
          onChange: (value) => setProfileForm({ ...profileForm, language: value })
        },
        {
          name: "Timezone",
          description: "Set your local timezone",
          type: "select",
          options: ["UTC-8", "UTC-5", "UTC+0", "UTC+1"],
          optionLabels: ["UTC-8 (PST)", "UTC-5 (EST)", "UTC+0 (GMT)", "UTC+1 (CET)"],
          value: currentUser?.timezone ?? "UTC",
          onChange: (value) => setProfileForm({ ...profileForm, timezone: value })
        },
        {
          name: "Date Format",
          description: "Choose how dates are displayed",
          type: "select",
          options: ["MM/DD/YYYY", "DD/MM/YYYY", "YYYY-MM-DD"],
          value: currentUser?.dateFormat ?? "MM/DD/YYYY",
          onChange: (value) => setProfileForm({ ...profileForm, dateFormat: value })
        }
      ]
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "h-full overflow-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "max-w-4xl mx-auto p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Settings" }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-gray-600 mt-1", children: "Manage your account settings and preferences" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "space-y-8", children: settingsGroups.map((group, groupIndex) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "p-6 border-b border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "w-10 h-10 bg-red-50 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(group.icon, { className: "w-5 h-5 text-krushr-coral-red" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: group.title })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "divide-y divide-gray-200", children: group.settings.map((setting, settingIndex) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-6 flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "font-medium text-gray-900", children: setting.name }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: setting.description })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "ml-6", children: [
            setting.type === "toggle" && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
              "button",
              {
                disabled: setting.disabled,
                onClick: () => setting.onChange && setting.onChange(!setting.enabled),
                className: `relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${setting.enabled ? "bg-krushr-coral-red" : "bg-gray-200"} ${setting.disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}`,
                children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
                  "span",
                  {
                    className: `inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${setting.enabled ? "translate-x-6" : "translate-x-1"}`
                  }
                )
              }
            ),
            setting.type === "select" && setting.options && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
              "select",
              {
                value: setting.value || setting.options[0],
                onChange: (e) => setting.onChange && setting.onChange(e.target.value),
                className: "px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-krushr-coral-red focus:border-krushr-coral-red",
                children: setting.options.map((option, optionIndex) => /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("option", { value: option, children: setting.optionLabels ? setting.optionLabels[optionIndex] : option.charAt(0).toUpperCase() + option.slice(1) }, optionIndex))
              }
            ),
            setting.type === "link" && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
              "button",
              {
                onClick: () => setting.action && setting.action(),
                className: "text-krushr-coral-red hover:text-krushr-coral-red/80 font-medium",
                children: "Configure"
              }
            )
          ] })
        ] }, settingIndex)) })
      ] }, groupIndex)) }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "mt-8 bg-white rounded-lg border border-red-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-6 border-b border-red-200", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h2", { className: "text-lg font-semibold text-red-900", children: "Danger Zone" }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-red-600 mt-1", children: "These actions are irreversible" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-6 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "font-medium text-gray-900", children: "Export Data" }),
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-gray-600", children: "Download a copy of all your data" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(
              "button",
              {
                onClick: handleExportData,
                disabled: exportDataMutation.isLoading,
                className: "px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 flex items-center space-x-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Download, { className: "w-4 h-4" }),
                  /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { children: exportDataMutation.isLoading ? "Exporting..." : "Export" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "font-medium text-gray-900", children: "Delete Account" }),
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-gray-600", children: "Permanently delete your account and all data" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("button", { className: "px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors", children: "Delete Account" })
          ] })
        ] })
      ] })
    ] }),
    showProfileModal && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "bg-white rounded-lg max-w-md w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Update Profile" }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("form", { onSubmit: handleProfileUpdate, className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          FloatingInput,
          {
            type: "text",
            value: profileForm.name,
            onChange: (e) => setProfileForm({ ...profileForm, name: e.target.value }),
            label: "Name",
            required: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          FloatingInput,
          {
            type: "url",
            value: profileForm.avatar,
            onChange: (e) => setProfileForm({ ...profileForm, avatar: e.target.value }),
            label: "Avatar URL (Optional)"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex space-x-3 pt-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            "button",
            {
              type: "submit",
              disabled: updateProfileMutation.isLoading,
              className: "flex-1 bg-krushr-coral-red text-white py-2 px-4 rounded-lg hover:bg-krushr-coral-red/90 disabled:opacity-50",
              children: updateProfileMutation.isLoading ? "Saving..." : "Save Changes"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            "button",
            {
              type: "button",
              onClick: () => setShowProfileModal(false),
              className: "flex-1 bg-gray-200 text-gray-900 py-2 px-4 rounded-lg hover:bg-gray-300",
              children: "Cancel"
            }
          )
        ] })
      ] })
    ] }) }),
    showPasswordModal && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "bg-white rounded-lg max-w-md w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Change Password" }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("form", { onSubmit: handlePasswordUpdate, className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            FloatingInput,
            {
              type: showPasswords ? "text" : "password",
              value: passwordForm.currentPassword,
              onChange: (e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value }),
              label: "Current Password",
              className: "pr-10",
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            "button",
            {
              type: "button",
              onClick: () => setShowPasswords(!showPasswords),
              className: "absolute inset-y-0 right-0 pr-3 flex items-center z-20",
              children: showPasswords ? /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(EyeOff, { className: "h-4 w-4 text-gray-400" }) : /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Eye, { className: "h-4 w-4 text-gray-400" })
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          FloatingInput,
          {
            type: showPasswords ? "text" : "password",
            value: passwordForm.newPassword,
            onChange: (e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value }),
            label: "New Password",
            minLength: 6,
            required: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          FloatingInput,
          {
            type: showPasswords ? "text" : "password",
            value: passwordForm.confirmPassword,
            onChange: (e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value }),
            label: "Confirm New Password",
            minLength: 6,
            required: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex space-x-3 pt-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            "button",
            {
              type: "submit",
              disabled: updatePasswordMutation.isLoading,
              className: "flex-1 bg-krushr-coral-red text-white py-2 px-4 rounded-lg hover:bg-krushr-coral-red/90 disabled:opacity-50",
              children: updatePasswordMutation.isLoading ? "Updating..." : "Update Password"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            "button",
            {
              type: "button",
              onClick: () => {
                setShowPasswordModal(false);
                setPasswordForm({ currentPassword: "", newPassword: "", confirmPassword: "" });
              },
              className: "flex-1 bg-gray-200 text-gray-900 py-2 px-4 rounded-lg hover:bg-gray-300",
              children: "Cancel"
            }
          )
        ] })
      ] })
    ] }) }),
    showSessionsModal && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "bg-white rounded-lg max-w-2xl w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Active Sessions" }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "space-y-3 max-h-96 overflow-y-auto", children: [
        activeSessions.map((session) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "font-medium", children: session.isCurrent ? "Current Session" : "Session" }),
              session.isCurrent && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { className: "px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full", children: "Current" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("p", { className: "text-sm text-gray-600", children: [
              "Created: ",
              new Date(session.createdAt).toLocaleString()
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("p", { className: "text-sm text-gray-600", children: [
              "Expires: ",
              new Date(session.expiresAt).toLocaleString()
            ] })
          ] }),
          !session.isCurrent && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            "button",
            {
              onClick: () => handleRevokeSession(session.id),
              className: "px-3 py-1 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 text-sm font-medium",
              children: "Revoke"
            }
          )
        ] }, session.id)),
        activeSessions.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-center text-gray-500 py-8", children: "No active sessions found" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "flex justify-end pt-4", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
        "button",
        {
          onClick: () => setShowSessionsModal(false),
          className: "bg-gray-200 text-gray-900 py-2 px-4 rounded-lg hover:bg-gray-300",
          children: "Close"
        }
      ) })
    ] }) })
  ] }) });
}

// src/pages/Pricing.tsx
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var Pricing = () => {
  const plans = [
    {
      name: "Free",
      description: "Ideal for individuals, or a quick test drive",
      price: "$0",
      period: "mo",
      features: [
        "Unlimited customizable panels",
        "Basic ChatGPT integration",
        "Google & Outlook calendars",
        "Up to 3 workspaces",
        "Basic task management"
      ],
      buttonText: "Start Free",
      buttonClass: "bg-gray-100 text-gray-900 hover:bg-gray-200",
      popular: false
    },
    {
      name: "Lite",
      description: "Put your full productivity stack on one page",
      price: "$39",
      originalPrice: "$49",
      period: "mo",
      savings: "Save $10/mo",
      features: [
        "250 Automations/month",
        "1 Connected email & calendar account",
        "Unlimited panels",
        "Customizable layout",
        "Unlimited contacts",
        "Unlimited teams"
      ],
      buttonText: "Start Now",
      buttonClass: "bg-figma-secondary text-white hover:bg-red-600",
      popular: false
    },
    {
      name: "Full Suite",
      description: "Everything + your tailored o1 model, OpenAI's most advanced model",
      price: "$49",
      originalPrice: "$99",
      period: "mo",
      savings: "Save $50/mo",
      features: [
        "ChatGPT o1 precise user style model",
        "750 Automations/month",
        "2 Connected email & calendar accounts",
        "Unlimited panels",
        "Customizable layout",
        "Unlimited contacts",
        "Unlimited teams",
        "40% beta discount (through 2025)"
      ],
      buttonText: "Start Now",
      buttonClass: "bg-figma-primary text-white hover:bg-blue-800",
      popular: true
    }
  ];
  const valueProps = [
    {
      icon: Zap,
      title: "Latest AI Technology",
      description: "Powered by OpenAI's most advanced o1 model, delivering human-like reasoning for your workflows."
    },
    {
      icon: Shield,
      title: "Enterprise Security",
      description: "Bank-level encryption, SOC 2 compliance, and complete data privacy. Your information stays yours."
    },
    {
      icon: Calendar,
      title: "Massive Time Savings",
      description: "Save 15+ hours per week by consolidating all your work tools into one intelligent workspace."
    }
  ];
  const faqs = [
    {
      question: "Can I upgrade or downgrade anytime?",
      answer: "Yes! You can change your plan at any time. Upgrades take effect immediately, and downgrades take effect at your next billing cycle."
    },
    {
      question: "What's included in the free trial?",
      answer: "The Free plan is completely free forever. The Full Suite plan includes a 14-day free trial with full access to all premium features."
    },
    {
      question: "How does the early bird pricing work?",
      answer: "The Full Suite includes a special beta discount. This pricing is designed to provide maximum value as we continue to enhance our AI capabilities."
    },
    {
      question: "Do you offer refunds?",
      answer: "Yes, we offer a 30-day money-back guarantee. If you're not satisfied, contact our support team for a full refund."
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "min-h-screen bg-white font-manrope", children: [
    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "bg-figma-gray-bg-light py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "max-w-7xl mx-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "text-center mb-16", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-figma-primary font-medium mb-4", children: "2025 Pricing" }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h1", { className: "text-5xl font-bold text-figma-black mb-6", children: "Choose Your AI Productivity Plan" }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "max-w-3xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-lg text-figma-gray mb-0", children: "Start free and upgrade when you're ready to unlock the full power of AI-driven productivity. No hidden fees, cancel anytime." }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "max-w-6xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: plans.map((plan, index) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
        "div",
        {
          className: `relative bg-white rounded-2xl shadow-lg p-8 transition-all duration-300 hover:shadow-xl ${plan.popular ? "ring-2 ring-figma-primary transform scale-105 shadow-2xl" : "hover:scale-102"}`,
          children: [
            plan.popular && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "absolute -top-4 left-1/2 transform -translate-x-1/2 z-10", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "bg-gradient-to-r from-figma-primary to-figma-secondary text-white px-6 py-2 rounded-full text-sm font-bold shadow-lg border-2 border-white", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("span", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("svg", { className: "w-4 h-4", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("path", { d: "M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" }) }),
              "Most Popular"
            ] }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "mb-6 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h3", { className: "text-2xl md:text-3xl font-bold text-figma-black mb-3 tracking-tight", children: plan.name }),
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-figma-gray text-base md:text-lg leading-relaxed", children: plan.description })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "border-t border-figma-gray-border pt-6 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "flex flex-col mb-6", children: plan.features.map((feature, featureIndex) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-start mb-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Check, { className: "w-5 h-5 text-figma-success mr-3 mt-0.5 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "text-figma-gray-dark font-medium", children: feature })
            ] }, featureIndex)) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "mb-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "flex items-baseline flex-wrap gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "text-4xl md:text-5xl font-bold text-figma-black tracking-tight", children: plan.price }),
                /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("span", { className: "text-figma-gray text-lg font-medium", children: [
                  "/",
                  plan.period
                ] }),
                plan.originalPrice && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("span", { className: "text-figma-gray ml-1 line-through text-xl font-medium opacity-60", children: [
                  plan.originalPrice,
                  "/mo"
                ] })
              ] }),
              plan.savings && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("span", { className: "inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-green-100 text-green-800 border border-green-200", children: [
                /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", clipRule: "evenodd" }) }),
                plan.savings
              ] }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
              "button",
              {
                className: `w-full py-4 px-6 rounded-xl font-bold text-base md:text-lg transition-all duration-200 flex items-center justify-center shadow-md hover:shadow-lg transform hover:scale-105 ${plan.buttonClass}`,
                onClick: () => window.open("https://task.krushr.io/auth/register", "_blank"),
                children: [
                  plan.buttonText,
                  /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ArrowRight, { className: "w-5 h-5 ml-2 transition-transform group-hover:translate-x-1" })
                ]
              }
            )
          ]
        },
        index
      )) }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "max-w-7xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "text-center mb-16", children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h2", { className: "text-4xl font-bold text-figma-black mb-8", children: "Why Choose Krushr in 2025?" }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: valueProps.map((prop, index) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "bg-white rounded-xl shadow-lg p-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(prop.icon, { className: "w-12 h-12 text-figma-primary mb-6" }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h3", { className: "text-xl font-bold text-figma-black mb-4", children: prop.title }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-figma-gray", children: prop.description })
      ] }, index)) })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "bg-figma-gray-bg-light py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "max-w-4xl mx-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "text-center mb-16", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h2", { className: "text-4xl font-bold text-figma-black", children: "Frequently Asked Questions" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "space-y-6", children: faqs.map((faq, index) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "bg-white rounded-xl shadow-lg p-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h3", { className: "text-xl font-bold text-figma-black mb-3", children: faq.question }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-figma-gray", children: faq.answer })
      ] }, index)) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "max-w-4xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "text-center", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
      "div",
      {
        className: "bg-gradient-to-br from-figma-primary to-figma-purple rounded-2xl p-16 text-white",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("h2", { className: "text-4xl font-bold mb-6", children: "Ready to 10x Your Productivity?" }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-xl mb-8 opacity-90", children: "Join thousands of professionals who've already transformed their workflow with Krushr's AI-powered platform." }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
            "button",
            {
              className: "bg-white text-figma-primary px-8 py-4 rounded-lg font-semibold text-lg hover:bg-gray-100 transition-colors inline-flex items-center",
              onClick: () => window.open("https://task.krushr.io/auth/register", "_blank"),
              children: [
                "Start Free Today",
                /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ArrowRight, { className: "w-5 h-5 ml-2" })
              ]
            }
          )
        ]
      }
    ) }) }) })
  ] });
};
var Pricing_default = Pricing;

// src/components/workspace/PanelWorkspace.tsx
var import_react32 = __toESM(require_react(), 1);
var import_react_grid_layout = __toESM(require_react_grid_layout(), 1);

// src/components/workspace/PanelRenderer.tsx
var import_react30 = __toESM(require_react(), 1);

// src/hooks/use-toast.ts
var React50 = __toESM(require_react(), 1);
var TOAST_LIMIT = 1;
var TOAST_REMOVE_DELAY = 1e6;
var count = 0;
function genId2() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}
var toastTimeouts = /* @__PURE__ */ new Map();
var addToRemoveQueue = (toastId) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId
    });
  }, TOAST_REMOVE_DELAY);
  toastTimeouts.set(toastId, timeout);
};
var reducer = (state, action) => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT)
      };
    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map(
          (t2) => t2.id === action.toast.id ? { ...t2, ...action.toast } : t2
        )
      };
    case "DISMISS_TOAST": {
      const { toastId } = action;
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast3) => {
          addToRemoveQueue(toast3.id);
        });
      }
      return {
        ...state,
        toasts: state.toasts.map(
          (t2) => t2.id === toastId || toastId === void 0 ? {
            ...t2,
            open: false
          } : t2
        )
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === void 0) {
        return {
          ...state,
          toasts: []
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t2) => t2.id !== action.toastId)
      };
  }
};
var listeners = [];
var memoryState = { toasts: [] };
function dispatch(action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}
function toast2({ ...props }) {
  const id2 = genId2();
  const update = (props2) => dispatch({
    type: "UPDATE_TOAST",
    toast: { ...props2, id: id2 }
  });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id2 });
  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id: id2,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      }
    }
  });
  return {
    id: id2,
    dismiss,
    update
  };
}
function useToast() {
  const [state, setState] = React50.useState(memoryState);
  React50.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);
  return {
    ...state,
    toast: toast2,
    dismiss: (toastId) => dispatch({ type: "DISMISS_TOAST", toastId })
  };
}

// src/components/ui/dropdown-menu.tsx
var React53 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var React52 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-menu/dist/index.mjs
var React51 = __toESM(require_react(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var SELECTION_KEYS = ["Enter", " "];
var FIRST_KEYS = ["ArrowDown", "PageUp", "Home"];
var LAST_KEYS = ["ArrowUp", "PageDown", "End"];
var FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
var SUB_OPEN_KEYS = {
  ltr: [...SELECTION_KEYS, "ArrowRight"],
  rtl: [...SELECTION_KEYS, "ArrowLeft"]
};
var SUB_CLOSE_KEYS = {
  ltr: ["ArrowLeft"],
  rtl: ["ArrowRight"]
};
var MENU_NAME = "Menu";
var [Collection2, useCollection2, createCollectionScope2] = createCollection(MENU_NAME);
var [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [
  createCollectionScope2,
  createPopperScope,
  createRovingFocusGroupScope
]);
var usePopperScope2 = createPopperScope();
var useRovingFocusGroupScope2 = createRovingFocusGroupScope();
var [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);
var [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);
var Menu2 = (props) => {
  const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
  const popperScope = usePopperScope2(__scopeMenu);
  const [content, setContent] = React51.useState(null);
  const isUsingKeyboardRef = React51.useRef(false);
  const handleOpenChange = useCallbackRef(onOpenChange);
  const direction = useDirection(dir);
  React51.useEffect(() => {
    const handleKeyDown = () => {
      isUsingKeyboardRef.current = true;
      document.addEventListener("pointerdown", handlePointer, { capture: true, once: true });
      document.addEventListener("pointermove", handlePointer, { capture: true, once: true });
    };
    const handlePointer = () => isUsingKeyboardRef.current = false;
    document.addEventListener("keydown", handleKeyDown, { capture: true });
    return () => {
      document.removeEventListener("keydown", handleKeyDown, { capture: true });
      document.removeEventListener("pointerdown", handlePointer, { capture: true });
      document.removeEventListener("pointermove", handlePointer, { capture: true });
    };
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Root2, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    MenuProvider,
    {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent,
      children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
        MenuRootProvider,
        {
          scope: __scopeMenu,
          onClose: React51.useCallback(() => handleOpenChange(false), [handleOpenChange]),
          isUsingKeyboardRef,
          dir: direction,
          modal,
          children
        }
      )
    }
  ) });
};
Menu2.displayName = MENU_NAME;
var ANCHOR_NAME2 = "MenuAnchor";
var MenuAnchor = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...anchorProps } = props;
    const popperScope = usePopperScope2(__scopeMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
MenuAnchor.displayName = ANCHOR_NAME2;
var PORTAL_NAME2 = "MenuPortal";
var [PortalProvider2, usePortalContext2] = createMenuContext(PORTAL_NAME2, {
  forceMount: void 0
});
var MenuPortal = (props) => {
  const { __scopeMenu, forceMount, children, container } = props;
  const context = useMenuContext(PORTAL_NAME2, __scopeMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(PortalProvider2, { scope: __scopeMenu, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Portal, { asChild: true, container, children }) }) });
};
MenuPortal.displayName = PORTAL_NAME2;
var CONTENT_NAME3 = "MenuContent";
var [MenuContentProvider, useMenuContentContext] = createMenuContext(CONTENT_NAME3);
var MenuContent = React51.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext2(CONTENT_NAME3, props.__scopeMenu);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = useMenuContext(CONTENT_NAME3, props.__scopeMenu);
    const rootContext = useMenuRootContext(CONTENT_NAME3, props.__scopeMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Collection2.Provider, { scope: props.__scopeMenu, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Collection2.Slot, { scope: props.__scopeMenu, children: rootContext.modal ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(MenuRootContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(MenuRootContentNonModal, { ...contentProps, ref: forwardedRef }) }) }) });
  }
);
var MenuRootContentModal = React51.forwardRef(
  (props, forwardedRef) => {
    const context = useMenuContext(CONTENT_NAME3, props.__scopeMenu);
    const ref = React51.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    React51.useEffect(() => {
      const content = ref.current;
      if (content) return hideOthers(content);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: context.open,
        disableOutsideScroll: true,
        onFocusOutside: composeEventHandlers(
          props.onFocusOutside,
          (event) => event.preventDefault(),
          { checkForDefaultPrevented: false }
        ),
        onDismiss: () => context.onOpenChange(false)
      }
    );
  }
);
var MenuRootContentNonModal = React51.forwardRef((props, forwardedRef) => {
  const context = useMenuContext(CONTENT_NAME3, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    MenuContentImpl,
    {
      ...props,
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      disableOutsideScroll: false,
      onDismiss: () => context.onOpenChange(false)
    }
  );
});
var Slot2 = createSlot("MenuContent.ScrollLock");
var MenuContentImpl = React51.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeMenu,
      loop = false,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEntryFocus,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      onDismiss,
      disableOutsideScroll,
      ...contentProps
    } = props;
    const context = useMenuContext(CONTENT_NAME3, __scopeMenu);
    const rootContext = useMenuRootContext(CONTENT_NAME3, __scopeMenu);
    const popperScope = usePopperScope2(__scopeMenu);
    const rovingFocusGroupScope = useRovingFocusGroupScope2(__scopeMenu);
    const getItems = useCollection2(__scopeMenu);
    const [currentItemId, setCurrentItemId] = React51.useState(null);
    const contentRef = React51.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);
    const timerRef = React51.useRef(0);
    const searchRef = React51.useRef("");
    const pointerGraceTimerRef = React51.useRef(0);
    const pointerGraceIntentRef = React51.useRef(null);
    const pointerDirRef = React51.useRef("right");
    const lastPointerXRef = React51.useRef(0);
    const ScrollLockWrapper = disableOutsideScroll ? Combination_default : React51.Fragment;
    const scrollLockWrapperProps = disableOutsideScroll ? { as: Slot2, allowPinchZoom: true } : void 0;
    const handleTypeaheadSearch = (key) => {
      const search = searchRef.current + key;
      const items = getItems().filter((item) => !item.disabled);
      const currentItem = document.activeElement;
      const currentMatch = items.find((item) => item.ref.current === currentItem)?.textValue;
      const values = items.map((item) => item.textValue);
      const nextMatch = getNextMatch(values, search, currentMatch);
      const newItem = items.find((item) => item.textValue === nextMatch)?.ref.current;
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "") timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
      if (newItem) {
        setTimeout(() => newItem.focus());
      }
    };
    React51.useEffect(() => {
      return () => window.clearTimeout(timerRef.current);
    }, []);
    useFocusGuards();
    const isPointerMovingToSubmenu = React51.useCallback((event) => {
      const isMovingTowards = pointerDirRef.current === pointerGraceIntentRef.current?.side;
      return isMovingTowards && isPointerInGraceArea(event, pointerGraceIntentRef.current?.area);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuContentProvider,
      {
        scope: __scopeMenu,
        searchRef,
        onItemEnter: React51.useCallback(
          (event) => {
            if (isPointerMovingToSubmenu(event)) event.preventDefault();
          },
          [isPointerMovingToSubmenu]
        ),
        onItemLeave: React51.useCallback(
          (event) => {
            if (isPointerMovingToSubmenu(event)) return;
            contentRef.current?.focus();
            setCurrentItemId(null);
          },
          [isPointerMovingToSubmenu]
        ),
        onTriggerLeave: React51.useCallback(
          (event) => {
            if (isPointerMovingToSubmenu(event)) event.preventDefault();
          },
          [isPointerMovingToSubmenu]
        ),
        pointerGraceTimerRef,
        onPointerGraceIntentChange: React51.useCallback((intent) => {
          pointerGraceIntentRef.current = intent;
        }, []),
        children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ScrollLockWrapper, { ...scrollLockWrapperProps, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
          FocusScope,
          {
            asChild: true,
            trapped: trapFocus,
            onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, (event) => {
              event.preventDefault();
              contentRef.current?.focus({ preventScroll: true });
            }),
            onUnmountAutoFocus: onCloseAutoFocus,
            children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
              DismissableLayer,
              {
                asChild: true,
                disableOutsidePointerEvents,
                onEscapeKeyDown,
                onPointerDownOutside,
                onFocusOutside,
                onInteractOutside,
                onDismiss,
                children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                  Root7,
                  {
                    asChild: true,
                    ...rovingFocusGroupScope,
                    dir: rootContext.dir,
                    orientation: "vertical",
                    loop,
                    currentTabStopId: currentItemId,
                    onCurrentTabStopIdChange: setCurrentItemId,
                    onEntryFocus: composeEventHandlers(onEntryFocus, (event) => {
                      if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();
                    }),
                    preventScrollOnEntryFocus: true,
                    children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                      Content2,
                      {
                        role: "menu",
                        "aria-orientation": "vertical",
                        "data-state": getOpenState(context.open),
                        "data-radix-menu-content": "",
                        dir: rootContext.dir,
                        ...popperScope,
                        ...contentProps,
                        ref: composedRefs,
                        style: { outline: "none", ...contentProps.style },
                        onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                          const target = event.target;
                          const isKeyDownInside = target.closest("[data-radix-menu-content]") === event.currentTarget;
                          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                          const isCharacterKey = event.key.length === 1;
                          if (isKeyDownInside) {
                            if (event.key === "Tab") event.preventDefault();
                            if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);
                          }
                          const content = contentRef.current;
                          if (event.target !== content) return;
                          if (!FIRST_LAST_KEYS.includes(event.key)) return;
                          event.preventDefault();
                          const items = getItems().filter((item) => !item.disabled);
                          const candidateNodes = items.map((item) => item.ref.current);
                          if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();
                          focusFirst2(candidateNodes);
                        }),
                        onBlur: composeEventHandlers(props.onBlur, (event) => {
                          if (!event.currentTarget.contains(event.target)) {
                            window.clearTimeout(timerRef.current);
                            searchRef.current = "";
                          }
                        }),
                        onPointerMove: composeEventHandlers(
                          props.onPointerMove,
                          whenMouse((event) => {
                            const target = event.target;
                            const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
                            if (event.currentTarget.contains(target) && pointerXHasChanged) {
                              const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
                              pointerDirRef.current = newDir;
                              lastPointerXRef.current = event.clientX;
                            }
                          })
                        )
                      }
                    )
                  }
                )
              }
            )
          }
        ) })
      }
    );
  }
);
MenuContent.displayName = CONTENT_NAME3;
var GROUP_NAME2 = "MenuGroup";
var MenuGroup = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...groupProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Primitive.div, { role: "group", ...groupProps, ref: forwardedRef });
  }
);
MenuGroup.displayName = GROUP_NAME2;
var LABEL_NAME = "MenuLabel";
var MenuLabel = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...labelProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Primitive.div, { ...labelProps, ref: forwardedRef });
  }
);
MenuLabel.displayName = LABEL_NAME;
var ITEM_NAME2 = "MenuItem";
var ITEM_SELECT = "menu.itemSelect";
var MenuItem = React51.forwardRef(
  (props, forwardedRef) => {
    const { disabled = false, onSelect, ...itemProps } = props;
    const ref = React51.useRef(null);
    const rootContext = useMenuRootContext(ITEM_NAME2, props.__scopeMenu);
    const contentContext = useMenuContentContext(ITEM_NAME2, props.__scopeMenu);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const isPointerDownRef = React51.useRef(false);
    const handleSelect = () => {
      const menuItem = ref.current;
      if (!disabled && menuItem) {
        const itemSelectEvent = new CustomEvent(ITEM_SELECT, { bubbles: true, cancelable: true });
        menuItem.addEventListener(ITEM_SELECT, (event) => onSelect?.(event), { once: true });
        dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);
        if (itemSelectEvent.defaultPrevented) {
          isPointerDownRef.current = false;
        } else {
          rootContext.onClose();
        }
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuItemImpl,
      {
        ...itemProps,
        ref: composedRefs,
        disabled,
        onClick: composeEventHandlers(props.onClick, handleSelect),
        onPointerDown: (event) => {
          props.onPointerDown?.(event);
          isPointerDownRef.current = true;
        },
        onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
          if (!isPointerDownRef.current) event.currentTarget?.click();
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          const isTypingAhead = contentContext.searchRef.current !== "";
          if (disabled || isTypingAhead && event.key === " ") return;
          if (SELECTION_KEYS.includes(event.key)) {
            event.currentTarget.click();
            event.preventDefault();
          }
        })
      }
    );
  }
);
MenuItem.displayName = ITEM_NAME2;
var MenuItemImpl = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
    const contentContext = useMenuContentContext(ITEM_NAME2, __scopeMenu);
    const rovingFocusGroupScope = useRovingFocusGroupScope2(__scopeMenu);
    const ref = React51.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const [isFocused, setIsFocused] = React51.useState(false);
    const [textContent, setTextContent] = React51.useState("");
    React51.useEffect(() => {
      const menuItem = ref.current;
      if (menuItem) {
        setTextContent((menuItem.textContent ?? "").trim());
      }
    }, [itemProps.children]);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      Collection2.ItemSlot,
      {
        scope: __scopeMenu,
        disabled,
        textValue: textValue ?? textContent,
        children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Item, { asChild: true, ...rovingFocusGroupScope, focusable: !disabled, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
          Primitive.div,
          {
            role: "menuitem",
            "data-highlighted": isFocused ? "" : void 0,
            "aria-disabled": disabled || void 0,
            "data-disabled": disabled ? "" : void 0,
            ...itemProps,
            ref: composedRefs,
            onPointerMove: composeEventHandlers(
              props.onPointerMove,
              whenMouse((event) => {
                if (disabled) {
                  contentContext.onItemLeave(event);
                } else {
                  contentContext.onItemEnter(event);
                  if (!event.defaultPrevented) {
                    const item = event.currentTarget;
                    item.focus({ preventScroll: true });
                  }
                }
              })
            ),
            onPointerLeave: composeEventHandlers(
              props.onPointerLeave,
              whenMouse((event) => contentContext.onItemLeave(event))
            ),
            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))
          }
        ) })
      }
    );
  }
);
var CHECKBOX_ITEM_NAME = "MenuCheckboxItem";
var MenuCheckboxItem = React51.forwardRef(
  (props, forwardedRef) => {
    const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuItem,
      {
        role: "menuitemcheckbox",
        "aria-checked": isIndeterminate2(checked) ? "mixed" : checked,
        ...checkboxItemProps,
        ref: forwardedRef,
        "data-state": getCheckedState(checked),
        onSelect: composeEventHandlers(
          checkboxItemProps.onSelect,
          () => onCheckedChange?.(isIndeterminate2(checked) ? true : !checked),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
MenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
var RADIO_GROUP_NAME = "MenuRadioGroup";
var [RadioGroupProvider, useRadioGroupContext] = createMenuContext(
  RADIO_GROUP_NAME,
  { value: void 0, onValueChange: () => {
  } }
);
var MenuRadioGroup = React51.forwardRef(
  (props, forwardedRef) => {
    const { value, onValueChange, ...groupProps } = props;
    const handleValueChange = useCallbackRef(onValueChange);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(RadioGroupProvider, { scope: props.__scopeMenu, value, onValueChange: handleValueChange, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(MenuGroup, { ...groupProps, ref: forwardedRef }) });
  }
);
MenuRadioGroup.displayName = RADIO_GROUP_NAME;
var RADIO_ITEM_NAME = "MenuRadioItem";
var MenuRadioItem = React51.forwardRef(
  (props, forwardedRef) => {
    const { value, ...radioItemProps } = props;
    const context = useRadioGroupContext(RADIO_ITEM_NAME, props.__scopeMenu);
    const checked = value === context.value;
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuItem,
      {
        role: "menuitemradio",
        "aria-checked": checked,
        ...radioItemProps,
        ref: forwardedRef,
        "data-state": getCheckedState(checked),
        onSelect: composeEventHandlers(
          radioItemProps.onSelect,
          () => context.onValueChange?.(value),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
MenuRadioItem.displayName = RADIO_ITEM_NAME;
var ITEM_INDICATOR_NAME = "MenuItemIndicator";
var [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(
  ITEM_INDICATOR_NAME,
  { checked: false }
);
var MenuItemIndicator = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;
    const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      Presence,
      {
        present: forceMount || isIndeterminate2(indicatorContext.checked) || indicatorContext.checked === true,
        children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
          Primitive.span,
          {
            ...itemIndicatorProps,
            ref: forwardedRef,
            "data-state": getCheckedState(indicatorContext.checked)
          }
        )
      }
    );
  }
);
MenuItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SEPARATOR_NAME = "MenuSeparator";
var MenuSeparator = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...separatorProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      Primitive.div,
      {
        role: "separator",
        "aria-orientation": "horizontal",
        ...separatorProps,
        ref: forwardedRef
      }
    );
  }
);
MenuSeparator.displayName = SEPARATOR_NAME;
var ARROW_NAME2 = "MenuArrow";
var MenuArrow = React51.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...arrowProps } = props;
    const popperScope = usePopperScope2(__scopeMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
MenuArrow.displayName = ARROW_NAME2;
var SUB_NAME = "MenuSub";
var [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);
var MenuSub = (props) => {
  const { __scopeMenu, children, open = false, onOpenChange } = props;
  const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);
  const popperScope = usePopperScope2(__scopeMenu);
  const [trigger, setTrigger] = React51.useState(null);
  const [content, setContent] = React51.useState(null);
  const handleOpenChange = useCallbackRef(onOpenChange);
  React51.useEffect(() => {
    if (parentMenuContext.open === false) handleOpenChange(false);
    return () => handleOpenChange(false);
  }, [parentMenuContext.open, handleOpenChange]);
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Root2, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    MenuProvider,
    {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent,
      children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
        MenuSubProvider,
        {
          scope: __scopeMenu,
          contentId: useId(),
          triggerId: useId(),
          trigger,
          onTriggerChange: setTrigger,
          children
        }
      )
    }
  ) });
};
MenuSub.displayName = SUB_NAME;
var SUB_TRIGGER_NAME = "MenuSubTrigger";
var MenuSubTrigger = React51.forwardRef(
  (props, forwardedRef) => {
    const context = useMenuContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const rootContext = useMenuRootContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const subContext = useMenuSubContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const contentContext = useMenuContentContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const openTimerRef = React51.useRef(null);
    const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
    const scope = { __scopeMenu: props.__scopeMenu };
    const clearOpenTimer = React51.useCallback(() => {
      if (openTimerRef.current) window.clearTimeout(openTimerRef.current);
      openTimerRef.current = null;
    }, []);
    React51.useEffect(() => clearOpenTimer, [clearOpenTimer]);
    React51.useEffect(() => {
      const pointerGraceTimer = pointerGraceTimerRef.current;
      return () => {
        window.clearTimeout(pointerGraceTimer);
        onPointerGraceIntentChange(null);
      };
    }, [pointerGraceTimerRef, onPointerGraceIntentChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(MenuAnchor, { asChild: true, ...scope, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuItemImpl,
      {
        id: subContext.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": context.open,
        "aria-controls": subContext.contentId,
        "data-state": getOpenState(context.open),
        ...props,
        ref: composeRefs(forwardedRef, subContext.onTriggerChange),
        onClick: (event) => {
          props.onClick?.(event);
          if (props.disabled || event.defaultPrevented) return;
          event.currentTarget.focus();
          if (!context.open) context.onOpenChange(true);
        },
        onPointerMove: composeEventHandlers(
          props.onPointerMove,
          whenMouse((event) => {
            contentContext.onItemEnter(event);
            if (event.defaultPrevented) return;
            if (!props.disabled && !context.open && !openTimerRef.current) {
              contentContext.onPointerGraceIntentChange(null);
              openTimerRef.current = window.setTimeout(() => {
                context.onOpenChange(true);
                clearOpenTimer();
              }, 100);
            }
          })
        ),
        onPointerLeave: composeEventHandlers(
          props.onPointerLeave,
          whenMouse((event) => {
            clearOpenTimer();
            const contentRect = context.content?.getBoundingClientRect();
            if (contentRect) {
              const side = context.content?.dataset.side;
              const rightSide = side === "right";
              const bleed = rightSide ? -5 : 5;
              const contentNearEdge = contentRect[rightSide ? "left" : "right"];
              const contentFarEdge = contentRect[rightSide ? "right" : "left"];
              contentContext.onPointerGraceIntentChange({
                area: [
                  // Apply a bleed on clientX to ensure that our exit point is
                  // consistently within polygon bounds
                  { x: event.clientX + bleed, y: event.clientY },
                  { x: contentNearEdge, y: contentRect.top },
                  { x: contentFarEdge, y: contentRect.top },
                  { x: contentFarEdge, y: contentRect.bottom },
                  { x: contentNearEdge, y: contentRect.bottom }
                ],
                side
              });
              window.clearTimeout(pointerGraceTimerRef.current);
              pointerGraceTimerRef.current = window.setTimeout(
                () => contentContext.onPointerGraceIntentChange(null),
                300
              );
            } else {
              contentContext.onTriggerLeave(event);
              if (event.defaultPrevented) return;
              contentContext.onPointerGraceIntentChange(null);
            }
          })
        ),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          const isTypingAhead = contentContext.searchRef.current !== "";
          if (props.disabled || isTypingAhead && event.key === " ") return;
          if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
            context.onOpenChange(true);
            context.content?.focus();
            event.preventDefault();
          }
        })
      }
    ) });
  }
);
MenuSubTrigger.displayName = SUB_TRIGGER_NAME;
var SUB_CONTENT_NAME = "MenuSubContent";
var MenuSubContent = React51.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext2(CONTENT_NAME3, props.__scopeMenu);
    const { forceMount = portalContext.forceMount, ...subContentProps } = props;
    const context = useMenuContext(CONTENT_NAME3, props.__scopeMenu);
    const rootContext = useMenuRootContext(CONTENT_NAME3, props.__scopeMenu);
    const subContext = useMenuSubContext(SUB_CONTENT_NAME, props.__scopeMenu);
    const ref = React51.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Collection2.Provider, { scope: props.__scopeMenu, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Collection2.Slot, { scope: props.__scopeMenu, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      MenuContentImpl,
      {
        id: subContext.contentId,
        "aria-labelledby": subContext.triggerId,
        ...subContentProps,
        ref: composedRefs,
        align: "start",
        side: rootContext.dir === "rtl" ? "left" : "right",
        disableOutsidePointerEvents: false,
        disableOutsideScroll: false,
        trapFocus: false,
        onOpenAutoFocus: (event) => {
          if (rootContext.isUsingKeyboardRef.current) ref.current?.focus();
          event.preventDefault();
        },
        onCloseAutoFocus: (event) => event.preventDefault(),
        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {
          if (event.target !== subContext.trigger) context.onOpenChange(false);
        }),
        onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, (event) => {
          rootContext.onClose();
          event.preventDefault();
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          const isKeyDownInside = event.currentTarget.contains(event.target);
          const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
          if (isKeyDownInside && isCloseKey) {
            context.onOpenChange(false);
            subContext.trigger?.focus();
            event.preventDefault();
          }
        })
      }
    ) }) }) });
  }
);
MenuSubContent.displayName = SUB_CONTENT_NAME;
function getOpenState(open) {
  return open ? "open" : "closed";
}
function isIndeterminate2(checked) {
  return checked === "indeterminate";
}
function getCheckedState(checked) {
  return isIndeterminate2(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
function focusFirst2(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
  }
}
function wrapArray2(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}
function getNextMatch(values, search, currentMatch) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
  let wrappedValues = wrapArray2(values, Math.max(currentMatchIndex, 0));
  const excludeCurrentMatch = normalizedSearch.length === 1;
  if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v) => v !== currentMatch);
  const nextMatch = wrappedValues.find(
    (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
  );
  return nextMatch !== currentMatch ? nextMatch : void 0;
}
function isPointInPolygon(point, polygon) {
  const { x, y } = point;
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const ii = polygon[i];
    const jj = polygon[j];
    const xi = ii.x;
    const yi = ii.y;
    const xj = jj.x;
    const yj = jj.y;
    const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }
  return inside;
}
function isPointerInGraceArea(event, area) {
  if (!area) return false;
  const cursorPos = { x: event.clientX, y: event.clientY };
  return isPointInPolygon(cursorPos, area);
}
function whenMouse(handler) {
  return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
}
var Root32 = Menu2;
var Anchor2 = MenuAnchor;
var Portal4 = MenuPortal;
var Content23 = MenuContent;
var Group = MenuGroup;
var Label3 = MenuLabel;
var Item2 = MenuItem;
var CheckboxItem = MenuCheckboxItem;
var RadioGroup = MenuRadioGroup;
var RadioItem = MenuRadioItem;
var ItemIndicator = MenuItemIndicator;
var Separator3 = MenuSeparator;
var Arrow2 = MenuArrow;
var SubTrigger = MenuSubTrigger;
var SubContent = MenuSubContent;

// ../node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var DROPDOWN_MENU_NAME = "DropdownMenu";
var [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(
  DROPDOWN_MENU_NAME,
  [createMenuScope]
);
var useMenuScope = createMenuScope();
var [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME);
var DropdownMenu = (props) => {
  const {
    __scopeDropdownMenu,
    children,
    dir,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = true
  } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  const triggerRef = React52.useRef(null);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: DROPDOWN_MENU_NAME
  });
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
    DropdownMenuProvider,
    {
      scope: __scopeDropdownMenu,
      triggerId: useId(),
      triggerRef,
      contentId: useId(),
      open,
      onOpenChange: setOpen,
      onOpenToggle: React52.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      modal,
      children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Root32, { ...menuScope, open, onOpenChange: setOpen, dir, modal, children })
    }
  );
};
DropdownMenu.displayName = DROPDOWN_MENU_NAME;
var TRIGGER_NAME4 = "DropdownMenuTrigger";
var DropdownMenuTrigger = React52.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
    const context = useDropdownMenuContext(TRIGGER_NAME4, __scopeDropdownMenu);
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Anchor2, { asChild: true, ...menuScope, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
      Primitive.button,
      {
        type: "button",
        id: context.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": context.open,
        "aria-controls": context.open ? context.contentId : void 0,
        "data-state": context.open ? "open" : "closed",
        "data-disabled": disabled ? "" : void 0,
        disabled,
        ...triggerProps,
        ref: composeRefs(forwardedRef, context.triggerRef),
        onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
          if (!disabled && event.button === 0 && event.ctrlKey === false) {
            context.onOpenToggle();
            if (!context.open) event.preventDefault();
          }
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if (disabled) return;
          if (["Enter", " "].includes(event.key)) context.onOpenToggle();
          if (event.key === "ArrowDown") context.onOpenChange(true);
          if (["Enter", " ", "ArrowDown"].includes(event.key)) event.preventDefault();
        })
      }
    ) });
  }
);
DropdownMenuTrigger.displayName = TRIGGER_NAME4;
var PORTAL_NAME3 = "DropdownMenuPortal";
var DropdownMenuPortal = (props) => {
  const { __scopeDropdownMenu, ...portalProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Portal4, { ...menuScope, ...portalProps });
};
DropdownMenuPortal.displayName = PORTAL_NAME3;
var CONTENT_NAME4 = "DropdownMenuContent";
var DropdownMenuContent = React52.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...contentProps } = props;
    const context = useDropdownMenuContext(CONTENT_NAME4, __scopeDropdownMenu);
    const menuScope = useMenuScope(__scopeDropdownMenu);
    const hasInteractedOutsideRef = React52.useRef(false);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
      Content23,
      {
        id: context.contentId,
        "aria-labelledby": context.triggerId,
        ...menuScope,
        ...contentProps,
        ref: forwardedRef,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
          hasInteractedOutsideRef.current = false;
          event.preventDefault();
        }),
        onInteractOutside: composeEventHandlers(props.onInteractOutside, (event) => {
          const originalEvent = event.detail.originalEvent;
          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
          if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;
        }),
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
DropdownMenuContent.displayName = CONTENT_NAME4;
var GROUP_NAME3 = "DropdownMenuGroup";
var DropdownMenuGroup = React52.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...groupProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
  }
);
DropdownMenuGroup.displayName = GROUP_NAME3;
var LABEL_NAME2 = "DropdownMenuLabel";
var DropdownMenuLabel = React52.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...labelProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Label3, { ...menuScope, ...labelProps, ref: forwardedRef });
  }
);
DropdownMenuLabel.displayName = LABEL_NAME2;
var ITEM_NAME3 = "DropdownMenuItem";
var DropdownMenuItem = React52.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...itemProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
  }
);
DropdownMenuItem.displayName = ITEM_NAME3;
var CHECKBOX_ITEM_NAME2 = "DropdownMenuCheckboxItem";
var DropdownMenuCheckboxItem = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...checkboxItemProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
});
DropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME2;
var RADIO_GROUP_NAME2 = "DropdownMenuRadioGroup";
var DropdownMenuRadioGroup = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioGroupProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
});
DropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME2;
var RADIO_ITEM_NAME2 = "DropdownMenuRadioItem";
var DropdownMenuRadioItem = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioItemProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
});
DropdownMenuRadioItem.displayName = RADIO_ITEM_NAME2;
var INDICATOR_NAME2 = "DropdownMenuItemIndicator";
var DropdownMenuItemIndicator = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
});
DropdownMenuItemIndicator.displayName = INDICATOR_NAME2;
var SEPARATOR_NAME2 = "DropdownMenuSeparator";
var DropdownMenuSeparator = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...separatorProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Separator3, { ...menuScope, ...separatorProps, ref: forwardedRef });
});
DropdownMenuSeparator.displayName = SEPARATOR_NAME2;
var ARROW_NAME3 = "DropdownMenuArrow";
var DropdownMenuArrow = React52.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...arrowProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Arrow2, { ...menuScope, ...arrowProps, ref: forwardedRef });
  }
);
DropdownMenuArrow.displayName = ARROW_NAME3;
var SUB_TRIGGER_NAME2 = "DropdownMenuSubTrigger";
var DropdownMenuSubTrigger = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subTriggerProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SubTrigger, { ...menuScope, ...subTriggerProps, ref: forwardedRef });
});
DropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME2;
var SUB_CONTENT_NAME2 = "DropdownMenuSubContent";
var DropdownMenuSubContent = React52.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subContentProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
    SubContent,
    {
      ...menuScope,
      ...subContentProps,
      ref: forwardedRef,
      style: {
        ...props.style,
        // re-namespace exposed content custom properties
        ...{
          "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
          "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
          "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    }
  );
});
DropdownMenuSubContent.displayName = SUB_CONTENT_NAME2;
var Root24 = DropdownMenu;
var Trigger4 = DropdownMenuTrigger;
var Portal22 = DropdownMenuPortal;
var Content24 = DropdownMenuContent;
var Label22 = DropdownMenuLabel;
var Item22 = DropdownMenuItem;
var CheckboxItem2 = DropdownMenuCheckboxItem;
var RadioItem2 = DropdownMenuRadioItem;
var ItemIndicator2 = DropdownMenuItemIndicator;
var Separator22 = DropdownMenuSeparator;
var SubTrigger2 = DropdownMenuSubTrigger;
var SubContent2 = DropdownMenuSubContent;

// src/components/ui/dropdown-menu.tsx
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var DropdownMenu2 = Root24;
var DropdownMenuTrigger2 = Trigger4;
var DropdownMenuSubTrigger2 = React53.forwardRef(({ className, inset, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(
  SubTrigger2,
  {
    ref,
    className: cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    ),
    ...props,
    children: [
      children,
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(ChevronRight, { className: "ml-auto h-4 w-4" })
    ]
  }
));
DropdownMenuSubTrigger2.displayName = SubTrigger2.displayName;
var DropdownMenuSubContent2 = React53.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
  SubContent2,
  {
    ref,
    className: cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
));
DropdownMenuSubContent2.displayName = SubContent2.displayName;
var DropdownMenuContent2 = React53.forwardRef(({ className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Portal22, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
  Content24,
  {
    ref,
    sideOffset,
    className: cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
) }));
DropdownMenuContent2.displayName = Content24.displayName;
var DropdownMenuItem2 = React53.forwardRef(({ className, inset, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
  Item22,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropdownMenuItem2.displayName = Item22.displayName;
var DropdownMenuCheckboxItem2 = React53.forwardRef(({ className, children, checked, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(
  CheckboxItem2,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    checked,
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(ItemIndicator2, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Check, { className: "h-4 w-4" }) }) }),
      children
    ]
  }
));
DropdownMenuCheckboxItem2.displayName = CheckboxItem2.displayName;
var DropdownMenuRadioItem2 = React53.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(
  RadioItem2,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(ItemIndicator2, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Circle, { className: "h-2 w-2 fill-current" }) }) }),
      children
    ]
  }
));
DropdownMenuRadioItem2.displayName = RadioItem2.displayName;
var DropdownMenuLabel2 = React53.forwardRef(({ className, inset, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
  Label22,
  {
    ref,
    className: cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropdownMenuLabel2.displayName = Label22.displayName;
var DropdownMenuSeparator2 = React53.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
  Separator22,
  {
    ref,
    className: cn("-mx-1 my-1 h-px bg-muted", className),
    ...props
  }
));
DropdownMenuSeparator2.displayName = Separator22.displayName;
var DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
    "span",
    {
      className: cn("ml-auto text-xs tracking-widest opacity-60", className),
      ...props
    }
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

// src/components/workspace/PanelRenderer.tsx
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var KanbanBoard2 = (0, import_react30.lazy)(() => import("/chunks/KanbanBoard-USSWRXGX.js"));
var Chat2 = (0, import_react30.lazy)(() => import("/chunks/Chat-V5PQSFMQ.js"));
var NotesPanel = (0, import_react30.lazy)(() => import("/chunks/NotesPanel-6A7DTOGB.js"));
var NewCalendarPanel = (0, import_react30.lazy)(() => import("/chunks/NewCalendarPanel-3JPQLSF5.js"));
var Contacts = (0, import_react30.lazy)(() => import("/chunks/Contacts-DEZDJRCN.js"));
var WorkspaceAiChat = (0, import_react30.lazy)(() => import("/chunks/WorkspaceAiChat-EJH5G3WD.js"));
var PanelLoadingSpinner = () => /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(LoaderCircle, { className: "w-6 h-6 animate-spin text-krushr-primary" }) });
var PanelErrorBoundary = class extends import_react30.default.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(_) {
    return { hasError: true };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Panel loading error:", error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      return this.props.fallback || /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(CircleAlert, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm", children: "Failed to load panel" }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-xs mt-1", children: "Try refreshing the page" })
      ] }) });
    }
    return this.props.children;
  }
};
function PanelRenderer({ panel, workspaceId, onRefresh, onFullscreen, onFocus }) {
  const { toast: toast3 } = useToast();
  const utils = trpc.useUtils();
  const [floatingPanels, setFloatingPanels] = (0, import_react30.useState)(() => /* @__PURE__ */ new Set());
  const [showCreatePanel, setShowCreatePanel] = (0, import_react30.useState)(false);
  const [isEditingTitle, setIsEditingTitle] = (0, import_react30.useState)(false);
  const [editedTitle, setEditedTitle] = (0, import_react30.useState)(panel.title);
  (0, import_react30.useEffect)(() => {
    if (!isEditingTitle) {
      setEditedTitle(panel.title);
    }
  }, [panel.title, isEditingTitle]);
  const toggleMinimize = trpc.panel.toggleMinimize.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    },
    onError: (error) => {
      console.error("Minimize toggle failed:", error);
      toast3({
        title: "Error",
        description: "Failed to minimize/restore panel",
        variant: "destructive"
      });
    }
  });
  const toggleLock = trpc.panel.toggleLock.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    },
    onError: (error) => {
      console.error("Lock toggle failed:", error);
      toast3({
        title: "Error",
        description: "Failed to lock/unlock panel",
        variant: "destructive"
      });
    }
  });
  const handleToggleFloating = () => {
    setFloatingPanels((prev) => {
      const newFloatingPanels = new Set(prev);
      if (newFloatingPanels.has(panel.id)) {
        newFloatingPanels.delete(panel.id);
      } else {
        newFloatingPanels.add(panel.id);
      }
      return newFloatingPanels;
    });
  };
  const handleCloseFloating = () => {
    setFloatingPanels((prev) => {
      const newFloatingPanels = new Set(prev);
      newFloatingPanels.delete(panel.id);
      return newFloatingPanels;
    });
  };
  const isFloating = (0, import_react30.useMemo)(() => floatingPanels.has(panel.id), [floatingPanels, panel.id]);
  const toggleFullscreen = trpc.panel.toggleFullscreen.useMutation({
    onSuccess: (updatedPanel) => {
      try {
        const panelData = JSON.parse(updatedPanel.data);
        utils.panel.list.invalidate({ workspaceId });
        onFullscreen?.(panel.id, panelData.isFullscreen || false);
        onRefresh?.();
      } catch (error) {
        console.error("Error parsing panel data:", error, updatedPanel);
        utils.panel.list.invalidate({ workspaceId });
        onRefresh?.();
      }
    },
    onError: (error) => {
      console.error("Fullscreen toggle failed:", error);
      toast3({
        title: "Error",
        description: "Failed to toggle fullscreen mode",
        variant: "destructive"
      });
    }
  });
  const setFocus = trpc.panel.setFocus.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    }
  });
  const deletePanel = trpc.panel.delete.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    },
    onError: (error) => {
      console.error("Panel deletion failed:", error);
      toast3({
        title: "Error",
        description: "Failed to delete panel",
        variant: "destructive"
      });
    }
  });
  const updatePanel = trpc.panel.update.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
      setIsEditingTitle(false);
      toast3({
        title: "Success",
        description: "Panel title updated"
      });
    },
    onError: (error) => {
      console.error("Update failed:", error);
      toast3({
        title: "Error",
        description: "Failed to update panel title",
        variant: "destructive"
      });
      setEditedTitle(panel.title);
      setIsEditingTitle(false);
    }
  });
  const getPanelIcon = (type) => {
    switch (type) {
      case "KANBAN":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(FolderOpen, { className: "w-4 h-4 text-krushr-coral-red" });
      case "CHAT":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(MessageCircle, { className: "w-4 h-4 text-krushr-coral-red" });
      case "AI_CHAT":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Bot, { className: "w-4 h-4 text-krushr-coral-red" });
      case "CALENDAR":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Calendar, { className: "w-4 h-4 text-krushr-coral-red" });
      case "NOTES":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(StickyNote, { className: "w-4 h-4 text-krushr-coral-red" });
      case "EMAIL":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Mail, { className: "w-4 h-4 text-krushr-coral-red" });
      case "CONTACTS":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Users, { className: "w-4 h-4 text-krushr-coral-red" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(GripVertical, { className: "w-4 h-4 text-krushr-coral-red" });
    }
  };
  const renderPanelContent = () => {
    if (panel.is_minimized) {
      return null;
    }
    switch (panel.type) {
      case "KANBAN":
        const kanbanId = panel.data?.kanbanId;
        if (!kanbanId) {
          return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Columns2, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm", children: "No Kanban board selected" }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-xs mt-1", children: "Create a Kanban board first, then edit this panel" })
          ] }) });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_react30.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(KanbanBoard2, { kanban: { id: kanbanId, workspaceId }, className: "h-full" }) }) });
      case "CHAT":
        const chatId = panel.data?.chatId;
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_react30.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Chat2, { threadId: chatId, className: "h-full" }) }) });
      case "AI_CHAT":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_react30.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          WorkspaceAiChat,
          {
            workspaceId,
            className: "h-full"
          }
        ) }) });
      case "CALENDAR":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_react30.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(NewCalendarPanel, { workspaceId, className: "h-full" }) });
      case "NOTES":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_react30.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          NotesPanel,
          {
            workspaceId,
            className: "h-full"
          }
        ) });
      case "EMAIL":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Mail, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm", children: "Email component coming soon" })
        ] }) });
      case "CONTACTS":
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_react30.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Contacts, { workspaceId, className: "h-full" }) });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(GripVertical, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("p", { className: "text-sm", children: [
            "Unknown panel type: ",
            panel.type
          ] })
        ] }) });
    }
  };
  const handleToggleMinimize = () => {
    toggleMinimize.mutate({ id: panel.id });
  };
  const handleToggleLock = () => {
    toggleLock.mutate({ id: panel.id });
  };
  const handleToggleFullscreen = () => {
    toggleFullscreen.mutate({ id: panel.id });
  };
  const handleDelete = () => {
    if (confirm(`Delete panel "${panel.title}"?`)) {
      deletePanel.mutate({ id: panel.id });
    }
  };
  const handleTitleClick = (e) => {
    e.stopPropagation();
    if (!panel.is_locked) {
      setIsEditingTitle(true);
    }
  };
  const handleFocus = (e) => {
    if (isFloating) return;
    const target = e.target;
    if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.closest("input") || target.closest("textarea")) {
      return;
    }
    setFocus.mutate({ id: panel.id, focused: true });
    onFocus?.(panel.id);
  };
  const handleTouchStart = (e) => {
    const target = e.target;
    if (target.closest(".panel-drag-handle")) {
      e.stopPropagation();
    } else if (target.closest(".panel-content")) {
      return;
    }
  };
  const handleTouchMove = (e) => {
    const target = e.target;
    if (target.closest(".panel-drag-handle")) {
      e.stopPropagation();
    }
  };
  const handleTouchEnd = (e) => {
    const target = e.target;
    if (target.closest(".panel-drag-handle")) {
      e.stopPropagation();
    }
  };
  const handleTitleSave = () => {
    const trimmedTitle = editedTitle.trim();
    if (trimmedTitle && trimmedTitle !== panel.title) {
      updatePanel.mutate({
        id: panel.id,
        title: trimmedTitle
      });
    } else {
      setIsEditingTitle(false);
      setEditedTitle(panel.title);
    }
  };
  const handleTitleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleTitleSave();
    } else if (e.key === "Escape") {
      setIsEditingTitle(false);
      setEditedTitle(panel.title);
    }
  };
  const handleTitleBlur = () => {
    handleTitleSave();
  };
  const isFullscreen = panel.data?.isFullscreen || false;
  const isFocused = panel.data?.isFocused || false;
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
    Card,
    {
      className: cn(
        "panel-card h-full flex flex-col",
        panel.is_locked && "border-amber-200 bg-amber-50",
        panel.is_minimized && "min-h-0",
        isFullscreen && "fixed inset-0 z-[9999] m-0 rounded-none shadow-2xl bg-white"
      ),
      onClick: handleFocus,
      onTouchStart: handleTouchStart,
      onTouchMove: handleTouchMove,
      onTouchEnd: handleTouchEnd,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
          CardHeader,
          {
            className: cn(
              "panel-drag-handle flex-shrink-0 cursor-move",
              "flex flex-row items-center justify-between space-y-0 p-0 px-3 py-1.5",
              panel.is_locked && "cursor-not-allowed"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center gap-2 min-w-0 flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "text-krushr-coral-red", children: getPanelIcon(panel.type) }),
                isEditingTitle ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  Input,
                  {
                    value: editedTitle,
                    onChange: (e) => setEditedTitle(e.target.value),
                    onKeyDown: handleTitleKeyDown,
                    onBlur: handleTitleBlur,
                    className: "h-6 px-1 py-0 text-sm font-medium border-krushr-primary focus:border-krushr-primary focus:ring-1 focus:ring-krushr-primary",
                    autoFocus: true,
                    onClick: (e) => e.stopPropagation()
                  }
                ) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  "h3",
                  {
                    className: cn(
                      "font-medium text-sm truncate",
                      !panel.is_locked && "cursor-pointer hover:text-krushr-primary transition-colors"
                    ),
                    onClick: handleTitleClick,
                    title: panel.is_locked ? "Panel is locked" : "Click to edit title",
                    children: panel.title
                  }
                ),
                panel.is_locked && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Lock, { className: "w-3 h-3 text-amber-600 flex-shrink-0" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center gap-0.5 flex-shrink-0", children: [
                (panel.type === "KANBAN" || panel.type === "CHAT" || panel.type === "AI_CHAT" || panel.type === "NOTES") && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenu2, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DropdownMenuTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                    Button,
                    {
                      size: "sm",
                      variant: "ghost",
                      className: "w-5 h-5 p-0 hover:bg-gray-100",
                      title: "Panel actions",
                      children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Ellipsis, { className: "w-2.5 h-2.5" })
                    }
                  ) }),
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuContent2, { align: "end", className: "w-40", children: [
                    panel.type === "KANBAN" ? /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", onClick: () => setShowCreatePanel(true), children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Plus, { className: "w-3 h-3 mr-2" }),
                        "Add Task"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DropdownMenuSeparator2, {}),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Users, { className: "w-3 h-3 mr-2" }),
                        "Members"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Calendar, { className: "w-3 h-3 mr-2" }),
                        "Timeline"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Funnel, { className: "w-3 h-3 mr-2" }),
                        "Filters"
                      ] })
                    ] }) : panel.type === "CHAT" ? /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(MessageCircle, { className: "w-3 h-3 mr-2" }),
                        "New Message"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Users, { className: "w-3 h-3 mr-2" }),
                        "Participants"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Search, { className: "w-3 h-3 mr-2" }),
                        "Search Chat"
                      ] })
                    ] }) : panel.type === "AI_CHAT" ? /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Plus, { className: "w-3 h-3 mr-2" }),
                        "New Conversation"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(MessageCircle, { className: "w-3 h-3 mr-2" }),
                        "Conversations"
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Search, { className: "w-3 h-3 mr-2" }),
                        "Search Messages"
                      ] })
                    ] }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_jsx_runtime63.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(DropdownMenuItem2, { className: "text-xs", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Search, { className: "w-3 h-3 mr-2" }),
                      "Search Notes"
                    ] }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DropdownMenuSeparator2, {}),
                    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DropdownMenuItem2, { className: "text-xs text-gray-600", children: "Settings" })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-gray-100",
                    onClick: handleToggleLock,
                    disabled: toggleLock.isPending,
                    title: panel.is_locked ? "Unlock panel" : "Lock panel",
                    children: toggleLock.isPending ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "w-2.5 h-2.5 border border-gray-400 border-t-transparent rounded-full animate-spin" }) : panel.is_locked ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(LockOpen, { className: "w-2.5 h-2.5" }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Lock, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-blue-100 hover:text-blue-600",
                    onClick: handleToggleFullscreen,
                    disabled: toggleFullscreen.isPending,
                    title: isFullscreen ? "Exit fullscreen" : "Fullscreen",
                    children: toggleFullscreen.isPending ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "w-2.5 h-2.5 border border-gray-400 border-t-transparent rounded-full animate-spin" }) : isFullscreen ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Shrink, { className: "w-2.5 h-2.5" }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Expand, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-gray-100",
                    onClick: handleToggleMinimize,
                    disabled: toggleMinimize.isPending,
                    title: panel.is_minimized ? "Restore panel" : "Minimize panel",
                    children: toggleMinimize.isPending ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "w-2.5 h-2.5 border border-gray-400 border-t-transparent rounded-full animate-spin" }) : panel.is_minimized ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Maximize2, { className: "w-2.5 h-2.5" }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Minimize2, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-red-100 hover:text-red-600",
                    onClick: handleDelete,
                    title: "Delete panel",
                    children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(X, { className: "w-2.5 h-2.5" })
                  }
                )
              ] })
            ]
          }
        ),
        !panel.is_minimized && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(CardContent, { className: "panel-content flex-1 p-1 pt-0 overflow-hidden", children: renderPanelContent() }),
        showCreatePanel && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          SimpleCreatePanel,
          {
            workspaceId,
            kanbanColumnId: panel.type === "KANBAN" && panel.data?.kanbanId ? panel.data.kanbanId : void 0,
            open: showCreatePanel,
            onClose: () => setShowCreatePanel(false),
            onSuccess: () => {
              setShowCreatePanel(false);
              onRefresh?.();
            }
          }
        )
      ]
    }
  );
}

// src/hooks/use-layout-persistence.ts
var import_react31 = __toESM(require_react(), 1);
function useLayoutPersistence({
  workspaceId,
  panels,
  autoSaveInterval = 3e4,
  enabled = true
}) {
  const { toast: toast3 } = useToast();
  const autoSaveTimeoutRef = (0, import_react31.useRef)();
  const lastSavedLayoutRef = (0, import_react31.useRef)("");
  const savePresetMutation = trpc.layout.savePreset.useMutation({
    onSuccess: (data2) => {
      toast3({
        title: "Layout Saved",
        description: `Layout preset "${data2.name}" saved successfully`
      });
    },
    onError: (error) => {
      toast3({
        title: "Save Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const loadPresetMutation = trpc.layout.loadPreset.useMutation({
    onSuccess: (data2) => {
      toast3({
        title: "Layout Loaded",
        description: data2.message
      });
      window.location.reload();
    },
    onError: (error) => {
      toast3({
        title: "Load Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const autoSaveMutation = trpc.layout.autoSave.useMutation({
    onError: (error) => {
      console.warn("Auto-save failed:", error.message);
    }
  });
  const { data: presets = [], refetch: refetchPresets } = trpc.layout.listPresets.useQuery(
    { workspaceId },
    { enabled: enabled && !!workspaceId }
  );
  const deletePresetMutation = trpc.layout.deletePreset.useMutation({
    onSuccess: () => {
      toast3({
        title: "Layout Deleted",
        description: "Layout preset deleted successfully"
      });
      refetchPresets();
    },
    onError: (error) => {
      toast3({
        title: "Delete Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const setDefaultMutation = trpc.layout.setDefaultPreset.useMutation({
    onSuccess: () => {
      toast3({
        title: "Default Set",
        description: "Default layout preset updated"
      });
      refetchPresets();
    },
    onError: (error) => {
      toast3({
        title: "Update Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const generateLayoutData = (0, import_react31.useCallback)((currentPanels, layouts) => {
    const gridLayout = layouts || {
      lg: currentPanels.map((panel) => ({
        i: panel.id,
        x: panel.position_x,
        y: panel.position_y,
        w: panel.width,
        h: panel.height,
        minW: 2,
        minH: 2,
        maxW: 24,
        maxH: 24,
        isDraggable: !panel.is_locked,
        isResizable: !panel.is_locked
      }))
    };
    return {
      panels: currentPanels,
      gridLayout
    };
  }, []);
  const savePreset = (0, import_react31.useCallback)((name, description, isDefault = false) => {
    if (!enabled || !workspaceId || panels.length === 0) return;
    const layoutData = generateLayoutData(panels);
    savePresetMutation.mutate({
      workspaceId,
      name,
      description,
      isDefault,
      layoutData
    });
  }, [enabled, workspaceId, panels, generateLayoutData, savePresetMutation]);
  const loadPreset = (0, import_react31.useCallback)((presetId) => {
    if (!enabled || !workspaceId) return;
    loadPresetMutation.mutate({
      presetId,
      workspaceId
    });
  }, [enabled, workspaceId, loadPresetMutation]);
  const deletePreset = (0, import_react31.useCallback)((presetId) => {
    if (!enabled || !workspaceId) return;
    deletePresetMutation.mutate({
      presetId,
      workspaceId
    });
  }, [enabled, workspaceId, deletePresetMutation]);
  const setDefaultPreset = (0, import_react31.useCallback)((presetId) => {
    if (!enabled || !workspaceId) return;
    setDefaultMutation.mutate({
      presetId,
      workspaceId
    });
  }, [enabled, workspaceId, setDefaultMutation]);
  const performAutoSave = (0, import_react31.useCallback)(() => {
    if (!enabled || !workspaceId || panels.length === 0) return;
    const layoutData = generateLayoutData(panels);
    const layoutString = JSON.stringify(layoutData);
    if (layoutString !== lastSavedLayoutRef.current) {
      autoSaveMutation.mutate({
        workspaceId,
        layoutData
      });
      lastSavedLayoutRef.current = layoutString;
    }
  }, [enabled, workspaceId, panels, generateLayoutData, autoSaveMutation]);
  const scheduleAutoSave = (0, import_react31.useCallback)(() => {
    if (!enabled || autoSaveInterval <= 0) return;
    if (autoSaveTimeoutRef.current) {
      clearTimeout(autoSaveTimeoutRef.current);
    }
    autoSaveTimeoutRef.current = setTimeout(() => {
      performAutoSave();
      scheduleAutoSave();
    }, autoSaveInterval);
  }, [enabled, autoSaveInterval, performAutoSave]);
  const onLayoutChange = (0, import_react31.useCallback)((layouts) => {
    if (!enabled) return;
    const layoutData = generateLayoutData(panels, layouts);
    lastSavedLayoutRef.current = JSON.stringify(layoutData);
    scheduleAutoSave();
  }, [enabled, panels, generateLayoutData, scheduleAutoSave]);
  (0, import_react31.useEffect)(() => {
    if (enabled && panels.length > 0) {
      scheduleAutoSave();
    }
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [enabled, panels.length, scheduleAutoSave]);
  (0, import_react31.useEffect)(() => {
    if (enabled && panels.length > 0) {
      const layoutData = generateLayoutData(panels);
      const layoutString = JSON.stringify(layoutData);
      if (lastSavedLayoutRef.current && layoutString !== lastSavedLayoutRef.current) {
        const lastData = JSON.parse(lastSavedLayoutRef.current);
        const currentData = layoutData;
        if (lastData.panels.length !== currentData.panels.length) {
          performAutoSave();
        }
      }
    }
  }, [enabled, panels, generateLayoutData, performAutoSave]);
  return {
    presets,
    savePreset,
    loadPreset,
    deletePreset,
    setDefaultPreset,
    refetchPresets,
    performAutoSave,
    onLayoutChange,
    isSaving: savePresetMutation.isLoading,
    isLoading: loadPresetMutation.isLoading,
    isDeleting: deletePresetMutation.isLoading,
    isSettingDefault: setDefaultMutation.isLoading,
    isAutoSaving: autoSaveMutation.isLoading,
    generateLayoutData
  };
}

// src/components/workspace/PanelWorkspace.tsx
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var ResponsiveGridLayout = (0, import_react_grid_layout.WidthProvider)(import_react_grid_layout.Responsive);
var FixedGridLayout = (0, import_react_grid_layout.WidthProvider)(import_react_grid_layout.default);
function PanelWorkspace({ workspaceId, className }) {
  const [focusedPanelId, setFocusedPanelId] = (0, import_react32.useState)(null);
  const { data: allPanels = [], refetch } = trpc.panel.list.useQuery(
    { workspaceId },
    {
      staleTime: 0,
      gcTime: 6e4,
      refetchOnWindowFocus: false,
      refetchOnMount: "always"
    }
  );
  const [hiddenPanelIds, setHiddenPanelIds] = (0, import_react32.useState)(/* @__PURE__ */ new Set());
  const panels = (0, import_react32.useMemo)(
    () => allPanels.filter((panel) => !hiddenPanelIds.has(panel.id)),
    [allPanels, hiddenPanelIds]
  );
  const [containerWidth, setContainerWidth] = (0, import_react32.useState)(() => {
    if (typeof window !== "undefined") {
      return window.innerWidth;
    }
    return 1600;
  });
  (0, import_react32.useEffect)(() => {
    const updateWidth = () => {
      const container = document.querySelector(".panel-workspace-container");
      if (container) {
        const width = container.clientWidth || window.innerWidth;
        setContainerWidth(width);
      }
    };
    updateWidth();
    window.addEventListener("resize", updateWidth);
    return () => window.removeEventListener("resize", updateWidth);
  }, []);
  const {
    onLayoutChange: onLayoutPersistenceChange,
    performAutoSave,
    isAutoSaving
  } = useLayoutPersistence({
    workspaceId,
    panels,
    autoSaveInterval: 3e4,
    // Auto-save every 30 seconds
    enabled: false
    // Temporarily disable to prevent conflicts with real-time updates
  });
  const fullscreenPanel = panels.find((panel) => {
    try {
      const panelData = typeof panel.data === "string" ? JSON.parse(panel.data) : panel.data;
      return panelData?.isFullscreen === true;
    } catch {
      return false;
    }
  });
  const updatePositions = trpc.panel.updatePositions.useMutation({
    onSuccess: () => {
    }
  });
  const toggleFullscreen = trpc.panel.toggleFullscreen.useMutation({
    onSuccess: () => {
      refetch();
    }
  });
  const toggleMinimize = trpc.panel.toggleMinimize.useMutation({
    onSuccess: () => {
      refetch();
    }
  });
  (0, import_react32.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }
      if (e.key === "Escape" && fullscreenPanel) {
        e.preventDefault();
        toggleFullscreen.mutate({ id: fullscreenPanel.id });
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "m" && focusedPanelId) {
        e.preventDefault();
        toggleMinimize.mutate({ id: focusedPanelId });
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "f" && focusedPanelId) {
        e.preventDefault();
        toggleFullscreen.mutate({ id: focusedPanelId });
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [fullscreenPanel, focusedPanelId, panels]);
  const handleFullscreen = (0, import_react32.useCallback)((panelId, isFullscreen) => {
    refetch();
  }, [refetch]);
  const handleFocus = (0, import_react32.useCallback)((panelId) => {
    setFocusedPanelId(panelId);
  }, []);
  const debouncedUpdatePositions = (0, import_react32.useMemo)(
    () => debounce((updates) => {
      if (updates.length > 0) {
        updatePositions.mutate({
          workspaceId,
          updates
        });
      }
    }, 100),
    // 100ms delay - very responsive for position stability
    [workspaceId, updatePositions]
  );
  const handleLayoutChange = (0, import_react32.useCallback)((newLayout) => {
    if (panels.length === 0 || !newLayout) return;
    console.log("\u{1F504} Layout Change Handler:", {
      panelCount: panels.length,
      newLayoutCount: newLayout.length,
      newLayout: newLayout.map((item) => ({ id: item.i, x: item.x, y: item.y, w: item.w, h: item.h }))
    });
    const optimizedLayout = newLayout.map((item) => ({
      ...item,
      w: Math.max(2, Math.min(24, item.w)),
      // Ensure width between 2-24 grid units
      h: Math.max(2, Math.min(50, item.h))
      // Ensure height between 2-50 grid units
    }));
    const updates = optimizedLayout.filter((item) => {
      const panel = allPanels.find((p2) => p2.id === item.i);
      const hasChanges = panel && (panel.position_x !== item.x || panel.position_y !== item.y || panel.width !== item.w || panel.height !== item.h);
      if (hasChanges && panel) {
        console.log("\u{1F504} Panel dimension change detected:", {
          panelId: panel.id,
          oldDimensions: { x: panel.position_x, y: panel.position_y, w: panel.width, h: panel.height },
          newDimensions: { x: item.x, y: item.y, w: item.w, h: item.h }
        });
      }
      return hasChanges;
    }).map((item) => ({
      id: item.i,
      position_x: item.x,
      position_y: item.y,
      width: item.w,
      height: item.h
    }));
    if (updates.length > 0) {
      console.log("\u{1F4BE} Applying layout updates:", updates.length, "panels");
      debouncedUpdatePositions(updates);
    }
  }, [panels, debouncedUpdatePositions, onLayoutPersistenceChange, allPanels]);
  const [originalLayout, setOriginalLayout] = (0, import_react32.useState)(null);
  const [isDragging, setIsDragging] = (0, import_react32.useState)(false);
  (0, import_react32.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape" && isDragging && originalLayout) {
        console.log("\u{1F504} Escape pressed - snapping back to original layout");
      }
    };
    if (isDragging) {
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }
  }, [isDragging, originalLayout]);
  const handlePanelDragStart = (0, import_react32.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    setOriginalLayout([...layout2]);
    setIsDragging(true);
    element.style.zIndex = "9998";
    element.style.opacity = "0.95";
    element.style.transition = "transform 0.15s ease-out, box-shadow 0.15s ease-out";
    element.style.transform += " scale(1.02)";
    element.style.boxShadow = "0 8px 20px rgba(20, 49, 151, 0.15), 0 4px 8px rgba(0,0,0,0.1)";
    element.style.border = "2px solid rgba(20, 49, 151, 0.4)";
    console.log("\u{1F3AF} Drag started - stored original layout:", {
      originalCount: layout2.length,
      draggedPanel: oldItem.i
    });
  }, []);
  const handlePanelDrag = (0, import_react32.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    element.style.transform = element.style.transform.replace(/scale\([^)]*\)/, "scale(1.02)");
  }, []);
  const handlePanelDragStop = (0, import_react32.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    setIsDragging(false);
    const positionChanged = Math.abs(oldItem.x - newItem.x) > 0.1 || Math.abs(oldItem.y - newItem.y) > 0.1;
    const sizeChanged = Math.abs(oldItem.w - newItem.w) > 0.1 || Math.abs(oldItem.h - newItem.h) > 0.1;
    console.log("\u{1F3AF} Drag stopped:", {
      panelId: newItem.i,
      positionChanged,
      sizeChanged,
      oldPos: { x: oldItem.x, y: oldItem.y },
      newPos: { x: newItem.x, y: newItem.y }
    });
    element.style.transition = "all 0.3s ease-out";
    element.style.zIndex = "";
    element.style.opacity = "";
    element.style.transform = element.style.transform.replace(/scale\([^)]*\)/, "").trim();
    element.style.boxShadow = "";
    element.style.border = "";
    if (positionChanged || sizeChanged) {
      console.log("\u{1F4BE} Saving layout change immediately");
      handleLayoutChange(layout2);
    }
    setTimeout(() => {
      element.style.transition = "";
      setOriginalLayout(null);
    }, 300);
  }, [handleLayoutChange]);
  const handlePanelResizeStart = (0, import_react32.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    element.style.zIndex = "9997";
    element.style.opacity = "0.98";
    element.style.transition = "border 0.15s ease-out";
    element.style.border = "2px solid rgba(31, 187, 101, 0.5)";
  }, []);
  const handlePanelResize = (0, import_react32.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
  }, []);
  const handlePanelResizeStop = (0, import_react32.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    element.style.transition = "all 0.2s ease-out";
    element.style.zIndex = "";
    element.style.opacity = "";
    element.style.border = "";
    setTimeout(() => {
      element.style.transition = "";
    }, 200);
    handleLayoutChange(layout2);
  }, [handleLayoutChange]);
  const layout = (0, import_react32.useMemo)(() => {
    const gridLayout = panels.map((panel) => ({
      i: panel.id,
      x: panel.position_x,
      y: panel.position_y,
      w: panel.width,
      h: panel.height,
      minW: 2,
      minH: 2,
      maxW: 24,
      maxH: 50,
      isDraggable: !panel.is_locked,
      isResizable: !panel.is_locked
    }));
    console.log("\u{1F4CA} Panel to Grid Layout Conversion:", {
      panelCount: panels.length,
      panelDimensions: panels.map((p2) => ({ id: p2.id, w: p2.width, h: p2.height, x: p2.position_x, y: p2.position_y })),
      gridLayout: gridLayout.map((l) => ({ id: l.i, w: l.w, h: l.h, x: l.x, y: l.y, minW: l.minW, minH: l.minH, maxW: l.maxW, maxH: l.maxH }))
    });
    gridLayout.forEach((item) => {
      if ((item.w || 0) < (item.minW || 2) || (item.h || 0) < (item.minH || 2)) {
        console.warn("\u26A0\uFE0F Panel size below minimum:", item);
      }
    });
    return gridLayout;
  }, [panels]);
  const cols = 24;
  if (panels.length === 0) {
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: cn("flex items-center justify-center h-full p-8", className), children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: "No panels yet" }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-gray-600", children: "Add panels using the toolbar above to get started." })
    ] }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: cn("panel-workspace panel-workspace-container h-full flex-1", className), style: { overflowX: "visible", overflowY: "auto", scrollBehavior: "auto" }, children: [
    /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("style", { children: `
        .react-grid-layout {
          position: relative;
          min-height: 100%;
          overflow: visible;
        }
        
        .react-grid-item {
          transition: all 200ms cubic-bezier(0.23, 1, 0.32, 1);
          transition-property: left, top, width, height, transform, box-shadow, border;
          background: white;
          border: 1px solid #e5e7eb;
          border-radius: 12px;
          box-shadow: 0 2px 8px 0 rgb(0 0 0 / 0.04), 0 1px 4px -1px rgb(0 0 0 / 0.03);
          will-change: transform, box-shadow;
          cursor: grab;
        }
        
        .react-grid-item:hover {
          box-shadow: 0 4px 16px 0 rgb(0 0 0 / 0.08), 0 2px 8px -2px rgb(0 0 0 / 0.05);
          transform: translateY(-0.5px);
          border-color: rgba(59, 130, 246, 0.3);
          cursor: grab;
        }
        
        .react-grid-item:active {
          cursor: grabbing;
        }
        
        .react-grid-item.react-grid-placeholder {
          background: rgba(34, 197, 94, 0.1);
          border: 2px dashed rgba(34, 197, 94, 0.4);
          border-radius: 12px;
          transition: all 150ms cubic-bezier(0.23, 1, 0.32, 1);
          z-index: 2;
          user-select: none;
          backdrop-filter: blur(2px);
        }
        
        .react-grid-item.react-draggable-dragging {
          transition: none;
          z-index: 9998;
          opacity: 0.95;
          transform: scale(1.02);
          box-shadow: 0 8px 20px rgba(20, 49, 151, 0.15), 0 4px 8px rgba(0, 0, 0, 0.1);
          border: 2px solid rgba(20, 49, 151, 0.4);
          cursor: grabbing;
        }
        
        .react-grid-item.resizing {
          z-index: 9997;
          opacity: 0.95;
          border: 2px solid rgba(31, 187, 101, 0.4);
          box-shadow: 0 8px 24px rgba(31, 187, 101, 0.2), 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .react-grid-item.snapping {
          border: 2px solid rgba(20, 49, 151, 0.6);
          box-shadow: 0 0 0 4px rgba(20, 49, 151, 0.1);
        }

        .react-grid-item.focusing {
          animation: focusPulse 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        @keyframes focusPulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.02); }
          100% { transform: scale(1); }
        }

        .react-grid-layout {
          transition: height 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        .react-resizable-handle {
          position: absolute;
          background-color: transparent !important;
          background-image: none !important;
          background: none !important;
        }

        .react-resizable-handle::before,
        .react-resizable-handle::after {
          display: none !important;
          content: none !important;
          background: none !important;
        }

        .react-resizable-handle > * {
          display: none !important;
        }

        .react-resizable-handle-se {
          bottom: 0;
          right: 0;
          width: 20px;
          height: 20px;
          cursor: se-resize;
        }

        .react-resizable-handle-ne {
          top: 0;
          right: 0;
          width: 20px;
          height: 20px;
          cursor: ne-resize;
        }

        .react-resizable-handle-sw {
          bottom: 0;
          left: 0;
          width: 20px;
          height: 20px;
          cursor: sw-resize;
        }

        .react-resizable-handle-nw {
          top: 0;
          left: 0;
          width: 20px;
          height: 20px;
          cursor: nw-resize;
        }

        .react-resizable-handle-e {
          top: 0;
          right: -6px;
          bottom: 0;
          width: 12px;
          cursor: e-resize;
        }

        .react-resizable-handle-w {
          top: 0;
          left: -6px;
          bottom: 0;
          width: 12px;
          cursor: w-resize;
        }

        .react-resizable-handle-n {
          top: -6px;
          left: 0;
          right: 0;
          height: 12px;
          cursor: n-resize;
        }

        .react-resizable-handle-s {
          bottom: -6px;
          left: 0;
          right: 0;
          height: 12px;
          cursor: s-resize;
        }
      ` }),
    /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
      FixedGridLayout,
      {
        className: "layout",
        layout,
        cols,
        onLayoutChange: handleLayoutChange,
        isDraggable: true,
        isResizable: true,
        resizeHandles: ["se", "e", "s", "w", "n", "nw", "ne", "sw"],
        margin: [12, 12],
        containerPadding: [16, 16],
        rowHeight: 25,
        draggableHandle: ".panel-drag-handle",
        useCSSTransforms: true,
        preventCollision: false,
        compactType: "vertical",
        autoSize: true,
        draggableCancel: "input,textarea,button,select,option,.panel-content",
        transformScale: 1,
        width: Math.max(containerWidth, 5e3),
        onDrag: handlePanelDrag,
        onDragStart: handlePanelDragStart,
        onDragStop: handlePanelDragStop,
        onResize: handlePanelResize,
        onResizeStart: handlePanelResizeStart,
        onResizeStop: handlePanelResizeStop,
        children: allPanels.map((panel) => /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
          "div",
          {
            className: "panel-container",
            "data-panel-type": panel.type,
            style: { display: hiddenPanelIds.has(panel.id) ? "none" : "block" },
            children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
              PanelRenderer,
              {
                panel: { ...panel, data: panel.data || {} },
                workspaceId,
                onRefresh: refetch,
                onFullscreen: handleFullscreen,
                onFocus: handleFocus
              }
            )
          },
          panel.id
        ))
      }
    )
  ] });
}

// src/components/workspace/WorkspaceHeaderConsolidated.tsx
var import_react35 = __toESM(require_react(), 1);

// src/components/workspace/CommandPalette.tsx
var import_react33 = __toESM(require_react(), 1);

// src/components/ui/command.tsx
var React56 = __toESM(require_react(), 1);
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var Command2 = React56.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
  _e,
  {
    ref,
    className: cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    ),
    ...props
  }
));
Command2.displayName = _e.displayName;
var CommandDialog = ({ children, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Dialog, { ...props, children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(DialogContent, { className: "overflow-hidden p-0", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Command2, { className: "[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5", children }) }) });
};
var CommandInput = React56.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center border-b px-3", "cmdk-input-wrapper": "", children: [
  /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Search, { className: "mr-2 h-4 w-4 shrink-0 opacity-50" }),
  /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
    _e.Input,
    {
      ref,
      className: cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      ),
      ...props
    }
  )
] }));
CommandInput.displayName = _e.Input.displayName;
var CommandList = React56.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
  _e.List,
  {
    ref,
    className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className),
    ...props
  }
));
CommandList.displayName = _e.List.displayName;
var CommandEmpty = React56.forwardRef((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
  _e.Empty,
  {
    ref,
    className: "py-6 text-center text-sm",
    ...props
  }
));
CommandEmpty.displayName = _e.Empty.displayName;
var CommandGroup = React56.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
  _e.Group,
  {
    ref,
    className: cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    ),
    ...props
  }
));
CommandGroup.displayName = _e.Group.displayName;
var CommandSeparator = React56.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
  _e.Separator,
  {
    ref,
    className: cn("-mx-1 h-px bg-border", className),
    ...props
  }
));
CommandSeparator.displayName = _e.Separator.displayName;
var CommandItem = React56.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
  _e.Item,
  {
    ref,
    className: cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    ),
    ...props
  }
));
CommandItem.displayName = _e.Item.displayName;
var CommandShortcut = ({
  className,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
    "span",
    {
      className: cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      ),
      ...props
    }
  );
};
CommandShortcut.displayName = "CommandShortcut";

// src/components/workspace/CommandPalette.tsx
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
function CommandPalette({
  isOpen,
  onOpenChange,
  workspaceId,
  onNavigate,
  onCreatePanel,
  onAction
}) {
  const [searchQuery, setSearchQuery] = (0, import_react33.useState)("");
  const { user } = useAuthStore();
  const { data: recentItems = [] } = trpc.activity.getRecent.useQuery(
    { workspaceId, limit: 10 },
    { enabled: !!workspaceId }
  );
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const commands = [
    // Quick Actions
    {
      id: "quick-task",
      title: "Create Task",
      subtitle: "Add new task to Kanban",
      icon: Plus,
      shortcut: "\u2318N",
      action: () => onCreatePanel?.("KANBAN"),
      group: "Quick Actions",
      keywords: ["task", "todo", "create", "add", "kanban"],
      priority: 10
    },
    {
      id: "quick-note",
      title: "Create Note",
      subtitle: "Start writing immediately",
      icon: FileText,
      shortcut: "\u2318\u21E7N",
      action: () => onCreatePanel?.("NOTES"),
      group: "Quick Actions",
      keywords: ["note", "write", "document", "create"],
      priority: 9
    },
    {
      id: "quick-event",
      title: "Schedule Event",
      subtitle: "Add to calendar",
      icon: Calendar,
      shortcut: "\u2318\u21E7C",
      action: () => onCreatePanel?.("CALENDAR"),
      group: "Quick Actions",
      keywords: ["event", "meeting", "schedule", "calendar"],
      priority: 8
    },
    {
      id: "quick-chat",
      title: "Start Chat",
      subtitle: "Message team members",
      icon: MessageSquare,
      shortcut: "\u2318/",
      action: () => onCreatePanel?.("CHAT"),
      group: "Quick Actions",
      keywords: ["chat", "message", "communicate", "talk"],
      priority: 7
    },
    // AI Assistant
    {
      id: "ai-analyze",
      title: "AI Task Analysis",
      subtitle: "Get insights on your tasks",
      icon: TrendingUp,
      action: () => onAction?.("ai-analyze"),
      group: "AI Assistant",
      keywords: ["ai", "analyze", "insights", "smart", "assistant"],
      priority: 6
    },
    {
      id: "ai-schedule",
      title: "Smart Scheduling",
      subtitle: "AI-powered time blocking",
      icon: Zap,
      action: () => onAction?.("ai-schedule"),
      group: "AI Assistant",
      keywords: ["ai", "schedule", "smart", "time", "block"],
      priority: 5
    },
    {
      id: "ai-suggest",
      title: "Task Suggestions",
      subtitle: "Get AI recommendations",
      icon: Star,
      action: () => onAction?.("ai-suggest"),
      group: "AI Assistant",
      keywords: ["ai", "suggest", "recommend", "smart"],
      priority: 4
    },
    // Navigation
    {
      id: "nav-dashboard",
      title: "Go to Dashboard",
      subtitle: "Overview of all projects",
      icon: LayoutGrid,
      shortcut: "\u23181",
      action: () => onNavigate?.("/dashboard"),
      group: "Navigation",
      keywords: ["dashboard", "home", "overview"],
      priority: 3
    },
    {
      id: "nav-projects",
      title: "View Projects",
      subtitle: "All workspace projects",
      icon: Folder,
      shortcut: "\u23182",
      action: () => onNavigate?.("/projects"),
      group: "Navigation",
      keywords: ["projects", "folders", "workspace"],
      priority: 2
    },
    {
      id: "nav-team",
      title: "Team Members",
      subtitle: "View and manage team",
      icon: Users,
      shortcut: "\u23183",
      action: () => onNavigate?.("/team"),
      group: "Navigation",
      keywords: ["team", "members", "users", "people"],
      priority: 1
    },
    // Panel Management
    {
      id: "panel-layout-save",
      title: "Save Layout",
      subtitle: "Save current panel arrangement",
      icon: Bookmark,
      shortcut: "\u2318S",
      action: () => onAction?.("save-layout"),
      group: "Panel Management",
      keywords: ["save", "layout", "panels", "arrangement"]
    },
    {
      id: "panel-layout-load",
      title: "Load Layout",
      subtitle: "Switch to saved layout",
      icon: PanelsTopLeft,
      shortcut: "\u2318L",
      action: () => onAction?.("load-layout"),
      group: "Panel Management",
      keywords: ["load", "layout", "switch", "panels"]
    },
    {
      id: "panel-focus",
      title: "Focus Mode",
      subtitle: "Hide all but current panel",
      icon: Maximize,
      shortcut: "\u2318\u21E7F",
      action: () => onAction?.("focus-mode"),
      group: "Panel Management",
      keywords: ["focus", "hide", "minimize", "distraction-free"]
    },
    {
      id: "panel-minimize-all",
      title: "Minimize All",
      subtitle: "Collapse all panels",
      icon: Minimize,
      shortcut: "\u2318\u21E7M",
      action: () => onAction?.("minimize-all"),
      group: "Panel Management",
      keywords: ["minimize", "collapse", "hide", "panels"]
    },
    // View Options
    {
      id: "view-grid",
      title: "Grid View",
      subtitle: "Arrange panels in grid",
      icon: Grid3x3,
      action: () => onAction?.("view-grid"),
      group: "View Options",
      keywords: ["grid", "view", "arrange", "layout"]
    },
    {
      id: "view-list",
      title: "List View",
      subtitle: "Vertical panel layout",
      icon: List,
      action: () => onAction?.("view-list"),
      group: "View Options",
      keywords: ["list", "view", "vertical", "layout"]
    },
    // Settings & Account
    {
      id: "settings-workspace",
      title: "Workspace Settings",
      subtitle: "Configure workspace",
      icon: Settings,
      action: () => onNavigate?.("/settings"),
      group: "Settings",
      keywords: ["settings", "configure", "workspace", "options"]
    },
    {
      id: "settings-profile",
      title: "Profile Settings",
      subtitle: "Update your profile",
      icon: User,
      action: () => onNavigate?.("/profile"),
      group: "Settings",
      keywords: ["profile", "account", "user", "settings"]
    },
    {
      id: "logout",
      title: "Sign Out",
      subtitle: "Log out of workspace",
      icon: LogOut,
      action: () => onAction?.("logout"),
      group: "Settings",
      keywords: ["logout", "sign out", "exit", "leave"]
    }
  ];
  const workspaceCommands = workspaces2.map((workspace) => ({
    id: `workspace-${workspace.id}`,
    title: `Switch to ${workspace.name}`,
    subtitle: `${workspace.memberCount || 0} members`,
    icon: Folder,
    action: () => onNavigate?.(`/workspace/${workspace.id}`),
    group: "Workspaces",
    keywords: ["workspace", "switch", workspace.name.toLowerCase()],
    priority: workspace.id === workspaceId ? 10 : 1
  }));
  const recentCommands = recentItems.map((item) => ({
    id: `recent-${item.id}`,
    title: item.title || item.name,
    subtitle: `${item.type} \u2022 ${item.updatedAt}`,
    icon: item.type === "TASK" ? Plus : item.type === "NOTE" ? FileText : Calendar,
    action: () => onNavigate?.(`/${item.type.toLowerCase()}/${item.id}`),
    group: "Recent",
    keywords: ["recent", item.title?.toLowerCase(), item.type.toLowerCase()],
    priority: 5
  }));
  const allCommands = [...commands, ...workspaceCommands, ...recentCommands];
  const filteredCommands = allCommands.filter((command) => {
    if (!searchQuery) return true;
    const query = searchQuery.toLowerCase();
    const titleMatch = command.title.toLowerCase().includes(query);
    const subtitleMatch = command.subtitle?.toLowerCase().includes(query);
    const keywordMatch = command.keywords?.some((keyword) => keyword.includes(query));
    return titleMatch || subtitleMatch || keywordMatch;
  });
  const groupedCommands = filteredCommands.reduce((acc, command) => {
    if (!acc[command.group]) acc[command.group] = [];
    acc[command.group].push(command);
    return acc;
  }, {});
  const sortedGroups = Object.entries(groupedCommands).sort(([a], [b]) => {
    const priority = { "Quick Actions": 1, "AI Assistant": 2, "Recent": 3, "Navigation": 4, "Workspaces": 5, "Panel Management": 6, "View Options": 7, "Settings": 8 };
    return (priority[a] || 9) - (priority[b] || 9);
  });
  (0, import_react33.useEffect)(() => {
    const handleKeyDown = (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        onOpenChange(true);
      }
      if (e.key === "Escape") {
        onOpenChange(false);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [onOpenChange]);
  return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(CommandDialog, { open: isOpen, onOpenChange, children: [
    /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
      CommandInput,
      {
        placeholder: "Search commands, create items, or ask AI...",
        value: searchQuery,
        onValueChange: setSearchQuery
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(CommandList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(CommandEmpty, { children: /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "text-center py-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Command, { className: "w-8 h-8 mx-auto mb-2 text-gray-400" }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "text-gray-500", children: "No commands found." }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "text-sm text-gray-400 mt-1", children: "Try searching for actions, panels, or navigation" })
      ] }) }),
      sortedGroups.map(([group, commands2]) => /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(CommandGroup, { heading: group, children: commands2.sort((a, b) => (b.priority || 0) - (a.priority || 0)).map((command) => /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(
        CommandItem,
        {
          onSelect: () => {
            command.action();
            onOpenChange(false);
          },
          className: "flex items-center gap-3 px-3 py-2 hover:bg-gray-50",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(command.icon, { className: "w-4 h-4 text-gray-500" }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "font-medium text-sm", children: command.title }),
              command.subtitle && /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "text-xs text-gray-500 truncate", children: command.subtitle })
            ] }),
            command.shortcut && /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(CommandShortcut, { className: "text-xs", children: command.shortcut }),
            group === "AI Assistant" && /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Badge, { variant: "secondary", className: "text-xs px-1.5 py-0.5", children: "AI" })
          ]
        },
        command.id
      )) }, group))
    ] })
  ] });
}

// src/components/workspace/KeyboardShortcuts.tsx
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
function KeyboardShortcuts({ isOpen, onOpenChange }) {
  const shortcutGroups = [
    {
      title: "Essential Commands",
      shortcuts: [
        { key: "\u2318K", description: "Open command palette", icon: Command },
        { key: "\u2318N", description: "Quick add task", icon: Plus },
        { key: "\u2318/", description: "Focus search", icon: Search },
        { key: "\u2318\u21E7F", description: "Focus mode", icon: Maximize },
        { key: "\u2318\u21E7A", description: "AI assistant", icon: Zap },
        { key: "\u2318?", description: "Show shortcuts", icon: Keyboard }
      ]
    },
    {
      title: "Panel Creation",
      shortcuts: [
        { key: "\u2318\u21E7N", description: "Create note", icon: FileText },
        { key: "\u2318\u21E7C", description: "Create calendar event", icon: Calendar },
        { key: "\u2318\u21E7M", description: "Start chat", icon: MessageSquare },
        { key: "\u2318\u21E7K", description: "Create kanban board", icon: LayoutGrid }
      ]
    },
    {
      title: "Layout Management",
      shortcuts: [
        { key: "\u2318S", description: "Save layout", icon: Bookmark },
        { key: "\u2318L", description: "Load layout", icon: LayoutGrid },
        { key: "\u2318\u21E7M", description: "Minimize all panels", icon: Minimize },
        { key: "\u2318\u21E7R", description: "Refresh workspace", icon: RefreshCw }
      ]
    },
    {
      title: "Navigation",
      shortcuts: [
        { key: "\u23181", description: "Go to dashboard", icon: LayoutGrid },
        { key: "\u23182", description: "View projects", icon: Folder },
        { key: "\u23183", description: "Team members", icon: User },
        { key: "\u23184", description: "Settings", icon: Settings }
      ]
    },
    {
      title: "Content Actions",
      shortcuts: [
        { key: "\u2318D", description: "Duplicate item", icon: Copy },
        { key: "\u2318\u21E7S", description: "Share item", icon: Share },
        { key: "\u2318\u21E7D", description: "Download/Export", icon: Download },
        { key: "\u2318\u21E7U", description: "Upload file", icon: Upload }
      ]
    },
    {
      title: "Organization",
      shortcuts: [
        { key: "\u2318F", description: "Filter items", icon: Funnel },
        { key: "\u2318\u21E7O", description: "Sort items", icon: ArrowUpNarrowWide },
        { key: "\u2318G", description: "Grid view", icon: Grid3x3 },
        { key: "\u2318\u21E7L", description: "List view", icon: List }
      ]
    },
    {
      title: "Quick Actions",
      shortcuts: [
        { key: "\u2318\u21E7\u2B50", description: "Star/Favorite", icon: Star },
        { key: "\u2318\u21E7A", description: "Archive item", icon: Archive },
        { key: "\u2318\u21E7\u232B", description: "Delete item", icon: Trash },
        { key: "\u2318\u21E7Q", description: "Sign out", icon: LogOut }
      ]
    },
    {
      title: "AI & Analytics",
      shortcuts: [
        { key: "\u2318\u21E7I", description: "AI insights", icon: TrendingUp },
        { key: "\u2318\u21E7T", description: "Task suggestions", icon: Zap },
        { key: "\u2318\u21E7P", description: "Performance analytics", icon: TrendingUp }
      ]
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Dialog, { open: isOpen, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(DialogContent, { className: "max-w-4xl max-h-[80vh] overflow-y-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(DialogHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(DialogTitle, { className: "flex items-center space-x-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Keyboard, { className: "w-5 h-5" }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", { children: "Keyboard Shortcuts" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "mt-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-8", children: shortcutGroups.map((group, groupIndex) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("h3", { className: "text-sm font-semibold text-gray-900 uppercase tracking-wide", children: group.title }),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", { className: "space-y-2", children: group.shortcuts.map((shortcut, shortcutIndex) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(
          "div",
          {
            className: "flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 group",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "flex items-center space-x-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(shortcut.icon, { className: "w-4 h-4 text-gray-500 group-hover:text-gray-700" }),
                /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", { className: "text-sm text-gray-700 group-hover:text-gray-900", children: shortcut.description })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Badge, { variant: "outline", className: "text-xs font-mono", children: shortcut.key })
            ]
          },
          shortcutIndex
        )) })
      ] }, groupIndex)) }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("h4", { className: "text-sm font-semibold text-blue-900 mb-2", children: "Pro Tips" }),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("ul", { className: "text-sm text-blue-800 space-y-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("li", { children: "\u2022 Use \u2318K to access the command palette for any action" }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("li", { children: "\u2022 Hold \u2318 and click to open items in new panels" }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("li", { children: "\u2022 Use \u2318\u21E7F to enter focus mode and eliminate distractions" }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("li", { children: "\u2022 Create custom shortcuts in Settings \u2192 Keyboard" }),
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("li", { children: "\u2022 Most shortcuts work across all panels and contexts" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", { className: "mt-4 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("p", { className: "text-xs text-gray-500", children: [
        "Press ",
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Badge, { variant: "outline", className: "text-xs", children: "ESC" }),
        " to close this dialog"
      ] }) })
    ] })
  ] }) });
}

// src/components/workspace/LayoutManager.tsx
var import_react34 = __toESM(require_react(), 1);

// src/components/ui/alert-dialog.tsx
var React59 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-alert-dialog/dist/index.mjs
var React58 = __toESM(require_react(), 1);
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var ROOT_NAME = "AlertDialog";
var [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [
  createDialogScope
]);
var useDialogScope = createDialogScope();
var AlertDialog = (props) => {
  const { __scopeAlertDialog, ...alertDialogProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Root, { ...dialogScope, ...alertDialogProps, modal: true });
};
AlertDialog.displayName = ROOT_NAME;
var TRIGGER_NAME5 = "AlertDialogTrigger";
var AlertDialogTrigger = React58.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...triggerProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Trigger, { ...dialogScope, ...triggerProps, ref: forwardedRef });
  }
);
AlertDialogTrigger.displayName = TRIGGER_NAME5;
var PORTAL_NAME4 = "AlertDialogPortal";
var AlertDialogPortal = (props) => {
  const { __scopeAlertDialog, ...portalProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Portal2, { ...dialogScope, ...portalProps });
};
AlertDialogPortal.displayName = PORTAL_NAME4;
var OVERLAY_NAME = "AlertDialogOverlay";
var AlertDialogOverlay = React58.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...overlayProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Overlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
  }
);
AlertDialogOverlay.displayName = OVERLAY_NAME;
var CONTENT_NAME5 = "AlertDialogContent";
var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME5);
var Slottable = createSlottable("AlertDialogContent");
var AlertDialogContent = React58.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, children, ...contentProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const contentRef = React58.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const cancelRef = React58.useRef(null);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
      WarningProvider,
      {
        contentName: CONTENT_NAME5,
        titleName: TITLE_NAME,
        docsSlug: "alert-dialog",
        children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(
          Content,
          {
            role: "alertdialog",
            ...dialogScope,
            ...contentProps,
            ref: composedRefs,
            onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {
              event.preventDefault();
              cancelRef.current?.focus({ preventScroll: true });
            }),
            onPointerDownOutside: (event) => event.preventDefault(),
            onInteractOutside: (event) => event.preventDefault(),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Slottable, { children }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(DescriptionWarning, { contentRef })
            ]
          }
        ) })
      }
    );
  }
);
AlertDialogContent.displayName = CONTENT_NAME5;
var TITLE_NAME = "AlertDialogTitle";
var AlertDialogTitle = React58.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...titleProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Title, { ...dialogScope, ...titleProps, ref: forwardedRef });
  }
);
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "AlertDialogDescription";
var AlertDialogDescription = React58.forwardRef((props, forwardedRef) => {
  const { __scopeAlertDialog, ...descriptionProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Description, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
var ACTION_NAME = "AlertDialogAction";
var AlertDialogAction = React58.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...actionProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Close, { ...dialogScope, ...actionProps, ref: forwardedRef });
  }
);
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel";
var AlertDialogCancel = React58.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...cancelProps } = props;
    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const ref = useComposedRefs(forwardedRef, cancelRef);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Close, { ...dialogScope, ...cancelProps, ref });
  }
);
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning = ({ contentRef }) => {
  const MESSAGE = `\`${CONTENT_NAME5}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${CONTENT_NAME5}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME5}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
  React58.useEffect(() => {
    const hasDescription = document.getElementById(
      contentRef.current?.getAttribute("aria-describedby")
    );
    if (!hasDescription) console.warn(MESSAGE);
  }, [MESSAGE, contentRef]);
  return null;
};
var Root25 = AlertDialog;
var Trigger22 = AlertDialogTrigger;
var Portal23 = AlertDialogPortal;
var Overlay2 = AlertDialogOverlay;
var Content25 = AlertDialogContent;
var Action2 = AlertDialogAction;
var Cancel = AlertDialogCancel;
var Title2 = AlertDialogTitle;
var Description2 = AlertDialogDescription;

// src/components/ui/alert-dialog.tsx
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var AlertDialog2 = Root25;
var AlertDialogTrigger2 = Trigger22;
var AlertDialogPortal2 = Portal23;
var AlertDialogOverlay2 = React59.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  Overlay2,
  {
    className: cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props,
    ref
  }
));
AlertDialogOverlay2.displayName = Overlay2.displayName;
var AlertDialogContent2 = React59.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(AlertDialogPortal2, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AlertDialogOverlay2, {}),
  /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
    Content25,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      ),
      ...props
    }
  )
] }));
AlertDialogContent2.displayName = Content25.displayName;
var AlertDialogHeader = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ),
    ...props
  }
);
AlertDialogHeader.displayName = "AlertDialogHeader";
var AlertDialogFooter = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
AlertDialogFooter.displayName = "AlertDialogFooter";
var AlertDialogTitle2 = React59.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  Title2,
  {
    ref,
    className: cn("text-lg font-semibold", className),
    ...props
  }
));
AlertDialogTitle2.displayName = Title2.displayName;
var AlertDialogDescription2 = React59.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  Description2,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
AlertDialogDescription2.displayName = Description2.displayName;
var AlertDialogAction2 = React59.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  Action2,
  {
    ref,
    className: cn(buttonVariants(), className),
    ...props
  }
));
AlertDialogAction2.displayName = Action2.displayName;
var AlertDialogCancel2 = React59.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
  Cancel,
  {
    ref,
    className: cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    ),
    ...props
  }
));
AlertDialogCancel2.displayName = Cancel.displayName;

// src/components/workspace/LayoutManager.tsx
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
function LayoutManager({ workspaceId, panels, className }) {
  const [saveDialogOpen, setSaveDialogOpen] = (0, import_react34.useState)(false);
  const [loadDialogOpen, setLoadDialogOpen] = (0, import_react34.useState)(false);
  const [saveForm, setSaveForm] = (0, import_react34.useState)({
    name: "",
    description: "",
    isDefault: false
  });
  const {
    presets,
    savePreset,
    loadPreset,
    deletePreset,
    setDefaultPreset,
    performAutoSave,
    isSaving,
    isLoading,
    isDeleting,
    isSettingDefault,
    isAutoSaving,
    refetchPresets
  } = useLayoutPersistence({
    workspaceId,
    panels,
    enabled: true
  });
  const handleSavePreset = () => {
    if (!saveForm.name.trim()) return;
    savePreset(saveForm.name.trim(), saveForm.description.trim() || void 0, saveForm.isDefault);
    setSaveForm({ name: "", description: "", isDefault: false });
    setSaveDialogOpen(false);
  };
  const handleLoadPreset = (presetId) => {
    loadPreset(presetId);
    setLoadDialogOpen(false);
  };
  const handleDeletePreset = (presetId) => {
    deletePreset(presetId);
  };
  const handleSetDefault = (presetId) => {
    setDefaultPreset(presetId);
  };
  const handleManualSave = () => {
    performAutoSave();
  };
  const formatDate3 = (date) => {
    return new Date(date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
  };
  const hasUnsavedChanges = panels.length > 0;
  return /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: cn("flex items-center gap-2", className), children: [
    isAutoSaving && /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex items-center gap-1 text-xs text-gray-500", children: [
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(LoaderCircle, { className: "w-3 h-3 animate-spin" }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { children: "Saving..." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(Dialog, { open: saveDialogOpen, onOpenChange: setSaveDialogOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
        Button,
        {
          variant: "outline",
          size: "sm",
          disabled: panels.length === 0,
          className: "flex items-center gap-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Download, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { className: "hidden sm:inline", children: "Save Layout" })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(DialogContent, { className: "sm:max-w-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(DialogHeader, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogTitle, { children: "Save Layout Preset" }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogDescription, { children: "Save your current panel arrangement as a reusable layout preset." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Label2, { htmlFor: "preset-name", children: "Preset Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
              FloatingInput,
              {
                id: "preset-name",
                label: "Preset Name",
                value: saveForm.name,
                onChange: (e) => setSaveForm((prev) => ({ ...prev, name: e.target.value })),
                className: "mt-1"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Label2, { htmlFor: "preset-description", children: "Description (Optional)" }),
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
              Textarea,
              {
                id: "preset-description",
                value: saveForm.description,
                onChange: (e) => setSaveForm((prev) => ({ ...prev, description: e.target.value })),
                placeholder: "Describe this layout arrangement...",
                className: "mt-1",
                rows: 3
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
              "input",
              {
                type: "checkbox",
                id: "is-default",
                checked: saveForm.isDefault,
                onChange: (e) => setSaveForm((prev) => ({ ...prev, isDefault: e.target.checked })),
                className: "rounded border-gray-300"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Label2, { htmlFor: "is-default", className: "text-sm", children: "Set as default layout for this workspace" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(DialogFooter, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
            Button,
            {
              variant: "outline",
              onClick: () => setSaveDialogOpen(false),
              children: "Cancel"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
            Button,
            {
              onClick: handleSavePreset,
              disabled: !saveForm.name.trim() || isSaving,
              children: [
                isSaving ? /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(LoaderCircle, { className: "w-4 h-4 mr-2 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Save, { className: "w-4 h-4 mr-2" }),
                "Save Preset"
              ]
            }
          )
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(Dialog, { open: loadDialogOpen, onOpenChange: setLoadDialogOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
        Button,
        {
          variant: "outline",
          size: "sm",
          disabled: presets.length === 0,
          className: "flex items-center gap-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Upload, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { className: "hidden sm:inline", children: "Load Layout" })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(DialogContent, { className: "sm:max-w-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(DialogHeader, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogTitle, { children: "Load Layout Preset" }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogDescription, { children: "Choose a saved layout to restore your panel arrangement." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { className: "space-y-3 max-h-96 overflow-y-auto", children: presets.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "text-center py-8 text-gray-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(FolderOpen, { className: "w-12 h-12 mx-auto mb-3 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("p", { children: "No saved layout presets yet." }),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("p", { className: "text-sm", children: "Save your current layout to get started." })
        ] }) : presets.map((preset) => /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
          "div",
          {
            className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex-1 min-w-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("h4", { className: "font-medium truncate", children: preset.name }),
                  preset.isDefault && /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(Badge, { variant: "secondary", className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Star, { className: "w-3 h-3" }),
                    "Default"
                  ] })
                ] }),
                preset.description && /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("p", { className: "text-sm text-gray-600 truncate mt-1", children: preset.description }),
                /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("p", { className: "text-xs text-gray-500 mt-1", children: [
                  "Created ",
                  formatDate3(preset.createdAt)
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)("div", { className: "flex items-center gap-1 ml-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => handleLoadPreset(preset.id),
                    disabled: isLoading,
                    className: "text-blue-600 hover:text-blue-700",
                    children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(LoaderCircle, { className: "w-4 h-4 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Upload, { className: "w-4 h-4" })
                  }
                ),
                !preset.isDefault && /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(import_jsx_runtime70.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: () => handleSetDefault(preset.id),
                      disabled: isSettingDefault,
                      className: "text-orange-600 hover:text-orange-700",
                      title: "Set as default",
                      children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Star, { className: "w-4 h-4" })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(AlertDialog2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(AlertDialogTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
                      Button,
                      {
                        variant: "ghost",
                        size: "sm",
                        className: "text-red-600 hover:text-red-700",
                        children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Trash2, { className: "w-4 h-4" })
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(AlertDialogContent2, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(AlertDialogHeader, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(AlertDialogTitle2, { children: "Delete Layout Preset" }),
                        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(AlertDialogDescription2, { children: [
                          'Are you sure you want to delete "',
                          preset.name,
                          '"? This action cannot be undone.'
                        ] })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(AlertDialogFooter, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(AlertDialogCancel2, { children: "Cancel" }),
                        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
                          AlertDialogAction2,
                          {
                            onClick: () => handleDeletePreset(preset.id),
                            className: "bg-red-600 hover:bg-red-700",
                            children: "Delete"
                          }
                        )
                      ] })
                    ] })
                  ] })
                ] })
              ] })
            ]
          },
          preset.id
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
          Button,
          {
            variant: "outline",
            onClick: () => setLoadDialogOpen(false),
            children: "Close"
          }
        ) })
      ] })
    ] })
  ] });
}

// src/components/workspace/WorkspaceHeaderConsolidated.tsx
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var PANEL_TYPES = [
  {
    type: "KANBAN",
    icon: Columns2,
    label: "Kanban",
    description: "Task management with drag-and-drop columns",
    defaultTitle: "New Kanban"
  },
  {
    type: "CHAT",
    icon: MessageCircle,
    label: "Chat",
    description: "Team communication and messaging",
    defaultTitle: "Team Chat"
  },
  {
    type: "AI_CHAT",
    icon: Bot,
    label: "AI Assistant",
    description: "Gemini 2.5 Flash AI-powered assistant",
    defaultTitle: "AI Assistant"
  },
  {
    type: "CALENDAR",
    icon: Calendar,
    label: "Calendar",
    description: "Schedule and event management",
    defaultTitle: "Calendar"
  },
  {
    type: "NOTES",
    icon: StickyNote,
    label: "Notes",
    description: "Quick notes and documentation",
    defaultTitle: "Notes"
  },
  {
    type: "EMAIL",
    icon: Mail,
    label: "Email",
    description: "Email management and communication",
    defaultTitle: "Email"
  },
  {
    type: "CONTACTS",
    icon: Users,
    label: "Contacts",
    description: "Contact and customer management",
    defaultTitle: "Contacts"
  }
];
function WorkspaceHeaderConsolidated({
  workspaceId,
  panels = [],
  currentPanel,
  onNavigate,
  onCreatePanel,
  onAction,
  className
}) {
  const [isCommandPaletteOpen, setIsCommandPaletteOpen] = (0, import_react35.useState)(false);
  const [isKeyboardShortcutsOpen, setIsKeyboardShortcutsOpen] = (0, import_react35.useState)(false);
  const [isCustomPanelOpen, setIsCustomPanelOpen] = (0, import_react35.useState)(false);
  const [isOnline, setIsOnline] = (0, import_react35.useState)(navigator.onLine);
  const [searchQuery, setSearchQuery] = (0, import_react35.useState)("");
  const [selectedType, setSelectedType] = (0, import_react35.useState)(null);
  const [customTitle, setCustomTitle] = (0, import_react35.useState)("");
  const { user } = useAuthStore();
  const utils = trpc.useUtils();
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const { data: currentWorkspace } = trpc.workspace.findById.useQuery(
    { id: workspaceId },
    { enabled: !!workspaceId }
  );
  const { data: notifications2 = [] } = trpc.notification.list.useQuery(
    { workspaceId, unreadOnly: true },
    { enabled: !!workspaceId }
  );
  const { data: kanbans2 = [] } = trpc.kanban.list.useQuery({ workspaceId });
  const { data: chatThreads = [] } = trpc.chat.listThreads.useQuery({ workspaceId });
  const createPanel = trpc.panel.create.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      setIsCustomPanelOpen(false);
      setSelectedType(null);
      setCustomTitle("");
    }
  });
  const toggleMinimizeAll = trpc.panel.toggleMinimizeAll.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  const toggleLockAll = trpc.panel.toggleLockAll.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  const deleteAll = trpc.panel.deleteAll.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  const exitAllFullscreen = trpc.panel.exitAllFullscreen.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  (0, import_react35.useEffect)(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);
    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);
  (0, import_react35.useEffect)(() => {
    const handleKeyDown = (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        setIsCommandPaletteOpen(true);
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "n") {
        e.preventDefault();
        handleQuickCreate("KANBAN");
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "?") {
        e.preventDefault();
        setIsKeyboardShortcutsOpen(true);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, []);
  const handleQuickCreate = (type) => {
    const panelType = PANEL_TYPES.find((p2) => p2.type === type);
    if (!panelType) return;
    let data2 = { workspaceId };
    let size = { width: 4, height: 3 };
    if (type === "KANBAN") {
      size = { width: 8, height: 6 };
      data2 = { workspaceId, createNew: true };
    } else if (type === "CHAT") {
      size = { width: 4, height: 5 };
      data2 = { workspaceId, createNew: true };
    } else if (type === "NOTES") {
      size = { width: 6, height: 5 };
      data2 = { workspaceId, createNew: true };
    }
    createPanel.mutate({
      type,
      title: panelType.defaultTitle,
      workspaceId,
      position: { x: 0, y: 0 },
      size,
      data: data2
    });
    onCreatePanel?.(type);
  };
  const handleCustomCreate = () => {
    if (!selectedType) return;
    const panelType = PANEL_TYPES.find((p2) => p2.type === selectedType);
    if (!panelType) return;
    const title = customTitle.trim() || panelType.defaultTitle;
    let data2 = { workspaceId, createNew: true };
    let size = { width: 4, height: 3 };
    if (selectedType === "KANBAN") {
      size = { width: 8, height: 6 };
    } else if (selectedType === "CHAT") {
      size = { width: 4, height: 5 };
    } else if (selectedType === "NOTES") {
      size = { width: 6, height: 5 };
    }
    createPanel.mutate({
      type: selectedType,
      title,
      workspaceId,
      position: { x: 0, y: 0 },
      size,
      data: data2
    });
  };
  const handleMinimizeAll = () => {
    const hasMinimized = panels.some((panel) => panel.is_minimized);
    toggleMinimizeAll.mutate({
      workspaceId,
      minimize: !hasMinimized
    });
  };
  const handleLockAll = () => {
    const hasLocked = panels.some((panel) => panel.is_locked);
    toggleLockAll.mutate({
      workspaceId,
      lock: !hasLocked
    });
  };
  const handleDeleteAll = () => {
    if (confirm(`Delete all ${panels.length} panels in this workspace?`)) {
      deleteAll.mutate({ workspaceId });
    }
  };
  const handleExitAllFullscreen = () => {
    exitAllFullscreen.mutate({ workspaceId });
  };
  const hasMinimizedPanels = panels.some((panel) => panel.is_minimized);
  const hasLockedPanels = panels.some((panel) => panel.is_locked);
  const hasFullscreenPanels = panels.some((panel) => {
    try {
      const panelData = typeof panel.data === "string" ? JSON.parse(panel.data) : panel.data;
      return panelData?.isFullscreen === true;
    } catch {
      return false;
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("header", { className: cn(
    "h-16 bg-white border-b border-gray-200 px-4 flex items-center justify-between shadow-sm",
    className
  ), children: [
    /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenu2, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Button, { variant: "ghost", className: "h-10 px-3 hover:bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Folder, { className: "w-4 h-4 text-krushr-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: "font-semibold text-gray-900 max-w-32 truncate", children: currentWorkspace?.name || "Workspace" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ChevronDown, { className: "w-4 h-4 text-gray-500" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuContent2, { align: "start", className: "w-64", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuLabel2, { children: "Switch Workspace" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          workspaces2.map((workspace) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
            DropdownMenuItem2,
            {
              onClick: () => onNavigate?.(`/workspace/${workspace.id}`),
              className: "flex items-center space-x-3 p-3",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Folder, { className: "w-4 h-4 text-gray-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "font-medium text-sm truncate", children: workspace.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "text-xs text-gray-500", children: [
                    workspace.memberCount || 0,
                    " members"
                  ] })
                ] }),
                workspace.id === workspaceId && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Current" })
              ]
            },
            workspace.id
          )),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuItem2, { onClick: () => onNavigate?.("/workspaces/new"), children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
            "Create Workspace"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
        LayoutManager,
        {
          workspaceId,
          panels
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "flex-1 max-w-2xl mx-8", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
        Input,
        {
          placeholder: "Search workspace or type \u2318K for commands...",
          value: searchQuery,
          onChange: (e) => setSearchQuery(e.target.value),
          className: "pl-10 pr-20 h-9 bg-gray-50 border-gray-200 focus:bg-white focus:border-krushr-primary",
          onFocus: () => setIsCommandPaletteOpen(true)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("kbd", { className: "px-1.5 py-0.5 text-xs font-medium bg-gray-100 border border-gray-200 rounded", children: "\u2318K" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-1", children: [
        PANEL_TYPES.slice(0, 4).map(({ type, icon: Icon, label }) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Tooltip, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            Button,
            {
              variant: "outline",
              size: "sm",
              onClick: () => handleQuickCreate(type),
              disabled: createPanel.isLoading,
              className: "h-8 w-8 p-0 hover:bg-krushr-secondary hover:text-white",
              children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Icon, { className: "w-4 h-4" })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("span", { className: "text-xs", children: [
            "Add ",
            label
          ] }) })
        ] }, type)),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenu2, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Button, { variant: "outline", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Plus, { className: "w-4 h-4" }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuContent2, { align: "end", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuLabel2, { children: "More Panels" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
            PANEL_TYPES.slice(4).map(({ type, icon: Icon, label }) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
              DropdownMenuItem2,
              {
                onClick: () => handleQuickCreate(type),
                className: "flex items-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Icon, { className: "w-4 h-4" }),
                  label
                ]
              },
              type
            )),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuItem2, { onClick: () => setIsCustomPanelOpen(true), children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Settings2, { className: "w-4 h-4 mr-2" }),
              "Custom Panel..."
            ] })
          ] })
        ] })
      ] }),
      panels.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenu2, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Button, { variant: "outline", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Settings2, { className: "w-4 h-4" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuContent2, { align: "end", className: "w-48", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuLabel2, { children: "Panel Controls" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            DropdownMenuItem2,
            {
              onClick: handleMinimizeAll,
              disabled: toggleMinimizeAll.isPending,
              className: "flex items-center gap-2",
              children: hasMinimizedPanels ? /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_jsx_runtime71.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Maximize2, { className: "w-4 h-4" }),
                "Restore All"
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_jsx_runtime71.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Minimize2, { className: "w-4 h-4" }),
                "Minimize All"
              ] })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            DropdownMenuItem2,
            {
              onClick: handleLockAll,
              disabled: toggleLockAll.isPending,
              className: "flex items-center gap-2",
              children: hasLockedPanels ? /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_jsx_runtime71.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(LockOpen, { className: "w-4 h-4" }),
                "Unlock All"
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_jsx_runtime71.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Lock, { className: "w-4 h-4" }),
                "Lock All"
              ] })
            }
          ),
          hasFullscreenPanels && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
            DropdownMenuItem2,
            {
              onClick: handleExitAllFullscreen,
              disabled: exitAllFullscreen.isPending,
              className: "flex items-center gap-2",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Minimize2, { className: "w-4 h-4" }),
                "Exit All Fullscreen"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
            DropdownMenuItem2,
            {
              onClick: handleDeleteAll,
              disabled: deleteAll.isPending,
              className: "flex items-center gap-2 text-red-600 hover:text-red-700 hover:bg-red-50",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Trash2, { className: "w-4 h-4" }),
                "Delete All Panels"
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
          Button,
          {
            size: "sm",
            onClick: () => setIsCommandPaletteOpen(true),
            className: "h-8 w-8 p-0 bg-krushr-info hover:bg-krushr-info/90 text-white",
            children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Command, { className: "w-4 h-4" })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "font-medium", children: "Command Palette" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "text-xs opacity-70", children: "\u2318K" })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
          Button,
          {
            size: "sm",
            onClick: () => onAction?.("ai-assistant"),
            className: "h-8 w-8 p-0 bg-krushr-success hover:bg-krushr-success/90 text-white",
            children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Zap, { className: "w-4 h-4" })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "font-medium", children: "AI Assistant" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "text-xs opacity-70", children: "\u2318\u21E7A" })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: isOnline ? /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Wifi, { className: "w-4 h-4 text-krushr-success" }) : /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Wifi, { className: "w-4 h-4 text-krushr-warning" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: "text-xs", children: isOnline ? "Connected" : "Offline" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0 relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Bell, { className: "w-4 h-4" }),
          notifications2.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Badge, { className: "absolute -top-1 -right-1 h-4 w-4 p-0 text-xs bg-krushr-secondary", children: notifications2.length > 9 ? "9+" : notifications2.length })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: "text-xs", children: notifications2.length > 0 ? `${notifications2.length} new notifications` : "No notifications" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenu2, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Ellipsis, { className: "w-4 h-4" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuContent2, { align: "end", className: "w-56", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuLabel2, { children: "Global Controls" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuItem2, { onClick: () => onAction?.("save-layout"), children: [
            "Save Layout",
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuShortcut, { children: "\u2318S" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuItem2, { onClick: () => onAction?.("load-layout"), children: [
            "Load Layout",
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuShortcut, { children: "\u2318L" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuItem2, { onClick: () => onAction?.("focus-mode"), children: [
            "Focus Mode",
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuShortcut, { children: "\u2318\u21E7F" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuItem2, { onClick: () => setIsKeyboardShortcutsOpen(true), children: [
            "Keyboard Shortcuts",
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuShortcut, { children: "\u2318?" })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-8 w-8 p-0",
            onClick: () => onNavigate?.("/settings"),
            children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Settings, { className: "w-4 h-4" })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: "text-xs", children: "Settings" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenu2, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Button, { variant: "ghost", className: "h-8 w-8 p-0 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(Avatar, { className: "h-8 w-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(AvatarImage, { src: user?.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(AvatarFallback, { className: "text-xs bg-krushr-primary text-white", children: user?.name?.charAt(0)?.toUpperCase() || "U" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DropdownMenuContent2, { align: "end", className: "w-56", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuLabel2, { children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex flex-col space-y-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm font-medium", children: user?.name || "User" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-xs text-gray-500", children: user?.email })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuItem2, { onClick: () => onNavigate?.("/profile"), children: "Profile Settings" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuItem2, { onClick: () => onNavigate?.("/preferences"), children: "Preferences" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuSeparator2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DropdownMenuItem2, { onClick: () => onAction?.("logout"), children: "Sign Out" })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Dialog, { open: isCustomPanelOpen, onOpenChange: setIsCustomPanelOpen, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DialogContent, { className: "sm:max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(DialogHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DialogTitle, { children: "Create Custom Panel" }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(DialogDescription, { children: "Choose a panel type and customize its settings." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Panel Type" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "grid grid-cols-2 gap-2", children: PANEL_TYPES.map(({ type, icon: Icon, label, description }) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
            "button",
            {
              onClick: () => setSelectedType(type),
              className: cn(
                "p-3 border rounded-lg text-left transition-all",
                selectedType === type ? "border-krushr-primary bg-krushr-primary/5" : "border-gray-200 hover:border-gray-300"
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center gap-2 mb-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Icon, { className: "w-4 h-4 text-krushr-secondary" }),
                  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("span", { className: "font-medium text-sm", children: label })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-xs text-gray-600", children: description })
              ]
            },
            type
          )) })
        ] }),
        selectedType && /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Panel Title" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            FloatingInput,
            {
              label: "Panel Title",
              placeholder: PANEL_TYPES.find((p2) => p2.type === selectedType)?.defaultTitle,
              value: customTitle,
              onChange: (e) => setCustomTitle(e.target.value)
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex justify-end gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            Button,
            {
              variant: "outline",
              onClick: () => setIsCustomPanelOpen(false),
              children: "Cancel"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
            Button,
            {
              onClick: handleCustomCreate,
              disabled: !selectedType || createPanel.isLoading,
              className: "bg-krushr-primary hover:bg-krushr-primary/90",
              children: [
                createPanel.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(LoaderCircle, { className: "w-4 h-4 mr-2 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
                "Create Panel"
              ]
            }
          )
        ] })
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
      CommandPalette,
      {
        isOpen: isCommandPaletteOpen,
        onOpenChange: setIsCommandPaletteOpen,
        workspaceId,
        onNavigate,
        onCreatePanel,
        onAction
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
      KeyboardShortcuts,
      {
        isOpen: isKeyboardShortcutsOpen,
        onOpenChange: setIsKeyboardShortcutsOpen
      }
    )
  ] }) });
}

// src/components/workspace/SimpleEnhancedHeader.tsx
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
function SimpleEnhancedHeader({ workspaceId }) {
  return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("header", { className: "h-16 bg-white border-b border-gray-200 px-4 flex items-center justify-between shadow-sm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center space-x-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "text-lg font-semibold text-blue-600", children: "\u{1F680} Enhanced Workspace Header" }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("button", { className: "px-3 py-1 bg-blue-500 text-white rounded text-sm", children: "Quick Add" }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("button", { className: "px-3 py-1 bg-green-500 text-white rounded text-sm", children: "Command \u2318K" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "flex-1 max-w-md mx-8", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
      "input",
      {
        type: "text",
        placeholder: "Search workspace or press \u2318K...",
        className: "w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center space-x-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("button", { className: "px-3 py-1 bg-gray-500 text-white rounded text-sm", children: "Sync" }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("button", { className: "px-3 py-1 bg-purple-500 text-white rounded text-sm", children: "Notifications" }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm", children: "U" })
    ] })
  ] });
}

// src/pages/Workspace.tsx
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
function Workspace() {
  const navigate = useNavigate();
  const { workspaceId } = useParams();
  const { data: workspaces2, isLoading } = trpc.workspace.list.useQuery(void 0, {
    staleTime: 3e5,
    // Cache for 5 minutes
    cacheTime: 6e5
    // Keep in cache for 10 minutes
  });
  const activeWorkspace = workspaceId ? workspaces2?.find((w) => w.id === workspaceId) : workspaces2?.find((w) => w._count.projects > 0 || w._count.teams > 0 || w._count.kanbans > 0) || workspaces2?.[0];
  const { data: panels = [] } = trpc.panel.list.useQuery(
    { workspaceId: activeWorkspace?.id ?? "" },
    {
      enabled: !!activeWorkspace?.id,
      staleTime: 6e4,
      // Cache for 1 minute
      cacheTime: 3e5
      // Keep in cache for 5 minutes
    }
  );
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(LoaderCircle, { className: "w-8 h-8 mx-auto mb-2 animate-spin text-krushr-primary" }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-gray-600", children: "Loading workspace..." })
    ] }) }) });
  }
  if (!activeWorkspace) {
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex flex-col min-h-full", style: { backgroundColor: "hsl(0deg 0% 96.47%)" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(SimpleEnhancedHeader, { workspaceId: "demo-workspace-id" }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "flex items-center justify-center flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("h2", { className: "text-xl font-semibold text-gray-900 mb-2", children: "No Workspace Found" }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-gray-600", children: "You need to create or join a workspace to use the panel system." }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-sm text-gray-500 mt-2", children: "(Enhanced header shown above for testing)" })
      ] }) })
    ] }) });
  }
  const handleNavigate = (path) => {
    console.log("Navigate to:", path);
    navigate(path);
  };
  const handleCreatePanel = (type) => {
    console.log("Create panel:", type);
  };
  const handleAction = (action) => {
    console.log("Action:", action);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex flex-col min-h-full", style: { backgroundColor: "hsl(0deg 0% 96.47%)" }, children: [
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      WorkspaceHeaderConsolidated,
      {
        workspaceId: activeWorkspace.id,
        panels,
        onNavigate: handleNavigate,
        onCreatePanel: handleCreatePanel,
        onAction: handleAction
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      PanelWorkspace,
      {
        workspaceId: activeWorkspace.id,
        className: "flex-1"
      }
    )
  ] }) });
}

// src/App.tsx
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
function ProtectedRoute({ children }) {
  const { isAuthenticated, isLoading } = useAuthStore();
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "flex items-center justify-center min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-2" }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("p", { children: "Loading..." })
    ] }) });
  }
  return isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_jsx_runtime74.Fragment, { children }) : /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Navigate, { to: "/login", replace: true });
}
function App() {
  const { hydrate } = useAuthStore();
  (0, import_react36.useEffect)(() => {
    hydrate().catch(console.error);
  }, [hydrate]);
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(TRPCProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(HashRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(Routes, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Navigate, { to: "/workspace", replace: true }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/test", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Test, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/login", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Login, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/register", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Register, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/pricing", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Pricing_default, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/home", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Home, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/board", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Board, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/calendar", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Calendar3, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/notes", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Notes, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/chat", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Chat, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/teams", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Teams, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/projects", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Projects, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/workspace", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Workspace, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/workspace/:workspaceId", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Workspace, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/workspaces/new", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Workspace, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/profile", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Profile, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Route, { path: "/settings", element: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Settings4, {}) }) })
  ] }) }) });
}

// src/main.tsx
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
function preventDuplicateCustomElements() {
  if (typeof window !== "undefined" && window.customElements) {
    const originalDefine = window.customElements.define.bind(window.customElements);
    const definedElements = /* @__PURE__ */ new Set();
    try {
      const existingElements = Object.getOwnPropertyNames(window.customElements);
      existingElements.forEach((name) => definedElements.add(name));
    } catch (e) {
      const commonElements = ["mce-autosize-textarea", "mce-editor", "tinymce-editor"];
      commonElements.forEach((name) => {
        if (window.customElements.get(name)) {
          definedElements.add(name);
        }
      });
    }
    window.customElements.define = function(name, constructor, options) {
      if (definedElements.has(name) || window.customElements.get(name)) {
        console.warn(`\u26A0\uFE0F Custom element '${name}' already defined, skipping duplicate registration`);
        return;
      }
      try {
        const result = originalDefine(name, constructor, options);
        definedElements.add(name);
        return result;
      } catch (error) {
        if (error instanceof Error && (error.message.includes("already been defined") || error.message.includes("already defined") || error.name === "NotSupportedError")) {
          console.warn(`\u26A0\uFE0F Custom element '${name}' registration prevented:`, error.message);
          definedElements.add(name);
          return;
        }
        if (isDevelopment()) {
          console.warn(`\u26A0\uFE0F Custom element '${name}' error suppressed in dev:`, error.message);
          return;
        }
        console.error(`\u274C Failed to define custom element '${name}':`, error);
        throw error;
      }
    };
    const originalAddEventListener = window.addEventListener;
    window.addEventListener = function(type, listener, options) {
      if (type === "error") {
        const wrappedListener = function(event) {
          if (event.error && event.error.message && event.error.message.includes("already been defined")) {
            console.warn("\u26A0\uFE0F Prevented custom element duplicate registration error:", event.error.message);
            event.preventDefault();
            return;
          }
          if (typeof listener === "function") {
            return listener.call(this, event);
          }
        };
        return originalAddEventListener.call(this, type, wrappedListener, options);
      }
      return originalAddEventListener.call(this, type, listener, options);
    };
    window.addEventListener("error", (event) => {
      if (event.error && event.error.message && event.error.message.includes("already been defined")) {
        console.warn("\u26A0\uFE0F Global error handler caught custom element duplicate registration:", event.error.message);
        event.preventDefault();
        event.stopPropagation();
        return false;
      }
    }, true);
    if (window.WebComponents && window.WebComponents.ready) {
      console.warn("\u26A0\uFE0F WebComponents polyfill detected - enhanced error suppression active");
    }
  }
}
preventDuplicateCustomElements();
window.addEventListener("error", (event) => {
  const message = event.error?.message || event.message || "";
  if (message.includes("mce-autosize-textarea") || message.includes("already been defined") || message.includes("custom element") || event.filename?.includes("webcomponents") || event.filename?.includes("overlay_bundle")) {
    console.warn("\u26A0\uFE0F Suppressed webcomponents error:", message);
    event.preventDefault();
    event.stopPropagation();
    return false;
  }
}, true);
function isDevelopment() {
  return window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1" || window.location.hostname.startsWith("192.168.") || window.location.hostname.startsWith("10.") || window.location.port !== "" || window.location.protocol === "http:" || true;
}
async function initServiceWorker() {
  if (!("serviceWorker" in navigator)) {
    console.log("\u{1F6AB} Service Worker not supported by browser");
    return;
  }
  try {
    const registrations = await navigator.serviceWorker.getRegistrations();
    for (let registration2 of registrations) {
      await registration2.unregister();
      console.log("\u{1F5D1}\uFE0F Unregistered existing service worker:", registration2.scope);
    }
    if (isDevelopment()) {
      console.log("\u{1F6AB} Service Worker registration skipped (development mode)");
      console.log("\u{1F4CD} Environment detected:", {
        hostname: window.location.hostname,
        port: window.location.port,
        protocol: window.location.protocol,
        nodeEnv: "development"
      });
      return;
    }
    const registration = await navigator.serviceWorker.register("/sw.js", {
      scope: "/",
      updateViaCache: "none"
      // Always check for updates
    });
    console.log("\u2705 SW registered:", registration.scope);
    registration.addEventListener("updatefound", () => {
      const newWorker = registration.installing;
      if (newWorker) {
        console.log("\u{1F504} SW update found, installing...");
        newWorker.addEventListener("statechange", () => {
          if (newWorker.state === "installed" && navigator.serviceWorker.controller) {
            console.log("\u{1F504} SW update ready - consider refreshing page");
          }
        });
      }
    });
  } catch (error) {
    console.error("\u274C SW registration failed:", error);
  }
}
window.addEventListener("load", initServiceWorker);
var root = (0, import_client.createRoot)(document.getElementById("app"));
root.render(
  /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(CriticalErrorBoundary, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(App, {}),
    /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Toaster, { position: "top-right", richColors: true })
  ] })
);
/*! Bundled license information:

react-router/dist/development/chunk-QMGIS6GS.mjs:
react-router/dist/development/index.mjs:
  (**
   * react-router v7.6.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=/main.js.map
