import {
  Close,
  Combination_default,
  Content,
  Description,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
  FocusScope,
  Item,
  KanbanBoard,
  Overlay,
  Portal as Portal2,
  Progress,
  Root as Root2,
  Root2 as Root3,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
  Title,
  Trigger,
  WarningProvider,
  __awaiter,
  confetti_module_default,
  createCollection,
  createDialogScope,
  createRovingFocusGroupScope,
  differenceInCalendarMonths,
  differenceInMilliseconds,
  formatDistanceToNow,
  getRoundingMethod,
  hideOthers,
  isCelebrationEnabled,
  setCelebrationEnabled,
  useFocusGuards,
  usePrevious
} from "/chunks/chunk-UXVSC6KF.js";
import {
  NotesPanel_default,
  useUIStore
} from "/chunks/chunk-47NPYJUB.js";
import {
  Toaster,
  toast
} from "/chunks/chunk-26AQZRFX.js";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  addDays,
  endOfWeek,
  formatDateShort,
  formatDateTime,
  isToday,
  shouldProcessHotkey
} from "/chunks/chunk-EDY2OB7Z.js";
import {
  Anchor,
  Arrow,
  Badge,
  Branch,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CompactTaskModal,
  Content as Content2,
  DismissableLayer,
  FloatingInput,
  Portal,
  Priority,
  RichTextEditor,
  Root,
  Root2 as Root22,
  VisuallyHidden,
  addMonths,
  constructFrom,
  constructNow,
  createPopperScope,
  differenceInCalendarDays,
  enUS,
  endOfMonth,
  format,
  getISOWeek,
  getTimezoneOffsetInMilliseconds,
  getWeek,
  isDate,
  isSameDay,
  isSameMonth,
  millisecondsInHour,
  millisecondsInMinute,
  millisecondsInWeek,
  startOfDay,
  startOfISOWeek,
  startOfMonth,
  startOfWeek,
  startOfYear,
  toDate,
  useAuthStore,
  useControllableState,
  useId,
  useSize
} from "/chunks/chunk-RT2NOGQM.js";
import {
  Avatar,
  AvatarFallback,
  AvatarImage
} from "/chunks/chunk-53N6ZYFC.js";
import {
  API_ENDPOINTS,
  useAppStore,
  useWebSocket
} from "/chunks/chunk-YAFXMZPJ.js";
import "/chunks/chunk-XG5DCYXO.js";
import "/chunks/chunk-PFMVW4LI.js";
import {
  Button,
  buttonVariants,
  cva,
  useToast
} from "/chunks/chunk-KDAPYUH3.js";
import {
  QueryClient,
  QueryClientProvider,
  trpc,
  trpcClient,
  useQueryClient
} from "/chunks/chunk-GEIPPW2F.js";
import {
  ScrollArea
} from "/chunks/chunk-BVYJYOML.js";
import {
  useDirection
} from "/chunks/chunk-XQK55YGT.js";
import {
  Presence,
  Primitive,
  composeEventHandlers,
  createContextScope,
  dispatchDiscreteCustomEvent,
  useCallbackRef,
  useLayoutEffect2
} from "/chunks/chunk-QHXVCZRG.js";
import {
  composeRefs,
  createSlot,
  createSlottable,
  require_react_dom,
  useComposedRefs
} from "/chunks/chunk-O4RKJJFS.js";
import {
  Activity,
  Archive,
  ArrowRight,
  ArrowUpNarrowWide,
  Ban,
  Bell,
  BookOpen,
  Bookmark,
  Bot,
  Briefcase,
  Calendar,
  ChartColumn,
  Check,
  CheckCheck,
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  ChevronUp,
  Circle,
  CircleAlert,
  CircleCheck,
  CircleCheckBig,
  Clock,
  Columns2,
  Command,
  Copy,
  DollarSign,
  Download,
  Ellipsis,
  EllipsisVertical,
  Expand,
  ExternalLink,
  Eye,
  EyeOff,
  File,
  FileArchive,
  FileImage,
  FileText,
  FileVideo,
  Flame,
  Focus,
  Folder,
  FolderOpen,
  Funnel,
  GitBranch,
  Globe,
  Grid3x3,
  GripVertical,
  Hash,
  House,
  Kanban,
  Keyboard,
  LayoutGrid,
  Link,
  List,
  LoaderCircle,
  Lock,
  LockOpen,
  LogOut,
  Mail,
  MapPin,
  Maximize,
  Maximize2,
  Menu,
  MessageCircle,
  MessageSquare,
  Minimize,
  Minimize2,
  Palette,
  PanelsTopLeft,
  Paperclip,
  Pen,
  PenLine,
  Phone,
  Pin,
  Play,
  Plus,
  RefreshCw,
  Repeat,
  Reply,
  Save,
  Search,
  Send,
  Settings,
  Settings2,
  Share,
  Share2,
  Shield,
  Shrink,
  Smile,
  SquareCheckBig,
  SquarePen,
  Star,
  StickyNote,
  Tag,
  Target,
  Timer,
  Trash,
  Trash2,
  TrendingDown,
  TrendingUp,
  TriangleAlert,
  Upload,
  User,
  UserPlus,
  Users,
  Video,
  WandSparkles,
  Wifi,
  X,
  Zap,
  __commonJS,
  __toESM,
  cn,
  require_jsx_runtime,
  require_react
} from "/chunks/chunk-CR5PFQOW.js";

// ../node_modules/react-dom/client.js
var require_client = __commonJS({
  "../node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m2 = require_react_dom();
    if (false) {
      exports.createRoot = m2.createRoot;
      exports.hydrateRoot = m2.hydrateRoot;
    } else {
      i = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m2.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m2.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// ../node_modules/react-router/node_modules/cookie/dist/index.js
var require_dist = __commonJS({
  "../node_modules/react-router/node_modules/cookie/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = parse3;
    exports.serialize = serialize2;
    var cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
    var cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
    var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
    var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
    var __toString = Object.prototype.toString;
    var NullObject = /* @__PURE__ */ (() => {
      const C = function() {
      };
      C.prototype = /* @__PURE__ */ Object.create(null);
      return C;
    })();
    function parse3(str, options) {
      const obj = new NullObject();
      const len = str.length;
      if (len < 2)
        return obj;
      const dec = options?.decode || decode;
      let index = 0;
      do {
        const eqIdx = str.indexOf("=", index);
        if (eqIdx === -1)
          break;
        const colonIdx = str.indexOf(";", index);
        const endIdx = colonIdx === -1 ? len : colonIdx;
        if (eqIdx > endIdx) {
          index = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        const keyStartIdx = startIndex(str, index, eqIdx);
        const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
        const key = str.slice(keyStartIdx, keyEndIdx);
        if (obj[key] === void 0) {
          let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
          let valEndIdx = endIndex(str, endIdx, valStartIdx);
          const value = dec(str.slice(valStartIdx, valEndIdx));
          obj[key] = value;
        }
        index = endIdx + 1;
      } while (index < len);
      return obj;
    }
    function startIndex(str, index, max2) {
      do {
        const code = str.charCodeAt(index);
        if (code !== 32 && code !== 9)
          return index;
      } while (++index < max2);
      return max2;
    }
    function endIndex(str, index, min2) {
      while (index > min2) {
        const code = str.charCodeAt(--index);
        if (code !== 32 && code !== 9)
          return index + 1;
      }
      return min2;
    }
    function serialize2(name, val, options) {
      const enc = options?.encode || encodeURIComponent;
      if (!cookieNameRegExp.test(name)) {
        throw new TypeError(`argument name is invalid: ${name}`);
      }
      const value = enc(val);
      if (!cookieValueRegExp.test(value)) {
        throw new TypeError(`argument val is invalid: ${val}`);
      }
      let str = name + "=" + value;
      if (!options)
        return str;
      if (options.maxAge !== void 0) {
        if (!Number.isInteger(options.maxAge)) {
          throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);
        }
        str += "; Max-Age=" + options.maxAge;
      }
      if (options.domain) {
        if (!domainValueRegExp.test(options.domain)) {
          throw new TypeError(`option domain is invalid: ${options.domain}`);
        }
        str += "; Domain=" + options.domain;
      }
      if (options.path) {
        if (!pathValueRegExp.test(options.path)) {
          throw new TypeError(`option path is invalid: ${options.path}`);
        }
        str += "; Path=" + options.path;
      }
      if (options.expires) {
        if (!isDate2(options.expires) || !Number.isFinite(options.expires.valueOf())) {
          throw new TypeError(`option expires is invalid: ${options.expires}`);
        }
        str += "; Expires=" + options.expires.toUTCString();
      }
      if (options.httpOnly) {
        str += "; HttpOnly";
      }
      if (options.secure) {
        str += "; Secure";
      }
      if (options.partitioned) {
        str += "; Partitioned";
      }
      if (options.priority) {
        const priority = typeof options.priority === "string" ? options.priority.toLowerCase() : void 0;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError(`option priority is invalid: ${options.priority}`);
        }
      }
      if (options.sameSite) {
        const sameSite = typeof options.sameSite === "string" ? options.sameSite.toLowerCase() : options.sameSite;
        switch (sameSite) {
          case true:
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);
        }
      }
      return str;
    }
    function decode(str) {
      if (str.indexOf("%") === -1)
        return str;
      try {
        return decodeURIComponent(str);
      } catch (e) {
        return str;
      }
    }
    function isDate2(val) {
      return __toString.call(val) === "[object Date]";
    }
  }
});

// ../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment27 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal4 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense4 = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment27;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal4;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense4;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement3, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data2) {
        this.message = message;
        this.data = data2 && typeof data2 === "object" ? data2 : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement3(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement3(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../node_modules/attr-accept/dist/es/index.js
var require_es = __commonJS({
  "../node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        if (acceptedFilesArray.length === 0) {
          return true;
        }
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// ../node_modules/fast-equals/dist/fast-equals.js
var require_fast_equals = __commonJS({
  "../node_modules/fast-equals/dist/fast-equals.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2["fast-equals"] = {}));
    })(exports, function(exports2) {
      "use strict";
      function createDefaultIsNestedEqual(comparator) {
        return function isEqual(a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, meta) {
          return comparator(a, b, meta);
        };
      }
      function createIsCircular(areItemsEqual) {
        return function isCircular(a, b, isEqual, cache) {
          if (!a || !b || typeof a !== "object" || typeof b !== "object") {
            return areItemsEqual(a, b, isEqual, cache);
          }
          var cachedA = cache.get(a);
          var cachedB = cache.get(b);
          if (cachedA && cachedB) {
            return cachedA === b && cachedB === a;
          }
          cache.set(a, b);
          cache.set(b, a);
          var result = areItemsEqual(a, b, isEqual, cache);
          cache.delete(a);
          cache.delete(b);
          return result;
        };
      }
      function merge(a, b) {
        var merged = {};
        for (var key in a) {
          merged[key] = a[key];
        }
        for (var key in b) {
          merged[key] = b[key];
        }
        return merged;
      }
      function isPlainObject(value) {
        return value.constructor === Object || value.constructor == null;
      }
      function isPromiseLike(value) {
        return typeof value.then === "function";
      }
      function sameValueZeroEqual(a, b) {
        return a === b || a !== a && b !== b;
      }
      var ARGUMENTS_TAG = "[object Arguments]";
      var BOOLEAN_TAG = "[object Boolean]";
      var DATE_TAG = "[object Date]";
      var REG_EXP_TAG = "[object RegExp]";
      var MAP_TAG = "[object Map]";
      var NUMBER_TAG = "[object Number]";
      var OBJECT_TAG = "[object Object]";
      var SET_TAG = "[object Set]";
      var STRING_TAG = "[object String]";
      var toString = Object.prototype.toString;
      function createComparator(_a) {
        var areArraysEqual2 = _a.areArraysEqual, areDatesEqual2 = _a.areDatesEqual, areMapsEqual2 = _a.areMapsEqual, areObjectsEqual2 = _a.areObjectsEqual, areRegExpsEqual2 = _a.areRegExpsEqual, areSetsEqual2 = _a.areSetsEqual, createIsNestedEqual = _a.createIsNestedEqual;
        var isEqual = createIsNestedEqual(comparator);
        function comparator(a, b, meta) {
          if (a === b) {
            return true;
          }
          if (!a || !b || typeof a !== "object" || typeof b !== "object") {
            return a !== a && b !== b;
          }
          if (isPlainObject(a) && isPlainObject(b)) {
            return areObjectsEqual2(a, b, isEqual, meta);
          }
          var aArray = Array.isArray(a);
          var bArray = Array.isArray(b);
          if (aArray || bArray) {
            return aArray === bArray && areArraysEqual2(a, b, isEqual, meta);
          }
          var aTag = toString.call(a);
          if (aTag !== toString.call(b)) {
            return false;
          }
          if (aTag === DATE_TAG) {
            return areDatesEqual2(a, b, isEqual, meta);
          }
          if (aTag === REG_EXP_TAG) {
            return areRegExpsEqual2(a, b, isEqual, meta);
          }
          if (aTag === MAP_TAG) {
            return areMapsEqual2(a, b, isEqual, meta);
          }
          if (aTag === SET_TAG) {
            return areSetsEqual2(a, b, isEqual, meta);
          }
          if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {
            return isPromiseLike(a) || isPromiseLike(b) ? false : areObjectsEqual2(a, b, isEqual, meta);
          }
          if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {
            return sameValueZeroEqual(a.valueOf(), b.valueOf());
          }
          return false;
        }
        return comparator;
      }
      function areArraysEqual(a, b, isEqual, meta) {
        var index = a.length;
        if (b.length !== index) {
          return false;
        }
        while (index-- > 0) {
          if (!isEqual(a[index], b[index], index, index, a, b, meta)) {
            return false;
          }
        }
        return true;
      }
      var areArraysEqualCircular = createIsCircular(areArraysEqual);
      function areDatesEqual(a, b) {
        return sameValueZeroEqual(a.valueOf(), b.valueOf());
      }
      function areMapsEqual(a, b, isEqual, meta) {
        var isValueEqual = a.size === b.size;
        if (!isValueEqual) {
          return false;
        }
        if (!a.size) {
          return true;
        }
        var matchedIndices = {};
        var indexA = 0;
        a.forEach(function(aValue, aKey) {
          if (!isValueEqual) {
            return;
          }
          var hasMatch = false;
          var matchIndexB = 0;
          b.forEach(function(bValue, bKey) {
            if (!hasMatch && !matchedIndices[matchIndexB] && (hasMatch = isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) && isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {
              matchedIndices[matchIndexB] = true;
            }
            matchIndexB++;
          });
          indexA++;
          isValueEqual = hasMatch;
        });
        return isValueEqual;
      }
      var areMapsEqualCircular = createIsCircular(areMapsEqual);
      var OWNER = "_owner";
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function areObjectsEqual(a, b, isEqual, meta) {
        var keysA = Object.keys(a);
        var index = keysA.length;
        if (Object.keys(b).length !== index) {
          return false;
        }
        var key;
        while (index-- > 0) {
          key = keysA[index];
          if (key === OWNER) {
            var reactElementA = !!a.$$typeof;
            var reactElementB = !!b.$$typeof;
            if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {
              return false;
            }
          }
          if (!hasOwnProperty.call(b, key) || !isEqual(a[key], b[key], key, key, a, b, meta)) {
            return false;
          }
        }
        return true;
      }
      var areObjectsEqualCircular = createIsCircular(areObjectsEqual);
      function areRegExpsEqual(a, b) {
        return a.source === b.source && a.flags === b.flags;
      }
      function areSetsEqual(a, b, isEqual, meta) {
        var isValueEqual = a.size === b.size;
        if (!isValueEqual) {
          return false;
        }
        if (!a.size) {
          return true;
        }
        var matchedIndices = {};
        a.forEach(function(aValue, aKey) {
          if (!isValueEqual) {
            return;
          }
          var hasMatch = false;
          var matchIndex = 0;
          b.forEach(function(bValue, bKey) {
            if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {
              matchedIndices[matchIndex] = true;
            }
            matchIndex++;
          });
          isValueEqual = hasMatch;
        });
        return isValueEqual;
      }
      var areSetsEqualCircular = createIsCircular(areSetsEqual);
      var DEFAULT_CONFIG = Object.freeze({
        areArraysEqual,
        areDatesEqual,
        areMapsEqual,
        areObjectsEqual,
        areRegExpsEqual,
        areSetsEqual,
        createIsNestedEqual: createDefaultIsNestedEqual
      });
      var DEFAULT_CIRCULAR_CONFIG = Object.freeze({
        areArraysEqual: areArraysEqualCircular,
        areDatesEqual,
        areMapsEqual: areMapsEqualCircular,
        areObjectsEqual: areObjectsEqualCircular,
        areRegExpsEqual,
        areSetsEqual: areSetsEqualCircular,
        createIsNestedEqual: createDefaultIsNestedEqual
      });
      var isDeepEqual = createComparator(DEFAULT_CONFIG);
      function deepEqual(a, b) {
        return isDeepEqual(a, b, void 0);
      }
      var isShallowEqual = createComparator(merge(DEFAULT_CONFIG, { createIsNestedEqual: function() {
        return sameValueZeroEqual;
      } }));
      function shallowEqual(a, b) {
        return isShallowEqual(a, b, void 0);
      }
      var isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);
      function circularDeepEqual(a, b) {
        return isCircularDeepEqual(a, b, /* @__PURE__ */ new WeakMap());
      }
      var isCircularShallowEqual = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, {
        createIsNestedEqual: function() {
          return sameValueZeroEqual;
        }
      }));
      function circularShallowEqual(a, b) {
        return isCircularShallowEqual(a, b, /* @__PURE__ */ new WeakMap());
      }
      function createCustomEqual(getComparatorOptions) {
        return createComparator(merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG)));
      }
      function createCustomCircularEqual(getComparatorOptions) {
        var comparator = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, getComparatorOptions(DEFAULT_CIRCULAR_CONFIG)));
        return function(a, b, meta) {
          if (meta === void 0) {
            meta = /* @__PURE__ */ new WeakMap();
          }
          return comparator(a, b, meta);
        };
      }
      exports2.circularDeepEqual = circularDeepEqual;
      exports2.circularShallowEqual = circularShallowEqual;
      exports2.createCustomCircularEqual = createCustomCircularEqual;
      exports2.createCustomEqual = createCustomEqual;
      exports2.deepEqual = deepEqual;
      exports2.sameValueZeroEqual = sameValueZeroEqual;
      exports2.shallowEqual = shallowEqual;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// ../node_modules/clsx/dist/clsx.js
var require_clsx = __commonJS({
  "../node_modules/clsx/dist/clsx.js"(exports, module) {
    function r(e2) {
      var o, t2, f = "";
      if ("string" == typeof e2 || "number" == typeof e2) f += e2;
      else if ("object" == typeof e2) if (Array.isArray(e2)) {
        var n = e2.length;
        for (o = 0; o < n; o++) e2[o] && (t2 = r(e2[o])) && (f && (f += " "), f += t2);
      } else for (t2 in e2) e2[t2] && (f && (f += " "), f += t2);
      return f;
    }
    function e() {
      for (var e2, o, t2 = 0, f = "", n = arguments.length; t2 < n; t2++) (e2 = arguments[t2]) && (o = r(e2)) && (f && (f += " "), f += o);
      return f;
    }
    module.exports = e, module.exports.clsx = e;
  }
});

// ../node_modules/react-grid-layout/build/fastRGLPropsEqual.js
var require_fastRGLPropsEqual = __commonJS({
  "../node_modules/react-grid-layout/build/fastRGLPropsEqual.js"(exports, module) {
    module.exports = function fastRGLPropsEqual(a, b, isEqualImpl) {
      if (a === b) return true;
      return a.className === b.className && isEqualImpl(a.style, b.style) && a.width === b.width && a.autoSize === b.autoSize && a.cols === b.cols && a.draggableCancel === b.draggableCancel && a.draggableHandle === b.draggableHandle && isEqualImpl(a.verticalCompact, b.verticalCompact) && isEqualImpl(a.compactType, b.compactType) && isEqualImpl(a.layout, b.layout) && isEqualImpl(a.margin, b.margin) && isEqualImpl(a.containerPadding, b.containerPadding) && a.rowHeight === b.rowHeight && a.maxRows === b.maxRows && a.isBounded === b.isBounded && a.isDraggable === b.isDraggable && a.isResizable === b.isResizable && a.allowOverlap === b.allowOverlap && a.preventCollision === b.preventCollision && a.useCSSTransforms === b.useCSSTransforms && a.transformScale === b.transformScale && a.isDroppable === b.isDroppable && isEqualImpl(a.resizeHandles, b.resizeHandles) && isEqualImpl(a.resizeHandle, b.resizeHandle) && a.onLayoutChange === b.onLayoutChange && a.onDragStart === b.onDragStart && a.onDrag === b.onDrag && a.onDragStop === b.onDragStop && a.onResizeStart === b.onResizeStart && a.onResize === b.onResize && a.onResizeStop === b.onResizeStop && a.onDrop === b.onDrop && isEqualImpl(a.droppingItem, b.droppingItem) && isEqualImpl(a.innerRef, b.innerRef);
    };
  }
});

// ../node_modules/react-grid-layout/build/utils.js
var require_utils = __commonJS({
  "../node_modules/react-grid-layout/build/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.bottom = bottom;
    exports.childrenEqual = childrenEqual;
    exports.cloneLayout = cloneLayout;
    exports.cloneLayoutItem = cloneLayoutItem;
    exports.collides = collides;
    exports.compact = compact;
    exports.compactItem = compactItem;
    exports.compactType = compactType;
    exports.correctBounds = correctBounds;
    exports.fastPositionEqual = fastPositionEqual;
    exports.fastRGLPropsEqual = void 0;
    exports.getAllCollisions = getAllCollisions;
    exports.getFirstCollision = getFirstCollision;
    exports.getLayoutItem = getLayoutItem;
    exports.getStatics = getStatics;
    exports.modifyLayout = modifyLayout;
    exports.moveElement = moveElement;
    exports.moveElementAwayFromCollision = moveElementAwayFromCollision;
    exports.noop = void 0;
    exports.perc = perc;
    exports.resizeItemInDirection = resizeItemInDirection;
    exports.setTopLeft = setTopLeft;
    exports.setTransform = setTransform;
    exports.sortLayoutItems = sortLayoutItems;
    exports.sortLayoutItemsByColRow = sortLayoutItemsByColRow;
    exports.sortLayoutItemsByRowCol = sortLayoutItemsByRowCol;
    exports.synchronizeLayoutWithChildren = synchronizeLayoutWithChildren;
    exports.validateLayout = validateLayout;
    exports.withLayoutItem = withLayoutItem;
    var _fastEquals = require_fast_equals();
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isProduction = false;
    var DEBUG = false;
    function bottom(layout) {
      let max2 = 0, bottomY;
      for (let i = 0, len = layout.length; i < len; i++) {
        bottomY = layout[i].y + layout[i].h;
        if (bottomY > max2) max2 = bottomY;
      }
      return max2;
    }
    function cloneLayout(layout) {
      const newLayout = Array(layout.length);
      for (let i = 0, len = layout.length; i < len; i++) {
        newLayout[i] = cloneLayoutItem(layout[i]);
      }
      return newLayout;
    }
    function modifyLayout(layout, layoutItem) {
      const newLayout = Array(layout.length);
      for (let i = 0, len = layout.length; i < len; i++) {
        if (layoutItem.i === layout[i].i) {
          newLayout[i] = layoutItem;
        } else {
          newLayout[i] = layout[i];
        }
      }
      return newLayout;
    }
    function withLayoutItem(layout, itemKey, cb) {
      let item = getLayoutItem(layout, itemKey);
      if (!item) return [layout, null];
      item = cb(cloneLayoutItem(item));
      layout = modifyLayout(layout, item);
      return [layout, item];
    }
    function cloneLayoutItem(layoutItem) {
      return {
        w: layoutItem.w,
        h: layoutItem.h,
        x: layoutItem.x,
        y: layoutItem.y,
        i: layoutItem.i,
        minW: layoutItem.minW,
        maxW: layoutItem.maxW,
        minH: layoutItem.minH,
        maxH: layoutItem.maxH,
        moved: Boolean(layoutItem.moved),
        static: Boolean(layoutItem.static),
        // These can be null/undefined
        isDraggable: layoutItem.isDraggable,
        isResizable: layoutItem.isResizable,
        resizeHandles: layoutItem.resizeHandles,
        isBounded: layoutItem.isBounded
      };
    }
    function childrenEqual(a, b) {
      return (0, _fastEquals.deepEqual)(_react.default.Children.map(a, (c) => c?.key), _react.default.Children.map(b, (c) => c?.key)) && (0, _fastEquals.deepEqual)(_react.default.Children.map(a, (c) => c?.props["data-grid"]), _react.default.Children.map(b, (c) => c?.props["data-grid"]));
    }
    var fastRGLPropsEqual = exports.fastRGLPropsEqual = require_fastRGLPropsEqual();
    function fastPositionEqual(a, b) {
      return a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height;
    }
    function collides(l1, l2) {
      if (l1.i === l2.i) return false;
      if (l1.x + l1.w <= l2.x) return false;
      if (l1.x >= l2.x + l2.w) return false;
      if (l1.y + l1.h <= l2.y) return false;
      if (l1.y >= l2.y + l2.h) return false;
      return true;
    }
    function compact(layout, compactType2, cols, allowOverlap) {
      const compareWith = getStatics(layout);
      const sorted = sortLayoutItems(layout, compactType2);
      const out = Array(layout.length);
      for (let i = 0, len = sorted.length; i < len; i++) {
        let l = cloneLayoutItem(sorted[i]);
        if (!l.static) {
          l = compactItem(compareWith, l, compactType2, cols, sorted, allowOverlap);
          compareWith.push(l);
        }
        out[layout.indexOf(sorted[i])] = l;
        l.moved = false;
      }
      return out;
    }
    var heightWidth = {
      x: "w",
      y: "h"
    };
    function resolveCompactionCollision(layout, item, moveToCoord, axis) {
      const sizeProp = heightWidth[axis];
      item[axis] += 1;
      const itemIndex = layout.map((layoutItem) => {
        return layoutItem.i;
      }).indexOf(item.i);
      for (let i = itemIndex + 1; i < layout.length; i++) {
        const otherItem = layout[i];
        if (otherItem.static) continue;
        if (otherItem.y > item.y + item.h) break;
        if (collides(item, otherItem)) {
          resolveCompactionCollision(layout, otherItem, moveToCoord + item[sizeProp], axis);
        }
      }
      item[axis] = moveToCoord;
    }
    function compactItem(compareWith, l, compactType2, cols, fullLayout, allowOverlap) {
      const compactV = compactType2 === "vertical";
      const compactH = compactType2 === "horizontal";
      if (compactV) {
        l.y = Math.min(bottom(compareWith), l.y);
        while (l.y > 0 && !getFirstCollision(compareWith, l)) {
          l.y--;
        }
      } else if (compactH) {
        while (l.x > 0 && !getFirstCollision(compareWith, l)) {
          l.x--;
        }
      }
      let collides2;
      while ((collides2 = getFirstCollision(compareWith, l)) && !(compactType2 === null && allowOverlap)) {
        if (compactH) {
          resolveCompactionCollision(fullLayout, l, collides2.x + collides2.w, "x");
        } else {
          resolveCompactionCollision(fullLayout, l, collides2.y + collides2.h, "y");
        }
        if (compactH && l.x + l.w > cols) {
          l.x = cols - l.w;
          l.y++;
          while (l.x > 0 && !getFirstCollision(compareWith, l)) {
            l.x--;
          }
        }
      }
      l.y = Math.max(l.y, 0);
      l.x = Math.max(l.x, 0);
      return l;
    }
    function correctBounds(layout, bounds) {
      const collidesWith = getStatics(layout);
      for (let i = 0, len = layout.length; i < len; i++) {
        const l = layout[i];
        if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;
        if (l.x < 0) {
          l.x = 0;
          l.w = bounds.cols;
        }
        if (!l.static) collidesWith.push(l);
        else {
          while (getFirstCollision(collidesWith, l)) {
            l.y++;
          }
        }
      }
      return layout;
    }
    function getLayoutItem(layout, id2) {
      for (let i = 0, len = layout.length; i < len; i++) {
        if (layout[i].i === id2) return layout[i];
      }
    }
    function getFirstCollision(layout, layoutItem) {
      for (let i = 0, len = layout.length; i < len; i++) {
        if (collides(layout[i], layoutItem)) return layout[i];
      }
    }
    function getAllCollisions(layout, layoutItem) {
      return layout.filter((l) => collides(l, layoutItem));
    }
    function getStatics(layout) {
      return layout.filter((l) => l.static);
    }
    function moveElement(layout, l, x, y, isUserAction, preventCollision, compactType2, cols, allowOverlap) {
      if (l.static && l.isDraggable !== true) return layout;
      if (l.y === y && l.x === x) return layout;
      log(`Moving element ${l.i} to [${String(x)},${String(y)}] from [${l.x},${l.y}]`);
      const oldX = l.x;
      const oldY = l.y;
      if (typeof x === "number") l.x = x;
      if (typeof y === "number") l.y = y;
      l.moved = true;
      let sorted = sortLayoutItems(layout, compactType2);
      const movingUp = compactType2 === "vertical" && typeof y === "number" ? oldY >= y : compactType2 === "horizontal" && typeof x === "number" ? oldX >= x : false;
      if (movingUp) sorted = sorted.reverse();
      const collisions = getAllCollisions(sorted, l);
      const hasCollisions = collisions.length > 0;
      if (hasCollisions && allowOverlap) {
        return cloneLayout(layout);
      } else if (hasCollisions && preventCollision) {
        log(`Collision prevented on ${l.i}, reverting.`);
        l.x = oldX;
        l.y = oldY;
        l.moved = false;
        return layout;
      }
      for (let i = 0, len = collisions.length; i < len; i++) {
        const collision = collisions[i];
        log(`Resolving collision between ${l.i} at [${l.x},${l.y}] and ${collision.i} at [${collision.x},${collision.y}]`);
        if (collision.moved) continue;
        if (collision.static) {
          layout = moveElementAwayFromCollision(layout, collision, l, isUserAction, compactType2, cols);
        } else {
          layout = moveElementAwayFromCollision(layout, l, collision, isUserAction, compactType2, cols);
        }
      }
      return layout;
    }
    function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction, compactType2, cols) {
      const compactH = compactType2 === "horizontal";
      const compactV = compactType2 === "vertical";
      const preventCollision = collidesWith.static;
      if (isUserAction) {
        isUserAction = false;
        const fakeItem = {
          x: compactH ? Math.max(collidesWith.x - itemToMove.w, 0) : itemToMove.x,
          y: compactV ? Math.max(collidesWith.y - itemToMove.h, 0) : itemToMove.y,
          w: itemToMove.w,
          h: itemToMove.h,
          i: "-1"
        };
        const firstCollision = getFirstCollision(layout, fakeItem);
        const collisionNorth = firstCollision && firstCollision.y + firstCollision.h > collidesWith.y;
        const collisionWest = firstCollision && collidesWith.x + collidesWith.w > firstCollision.x;
        if (!firstCollision) {
          log(`Doing reverse collision on ${itemToMove.i} up to [${fakeItem.x},${fakeItem.y}].`);
          return moveElement(layout, itemToMove, compactH ? fakeItem.x : void 0, compactV ? fakeItem.y : void 0, isUserAction, preventCollision, compactType2, cols);
        } else if (collisionNorth && compactV) {
          return moveElement(layout, itemToMove, void 0, collidesWith.y + 1, isUserAction, preventCollision, compactType2, cols);
        } else if (collisionNorth && compactType2 == null) {
          collidesWith.y = itemToMove.y;
          itemToMove.y = itemToMove.y + itemToMove.h;
          return layout;
        } else if (collisionWest && compactH) {
          return moveElement(layout, collidesWith, itemToMove.x, void 0, isUserAction, preventCollision, compactType2, cols);
        }
      }
      const newX = compactH ? itemToMove.x + 1 : void 0;
      const newY = compactV ? itemToMove.y + 1 : void 0;
      if (newX == null && newY == null) {
        return layout;
      }
      return moveElement(layout, itemToMove, compactH ? itemToMove.x + 1 : void 0, compactV ? itemToMove.y + 1 : void 0, isUserAction, preventCollision, compactType2, cols);
    }
    function perc(num) {
      return num * 100 + "%";
    }
    var constrainWidth = (left, currentWidth, newWidth, containerWidth) => {
      return left + newWidth > containerWidth ? currentWidth : newWidth;
    };
    var constrainHeight = (top, currentHeight, newHeight) => {
      return top < 0 ? currentHeight : newHeight;
    };
    var constrainLeft = (left) => Math.max(0, left);
    var constrainTop = (top) => Math.max(0, top);
    var resizeNorth = (currentSize, _ref, _containerWidth) => {
      let {
        left,
        height,
        width
      } = _ref;
      const top = currentSize.top - (height - currentSize.height);
      return {
        left,
        width,
        height: constrainHeight(top, currentSize.height, height),
        top: constrainTop(top)
      };
    };
    var resizeEast = (currentSize, _ref2, containerWidth) => {
      let {
        top,
        left,
        height,
        width
      } = _ref2;
      return {
        top,
        height,
        width: constrainWidth(currentSize.left, currentSize.width, width, containerWidth),
        left: constrainLeft(left)
      };
    };
    var resizeWest = (currentSize, _ref3, containerWidth) => {
      let {
        top,
        height,
        width
      } = _ref3;
      const left = currentSize.left - (width - currentSize.width);
      return {
        height,
        width: left < 0 ? currentSize.width : constrainWidth(currentSize.left, currentSize.width, width, containerWidth),
        top: constrainTop(top),
        left: constrainLeft(left)
      };
    };
    var resizeSouth = (currentSize, _ref4, containerWidth) => {
      let {
        top,
        left,
        height,
        width
      } = _ref4;
      return {
        width,
        left,
        height: constrainHeight(top, currentSize.height, height),
        top: constrainTop(top)
      };
    };
    var resizeNorthEast = function() {
      return resizeNorth(arguments.length <= 0 ? void 0 : arguments[0], resizeEast(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var resizeNorthWest = function() {
      return resizeNorth(arguments.length <= 0 ? void 0 : arguments[0], resizeWest(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var resizeSouthEast = function() {
      return resizeSouth(arguments.length <= 0 ? void 0 : arguments[0], resizeEast(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var resizeSouthWest = function() {
      return resizeSouth(arguments.length <= 0 ? void 0 : arguments[0], resizeWest(...arguments), arguments.length <= 2 ? void 0 : arguments[2]);
    };
    var ordinalResizeHandlerMap = {
      n: resizeNorth,
      ne: resizeNorthEast,
      e: resizeEast,
      se: resizeSouthEast,
      s: resizeSouth,
      sw: resizeSouthWest,
      w: resizeWest,
      nw: resizeNorthWest
    };
    function resizeItemInDirection(direction, currentSize, newSize, containerWidth) {
      const ordinalHandler = ordinalResizeHandlerMap[direction];
      if (!ordinalHandler) return newSize;
      return ordinalHandler(currentSize, {
        ...currentSize,
        ...newSize
      }, containerWidth);
    }
    function setTransform(_ref5) {
      let {
        top,
        left,
        width,
        height
      } = _ref5;
      const translate = `translate(${left}px,${top}px)`;
      return {
        transform: translate,
        WebkitTransform: translate,
        MozTransform: translate,
        msTransform: translate,
        OTransform: translate,
        width: `${width}px`,
        height: `${height}px`,
        position: "absolute"
      };
    }
    function setTopLeft(_ref6) {
      let {
        top,
        left,
        width,
        height
      } = _ref6;
      return {
        top: `${top}px`,
        left: `${left}px`,
        width: `${width}px`,
        height: `${height}px`,
        position: "absolute"
      };
    }
    function sortLayoutItems(layout, compactType2) {
      if (compactType2 === "horizontal") return sortLayoutItemsByColRow(layout);
      if (compactType2 === "vertical") return sortLayoutItemsByRowCol(layout);
      else return layout;
    }
    function sortLayoutItemsByRowCol(layout) {
      return layout.slice(0).sort(function(a, b) {
        if (a.y > b.y || a.y === b.y && a.x > b.x) {
          return 1;
        } else if (a.y === b.y && a.x === b.x) {
          return 0;
        }
        return -1;
      });
    }
    function sortLayoutItemsByColRow(layout) {
      return layout.slice(0).sort(function(a, b) {
        if (a.x > b.x || a.x === b.x && a.y > b.y) {
          return 1;
        }
        return -1;
      });
    }
    function synchronizeLayoutWithChildren(initialLayout, children, cols, compactType2, allowOverlap) {
      initialLayout = initialLayout || [];
      const layout = [];
      _react.default.Children.forEach(children, (child) => {
        if (child?.key == null) return;
        const exists = getLayoutItem(initialLayout, String(child.key));
        const g = child.props["data-grid"];
        if (exists && g == null) {
          layout.push(cloneLayoutItem(exists));
        } else {
          if (g) {
            if (!isProduction) {
              validateLayout([g], "ReactGridLayout.children");
            }
            layout.push(cloneLayoutItem({
              ...g,
              i: child.key
            }));
          } else {
            layout.push(cloneLayoutItem({
              w: 1,
              h: 1,
              x: 0,
              y: bottom(layout),
              i: String(child.key)
            }));
          }
        }
      });
      const correctedLayout = correctBounds(layout, {
        cols
      });
      return allowOverlap ? correctedLayout : compact(correctedLayout, compactType2, cols);
    }
    function validateLayout(layout) {
      let contextName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Layout";
      const subProps = ["x", "y", "w", "h"];
      if (!Array.isArray(layout)) throw new Error(contextName + " must be an array!");
      for (let i = 0, len = layout.length; i < len; i++) {
        const item = layout[i];
        for (let j = 0; j < subProps.length; j++) {
          const key = subProps[j];
          const value = item[key];
          if (typeof value !== "number" || Number.isNaN(value)) {
            throw new Error(`ReactGridLayout: ${contextName}[${i}].${key} must be a number! Received: ${value} (${typeof value})`);
          }
        }
        if (typeof item.i !== "undefined" && typeof item.i !== "string") {
          throw new Error(`ReactGridLayout: ${contextName}[${i}].i must be a string! Received: ${item.i} (${typeof item.i})`);
        }
      }
    }
    function compactType(props) {
      const {
        verticalCompact,
        compactType: compactType2
      } = props || {};
      return verticalCompact === false ? null : compactType2;
    }
    function log() {
      if (!DEBUG) return;
      console.log(...arguments);
    }
    var noop2 = () => {
    };
    exports.noop = noop2;
  }
});

// ../node_modules/react-grid-layout/build/calculateUtils.js
var require_calculateUtils = __commonJS({
  "../node_modules/react-grid-layout/build/calculateUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.calcGridColWidth = calcGridColWidth;
    exports.calcGridItemPosition = calcGridItemPosition;
    exports.calcGridItemWHPx = calcGridItemWHPx;
    exports.calcWH = calcWH;
    exports.calcXY = calcXY;
    exports.clamp = clamp;
    function calcGridColWidth(positionParams) {
      const {
        margin,
        containerPadding,
        containerWidth,
        cols
      } = positionParams;
      return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;
    }
    function calcGridItemWHPx(gridUnits, colOrRowSize, marginPx) {
      if (!Number.isFinite(gridUnits)) return gridUnits;
      return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);
    }
    function calcGridItemPosition(positionParams, x, y, w, h, state) {
      const {
        margin,
        containerPadding,
        rowHeight
      } = positionParams;
      const colWidth = calcGridColWidth(positionParams);
      const out = {};
      if (state && state.resizing) {
        out.width = Math.round(state.resizing.width);
        out.height = Math.round(state.resizing.height);
      } else {
        out.width = calcGridItemWHPx(w, colWidth, margin[0]);
        out.height = calcGridItemWHPx(h, rowHeight, margin[1]);
      }
      if (state && state.dragging) {
        out.top = Math.round(state.dragging.top);
        out.left = Math.round(state.dragging.left);
      } else if (state && state.resizing && typeof state.resizing.top === "number" && typeof state.resizing.left === "number") {
        out.top = Math.round(state.resizing.top);
        out.left = Math.round(state.resizing.left);
      } else {
        out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);
        out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);
      }
      return out;
    }
    function calcXY(positionParams, top, left, w, h) {
      const {
        margin,
        containerPadding,
        cols,
        rowHeight,
        maxRows
      } = positionParams;
      const colWidth = calcGridColWidth(positionParams);
      let x = Math.round((left - containerPadding[0]) / (colWidth + margin[0]));
      let y = Math.round((top - containerPadding[1]) / (rowHeight + margin[1]));
      x = clamp(x, 0, cols - w);
      y = clamp(y, 0, maxRows - h);
      return {
        x,
        y
      };
    }
    function calcWH(positionParams, width, height, x, y, handle) {
      const {
        margin,
        maxRows,
        cols,
        rowHeight
      } = positionParams;
      const colWidth = calcGridColWidth(positionParams);
      let w = Math.round((width + margin[0]) / (colWidth + margin[0]));
      let h = Math.round((height + margin[1]) / (rowHeight + margin[1]));
      let _w = clamp(w, 0, cols - x);
      let _h = clamp(h, 0, maxRows - y);
      if (["sw", "w", "nw"].indexOf(handle) !== -1) {
        _w = clamp(w, 0, cols);
      }
      if (["nw", "n", "ne"].indexOf(handle) !== -1) {
        _h = clamp(h, 0, maxRows);
      }
      return {
        w: _w,
        h: _h
      };
    }
    function clamp(num, lowerBound, upperBound) {
      return Math.max(Math.min(num, upperBound), lowerBound);
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/shims.js
var require_shims = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/shims.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.dontSetMe = dontSetMe;
    exports.findInArray = findInArray;
    exports.int = int;
    exports.isFunction = isFunction2;
    exports.isNum = isNum;
    function findInArray(array, callback) {
      for (let i = 0, length = array.length; i < length; i++) {
        if (callback.apply(callback, [array[i], i, array])) return array[i];
      }
    }
    function isFunction2(func) {
      return typeof func === "function" || Object.prototype.toString.call(func) === "[object Function]";
    }
    function isNum(num) {
      return typeof num === "number" && !isNaN(num);
    }
    function int(a) {
      return parseInt(a, 10);
    }
    function dontSetMe(props, propName, componentName) {
      if (props[propName]) {
        return new Error(`Invalid prop ${propName} passed to ${componentName} - do not set this, set it on the child.`);
      }
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/getPrefix.js
var require_getPrefix = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/getPrefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.browserPrefixToKey = browserPrefixToKey;
    exports.browserPrefixToStyle = browserPrefixToStyle;
    exports.default = void 0;
    exports.getPrefix = getPrefix;
    var prefixes = ["Moz", "Webkit", "O", "ms"];
    function getPrefix() {
      let prop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "transform";
      if (typeof window === "undefined") return "";
      const style = window.document?.documentElement?.style;
      if (!style) return "";
      if (prop in style) return "";
      for (let i = 0; i < prefixes.length; i++) {
        if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
      }
      return "";
    }
    function browserPrefixToKey(prop, prefix) {
      return prefix ? `${prefix}${kebabToTitleCase(prop)}` : prop;
    }
    function browserPrefixToStyle(prop, prefix) {
      return prefix ? `-${prefix.toLowerCase()}-${prop}` : prop;
    }
    function kebabToTitleCase(str) {
      let out = "";
      let shouldCapitalize = true;
      for (let i = 0; i < str.length; i++) {
        if (shouldCapitalize) {
          out += str[i].toUpperCase();
          shouldCapitalize = false;
        } else if (str[i] === "-") {
          shouldCapitalize = true;
        } else {
          out += str[i];
        }
      }
      return out;
    }
    var _default = exports.default = getPrefix();
  }
});

// ../node_modules/react-draggable/build/cjs/utils/domFns.js
var require_domFns = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/domFns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.addClassName = addClassName;
    exports.addEvent = addEvent;
    exports.addUserSelectStyles = addUserSelectStyles;
    exports.createCSSTransform = createCSSTransform;
    exports.createSVGTransform = createSVGTransform;
    exports.getTouch = getTouch;
    exports.getTouchIdentifier = getTouchIdentifier;
    exports.getTranslation = getTranslation;
    exports.innerHeight = innerHeight;
    exports.innerWidth = innerWidth;
    exports.matchesSelector = matchesSelector;
    exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
    exports.offsetXYFromParent = offsetXYFromParent;
    exports.outerHeight = outerHeight;
    exports.outerWidth = outerWidth;
    exports.removeClassName = removeClassName;
    exports.removeEvent = removeEvent;
    exports.scheduleRemoveUserSelectStyles = scheduleRemoveUserSelectStyles;
    var _shims = require_shims();
    var _getPrefix = _interopRequireWildcard(require_getPrefix());
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    var matchesSelectorFunc = "";
    function matchesSelector(el, selector) {
      if (!matchesSelectorFunc) {
        matchesSelectorFunc = (0, _shims.findInArray)(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function(method) {
          return (0, _shims.isFunction)(el[method]);
        });
      }
      if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false;
      return el[matchesSelectorFunc](selector);
    }
    function matchesSelectorAndParentsTo(el, selector, baseNode) {
      let node = el;
      do {
        if (matchesSelector(node, selector)) return true;
        if (node === baseNode) return false;
        node = node.parentNode;
      } while (node);
      return false;
    }
    function addEvent(el, event, handler, inputOptions) {
      if (!el) return;
      const options = {
        capture: true,
        ...inputOptions
      };
      if (el.addEventListener) {
        el.addEventListener(event, handler, options);
      } else if (el.attachEvent) {
        el.attachEvent("on" + event, handler);
      } else {
        el["on" + event] = handler;
      }
    }
    function removeEvent(el, event, handler, inputOptions) {
      if (!el) return;
      const options = {
        capture: true,
        ...inputOptions
      };
      if (el.removeEventListener) {
        el.removeEventListener(event, handler, options);
      } else if (el.detachEvent) {
        el.detachEvent("on" + event, handler);
      } else {
        el["on" + event] = null;
      }
    }
    function outerHeight(node) {
      let height = node.clientHeight;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      height += (0, _shims.int)(computedStyle.borderTopWidth);
      height += (0, _shims.int)(computedStyle.borderBottomWidth);
      return height;
    }
    function outerWidth(node) {
      let width = node.clientWidth;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      width += (0, _shims.int)(computedStyle.borderLeftWidth);
      width += (0, _shims.int)(computedStyle.borderRightWidth);
      return width;
    }
    function innerHeight(node) {
      let height = node.clientHeight;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      height -= (0, _shims.int)(computedStyle.paddingTop);
      height -= (0, _shims.int)(computedStyle.paddingBottom);
      return height;
    }
    function innerWidth(node) {
      let width = node.clientWidth;
      const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      width -= (0, _shims.int)(computedStyle.paddingLeft);
      width -= (0, _shims.int)(computedStyle.paddingRight);
      return width;
    }
    function offsetXYFromParent(evt, offsetParent, scale) {
      const isBody = offsetParent === offsetParent.ownerDocument.body;
      const offsetParentRect = isBody ? {
        left: 0,
        top: 0
      } : offsetParent.getBoundingClientRect();
      const x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
      const y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
      return {
        x,
        y
      };
    }
    function createCSSTransform(controlPos, positionOffset) {
      const translation = getTranslation(controlPos, positionOffset, "px");
      return {
        [(0, _getPrefix.browserPrefixToKey)("transform", _getPrefix.default)]: translation
      };
    }
    function createSVGTransform(controlPos, positionOffset) {
      const translation = getTranslation(controlPos, positionOffset, "");
      return translation;
    }
    function getTranslation(_ref, positionOffset, unitSuffix) {
      let {
        x,
        y
      } = _ref;
      let translation = `translate(${x}${unitSuffix},${y}${unitSuffix})`;
      if (positionOffset) {
        const defaultX = `${typeof positionOffset.x === "string" ? positionOffset.x : positionOffset.x + unitSuffix}`;
        const defaultY = `${typeof positionOffset.y === "string" ? positionOffset.y : positionOffset.y + unitSuffix}`;
        translation = `translate(${defaultX}, ${defaultY})` + translation;
      }
      return translation;
    }
    function getTouch(e, identifier) {
      return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, (t2) => identifier === t2.identifier) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, (t2) => identifier === t2.identifier);
    }
    function getTouchIdentifier(e) {
      if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
      if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
    }
    function addUserSelectStyles(doc) {
      if (!doc) return;
      let styleEl = doc.getElementById("react-draggable-style-el");
      if (!styleEl) {
        styleEl = doc.createElement("style");
        styleEl.type = "text/css";
        styleEl.id = "react-draggable-style-el";
        styleEl.innerHTML = ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n";
        styleEl.innerHTML += ".react-draggable-transparent-selection *::selection {all: inherit;}\n";
        doc.getElementsByTagName("head")[0].appendChild(styleEl);
      }
      if (doc.body) addClassName(doc.body, "react-draggable-transparent-selection");
    }
    function scheduleRemoveUserSelectStyles(doc) {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(() => {
          removeUserSelectStyles(doc);
        });
      } else {
        removeUserSelectStyles(doc);
      }
    }
    function removeUserSelectStyles(doc) {
      if (!doc) return;
      try {
        if (doc.body) removeClassName(doc.body, "react-draggable-transparent-selection");
        if (doc.selection) {
          doc.selection.empty();
        } else {
          const selection = (doc.defaultView || window).getSelection();
          if (selection && selection.type !== "Caret") {
            selection.removeAllRanges();
          }
        }
      } catch (e) {
      }
    }
    function addClassName(el, className) {
      if (el.classList) {
        el.classList.add(className);
      } else {
        if (!el.className.match(new RegExp(`(?:^|\\s)${className}(?!\\S)`))) {
          el.className += ` ${className}`;
        }
      }
    }
    function removeClassName(el, className) {
      if (el.classList) {
        el.classList.remove(className);
      } else {
        el.className = el.className.replace(new RegExp(`(?:^|\\s)${className}(?!\\S)`, "g"), "");
      }
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/positionFns.js
var require_positionFns = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/positionFns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canDragX = canDragX;
    exports.canDragY = canDragY;
    exports.createCoreData = createCoreData;
    exports.createDraggableData = createDraggableData;
    exports.getBoundPosition = getBoundPosition;
    exports.getControlPosition = getControlPosition;
    exports.snapToGrid = snapToGrid;
    var _shims = require_shims();
    var _domFns = require_domFns();
    function getBoundPosition(draggable, x, y) {
      if (!draggable.props.bounds) return [x, y];
      let {
        bounds
      } = draggable.props;
      bounds = typeof bounds === "string" ? bounds : cloneBounds(bounds);
      const node = findDOMNode(draggable);
      if (typeof bounds === "string") {
        const {
          ownerDocument
        } = node;
        const ownerWindow = ownerDocument.defaultView;
        let boundNode;
        if (bounds === "parent") {
          boundNode = node.parentNode;
        } else {
          const rootNode = node.getRootNode();
          boundNode = rootNode.querySelector(bounds);
        }
        if (!(boundNode instanceof ownerWindow.HTMLElement)) {
          throw new Error('Bounds selector "' + bounds + '" could not find an element.');
        }
        const boundNodeEl = boundNode;
        const nodeStyle = ownerWindow.getComputedStyle(node);
        const boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);
        bounds = {
          left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
          top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
          right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
          bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
        };
      }
      if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);
      if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom);
      if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);
      if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);
      return [x, y];
    }
    function snapToGrid(grid, pendingX, pendingY) {
      const x = Math.round(pendingX / grid[0]) * grid[0];
      const y = Math.round(pendingY / grid[1]) * grid[1];
      return [x, y];
    }
    function canDragX(draggable) {
      return draggable.props.axis === "both" || draggable.props.axis === "x";
    }
    function canDragY(draggable) {
      return draggable.props.axis === "both" || draggable.props.axis === "y";
    }
    function getControlPosition(e, touchIdentifier, draggableCore) {
      const touchObj = typeof touchIdentifier === "number" ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
      if (typeof touchIdentifier === "number" && !touchObj) return null;
      const node = findDOMNode(draggableCore);
      const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
      return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
    }
    function createCoreData(draggable, x, y) {
      const isStart = !(0, _shims.isNum)(draggable.lastX);
      const node = findDOMNode(draggable);
      if (isStart) {
        return {
          node,
          deltaX: 0,
          deltaY: 0,
          lastX: x,
          lastY: y,
          x,
          y
        };
      } else {
        return {
          node,
          deltaX: x - draggable.lastX,
          deltaY: y - draggable.lastY,
          lastX: draggable.lastX,
          lastY: draggable.lastY,
          x,
          y
        };
      }
    }
    function createDraggableData(draggable, coreData) {
      const scale = draggable.props.scale;
      return {
        node: coreData.node,
        x: draggable.state.x + coreData.deltaX / scale,
        y: draggable.state.y + coreData.deltaY / scale,
        deltaX: coreData.deltaX / scale,
        deltaY: coreData.deltaY / scale,
        lastX: draggable.state.x,
        lastY: draggable.state.y
      };
    }
    function cloneBounds(bounds) {
      return {
        left: bounds.left,
        top: bounds.top,
        right: bounds.right,
        bottom: bounds.bottom
      };
    }
    function findDOMNode(draggable) {
      const node = draggable.findDOMNode();
      if (!node) {
        throw new Error("<DraggableCore>: Unmounted during event!");
      }
      return node;
    }
  }
});

// ../node_modules/react-draggable/build/cjs/utils/log.js
var require_log = __commonJS({
  "../node_modules/react-draggable/build/cjs/utils/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = log;
    function log() {
      if (void 0) console.log(...arguments);
    }
  }
});

// ../node_modules/react-draggable/build/cjs/DraggableCore.js
var require_DraggableCore = __commonJS({
  "../node_modules/react-draggable/build/cjs/DraggableCore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React71 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _domFns = require_domFns();
    var _positionFns = require_positionFns();
    var _shims = require_shims();
    var _log = _interopRequireDefault(require_log());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _defineProperty3(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var eventsFor = {
      touch: {
        start: "touchstart",
        move: "touchmove",
        stop: "touchend"
      },
      mouse: {
        start: "mousedown",
        move: "mousemove",
        stop: "mouseup"
      }
    };
    var dragEventFor = eventsFor.mouse;
    var DraggableCore = class extends React71.Component {
      constructor() {
        super(...arguments);
        _defineProperty3(this, "dragging", false);
        _defineProperty3(this, "lastX", NaN);
        _defineProperty3(this, "lastY", NaN);
        _defineProperty3(this, "touchIdentifier", null);
        _defineProperty3(this, "mounted", false);
        _defineProperty3(this, "handleDragStart", (e) => {
          this.props.onMouseDown(e);
          if (!this.props.allowAnyClick && typeof e.button === "number" && e.button !== 0) return false;
          const thisNode = this.findDOMNode();
          if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
            throw new Error("<DraggableCore> not mounted on DragStart!");
          }
          const {
            ownerDocument
          } = thisNode;
          if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {
            return;
          }
          if (e.type === "touchstart" && !this.props.allowMobileScroll) e.preventDefault();
          const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
          this.touchIdentifier = touchIdentifier;
          const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);
          if (position == null) return;
          const {
            x,
            y
          } = position;
          const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
          (0, _log.default)("DraggableCore: handleDragStart: %j", coreEvent);
          (0, _log.default)("calling", this.props.onStart);
          const shouldUpdate = this.props.onStart(e, coreEvent);
          if (shouldUpdate === false || this.mounted === false) return;
          if (this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument);
          this.dragging = true;
          this.lastX = x;
          this.lastY = y;
          (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);
          (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);
        });
        _defineProperty3(this, "handleDrag", (e) => {
          const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
          if (position == null) return;
          let {
            x,
            y
          } = position;
          if (Array.isArray(this.props.grid)) {
            let deltaX = x - this.lastX, deltaY = y - this.lastY;
            [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
            if (!deltaX && !deltaY) return;
            x = this.lastX + deltaX, y = this.lastY + deltaY;
          }
          const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
          (0, _log.default)("DraggableCore: handleDrag: %j", coreEvent);
          const shouldUpdate = this.props.onDrag(e, coreEvent);
          if (shouldUpdate === false || this.mounted === false) {
            try {
              this.handleDragStop(new MouseEvent("mouseup"));
            } catch (err) {
              const event = document.createEvent("MouseEvents");
              event.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
              this.handleDragStop(event);
            }
            return;
          }
          this.lastX = x;
          this.lastY = y;
        });
        _defineProperty3(this, "handleDragStop", (e) => {
          if (!this.dragging) return;
          const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
          if (position == null) return;
          let {
            x,
            y
          } = position;
          if (Array.isArray(this.props.grid)) {
            let deltaX = x - this.lastX || 0;
            let deltaY = y - this.lastY || 0;
            [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
            x = this.lastX + deltaX, y = this.lastY + deltaY;
          }
          const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
          const shouldContinue = this.props.onStop(e, coreEvent);
          if (shouldContinue === false || this.mounted === false) return false;
          const thisNode = this.findDOMNode();
          if (thisNode) {
            if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(thisNode.ownerDocument);
          }
          (0, _log.default)("DraggableCore: handleDragStop: %j", coreEvent);
          this.dragging = false;
          this.lastX = NaN;
          this.lastY = NaN;
          if (thisNode) {
            (0, _log.default)("DraggableCore: Removing handlers");
            (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);
            (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);
          }
        });
        _defineProperty3(this, "onMouseDown", (e) => {
          dragEventFor = eventsFor.mouse;
          return this.handleDragStart(e);
        });
        _defineProperty3(this, "onMouseUp", (e) => {
          dragEventFor = eventsFor.mouse;
          return this.handleDragStop(e);
        });
        _defineProperty3(this, "onTouchStart", (e) => {
          dragEventFor = eventsFor.touch;
          return this.handleDragStart(e);
        });
        _defineProperty3(this, "onTouchEnd", (e) => {
          dragEventFor = eventsFor.touch;
          return this.handleDragStop(e);
        });
      }
      componentDidMount() {
        this.mounted = true;
        const thisNode = this.findDOMNode();
        if (thisNode) {
          (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
            passive: false
          });
        }
      }
      componentWillUnmount() {
        this.mounted = false;
        const thisNode = this.findDOMNode();
        if (thisNode) {
          const {
            ownerDocument
          } = thisNode;
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
          (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
          (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
            passive: false
          });
          if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(ownerDocument);
        }
      }
      // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
      // the underlying DOM node ourselves. See the README for more information.
      findDOMNode() {
        return this.props?.nodeRef ? this.props?.nodeRef?.current : _reactDom.default.findDOMNode(this);
      }
      render() {
        return /* @__PURE__ */ React71.cloneElement(React71.Children.only(this.props.children), {
          // Note: mouseMove handler is attached to document so it will still function
          // when the user drags quickly and leaves the bounds of the element.
          onMouseDown: this.onMouseDown,
          onMouseUp: this.onMouseUp,
          // onTouchStart is added on `componentDidMount` so they can be added with
          // {passive: false}, which allows it to cancel. See
          // https://developers.google.com/web/updates/2017/01/scrolling-intervention
          onTouchEnd: this.onTouchEnd
        });
      }
    };
    exports.default = DraggableCore;
    _defineProperty3(DraggableCore, "displayName", "DraggableCore");
    _defineProperty3(DraggableCore, "propTypes", {
      /**
       * `allowAnyClick` allows dragging using any mouse button.
       * By default, we only accept the left button.
       *
       * Defaults to `false`.
       */
      allowAnyClick: _propTypes.default.bool,
      /**
       * `allowMobileScroll` turns off cancellation of the 'touchstart' event
       * on mobile devices. Only enable this if you are having trouble with click
       * events. Prefer using 'handle' / 'cancel' instead.
       *
       * Defaults to `false`.
       */
      allowMobileScroll: _propTypes.default.bool,
      children: _propTypes.default.node.isRequired,
      /**
       * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
       * with the exception of `onMouseDown`, will not fire.
       */
      disabled: _propTypes.default.bool,
      /**
       * By default, we add 'user-select:none' attributes to the document body
       * to prevent ugly text selection during drag. If this is causing problems
       * for your app, set this to `false`.
       */
      enableUserSelectHack: _propTypes.default.bool,
      /**
       * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
       * instead of using the parent node.
       */
      offsetParent: function(props, propName) {
        if (props[propName] && props[propName].nodeType !== 1) {
          throw new Error("Draggable's offsetParent must be a DOM Node.");
        }
      },
      /**
       * `grid` specifies the x and y that dragging should snap to.
       */
      grid: _propTypes.default.arrayOf(_propTypes.default.number),
      /**
       * `handle` specifies a selector to be used as the handle that initiates drag.
       *
       * Example:
       *
       * ```jsx
       *   let App = React.createClass({
       *       render: function () {
       *         return (
       *            <Draggable handle=".handle">
       *              <div>
       *                  <div className="handle">Click me to drag</div>
       *                  <div>This is some other content</div>
       *              </div>
       *           </Draggable>
       *         );
       *       }
       *   });
       * ```
       */
      handle: _propTypes.default.string,
      /**
       * `cancel` specifies a selector to be used to prevent drag initialization.
       *
       * Example:
       *
       * ```jsx
       *   let App = React.createClass({
       *       render: function () {
       *           return(
       *               <Draggable cancel=".cancel">
       *                   <div>
       *                     <div className="cancel">You can't drag from here</div>
       *                     <div>Dragging here works fine</div>
       *                   </div>
       *               </Draggable>
       *           );
       *       }
       *   });
       * ```
       */
      cancel: _propTypes.default.string,
      /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
       * Unfortunately, in order for <Draggable> to work properly, we need raw access
       * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
       * as in this example:
       *
       * function MyComponent() {
       *   const nodeRef = React.useRef(null);
       *   return (
       *     <Draggable nodeRef={nodeRef}>
       *       <div ref={nodeRef}>Example Target</div>
       *     </Draggable>
       *   );
       * }
       *
       * This can be used for arbitrarily nested components, so long as the ref ends up
       * pointing to the actual child DOM node and not a custom component.
       */
      nodeRef: _propTypes.default.object,
      /**
       * Called when dragging starts.
       * If this function returns the boolean false, dragging will be canceled.
       */
      onStart: _propTypes.default.func,
      /**
       * Called while dragging.
       * If this function returns the boolean false, dragging will be canceled.
       */
      onDrag: _propTypes.default.func,
      /**
       * Called when dragging stops.
       * If this function returns the boolean false, the drag will remain active.
       */
      onStop: _propTypes.default.func,
      /**
       * A workaround option which can be passed if onMouseDown needs to be accessed,
       * since it'll always be blocked (as there is internal use of onMouseDown)
       */
      onMouseDown: _propTypes.default.func,
      /**
       * `scale`, if set, applies scaling while dragging an element
       */
      scale: _propTypes.default.number,
      /**
       * These properties should be defined on the child, not here.
       */
      className: _shims.dontSetMe,
      style: _shims.dontSetMe,
      transform: _shims.dontSetMe
    });
    _defineProperty3(DraggableCore, "defaultProps", {
      allowAnyClick: false,
      // by default only accept left click
      allowMobileScroll: false,
      disabled: false,
      enableUserSelectHack: true,
      onStart: function() {
      },
      onDrag: function() {
      },
      onStop: function() {
      },
      onMouseDown: function() {
      },
      scale: 1
    });
  }
});

// ../node_modules/react-draggable/build/cjs/Draggable.js
var require_Draggable = __commonJS({
  "../node_modules/react-draggable/build/cjs/Draggable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DraggableCore", {
      enumerable: true,
      get: function() {
        return _DraggableCore.default;
      }
    });
    exports.default = void 0;
    var React71 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _clsx = require_clsx();
    var _domFns = require_domFns();
    var _positionFns = require_positionFns();
    var _shims = require_shims();
    var _DraggableCore = _interopRequireDefault(require_DraggableCore());
    var _log = _interopRequireDefault(require_log());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _extends() {
      return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t2 = arguments[e];
          for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
        }
        return n;
      }, _extends.apply(null, arguments);
    }
    function _defineProperty3(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var Draggable = class extends React71.Component {
      // React 16.3+
      // Arity (props, state)
      static getDerivedStateFromProps(_ref, _ref2) {
        let {
          position
        } = _ref;
        let {
          prevPropsPosition
        } = _ref2;
        if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
          (0, _log.default)("Draggable: getDerivedStateFromProps %j", {
            position,
            prevPropsPosition
          });
          return {
            x: position.x,
            y: position.y,
            prevPropsPosition: {
              ...position
            }
          };
        }
        return null;
      }
      constructor(props) {
        super(props);
        _defineProperty3(this, "onDragStart", (e, coreData) => {
          (0, _log.default)("Draggable: onDragStart: %j", coreData);
          const shouldStart = this.props.onStart(e, (0, _positionFns.createDraggableData)(this, coreData));
          if (shouldStart === false) return false;
          this.setState({
            dragging: true,
            dragged: true
          });
        });
        _defineProperty3(this, "onDrag", (e, coreData) => {
          if (!this.state.dragging) return false;
          (0, _log.default)("Draggable: onDrag: %j", coreData);
          const uiData = (0, _positionFns.createDraggableData)(this, coreData);
          const newState = {
            x: uiData.x,
            y: uiData.y,
            slackX: 0,
            slackY: 0
          };
          if (this.props.bounds) {
            const {
              x,
              y
            } = newState;
            newState.x += this.state.slackX;
            newState.y += this.state.slackY;
            const [newStateX, newStateY] = (0, _positionFns.getBoundPosition)(this, newState.x, newState.y);
            newState.x = newStateX;
            newState.y = newStateY;
            newState.slackX = this.state.slackX + (x - newState.x);
            newState.slackY = this.state.slackY + (y - newState.y);
            uiData.x = newState.x;
            uiData.y = newState.y;
            uiData.deltaX = newState.x - this.state.x;
            uiData.deltaY = newState.y - this.state.y;
          }
          const shouldUpdate = this.props.onDrag(e, uiData);
          if (shouldUpdate === false) return false;
          this.setState(newState);
        });
        _defineProperty3(this, "onDragStop", (e, coreData) => {
          if (!this.state.dragging) return false;
          const shouldContinue = this.props.onStop(e, (0, _positionFns.createDraggableData)(this, coreData));
          if (shouldContinue === false) return false;
          (0, _log.default)("Draggable: onDragStop: %j", coreData);
          const newState = {
            dragging: false,
            slackX: 0,
            slackY: 0
          };
          const controlled = Boolean(this.props.position);
          if (controlled) {
            const {
              x,
              y
            } = this.props.position;
            newState.x = x;
            newState.y = y;
          }
          this.setState(newState);
        });
        this.state = {
          // Whether or not we are currently dragging.
          dragging: false,
          // Whether or not we have been dragged before.
          dragged: false,
          // Current transform x and y.
          x: props.position ? props.position.x : props.defaultPosition.x,
          y: props.position ? props.position.y : props.defaultPosition.y,
          prevPropsPosition: {
            ...props.position
          },
          // Used for compensating for out-of-bounds drags
          slackX: 0,
          slackY: 0,
          // Can only determine if SVG after mounting
          isElementSVG: false
        };
        if (props.position && !(props.onDrag || props.onStop)) {
          console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.");
        }
      }
      componentDidMount() {
        if (typeof window.SVGElement !== "undefined" && this.findDOMNode() instanceof window.SVGElement) {
          this.setState({
            isElementSVG: true
          });
        }
      }
      componentWillUnmount() {
        if (this.state.dragging) {
          this.setState({
            dragging: false
          });
        }
      }
      // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
      // the underlying DOM node ourselves. See the README for more information.
      findDOMNode() {
        return this.props?.nodeRef?.current ?? _reactDom.default.findDOMNode(this);
      }
      render() {
        const {
          axis,
          bounds,
          children,
          defaultPosition,
          defaultClassName,
          defaultClassNameDragging,
          defaultClassNameDragged,
          position,
          positionOffset,
          scale,
          ...draggableCoreProps
        } = this.props;
        let style = {};
        let svgTransform = null;
        const controlled = Boolean(position);
        const draggable = !controlled || this.state.dragging;
        const validPosition = position || defaultPosition;
        const transformOpts = {
          // Set left if horizontal drag is enabled
          x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
          // Set top if vertical drag is enabled
          y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
        };
        if (this.state.isElementSVG) {
          svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
        } else {
          style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
        }
        const className = (0, _clsx.clsx)(children.props.className || "", defaultClassName, {
          [defaultClassNameDragging]: this.state.dragging,
          [defaultClassNameDragged]: this.state.dragged
        });
        return /* @__PURE__ */ React71.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {
          onStart: this.onDragStart,
          onDrag: this.onDrag,
          onStop: this.onDragStop
        }), /* @__PURE__ */ React71.cloneElement(React71.Children.only(children), {
          className,
          style: {
            ...children.props.style,
            ...style
          },
          transform: svgTransform
        }));
      }
    };
    exports.default = Draggable;
    _defineProperty3(Draggable, "displayName", "Draggable");
    _defineProperty3(Draggable, "propTypes", {
      // Accepts all props <DraggableCore> accepts.
      ..._DraggableCore.default.propTypes,
      /**
       * `axis` determines which axis the draggable can move.
       *
       *  Note that all callbacks will still return data as normal. This only
       *  controls flushing to the DOM.
       *
       * 'both' allows movement horizontally and vertically.
       * 'x' limits movement to horizontal axis.
       * 'y' limits movement to vertical axis.
       * 'none' limits all movement.
       *
       * Defaults to 'both'.
       */
      axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
      /**
       * `bounds` determines the range of movement available to the element.
       * Available values are:
       *
       * 'parent' restricts movement within the Draggable's parent node.
       *
       * Alternatively, pass an object with the following properties, all of which are optional:
       *
       * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
       *
       * All values are in px.
       *
       * Example:
       *
       * ```jsx
       *   let App = React.createClass({
       *       render: function () {
       *         return (
       *            <Draggable bounds={{right: 300, bottom: 300}}>
       *              <div>Content</div>
       *           </Draggable>
       *         );
       *       }
       *   });
       * ```
       */
      bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
        left: _propTypes.default.number,
        right: _propTypes.default.number,
        top: _propTypes.default.number,
        bottom: _propTypes.default.number
      }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
      defaultClassName: _propTypes.default.string,
      defaultClassNameDragging: _propTypes.default.string,
      defaultClassNameDragged: _propTypes.default.string,
      /**
       * `defaultPosition` specifies the x and y that the dragged item should start at
       *
       * Example:
       *
       * ```jsx
       *      let App = React.createClass({
       *          render: function () {
       *              return (
       *                  <Draggable defaultPosition={{x: 25, y: 25}}>
       *                      <div>I start with transformX: 25px and transformY: 25px;</div>
       *                  </Draggable>
       *              );
       *          }
       *      });
       * ```
       */
      defaultPosition: _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }),
      positionOffset: _propTypes.default.shape({
        x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      }),
      /**
       * `position`, if present, defines the current position of the element.
       *
       *  This is similar to how form elements in React work - if no `position` is supplied, the component
       *  is uncontrolled.
       *
       * Example:
       *
       * ```jsx
       *      let App = React.createClass({
       *          render: function () {
       *              return (
       *                  <Draggable position={{x: 25, y: 25}}>
       *                      <div>I start with transformX: 25px and transformY: 25px;</div>
       *                  </Draggable>
       *              );
       *          }
       *      });
       * ```
       */
      position: _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }),
      /**
       * These properties should be defined on the child, not here.
       */
      className: _shims.dontSetMe,
      style: _shims.dontSetMe,
      transform: _shims.dontSetMe
    });
    _defineProperty3(Draggable, "defaultProps", {
      ..._DraggableCore.default.defaultProps,
      axis: "both",
      bounds: false,
      defaultClassName: "react-draggable",
      defaultClassNameDragging: "react-draggable-dragging",
      defaultClassNameDragged: "react-draggable-dragged",
      defaultPosition: {
        x: 0,
        y: 0
      },
      scale: 1
    });
  }
});

// ../node_modules/react-draggable/build/cjs/cjs.js
var require_cjs = __commonJS({
  "../node_modules/react-draggable/build/cjs/cjs.js"(exports, module) {
    "use strict";
    var {
      default: Draggable,
      DraggableCore
    } = require_Draggable();
    module.exports = Draggable;
    module.exports.default = Draggable;
    module.exports.DraggableCore = DraggableCore;
  }
});

// ../node_modules/react-resizable/build/utils.js
var require_utils2 = __commonJS({
  "../node_modules/react-resizable/build/utils.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.cloneElement = cloneElement2;
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys3(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
          _defineProperty3(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty3(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function cloneElement2(element, props) {
      if (props.style && element.props.style) {
        props.style = _objectSpread3(_objectSpread3({}, element.props.style), props.style);
      }
      if (props.className && element.props.className) {
        props.className = element.props.className + " " + props.className;
      }
      return /* @__PURE__ */ _react.default.cloneElement(element, props);
    }
  }
});

// ../node_modules/react-resizable/build/propTypes.js
var require_propTypes = __commonJS({
  "../node_modules/react-resizable/build/propTypes.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.resizableProps = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDraggable = require_cjs();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var resizableProps = {
      /*
      * Restricts resizing to a particular axis (default: 'both')
      * 'both' - allows resizing by width or height
      * 'x' - only allows the width to be changed
      * 'y' - only allows the height to be changed
      * 'none' - disables resizing altogether
      * */
      axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
      className: _propTypes.default.string,
      /*
      * Require that one and only one child be present.
      * */
      children: _propTypes.default.element.isRequired,
      /*
      * These will be passed wholesale to react-draggable's DraggableCore
      * */
      draggableOpts: _propTypes.default.shape({
        allowAnyClick: _propTypes.default.bool,
        cancel: _propTypes.default.string,
        children: _propTypes.default.node,
        disabled: _propTypes.default.bool,
        enableUserSelectHack: _propTypes.default.bool,
        offsetParent: _propTypes.default.node,
        grid: _propTypes.default.arrayOf(_propTypes.default.number),
        handle: _propTypes.default.string,
        nodeRef: _propTypes.default.object,
        onStart: _propTypes.default.func,
        onDrag: _propTypes.default.func,
        onStop: _propTypes.default.func,
        onMouseDown: _propTypes.default.func,
        scale: _propTypes.default.number
      }),
      /*
      * Initial height
      * */
      height: function height() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var props = args[0];
        if (props.axis === "both" || props.axis === "y") {
          var _PropTypes$number;
          return (_PropTypes$number = _propTypes.default.number).isRequired.apply(_PropTypes$number, args);
        }
        return _propTypes.default.number.apply(_propTypes.default, args);
      },
      /*
      * Customize cursor resize handle
      * */
      handle: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      /*
      * If you change this, be sure to update your css
      * */
      handleSize: _propTypes.default.arrayOf(_propTypes.default.number),
      lockAspectRatio: _propTypes.default.bool,
      /*
      * Max X & Y measure
      * */
      maxConstraints: _propTypes.default.arrayOf(_propTypes.default.number),
      /*
      * Min X & Y measure
      * */
      minConstraints: _propTypes.default.arrayOf(_propTypes.default.number),
      /*
      * Called on stop resize event
      * */
      onResizeStop: _propTypes.default.func,
      /*
      * Called on start resize event
      * */
      onResizeStart: _propTypes.default.func,
      /*
      * Called on resize event
      * */
      onResize: _propTypes.default.func,
      /*
      * Defines which resize handles should be rendered (default: 'se')
      * 's' - South handle (bottom-center)
      * 'w' - West handle (left-center)
      * 'e' - East handle (right-center)
      * 'n' - North handle (top-center)
      * 'sw' - Southwest handle (bottom-left)
      * 'nw' - Northwest handle (top-left)
      * 'se' - Southeast handle (bottom-right)
      * 'ne' - Northeast handle (top-center)
      * */
      resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf(["s", "w", "e", "n", "sw", "nw", "se", "ne"])),
      /*
      * If `transform: scale(n)` is set on the parent, this should be set to `n`.
      * */
      transformScale: _propTypes.default.number,
      /*
       * Initial width
       */
      width: function width() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var props = args[0];
        if (props.axis === "both" || props.axis === "x") {
          var _PropTypes$number2;
          return (_PropTypes$number2 = _propTypes.default.number).isRequired.apply(_PropTypes$number2, args);
        }
        return _propTypes.default.number.apply(_propTypes.default, args);
      }
    };
    exports.resizableProps = resizableProps;
  }
});

// ../node_modules/react-resizable/build/Resizable.js
var require_Resizable = __commonJS({
  "../node_modules/react-resizable/build/Resizable.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var React71 = _interopRequireWildcard(require_react());
    var _reactDraggable = require_cjs();
    var _utils = require_utils2();
    var _propTypes = require_propTypes();
    var _excluded5 = ["children", "className", "draggableOpts", "width", "height", "handle", "handleSize", "lockAspectRatio", "axis", "minConstraints", "maxConstraints", "onResize", "onResizeStop", "onResizeStart", "resizeHandles", "transformScale"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
          _defineProperty3(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty3(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      };
      return _setPrototypeOf(o, p2);
    }
    var Resizable = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Resizable2, _React$Component);
      function Resizable2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.handleRefs = {};
        _this.lastHandleRect = null;
        _this.slack = null;
        return _this;
      }
      var _proto = Resizable2.prototype;
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.resetData();
      };
      _proto.resetData = function resetData() {
        this.lastHandleRect = this.slack = null;
      };
      _proto.runConstraints = function runConstraints(width, height) {
        var _this$props = this.props, minConstraints = _this$props.minConstraints, maxConstraints = _this$props.maxConstraints, lockAspectRatio = _this$props.lockAspectRatio;
        if (!minConstraints && !maxConstraints && !lockAspectRatio) return [width, height];
        if (lockAspectRatio) {
          var ratio = this.props.width / this.props.height;
          var deltaW = width - this.props.width;
          var deltaH = height - this.props.height;
          if (Math.abs(deltaW) > Math.abs(deltaH * ratio)) {
            height = width / ratio;
          } else {
            width = height * ratio;
          }
        }
        var oldW = width, oldH = height;
        var _ref = this.slack || [0, 0], slackW = _ref[0], slackH = _ref[1];
        width += slackW;
        height += slackH;
        if (minConstraints) {
          width = Math.max(minConstraints[0], width);
          height = Math.max(minConstraints[1], height);
        }
        if (maxConstraints) {
          width = Math.min(maxConstraints[0], width);
          height = Math.min(maxConstraints[1], height);
        }
        this.slack = [slackW + (oldW - width), slackH + (oldH - height)];
        return [width, height];
      };
      _proto.resizeHandler = function resizeHandler(handlerName, axis) {
        var _this2 = this;
        return function(e, _ref2) {
          var node = _ref2.node, deltaX = _ref2.deltaX, deltaY = _ref2.deltaY;
          if (handlerName === "onResizeStart") _this2.resetData();
          var canDragX = (_this2.props.axis === "both" || _this2.props.axis === "x") && axis !== "n" && axis !== "s";
          var canDragY = (_this2.props.axis === "both" || _this2.props.axis === "y") && axis !== "e" && axis !== "w";
          if (!canDragX && !canDragY) return;
          var axisV = axis[0];
          var axisH = axis[axis.length - 1];
          var handleRect = node.getBoundingClientRect();
          if (_this2.lastHandleRect != null) {
            if (axisH === "w") {
              var deltaLeftSinceLast = handleRect.left - _this2.lastHandleRect.left;
              deltaX += deltaLeftSinceLast;
            }
            if (axisV === "n") {
              var deltaTopSinceLast = handleRect.top - _this2.lastHandleRect.top;
              deltaY += deltaTopSinceLast;
            }
          }
          _this2.lastHandleRect = handleRect;
          if (axisH === "w") deltaX = -deltaX;
          if (axisV === "n") deltaY = -deltaY;
          var width = _this2.props.width + (canDragX ? deltaX / _this2.props.transformScale : 0);
          var height = _this2.props.height + (canDragY ? deltaY / _this2.props.transformScale : 0);
          var _this2$runConstraints = _this2.runConstraints(width, height);
          width = _this2$runConstraints[0];
          height = _this2$runConstraints[1];
          var dimensionsChanged = width !== _this2.props.width || height !== _this2.props.height;
          var cb = typeof _this2.props[handlerName] === "function" ? _this2.props[handlerName] : null;
          var shouldSkipCb = handlerName === "onResize" && !dimensionsChanged;
          if (cb && !shouldSkipCb) {
            e.persist == null ? void 0 : e.persist();
            cb(e, {
              node,
              size: {
                width,
                height
              },
              handle: axis
            });
          }
          if (handlerName === "onResizeStop") _this2.resetData();
        };
      };
      _proto.renderResizeHandle = function renderResizeHandle(handleAxis, ref) {
        var handle = this.props.handle;
        if (!handle) {
          return /* @__PURE__ */ React71.createElement("span", {
            className: "react-resizable-handle react-resizable-handle-" + handleAxis,
            ref
          });
        }
        if (typeof handle === "function") {
          return handle(handleAxis, ref);
        }
        var isDOMElement = typeof handle.type === "string";
        var props = _objectSpread3({
          ref
        }, isDOMElement ? {} : {
          handleAxis
        });
        return /* @__PURE__ */ React71.cloneElement(handle, props);
      };
      _proto.render = function render() {
        var _this3 = this;
        var _this$props2 = this.props, children = _this$props2.children, className = _this$props2.className, draggableOpts = _this$props2.draggableOpts, width = _this$props2.width, height = _this$props2.height, handle = _this$props2.handle, handleSize = _this$props2.handleSize, lockAspectRatio = _this$props2.lockAspectRatio, axis = _this$props2.axis, minConstraints = _this$props2.minConstraints, maxConstraints = _this$props2.maxConstraints, onResize = _this$props2.onResize, onResizeStop = _this$props2.onResizeStop, onResizeStart = _this$props2.onResizeStart, resizeHandles = _this$props2.resizeHandles, transformScale = _this$props2.transformScale, p2 = _objectWithoutPropertiesLoose2(_this$props2, _excluded5);
        return (0, _utils.cloneElement)(children, _objectSpread3(_objectSpread3({}, p2), {}, {
          className: (className ? className + " " : "") + "react-resizable",
          children: [].concat(children.props.children, resizeHandles.map(function(handleAxis) {
            var _this3$handleRefs$han;
            var ref = (_this3$handleRefs$han = _this3.handleRefs[handleAxis]) != null ? _this3$handleRefs$han : _this3.handleRefs[handleAxis] = /* @__PURE__ */ React71.createRef();
            return /* @__PURE__ */ React71.createElement(_reactDraggable.DraggableCore, _extends({}, draggableOpts, {
              nodeRef: ref,
              key: "resizableHandle-" + handleAxis,
              onStop: _this3.resizeHandler("onResizeStop", handleAxis),
              onStart: _this3.resizeHandler("onResizeStart", handleAxis),
              onDrag: _this3.resizeHandler("onResize", handleAxis)
            }), _this3.renderResizeHandle(handleAxis, ref));
          }))
        }));
      };
      return Resizable2;
    }(React71.Component);
    exports.default = Resizable;
    Resizable.propTypes = _propTypes.resizableProps;
    Resizable.defaultProps = {
      axis: "both",
      handleSize: [20, 20],
      lockAspectRatio: false,
      minConstraints: [20, 20],
      maxConstraints: [Infinity, Infinity],
      resizeHandles: ["se"],
      transformScale: 1
    };
  }
});

// ../node_modules/react-resizable/build/ResizableBox.js
var require_ResizableBox = __commonJS({
  "../node_modules/react-resizable/build/ResizableBox.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var React71 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _Resizable = _interopRequireDefault(require_Resizable());
    var _propTypes2 = require_propTypes();
    var _excluded5 = ["handle", "handleSize", "onResize", "onResizeStart", "onResizeStop", "draggableOpts", "minConstraints", "maxConstraints", "lockAspectRatio", "axis", "width", "height", "resizeHandles", "style", "transformScale"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function ownKeys3(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
          _defineProperty3(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty3(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      };
      return _setPrototypeOf(o, p2);
    }
    var ResizableBox = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(ResizableBox2, _React$Component);
      function ResizableBox2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.state = {
          width: _this.props.width,
          height: _this.props.height,
          propsWidth: _this.props.width,
          propsHeight: _this.props.height
        };
        _this.onResize = function(e, data2) {
          var size = data2.size;
          if (_this.props.onResize) {
            e.persist == null ? void 0 : e.persist();
            _this.setState(size, function() {
              return _this.props.onResize && _this.props.onResize(e, data2);
            });
          } else {
            _this.setState(size);
          }
        };
        return _this;
      }
      ResizableBox2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        if (state.propsWidth !== props.width || state.propsHeight !== props.height) {
          return {
            width: props.width,
            height: props.height,
            propsWidth: props.width,
            propsHeight: props.height
          };
        }
        return null;
      };
      var _proto = ResizableBox2.prototype;
      _proto.render = function render() {
        var _this$props = this.props, handle = _this$props.handle, handleSize = _this$props.handleSize, onResize = _this$props.onResize, onResizeStart = _this$props.onResizeStart, onResizeStop = _this$props.onResizeStop, draggableOpts = _this$props.draggableOpts, minConstraints = _this$props.minConstraints, maxConstraints = _this$props.maxConstraints, lockAspectRatio = _this$props.lockAspectRatio, axis = _this$props.axis, width = _this$props.width, height = _this$props.height, resizeHandles = _this$props.resizeHandles, style = _this$props.style, transformScale = _this$props.transformScale, props = _objectWithoutPropertiesLoose2(_this$props, _excluded5);
        return /* @__PURE__ */ React71.createElement(_Resizable.default, {
          axis,
          draggableOpts,
          handle,
          handleSize,
          height: this.state.height,
          lockAspectRatio,
          maxConstraints,
          minConstraints,
          onResizeStart,
          onResize: this.onResize,
          onResizeStop,
          resizeHandles,
          transformScale,
          width: this.state.width
        }, /* @__PURE__ */ React71.createElement("div", _extends({}, props, {
          style: _objectSpread3(_objectSpread3({}, style), {}, {
            width: this.state.width + "px",
            height: this.state.height + "px"
          })
        })));
      };
      return ResizableBox2;
    }(React71.Component);
    exports.default = ResizableBox;
    ResizableBox.propTypes = _objectSpread3(_objectSpread3({}, _propTypes2.resizableProps), {}, {
      children: _propTypes.default.element
    });
  }
});

// ../node_modules/react-resizable/index.js
var require_react_resizable = __commonJS({
  "../node_modules/react-resizable/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error("Don't instantiate Resizable directly! Use require('react-resizable').Resizable");
    };
    module.exports.Resizable = require_Resizable().default;
    module.exports.ResizableBox = require_ResizableBox().default;
  }
});

// ../node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js
var require_ReactGridLayoutPropTypes = __commonJS({
  "../node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.resizeHandleType = exports.resizeHandleAxesType = exports.default = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react = _interopRequireDefault(require_react());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var resizeHandleAxesType = exports.resizeHandleAxesType = _propTypes.default.arrayOf(_propTypes.default.oneOf(["s", "w", "e", "n", "sw", "nw", "se", "ne"]));
    var resizeHandleType = exports.resizeHandleType = _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]);
    var _default = exports.default = {
      //
      // Basic props
      //
      className: _propTypes.default.string,
      style: _propTypes.default.object,
      // This can be set explicitly. If it is not set, it will automatically
      // be set to the container width. Note that resizes will *not* cause this to adjust.
      // If you need that behavior, use WidthProvider.
      width: _propTypes.default.number,
      // If true, the container height swells and contracts to fit contents
      autoSize: _propTypes.default.bool,
      // # of cols.
      cols: _propTypes.default.number,
      // A selector that will not be draggable.
      draggableCancel: _propTypes.default.string,
      // A selector for the draggable handler
      draggableHandle: _propTypes.default.string,
      // Deprecated
      verticalCompact: function(props) {
        if (props.verticalCompact === false && true) {
          console.warn(
            // eslint-disable-line no-console
            '`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. Use `compactType`: "horizontal" | "vertical" | null.'
          );
        }
      },
      // Choose vertical or hotizontal compaction
      compactType: _propTypes.default.oneOf(["vertical", "horizontal"]),
      // layout is an array of object with the format:
      // {x: Number, y: Number, w: Number, h: Number, i: String}
      layout: function(props) {
        var layout = props.layout;
        if (layout === void 0) return;
        require_utils().validateLayout(layout, "layout");
      },
      //
      // Grid Dimensions
      //
      // Margin between items [x, y] in px
      margin: _propTypes.default.arrayOf(_propTypes.default.number),
      // Padding inside the container [x, y] in px
      containerPadding: _propTypes.default.arrayOf(_propTypes.default.number),
      // Rows have a static height, but you can change this based on breakpoints if you like
      rowHeight: _propTypes.default.number,
      // Default Infinity, but you can specify a max here if you like.
      // Note that this isn't fully fleshed out and won't error if you specify a layout that
      // extends beyond the row capacity. It will, however, not allow users to drag/resize
      // an item past the barrier. They can push items beyond the barrier, though.
      // Intentionally not documented for this reason.
      maxRows: _propTypes.default.number,
      //
      // Flags
      //
      isBounded: _propTypes.default.bool,
      isDraggable: _propTypes.default.bool,
      isResizable: _propTypes.default.bool,
      // If true, grid can be placed one over the other.
      allowOverlap: _propTypes.default.bool,
      // If true, grid items won't change position when being dragged over.
      preventCollision: _propTypes.default.bool,
      // Use CSS transforms instead of top/left
      useCSSTransforms: _propTypes.default.bool,
      // parent layout transform scale
      transformScale: _propTypes.default.number,
      // If true, an external element can trigger onDrop callback with a specific grid position as a parameter
      isDroppable: _propTypes.default.bool,
      // Resize handle options
      resizeHandles: resizeHandleAxesType,
      resizeHandle: resizeHandleType,
      //
      // Callbacks
      //
      // Callback so you can save the layout. Calls after each drag & resize stops.
      onLayoutChange: _propTypes.default.func,
      // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).
      // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.
      onDragStart: _propTypes.default.func,
      // Calls on each drag movement.
      onDrag: _propTypes.default.func,
      // Calls when drag is complete.
      onDragStop: _propTypes.default.func,
      //Calls when resize starts.
      onResizeStart: _propTypes.default.func,
      // Calls when resize movement happens.
      onResize: _propTypes.default.func,
      // Calls when resize is complete.
      onResizeStop: _propTypes.default.func,
      // Calls when some element is dropped.
      onDrop: _propTypes.default.func,
      //
      // Other validations
      //
      droppingItem: _propTypes.default.shape({
        i: _propTypes.default.string.isRequired,
        w: _propTypes.default.number.isRequired,
        h: _propTypes.default.number.isRequired
      }),
      // Children must not have duplicate keys.
      children: function(props, propName) {
        const children = props[propName];
        const keys = {};
        _react.default.Children.forEach(children, function(child) {
          if (child?.key == null) return;
          if (keys[child.key]) {
            throw new Error('Duplicate child key "' + child.key + '" found! This will cause problems in ReactGridLayout.');
          }
          keys[child.key] = true;
        });
      },
      // Optional ref for getting a reference for the wrapping div.
      innerRef: _propTypes.default.any
    };
  }
});

// ../node_modules/react-grid-layout/build/GridItem.js
var require_GridItem = __commonJS({
  "../node_modules/react-grid-layout/build/GridItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _reactDom = require_react_dom();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDraggable = require_cjs();
    var _reactResizable = require_react_resizable();
    var _utils = require_utils();
    var _calculateUtils = require_calculateUtils();
    var _ReactGridLayoutPropTypes = require_ReactGridLayoutPropTypes();
    var _clsx = _interopRequireDefault(require_clsx());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _defineProperty3(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var GridItem = class extends _react.default.Component {
      constructor() {
        super(...arguments);
        _defineProperty3(this, "state", {
          resizing: null,
          dragging: null,
          className: ""
        });
        _defineProperty3(this, "elementRef", /* @__PURE__ */ _react.default.createRef());
        _defineProperty3(this, "onDragStart", (e, _ref) => {
          let {
            node
          } = _ref;
          const {
            onDragStart,
            transformScale
          } = this.props;
          if (!onDragStart) return;
          const newPosition = {
            top: 0,
            left: 0
          };
          const {
            offsetParent
          } = node;
          if (!offsetParent) return;
          const parentRect = offsetParent.getBoundingClientRect();
          const clientRect = node.getBoundingClientRect();
          const cLeft = clientRect.left / transformScale;
          const pLeft = parentRect.left / transformScale;
          const cTop = clientRect.top / transformScale;
          const pTop = parentRect.top / transformScale;
          newPosition.left = cLeft - pLeft + offsetParent.scrollLeft;
          newPosition.top = cTop - pTop + offsetParent.scrollTop;
          this.setState({
            dragging: newPosition
          });
          const {
            x,
            y
          } = (0, _calculateUtils.calcXY)(this.getPositionParams(), newPosition.top, newPosition.left, this.props.w, this.props.h);
          return onDragStart.call(this, this.props.i, x, y, {
            e,
            node,
            newPosition
          });
        });
        _defineProperty3(this, "onDrag", (e, _ref2, dontFlush) => {
          let {
            node,
            deltaX,
            deltaY
          } = _ref2;
          const {
            onDrag
          } = this.props;
          if (!onDrag) return;
          if (!this.state.dragging) {
            throw new Error("onDrag called before onDragStart.");
          }
          let top = this.state.dragging.top + deltaY;
          let left = this.state.dragging.left + deltaX;
          const {
            isBounded,
            i,
            w,
            h,
            containerWidth
          } = this.props;
          const positionParams = this.getPositionParams();
          if (isBounded) {
            const {
              offsetParent
            } = node;
            if (offsetParent) {
              const {
                margin,
                rowHeight
              } = this.props;
              const bottomBoundary = offsetParent.clientHeight - (0, _calculateUtils.calcGridItemWHPx)(h, rowHeight, margin[1]);
              top = (0, _calculateUtils.clamp)(top, 0, bottomBoundary);
              const colWidth = (0, _calculateUtils.calcGridColWidth)(positionParams);
              const rightBoundary = containerWidth - (0, _calculateUtils.calcGridItemWHPx)(w, colWidth, margin[0]);
              left = (0, _calculateUtils.clamp)(left, 0, rightBoundary);
            }
          }
          const newPosition = {
            top,
            left
          };
          if (dontFlush) {
            this.setState({
              dragging: newPosition
            });
          } else {
            (0, _reactDom.flushSync)(() => {
              this.setState({
                dragging: newPosition
              });
            });
          }
          const {
            x,
            y
          } = (0, _calculateUtils.calcXY)(positionParams, top, left, w, h);
          return onDrag.call(this, i, x, y, {
            e,
            node,
            newPosition
          });
        });
        _defineProperty3(this, "onDragStop", (e, _ref3) => {
          let {
            node
          } = _ref3;
          const {
            onDragStop
          } = this.props;
          if (!onDragStop) return;
          if (!this.state.dragging) {
            throw new Error("onDragEnd called before onDragStart.");
          }
          const {
            w,
            h,
            i
          } = this.props;
          const {
            left,
            top
          } = this.state.dragging;
          const newPosition = {
            top,
            left
          };
          this.setState({
            dragging: null
          });
          const {
            x,
            y
          } = (0, _calculateUtils.calcXY)(this.getPositionParams(), top, left, w, h);
          return onDragStop.call(this, i, x, y, {
            e,
            node,
            newPosition
          });
        });
        _defineProperty3(this, "onResizeStop", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, "onResizeStop"));
        _defineProperty3(this, "onResizeStart", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, "onResizeStart"));
        _defineProperty3(this, "onResize", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, "onResize"));
      }
      shouldComponentUpdate(nextProps, nextState) {
        if (this.props.children !== nextProps.children) return true;
        if (this.props.droppingPosition !== nextProps.droppingPosition) return true;
        const oldPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(this.props), this.props.x, this.props.y, this.props.w, this.props.h, this.state);
        const newPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(nextProps), nextProps.x, nextProps.y, nextProps.w, nextProps.h, nextState);
        return !(0, _utils.fastPositionEqual)(oldPosition, newPosition) || this.props.useCSSTransforms !== nextProps.useCSSTransforms;
      }
      componentDidMount() {
        this.moveDroppingItem({});
      }
      componentDidUpdate(prevProps) {
        this.moveDroppingItem(prevProps);
      }
      // When a droppingPosition is present, this means we should fire a move event, as if we had moved
      // this element by `x, y` pixels.
      moveDroppingItem(prevProps) {
        const {
          droppingPosition
        } = this.props;
        if (!droppingPosition) return;
        const node = this.elementRef.current;
        if (!node) return;
        const prevDroppingPosition = prevProps.droppingPosition || {
          left: 0,
          top: 0
        };
        const {
          dragging
        } = this.state;
        const shouldDrag = dragging && droppingPosition.left !== prevDroppingPosition.left || droppingPosition.top !== prevDroppingPosition.top;
        if (!dragging) {
          this.onDragStart(droppingPosition.e, {
            node,
            deltaX: droppingPosition.left,
            deltaY: droppingPosition.top
          });
        } else if (shouldDrag) {
          const deltaX = droppingPosition.left - dragging.left;
          const deltaY = droppingPosition.top - dragging.top;
          this.onDrag(
            droppingPosition.e,
            {
              node,
              deltaX,
              deltaY
            },
            true
            // dontFLush: avoid flushSync to temper warnings
          );
        }
      }
      getPositionParams() {
        let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return {
          cols: props.cols,
          containerPadding: props.containerPadding,
          containerWidth: props.containerWidth,
          margin: props.margin,
          maxRows: props.maxRows,
          rowHeight: props.rowHeight
        };
      }
      /**
       * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it
       * well when server rendering, and the only way to do that properly is to use percentage width/left because
       * we don't know exactly what the browser viewport is.
       * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage
       * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.
       *
       * @param  {Object} pos Position object with width, height, left, top.
       * @return {Object}     Style object.
       */
      createStyle(pos) {
        const {
          usePercentages,
          containerWidth,
          useCSSTransforms
        } = this.props;
        let style;
        if (useCSSTransforms) {
          style = (0, _utils.setTransform)(pos);
        } else {
          style = (0, _utils.setTopLeft)(pos);
          if (usePercentages) {
            style.left = (0, _utils.perc)(pos.left / containerWidth);
            style.width = (0, _utils.perc)(pos.width / containerWidth);
          }
        }
        return style;
      }
      /**
       * Mix a Draggable instance into a child.
       * @param  {Element} child    Child element.
       * @return {Element}          Child wrapped in Draggable.
       */
      mixinDraggable(child, isDraggable) {
        return /* @__PURE__ */ _react.default.createElement(_reactDraggable.DraggableCore, {
          disabled: !isDraggable,
          onStart: this.onDragStart,
          onDrag: this.onDrag,
          onStop: this.onDragStop,
          handle: this.props.handle,
          cancel: ".react-resizable-handle" + (this.props.cancel ? "," + this.props.cancel : ""),
          scale: this.props.transformScale,
          nodeRef: this.elementRef
        }, child);
      }
      /**
       * Utility function to setup callback handler definitions for
       * similarily structured resize events.
       */
      curryResizeHandler(position, handler) {
        return (e, data2) => (
          /*: Function*/
          handler(e, data2, position)
        );
      }
      /**
       * Mix a Resizable instance into a child.
       * @param  {Element} child    Child element.
       * @param  {Object} position  Position object (pixel values)
       * @return {Element}          Child wrapped in Resizable.
       */
      mixinResizable(child, position, isResizable) {
        const {
          cols,
          minW,
          minH,
          maxW,
          maxH,
          transformScale,
          resizeHandles,
          resizeHandle
        } = this.props;
        const positionParams = this.getPositionParams();
        const maxWidth = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, cols, 0).width;
        const mins = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, minW, minH);
        const maxes = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, maxW, maxH);
        const minConstraints = [mins.width, mins.height];
        const maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];
        return /* @__PURE__ */ _react.default.createElement(
          _reactResizable.Resizable,
          {
            draggableOpts: {
              disabled: !isResizable
            },
            className: isResizable ? void 0 : "react-resizable-hide",
            width: position.width,
            height: position.height,
            minConstraints,
            maxConstraints,
            onResizeStop: this.curryResizeHandler(position, this.onResizeStop),
            onResizeStart: this.curryResizeHandler(position, this.onResizeStart),
            onResize: this.curryResizeHandler(position, this.onResize),
            transformScale,
            resizeHandles,
            handle: resizeHandle
          },
          child
        );
      }
      /**
       * Wrapper around resize events to provide more useful data.
       */
      onResizeHandler(e, _ref4, position, handlerName) {
        let {
          node,
          size,
          handle
        } = _ref4;
        const handler = this.props[handlerName];
        if (!handler) return;
        const {
          x,
          y,
          i,
          maxH,
          minH,
          containerWidth
        } = this.props;
        const {
          minW,
          maxW
        } = this.props;
        let updatedSize = size;
        if (node) {
          updatedSize = (0, _utils.resizeItemInDirection)(handle, position, size, containerWidth);
          (0, _reactDom.flushSync)(() => {
            this.setState({
              resizing: handlerName === "onResizeStop" ? null : updatedSize
            });
          });
        }
        let {
          w,
          h
        } = (0, _calculateUtils.calcWH)(this.getPositionParams(), updatedSize.width, updatedSize.height, x, y, handle);
        w = (0, _calculateUtils.clamp)(w, Math.max(minW, 1), maxW);
        h = (0, _calculateUtils.clamp)(h, minH, maxH);
        handler.call(this, i, w, h, {
          e,
          node,
          size: updatedSize,
          handle
        });
      }
      render() {
        const {
          x,
          y,
          w,
          h,
          isDraggable,
          isResizable,
          droppingPosition,
          useCSSTransforms
        } = this.props;
        const pos = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(), x, y, w, h, this.state);
        const child = _react.default.Children.only(this.props.children);
        let newChild = /* @__PURE__ */ _react.default.cloneElement(child, {
          ref: this.elementRef,
          className: (0, _clsx.default)("react-grid-item", child.props.className, this.props.className, {
            static: this.props.static,
            resizing: Boolean(this.state.resizing),
            "react-draggable": isDraggable,
            "react-draggable-dragging": Boolean(this.state.dragging),
            dropping: Boolean(droppingPosition),
            cssTransforms: useCSSTransforms
          }),
          // We can set the width and height on the child, but unfortunately we can't set the position.
          style: {
            ...this.props.style,
            ...child.props.style,
            ...this.createStyle(pos)
          }
        });
        newChild = this.mixinResizable(newChild, pos, isResizable);
        newChild = this.mixinDraggable(newChild, isDraggable);
        return newChild;
      }
    };
    exports.default = GridItem;
    _defineProperty3(GridItem, "propTypes", {
      // Children must be only a single element
      children: _propTypes.default.element,
      // General grid attributes
      cols: _propTypes.default.number.isRequired,
      containerWidth: _propTypes.default.number.isRequired,
      rowHeight: _propTypes.default.number.isRequired,
      margin: _propTypes.default.array.isRequired,
      maxRows: _propTypes.default.number.isRequired,
      containerPadding: _propTypes.default.array.isRequired,
      // These are all in grid units
      x: _propTypes.default.number.isRequired,
      y: _propTypes.default.number.isRequired,
      w: _propTypes.default.number.isRequired,
      h: _propTypes.default.number.isRequired,
      // All optional
      minW: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("minWidth not Number");
        if (value > props.w || value > props.maxW) return new Error("minWidth larger than item width/maxWidth");
      },
      maxW: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("maxWidth not Number");
        if (value < props.w || value < props.minW) return new Error("maxWidth smaller than item width/minWidth");
      },
      minH: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("minHeight not Number");
        if (value > props.h || value > props.maxH) return new Error("minHeight larger than item height/maxHeight");
      },
      maxH: function(props, propName) {
        const value = props[propName];
        if (typeof value !== "number") return new Error("maxHeight not Number");
        if (value < props.h || value < props.minH) return new Error("maxHeight smaller than item height/minHeight");
      },
      // ID is nice to have for callbacks
      i: _propTypes.default.string.isRequired,
      // Resize handle options
      resizeHandles: _ReactGridLayoutPropTypes.resizeHandleAxesType,
      resizeHandle: _ReactGridLayoutPropTypes.resizeHandleType,
      // Functions
      onDragStop: _propTypes.default.func,
      onDragStart: _propTypes.default.func,
      onDrag: _propTypes.default.func,
      onResizeStop: _propTypes.default.func,
      onResizeStart: _propTypes.default.func,
      onResize: _propTypes.default.func,
      // Flags
      isDraggable: _propTypes.default.bool.isRequired,
      isResizable: _propTypes.default.bool.isRequired,
      isBounded: _propTypes.default.bool.isRequired,
      static: _propTypes.default.bool,
      // Use CSS transforms instead of top/left
      useCSSTransforms: _propTypes.default.bool.isRequired,
      transformScale: _propTypes.default.number,
      // Others
      className: _propTypes.default.string,
      // Selector for draggable handle
      handle: _propTypes.default.string,
      // Selector for draggable cancel (see react-draggable)
      cancel: _propTypes.default.string,
      // Current position of a dropping element
      droppingPosition: _propTypes.default.shape({
        e: _propTypes.default.object.isRequired,
        left: _propTypes.default.number.isRequired,
        top: _propTypes.default.number.isRequired
      })
    });
    _defineProperty3(GridItem, "defaultProps", {
      className: "",
      cancel: "",
      handle: "",
      minH: 1,
      minW: 1,
      maxH: Infinity,
      maxW: Infinity,
      transformScale: 1
    });
  }
});

// ../node_modules/react-grid-layout/build/ReactGridLayout.js
var require_ReactGridLayout = __commonJS({
  "../node_modules/react-grid-layout/build/ReactGridLayout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React71 = _interopRequireWildcard(require_react());
    var _fastEquals = require_fast_equals();
    var _clsx = _interopRequireDefault(require_clsx());
    var _utils = require_utils();
    var _calculateUtils = require_calculateUtils();
    var _GridItem = _interopRequireDefault(require_GridItem());
    var _ReactGridLayoutPropTypes = _interopRequireDefault(require_ReactGridLayoutPropTypes());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _defineProperty3(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var layoutClassName = "react-grid-layout";
    var isFirefox = false;
    try {
      isFirefox = /firefox/i.test(navigator.userAgent);
    } catch (e) {
    }
    var ReactGridLayout = class extends React71.Component {
      constructor() {
        super(...arguments);
        _defineProperty3(this, "state", {
          activeDrag: null,
          layout: (0, _utils.synchronizeLayoutWithChildren)(
            this.props.layout,
            this.props.children,
            this.props.cols,
            // Legacy support for verticalCompact: false
            (0, _utils.compactType)(this.props),
            this.props.allowOverlap
          ),
          mounted: false,
          oldDragItem: null,
          oldLayout: null,
          oldResizeItem: null,
          resizing: false,
          droppingDOMNode: null,
          children: []
        });
        _defineProperty3(this, "dragEnterCounter", 0);
        _defineProperty3(this, "onDragStart", (i, x, y, _ref) => {
          let {
            e,
            node
          } = _ref;
          const {
            layout
          } = this.state;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          const placeholder = {
            w: l.w,
            h: l.h,
            x: l.x,
            y: l.y,
            placeholder: true,
            i
          };
          this.setState({
            oldDragItem: (0, _utils.cloneLayoutItem)(l),
            oldLayout: layout,
            activeDrag: placeholder
          });
          return this.props.onDragStart(layout, l, l, null, e, node);
        });
        _defineProperty3(this, "onDrag", (i, x, y, _ref2) => {
          let {
            e,
            node
          } = _ref2;
          const {
            oldDragItem
          } = this.state;
          let {
            layout
          } = this.state;
          const {
            cols,
            allowOverlap,
            preventCollision
          } = this.props;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          const placeholder = {
            w: l.w,
            h: l.h,
            x: l.x,
            y: l.y,
            placeholder: true,
            i
          };
          const isUserAction = true;
          layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, preventCollision, (0, _utils.compactType)(this.props), cols, allowOverlap);
          this.props.onDrag(layout, oldDragItem, l, placeholder, e, node);
          this.setState({
            layout: allowOverlap ? layout : (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols),
            activeDrag: placeholder
          });
        });
        _defineProperty3(this, "onDragStop", (i, x, y, _ref3) => {
          let {
            e,
            node
          } = _ref3;
          if (!this.state.activeDrag) return;
          const {
            oldDragItem
          } = this.state;
          let {
            layout
          } = this.state;
          const {
            cols,
            preventCollision,
            allowOverlap
          } = this.props;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          const isUserAction = true;
          layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, preventCollision, (0, _utils.compactType)(this.props), cols, allowOverlap);
          const newLayout = allowOverlap ? layout : (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols);
          this.props.onDragStop(newLayout, oldDragItem, l, null, e, node);
          const {
            oldLayout
          } = this.state;
          this.setState({
            activeDrag: null,
            layout: newLayout,
            oldDragItem: null,
            oldLayout: null
          });
          this.onLayoutMaybeChanged(newLayout, oldLayout);
        });
        _defineProperty3(this, "onResizeStart", (i, w, h, _ref4) => {
          let {
            e,
            node
          } = _ref4;
          const {
            layout
          } = this.state;
          const l = (0, _utils.getLayoutItem)(layout, i);
          if (!l) return;
          this.setState({
            oldResizeItem: (0, _utils.cloneLayoutItem)(l),
            oldLayout: this.state.layout,
            resizing: true
          });
          this.props.onResizeStart(layout, l, l, null, e, node);
        });
        _defineProperty3(this, "onResize", (i, w, h, _ref5) => {
          let {
            e,
            node,
            size,
            handle
          } = _ref5;
          const {
            oldResizeItem
          } = this.state;
          const {
            layout
          } = this.state;
          const {
            cols,
            preventCollision,
            allowOverlap
          } = this.props;
          let shouldMoveItem = false;
          let finalLayout;
          let x;
          let y;
          const [newLayout, l] = (0, _utils.withLayoutItem)(layout, i, (l2) => {
            let hasCollisions;
            x = l2.x;
            y = l2.y;
            if (["sw", "w", "nw", "n", "ne"].indexOf(handle) !== -1) {
              if (["sw", "nw", "w"].indexOf(handle) !== -1) {
                x = l2.x + (l2.w - w);
                w = l2.x !== x && x < 0 ? l2.w : w;
                x = x < 0 ? 0 : x;
              }
              if (["ne", "n", "nw"].indexOf(handle) !== -1) {
                y = l2.y + (l2.h - h);
                h = l2.y !== y && y < 0 ? l2.h : h;
                y = y < 0 ? 0 : y;
              }
              shouldMoveItem = true;
            }
            if (preventCollision && !allowOverlap) {
              const collisions = (0, _utils.getAllCollisions)(layout, {
                ...l2,
                w,
                h,
                x,
                y
              }).filter((layoutItem) => layoutItem.i !== l2.i);
              hasCollisions = collisions.length > 0;
              if (hasCollisions) {
                y = l2.y;
                h = l2.h;
                x = l2.x;
                w = l2.w;
                shouldMoveItem = false;
              }
            }
            l2.w = w;
            l2.h = h;
            return l2;
          });
          if (!l) return;
          finalLayout = newLayout;
          if (shouldMoveItem) {
            const isUserAction = true;
            finalLayout = (0, _utils.moveElement)(newLayout, l, x, y, isUserAction, this.props.preventCollision, (0, _utils.compactType)(this.props), cols, allowOverlap);
          }
          const placeholder = {
            w: l.w,
            h: l.h,
            x: l.x,
            y: l.y,
            static: true,
            i
          };
          this.props.onResize(finalLayout, oldResizeItem, l, placeholder, e, node);
          this.setState({
            layout: allowOverlap ? finalLayout : (0, _utils.compact)(finalLayout, (0, _utils.compactType)(this.props), cols),
            activeDrag: placeholder
          });
        });
        _defineProperty3(this, "onResizeStop", (i, w, h, _ref6) => {
          let {
            e,
            node
          } = _ref6;
          const {
            layout,
            oldResizeItem
          } = this.state;
          const {
            cols,
            allowOverlap
          } = this.props;
          const l = (0, _utils.getLayoutItem)(layout, i);
          const newLayout = allowOverlap ? layout : (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols);
          this.props.onResizeStop(newLayout, oldResizeItem, l, null, e, node);
          const {
            oldLayout
          } = this.state;
          this.setState({
            activeDrag: null,
            layout: newLayout,
            oldResizeItem: null,
            oldLayout: null,
            resizing: false
          });
          this.onLayoutMaybeChanged(newLayout, oldLayout);
        });
        _defineProperty3(this, "onDragOver", (e) => {
          e.preventDefault();
          e.stopPropagation();
          if (isFirefox && // $FlowIgnore can't figure this out
          !e.nativeEvent.target?.classList.contains(layoutClassName)) {
            return false;
          }
          const {
            droppingItem,
            onDropDragOver,
            margin,
            cols,
            rowHeight,
            maxRows,
            width,
            containerPadding,
            transformScale
          } = this.props;
          const onDragOverResult = onDropDragOver?.(e);
          if (onDragOverResult === false) {
            if (this.state.droppingDOMNode) {
              this.removeDroppingPlaceholder();
            }
            return false;
          }
          const finalDroppingItem = {
            ...droppingItem,
            ...onDragOverResult
          };
          const {
            layout
          } = this.state;
          const gridRect = e.currentTarget.getBoundingClientRect();
          const layerX = e.clientX - gridRect.left;
          const layerY = e.clientY - gridRect.top;
          const droppingPosition = {
            left: layerX / transformScale,
            top: layerY / transformScale,
            e
          };
          if (!this.state.droppingDOMNode) {
            const positionParams = {
              cols,
              margin,
              maxRows,
              rowHeight,
              containerWidth: width,
              containerPadding: containerPadding || margin
            };
            const calculatedPosition = (0, _calculateUtils.calcXY)(positionParams, layerY, layerX, finalDroppingItem.w, finalDroppingItem.h);
            this.setState({
              droppingDOMNode: /* @__PURE__ */ React71.createElement("div", {
                key: finalDroppingItem.i
              }),
              droppingPosition,
              layout: [...layout, {
                ...finalDroppingItem,
                x: calculatedPosition.x,
                y: calculatedPosition.y,
                static: false,
                isDraggable: true
              }]
            });
          } else if (this.state.droppingPosition) {
            const {
              left,
              top
            } = this.state.droppingPosition;
            const shouldUpdatePosition = left != layerX || top != layerY;
            if (shouldUpdatePosition) {
              this.setState({
                droppingPosition
              });
            }
          }
        });
        _defineProperty3(this, "removeDroppingPlaceholder", () => {
          const {
            droppingItem,
            cols
          } = this.props;
          const {
            layout
          } = this.state;
          const newLayout = (0, _utils.compact)(layout.filter((l) => l.i !== droppingItem.i), (0, _utils.compactType)(this.props), cols, this.props.allowOverlap);
          this.setState({
            layout: newLayout,
            droppingDOMNode: null,
            activeDrag: null,
            droppingPosition: void 0
          });
        });
        _defineProperty3(this, "onDragLeave", (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.dragEnterCounter--;
          if (this.dragEnterCounter === 0) {
            this.removeDroppingPlaceholder();
          }
        });
        _defineProperty3(this, "onDragEnter", (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.dragEnterCounter++;
        });
        _defineProperty3(this, "onDrop", (e) => {
          e.preventDefault();
          e.stopPropagation();
          const {
            droppingItem
          } = this.props;
          const {
            layout
          } = this.state;
          const item = layout.find((l) => l.i === droppingItem.i);
          this.dragEnterCounter = 0;
          this.removeDroppingPlaceholder();
          this.props.onDrop(layout, item, e);
        });
      }
      componentDidMount() {
        this.setState({
          mounted: true
        });
        this.onLayoutMaybeChanged(this.state.layout, this.props.layout);
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let newLayoutBase;
        if (prevState.activeDrag) {
          return null;
        }
        if (!(0, _fastEquals.deepEqual)(nextProps.layout, prevState.propsLayout) || nextProps.compactType !== prevState.compactType) {
          newLayoutBase = nextProps.layout;
        } else if (!(0, _utils.childrenEqual)(nextProps.children, prevState.children)) {
          newLayoutBase = prevState.layout;
        }
        if (newLayoutBase) {
          const newLayout = (0, _utils.synchronizeLayoutWithChildren)(newLayoutBase, nextProps.children, nextProps.cols, (0, _utils.compactType)(nextProps), nextProps.allowOverlap);
          return {
            layout: newLayout,
            // We need to save these props to state for using
            // getDerivedStateFromProps instead of componentDidMount (in which we would get extra rerender)
            compactType: nextProps.compactType,
            children: nextProps.children,
            propsLayout: nextProps.layout
          };
        }
        return null;
      }
      shouldComponentUpdate(nextProps, nextState) {
        return (
          // NOTE: this is almost always unequal. Therefore the only way to get better performance
          // from SCU is if the user intentionally memoizes children. If they do, and they can
          // handle changes properly, performance will increase.
          this.props.children !== nextProps.children || !(0, _utils.fastRGLPropsEqual)(this.props, nextProps, _fastEquals.deepEqual) || this.state.activeDrag !== nextState.activeDrag || this.state.mounted !== nextState.mounted || this.state.droppingPosition !== nextState.droppingPosition
        );
      }
      componentDidUpdate(prevProps, prevState) {
        if (!this.state.activeDrag) {
          const newLayout = this.state.layout;
          const oldLayout = prevState.layout;
          this.onLayoutMaybeChanged(newLayout, oldLayout);
        }
      }
      /**
       * Calculates a pixel value for the container.
       * @return {String} Container height in pixels.
       */
      containerHeight() {
        if (!this.props.autoSize) return;
        const nbRow = (0, _utils.bottom)(this.state.layout);
        const containerPaddingY = this.props.containerPadding ? this.props.containerPadding[1] : this.props.margin[1];
        return nbRow * this.props.rowHeight + (nbRow - 1) * this.props.margin[1] + containerPaddingY * 2 + "px";
      }
      onLayoutMaybeChanged(newLayout, oldLayout) {
        if (!oldLayout) oldLayout = this.state.layout;
        if (!(0, _fastEquals.deepEqual)(oldLayout, newLayout)) {
          this.props.onLayoutChange(newLayout);
        }
      }
      /**
       * Create a placeholder object.
       * @return {Element} Placeholder div.
       */
      placeholder() {
        const {
          activeDrag
        } = this.state;
        if (!activeDrag) return null;
        const {
          width,
          cols,
          margin,
          containerPadding,
          rowHeight,
          maxRows,
          useCSSTransforms,
          transformScale
        } = this.props;
        return /* @__PURE__ */ React71.createElement(_GridItem.default, {
          w: activeDrag.w,
          h: activeDrag.h,
          x: activeDrag.x,
          y: activeDrag.y,
          i: activeDrag.i,
          className: `react-grid-placeholder ${this.state.resizing ? "placeholder-resizing" : ""}`,
          containerWidth: width,
          cols,
          margin,
          containerPadding: containerPadding || margin,
          maxRows,
          rowHeight,
          isDraggable: false,
          isResizable: false,
          isBounded: false,
          useCSSTransforms,
          transformScale
        }, /* @__PURE__ */ React71.createElement("div", null));
      }
      /**
       * Given a grid item, set its style attributes & surround in a <Draggable>.
       * @param  {Element} child React element.
       * @return {Element}       Element wrapped in draggable and properly placed.
       */
      processGridItem(child, isDroppingItem) {
        if (!child || !child.key) return;
        const l = (0, _utils.getLayoutItem)(this.state.layout, String(child.key));
        if (!l) return null;
        const {
          width,
          cols,
          margin,
          containerPadding,
          rowHeight,
          maxRows,
          isDraggable,
          isResizable,
          isBounded,
          useCSSTransforms,
          transformScale,
          draggableCancel,
          draggableHandle,
          resizeHandles,
          resizeHandle
        } = this.props;
        const {
          mounted,
          droppingPosition
        } = this.state;
        const draggable = typeof l.isDraggable === "boolean" ? l.isDraggable : !l.static && isDraggable;
        const resizable = typeof l.isResizable === "boolean" ? l.isResizable : !l.static && isResizable;
        const resizeHandlesOptions = l.resizeHandles || resizeHandles;
        const bounded = draggable && isBounded && l.isBounded !== false;
        return /* @__PURE__ */ React71.createElement(_GridItem.default, {
          containerWidth: width,
          cols,
          margin,
          containerPadding: containerPadding || margin,
          maxRows,
          rowHeight,
          cancel: draggableCancel,
          handle: draggableHandle,
          onDragStop: this.onDragStop,
          onDragStart: this.onDragStart,
          onDrag: this.onDrag,
          onResizeStart: this.onResizeStart,
          onResize: this.onResize,
          onResizeStop: this.onResizeStop,
          isDraggable: draggable,
          isResizable: resizable,
          isBounded: bounded,
          useCSSTransforms: useCSSTransforms && mounted,
          usePercentages: !mounted,
          transformScale,
          w: l.w,
          h: l.h,
          x: l.x,
          y: l.y,
          i: l.i,
          minH: l.minH,
          minW: l.minW,
          maxH: l.maxH,
          maxW: l.maxW,
          static: l.static,
          droppingPosition: isDroppingItem ? droppingPosition : void 0,
          resizeHandles: resizeHandlesOptions,
          resizeHandle
        }, child);
      }
      render() {
        const {
          className,
          style,
          isDroppable,
          innerRef
        } = this.props;
        const mergedClassName = (0, _clsx.default)(layoutClassName, className);
        const mergedStyle = {
          height: this.containerHeight(),
          ...style
        };
        return /* @__PURE__ */ React71.createElement("div", {
          ref: innerRef,
          className: mergedClassName,
          style: mergedStyle,
          onDrop: isDroppable ? this.onDrop : _utils.noop,
          onDragLeave: isDroppable ? this.onDragLeave : _utils.noop,
          onDragEnter: isDroppable ? this.onDragEnter : _utils.noop,
          onDragOver: isDroppable ? this.onDragOver : _utils.noop
        }, React71.Children.map(this.props.children, (child) => this.processGridItem(child)), isDroppable && this.state.droppingDOMNode && this.processGridItem(this.state.droppingDOMNode, true), this.placeholder());
      }
    };
    exports.default = ReactGridLayout;
    _defineProperty3(ReactGridLayout, "displayName", "ReactGridLayout");
    _defineProperty3(ReactGridLayout, "propTypes", _ReactGridLayoutPropTypes.default);
    _defineProperty3(ReactGridLayout, "defaultProps", {
      autoSize: true,
      cols: 12,
      className: "",
      style: {},
      draggableHandle: "",
      draggableCancel: "",
      containerPadding: null,
      rowHeight: 150,
      maxRows: Infinity,
      // infinite vertical growth
      layout: [],
      margin: [10, 10],
      isBounded: false,
      isDraggable: true,
      isResizable: true,
      allowOverlap: false,
      isDroppable: false,
      useCSSTransforms: true,
      transformScale: 1,
      verticalCompact: true,
      compactType: "vertical",
      preventCollision: false,
      droppingItem: {
        i: "__dropping-elem__",
        h: 1,
        w: 1
      },
      resizeHandles: ["se"],
      onLayoutChange: _utils.noop,
      onDragStart: _utils.noop,
      onDrag: _utils.noop,
      onDragStop: _utils.noop,
      onResizeStart: _utils.noop,
      onResize: _utils.noop,
      onResizeStop: _utils.noop,
      onDrop: _utils.noop,
      onDropDragOver: _utils.noop
    });
  }
});

// ../node_modules/react-grid-layout/build/responsiveUtils.js
var require_responsiveUtils = __commonJS({
  "../node_modules/react-grid-layout/build/responsiveUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;
    exports.getBreakpointFromWidth = getBreakpointFromWidth;
    exports.getColsFromBreakpoint = getColsFromBreakpoint;
    exports.sortBreakpoints = sortBreakpoints;
    var _utils = require_utils();
    function getBreakpointFromWidth(breakpoints, width) {
      const sorted = sortBreakpoints(breakpoints);
      let matching = sorted[0];
      for (let i = 1, len = sorted.length; i < len; i++) {
        const breakpointName = sorted[i];
        if (width > breakpoints[breakpointName]) matching = breakpointName;
      }
      return matching;
    }
    function getColsFromBreakpoint(breakpoint, cols) {
      if (!cols[breakpoint]) {
        throw new Error("ResponsiveReactGridLayout: `cols` entry for breakpoint " + breakpoint + " is missing!");
      }
      return cols[breakpoint];
    }
    function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, compactType) {
      if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]);
      let layout = layouts[lastBreakpoint];
      const breakpointsSorted = sortBreakpoints(breakpoints);
      const breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));
      for (let i = 0, len = breakpointsAbove.length; i < len; i++) {
        const b = breakpointsAbove[i];
        if (layouts[b]) {
          layout = layouts[b];
          break;
        }
      }
      layout = (0, _utils.cloneLayout)(layout || []);
      return (0, _utils.compact)((0, _utils.correctBounds)(layout, {
        cols
      }), compactType, cols);
    }
    function sortBreakpoints(breakpoints) {
      const keys = Object.keys(breakpoints);
      return keys.sort(function(a, b) {
        return breakpoints[a] - breakpoints[b];
      });
    }
  }
});

// ../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js
var require_ResponsiveReactGridLayout = __commonJS({
  "../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React71 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _fastEquals = require_fast_equals();
    var _utils = require_utils();
    var _responsiveUtils = require_responsiveUtils();
    var _ReactGridLayout = _interopRequireDefault(require_ReactGridLayout());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _extends() {
      return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t2 = arguments[e];
          for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
        }
        return n;
      }, _extends.apply(null, arguments);
    }
    function _defineProperty3(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var type = (obj) => Object.prototype.toString.call(obj);
    function getIndentationValue(param, breakpoint) {
      if (param == null) return null;
      return Array.isArray(param) ? param : param[breakpoint];
    }
    var ResponsiveReactGridLayout = class extends React71.Component {
      constructor() {
        super(...arguments);
        _defineProperty3(this, "state", this.generateInitialState());
        _defineProperty3(this, "onLayoutChange", (layout) => {
          this.props.onLayoutChange(layout, {
            ...this.props.layouts,
            [this.state.breakpoint]: layout
          });
        });
      }
      generateInitialState() {
        const {
          width,
          breakpoints,
          layouts,
          cols
        } = this.props;
        const breakpoint = (0, _responsiveUtils.getBreakpointFromWidth)(breakpoints, width);
        const colNo = (0, _responsiveUtils.getColsFromBreakpoint)(breakpoint, cols);
        const compactType = this.props.verticalCompact === false ? null : this.props.compactType;
        const initialLayout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(layouts, breakpoints, breakpoint, breakpoint, colNo, compactType);
        return {
          layout: initialLayout,
          breakpoint,
          cols: colNo
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        if (!(0, _fastEquals.deepEqual)(nextProps.layouts, prevState.layouts)) {
          const {
            breakpoint,
            cols
          } = prevState;
          const newLayout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(nextProps.layouts, nextProps.breakpoints, breakpoint, breakpoint, cols, nextProps.compactType);
          return {
            layout: newLayout,
            layouts: nextProps.layouts
          };
        }
        return null;
      }
      componentDidUpdate(prevProps) {
        if (this.props.width != prevProps.width || this.props.breakpoint !== prevProps.breakpoint || !(0, _fastEquals.deepEqual)(this.props.breakpoints, prevProps.breakpoints) || !(0, _fastEquals.deepEqual)(this.props.cols, prevProps.cols)) {
          this.onWidthChange(prevProps);
        }
      }
      /**
       * When the width changes work through breakpoints and reset state with the new width & breakpoint.
       * Width changes are necessary to figure out the widget widths.
       */
      onWidthChange(prevProps) {
        const {
          breakpoints,
          cols,
          layouts,
          compactType
        } = this.props;
        const newBreakpoint = this.props.breakpoint || (0, _responsiveUtils.getBreakpointFromWidth)(this.props.breakpoints, this.props.width);
        const lastBreakpoint = this.state.breakpoint;
        const newCols = (0, _responsiveUtils.getColsFromBreakpoint)(newBreakpoint, cols);
        const newLayouts = {
          ...layouts
        };
        if (lastBreakpoint !== newBreakpoint || prevProps.breakpoints !== breakpoints || prevProps.cols !== cols) {
          if (!(lastBreakpoint in newLayouts)) newLayouts[lastBreakpoint] = (0, _utils.cloneLayout)(this.state.layout);
          let layout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(newLayouts, breakpoints, newBreakpoint, lastBreakpoint, newCols, compactType);
          layout = (0, _utils.synchronizeLayoutWithChildren)(layout, this.props.children, newCols, compactType, this.props.allowOverlap);
          newLayouts[newBreakpoint] = layout;
          this.props.onBreakpointChange(newBreakpoint, newCols);
          this.props.onLayoutChange(layout, newLayouts);
          this.setState({
            breakpoint: newBreakpoint,
            layout,
            cols: newCols
          });
        }
        const margin = getIndentationValue(this.props.margin, newBreakpoint);
        const containerPadding = getIndentationValue(this.props.containerPadding, newBreakpoint);
        this.props.onWidthChange(this.props.width, margin, newCols, containerPadding);
      }
      render() {
        const {
          breakpoint,
          breakpoints,
          cols,
          layouts,
          margin,
          containerPadding,
          onBreakpointChange,
          onLayoutChange,
          onWidthChange,
          ...other
        } = this.props;
        return /* @__PURE__ */ React71.createElement(_ReactGridLayout.default, _extends({}, other, {
          // $FlowIgnore should allow nullable here due to DefaultProps
          margin: getIndentationValue(margin, this.state.breakpoint),
          containerPadding: getIndentationValue(containerPadding, this.state.breakpoint),
          onLayoutChange: this.onLayoutChange,
          layout: this.state.layout,
          cols: this.state.cols
        }));
      }
    };
    exports.default = ResponsiveReactGridLayout;
    _defineProperty3(ResponsiveReactGridLayout, "propTypes", {
      //
      // Basic props
      //
      // Optional, but if you are managing width yourself you may want to set the breakpoint
      // yourself as well.
      breakpoint: _propTypes.default.string,
      // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}
      breakpoints: _propTypes.default.object,
      allowOverlap: _propTypes.default.bool,
      // # of cols. This is a breakpoint -> cols map
      cols: _propTypes.default.object,
      // # of margin. This is a breakpoint -> margin map
      // e.g. { lg: [5, 5], md: [10, 10], sm: [15, 15] }
      // Margin between items [x, y] in px
      // e.g. [10, 10]
      margin: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
      // # of containerPadding. This is a breakpoint -> containerPadding map
      // e.g. { lg: [5, 5], md: [10, 10], sm: [15, 15] }
      // Padding inside the container [x, y] in px
      // e.g. [10, 10]
      containerPadding: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
      // layouts is an object mapping breakpoints to layouts.
      // e.g. {lg: Layout, md: Layout, ...}
      layouts(props, propName) {
        if (type(props[propName]) !== "[object Object]") {
          throw new Error("Layout property must be an object. Received: " + type(props[propName]));
        }
        Object.keys(props[propName]).forEach((key) => {
          if (!(key in props.breakpoints)) {
            throw new Error("Each key in layouts must align with a key in breakpoints.");
          }
          (0, _utils.validateLayout)(props.layouts[key], "layouts." + key);
        });
      },
      // The width of this component.
      // Required in this propTypes stanza because generateInitialState() will fail without it.
      width: _propTypes.default.number.isRequired,
      //
      // Callbacks
      //
      // Calls back with breakpoint and new # cols
      onBreakpointChange: _propTypes.default.func,
      // Callback so you can save the layout.
      // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.
      onLayoutChange: _propTypes.default.func,
      // Calls back with (containerWidth, margin, cols, containerPadding)
      onWidthChange: _propTypes.default.func
    });
    _defineProperty3(ResponsiveReactGridLayout, "defaultProps", {
      breakpoints: {
        lg: 1200,
        md: 996,
        sm: 768,
        xs: 480,
        xxs: 0
      },
      cols: {
        lg: 12,
        md: 10,
        sm: 6,
        xs: 4,
        xxs: 2
      },
      containerPadding: {
        lg: null,
        md: null,
        sm: null,
        xs: null,
        xxs: null
      },
      layouts: {},
      margin: [10, 10],
      allowOverlap: false,
      onBreakpointChange: _utils.noop,
      onLayoutChange: _utils.noop,
      onWidthChange: _utils.noop
    });
  }
});

// ../node_modules/resize-observer-polyfill/dist/ResizeObserver.js
var require_ResizeObserver = __commonJS({
  "../node_modules/resize-observer-polyfill/dist/ResizeObserver.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.ResizeObserver = factory();
    })(exports, function() {
      "use strict";
      var MapShim = function() {
        if (typeof Map !== "undefined") {
          return Map;
        }
        function getIndex(arr, key) {
          var result = -1;
          arr.some(function(entry, index2) {
            if (entry[0] === key) {
              result = index2;
              return true;
            }
            return false;
          });
          return result;
        }
        return (
          /** @class */
          function() {
            function class_1() {
              this.__entries__ = [];
            }
            Object.defineProperty(class_1.prototype, "size", {
              /**
               * @returns {boolean}
               */
              get: function() {
                return this.__entries__.length;
              },
              enumerable: true,
              configurable: true
            });
            class_1.prototype.get = function(key) {
              var index2 = getIndex(this.__entries__, key);
              var entry = this.__entries__[index2];
              return entry && entry[1];
            };
            class_1.prototype.set = function(key, value) {
              var index2 = getIndex(this.__entries__, key);
              if (~index2) {
                this.__entries__[index2][1] = value;
              } else {
                this.__entries__.push([key, value]);
              }
            };
            class_1.prototype.delete = function(key) {
              var entries = this.__entries__;
              var index2 = getIndex(entries, key);
              if (~index2) {
                entries.splice(index2, 1);
              }
            };
            class_1.prototype.has = function(key) {
              return !!~getIndex(this.__entries__, key);
            };
            class_1.prototype.clear = function() {
              this.__entries__.splice(0);
            };
            class_1.prototype.forEach = function(callback, ctx) {
              if (ctx === void 0) {
                ctx = null;
              }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
              }
            };
            return class_1;
          }()
        );
      }();
      var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
      var global$1 = function() {
        if (typeof global !== "undefined" && global.Math === Math) {
          return global;
        }
        if (typeof self !== "undefined" && self.Math === Math) {
          return self;
        }
        if (typeof window !== "undefined" && window.Math === Math) {
          return window;
        }
        return Function("return this")();
      }();
      var requestAnimationFrame$1 = function() {
        if (typeof requestAnimationFrame === "function") {
          return requestAnimationFrame.bind(global$1);
        }
        return function(callback) {
          return setTimeout(function() {
            return callback(Date.now());
          }, 1e3 / 60);
        };
      }();
      var trailingTimeout = 2;
      function throttle(callback, delay) {
        var leadingCall = false, trailingCall = false, lastCallTime = 0;
        function resolvePending() {
          if (leadingCall) {
            leadingCall = false;
            callback();
          }
          if (trailingCall) {
            proxy();
          }
        }
        function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
        }
        function proxy() {
          var timeStamp = Date.now();
          if (leadingCall) {
            if (timeStamp - lastCallTime < trailingTimeout) {
              return;
            }
            trailingCall = true;
          } else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
          }
          lastCallTime = timeStamp;
        }
        return proxy;
      }
      var REFRESH_DELAY = 20;
      var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
      var mutationObserverSupported = typeof MutationObserver !== "undefined";
      var ResizeObserverController = (
        /** @class */
        function() {
          function ResizeObserverController2() {
            this.connected_ = false;
            this.mutationEventsAdded_ = false;
            this.mutationsObserver_ = null;
            this.observers_ = [];
            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
          }
          ResizeObserverController2.prototype.addObserver = function(observer) {
            if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
            }
            if (!this.connected_) {
              this.connect_();
            }
          };
          ResizeObserverController2.prototype.removeObserver = function(observer) {
            var observers2 = this.observers_;
            var index2 = observers2.indexOf(observer);
            if (~index2) {
              observers2.splice(index2, 1);
            }
            if (!observers2.length && this.connected_) {
              this.disconnect_();
            }
          };
          ResizeObserverController2.prototype.refresh = function() {
            var changesDetected = this.updateObservers_();
            if (changesDetected) {
              this.refresh();
            }
          };
          ResizeObserverController2.prototype.updateObservers_ = function() {
            var activeObservers = this.observers_.filter(function(observer) {
              return observer.gatherActive(), observer.hasActive();
            });
            activeObservers.forEach(function(observer) {
              return observer.broadcastActive();
            });
            return activeObservers.length > 0;
          };
          ResizeObserverController2.prototype.connect_ = function() {
            if (!isBrowser2 || this.connected_) {
              return;
            }
            document.addEventListener("transitionend", this.onTransitionEnd_);
            window.addEventListener("resize", this.refresh);
            if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
              });
            } else {
              document.addEventListener("DOMSubtreeModified", this.refresh);
              this.mutationEventsAdded_ = true;
            }
            this.connected_ = true;
          };
          ResizeObserverController2.prototype.disconnect_ = function() {
            if (!isBrowser2 || !this.connected_) {
              return;
            }
            document.removeEventListener("transitionend", this.onTransitionEnd_);
            window.removeEventListener("resize", this.refresh);
            if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
            }
            if (this.mutationEventsAdded_) {
              document.removeEventListener("DOMSubtreeModified", this.refresh);
            }
            this.mutationsObserver_ = null;
            this.mutationEventsAdded_ = false;
            this.connected_ = false;
          };
          ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
            var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
            var isReflowProperty = transitionKeys.some(function(key) {
              return !!~propertyName.indexOf(key);
            });
            if (isReflowProperty) {
              this.refresh();
            }
          };
          ResizeObserverController2.getInstance = function() {
            if (!this.instance_) {
              this.instance_ = new ResizeObserverController2();
            }
            return this.instance_;
          };
          ResizeObserverController2.instance_ = null;
          return ResizeObserverController2;
        }()
      );
      var defineConfigurable = function(target, props) {
        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var key = _a[_i];
          Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
          });
        }
        return target;
      };
      var getWindowOf = function(target) {
        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
        return ownerGlobal || global$1;
      };
      var emptyRect = createRectInit(0, 0, 0, 0);
      function toFloat(value) {
        return parseFloat(value) || 0;
      }
      function getBordersSize(styles) {
        var positions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          positions[_i - 1] = arguments[_i];
        }
        return positions.reduce(function(size, position) {
          var value = styles["border-" + position + "-width"];
          return size + toFloat(value);
        }, 0);
      }
      function getPaddings(styles) {
        var positions = ["top", "right", "bottom", "left"];
        var paddings = {};
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var position = positions_1[_i];
          var value = styles["padding-" + position];
          paddings[position] = toFloat(value);
        }
        return paddings;
      }
      function getSVGContentRect(target) {
        var bbox = target.getBBox();
        return createRectInit(0, 0, bbox.width, bbox.height);
      }
      function getHTMLElementContentRect(target) {
        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
        if (!clientWidth && !clientHeight) {
          return emptyRect;
        }
        var styles = getWindowOf(target).getComputedStyle(target);
        var paddings = getPaddings(styles);
        var horizPad = paddings.left + paddings.right;
        var vertPad = paddings.top + paddings.bottom;
        var width = toFloat(styles.width), height = toFloat(styles.height);
        if (styles.boxSizing === "border-box") {
          if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, "left", "right") + horizPad;
          }
          if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, "top", "bottom") + vertPad;
          }
        }
        if (!isDocumentElement(target)) {
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;
          if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
          }
          if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
          }
        }
        return createRectInit(paddings.left, paddings.top, width, height);
      }
      var isSVGGraphicsElement = function() {
        if (typeof SVGGraphicsElement !== "undefined") {
          return function(target) {
            return target instanceof getWindowOf(target).SVGGraphicsElement;
          };
        }
        return function(target) {
          return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
        };
      }();
      function isDocumentElement(target) {
        return target === getWindowOf(target).document.documentElement;
      }
      function getContentRect(target) {
        if (!isBrowser2) {
          return emptyRect;
        }
        if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
        }
        return getHTMLElementContentRect(target);
      }
      function createReadOnlyRect(_a) {
        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
        var rect = Object.create(Constr.prototype);
        defineConfigurable(rect, {
          x,
          y,
          width,
          height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
        });
        return rect;
      }
      function createRectInit(x, y, width, height) {
        return { x, y, width, height };
      }
      var ResizeObservation = (
        /** @class */
        function() {
          function ResizeObservation2(target) {
            this.broadcastWidth = 0;
            this.broadcastHeight = 0;
            this.contentRect_ = createRectInit(0, 0, 0, 0);
            this.target = target;
          }
          ResizeObservation2.prototype.isActive = function() {
            var rect = getContentRect(this.target);
            this.contentRect_ = rect;
            return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
          };
          ResizeObservation2.prototype.broadcastRect = function() {
            var rect = this.contentRect_;
            this.broadcastWidth = rect.width;
            this.broadcastHeight = rect.height;
            return rect;
          };
          return ResizeObservation2;
        }()
      );
      var ResizeObserverEntry = (
        /** @class */
        /* @__PURE__ */ function() {
          function ResizeObserverEntry2(target, rectInit) {
            var contentRect = createReadOnlyRect(rectInit);
            defineConfigurable(this, { target, contentRect });
          }
          return ResizeObserverEntry2;
        }()
      );
      var ResizeObserverSPI = (
        /** @class */
        function() {
          function ResizeObserverSPI2(callback, controller, callbackCtx) {
            this.activeObservations_ = [];
            this.observations_ = new MapShim();
            if (typeof callback !== "function") {
              throw new TypeError("The callback provided as parameter 1 is not a function.");
            }
            this.callback_ = callback;
            this.controller_ = controller;
            this.callbackCtx_ = callbackCtx;
          }
          ResizeObserverSPI2.prototype.observe = function(target) {
            if (!arguments.length) {
              throw new TypeError("1 argument required, but only 0 present.");
            }
            if (typeof Element === "undefined" || !(Element instanceof Object)) {
              return;
            }
            if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            if (observations.has(target)) {
              return;
            }
            observations.set(target, new ResizeObservation(target));
            this.controller_.addObserver(this);
            this.controller_.refresh();
          };
          ResizeObserverSPI2.prototype.unobserve = function(target) {
            if (!arguments.length) {
              throw new TypeError("1 argument required, but only 0 present.");
            }
            if (typeof Element === "undefined" || !(Element instanceof Object)) {
              return;
            }
            if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            if (!observations.has(target)) {
              return;
            }
            observations.delete(target);
            if (!observations.size) {
              this.controller_.removeObserver(this);
            }
          };
          ResizeObserverSPI2.prototype.disconnect = function() {
            this.clearActive();
            this.observations_.clear();
            this.controller_.removeObserver(this);
          };
          ResizeObserverSPI2.prototype.gatherActive = function() {
            var _this = this;
            this.clearActive();
            this.observations_.forEach(function(observation) {
              if (observation.isActive()) {
                _this.activeObservations_.push(observation);
              }
            });
          };
          ResizeObserverSPI2.prototype.broadcastActive = function() {
            if (!this.hasActive()) {
              return;
            }
            var ctx = this.callbackCtx_;
            var entries = this.activeObservations_.map(function(observation) {
              return new ResizeObserverEntry(observation.target, observation.broadcastRect());
            });
            this.callback_.call(ctx, entries, ctx);
            this.clearActive();
          };
          ResizeObserverSPI2.prototype.clearActive = function() {
            this.activeObservations_.splice(0);
          };
          ResizeObserverSPI2.prototype.hasActive = function() {
            return this.activeObservations_.length > 0;
          };
          return ResizeObserverSPI2;
        }()
      );
      var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
      var ResizeObserver2 = (
        /** @class */
        /* @__PURE__ */ function() {
          function ResizeObserver3(callback) {
            if (!(this instanceof ResizeObserver3)) {
              throw new TypeError("Cannot call a class as a function.");
            }
            if (!arguments.length) {
              throw new TypeError("1 argument required, but only 0 present.");
            }
            var controller = ResizeObserverController.getInstance();
            var observer = new ResizeObserverSPI(callback, controller, this);
            observers.set(this, observer);
          }
          return ResizeObserver3;
        }()
      );
      [
        "observe",
        "unobserve",
        "disconnect"
      ].forEach(function(method) {
        ResizeObserver2.prototype[method] = function() {
          var _a;
          return (_a = observers.get(this))[method].apply(_a, arguments);
        };
      });
      var index = function() {
        if (typeof global$1.ResizeObserver !== "undefined") {
          return global$1.ResizeObserver;
        }
        return ResizeObserver2;
      }();
      return index;
    });
  }
});

// ../node_modules/react-grid-layout/build/components/WidthProvider.js
var require_WidthProvider = __commonJS({
  "../node_modules/react-grid-layout/build/components/WidthProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = WidthProvideRGL;
    var React71 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _resizeObserverPolyfill = _interopRequireDefault(require_ResizeObserver());
    var _clsx = _interopRequireDefault(require_clsx());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _interopRequireWildcard(e, t2) {
      if ("function" == typeof WeakMap) var r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function(e2, t3) {
        if (!t3 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return f;
        if (o = t3 ? n : r) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (const t4 in e2) "default" !== t4 && {}.hasOwnProperty.call(e2, t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, t4)) && (i.get || i.set) ? o(f, t4, i) : f[t4] = e2[t4]);
        return f;
      })(e, t2);
    }
    function _extends() {
      return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t2 = arguments[e];
          for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
        }
        return n;
      }, _extends.apply(null, arguments);
    }
    function _defineProperty3(e, r, t2) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t2, enumerable: true, configurable: true, writable: true }) : e[r] = t2, e;
    }
    function _toPropertyKey(t2) {
      var i = _toPrimitive(t2, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _toPrimitive(t2, r) {
      if ("object" != typeof t2 || !t2) return t2;
      var e = t2[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t2, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t2);
    }
    var layoutClassName = "react-grid-layout";
    function WidthProvideRGL(ComposedComponent) {
      var _WidthProvider;
      return _WidthProvider = class WidthProvider extends React71.Component {
        constructor() {
          super(...arguments);
          _defineProperty3(this, "state", {
            width: 1280
          });
          _defineProperty3(this, "elementRef", /* @__PURE__ */ React71.createRef());
          _defineProperty3(this, "mounted", false);
          _defineProperty3(this, "resizeObserver", void 0);
        }
        componentDidMount() {
          this.mounted = true;
          this.resizeObserver = new _resizeObserverPolyfill.default((entries) => {
            const node2 = this.elementRef.current;
            if (node2 instanceof HTMLElement) {
              const width = entries[0].contentRect.width;
              this.setState({
                width
              });
            }
          });
          const node = this.elementRef.current;
          if (node instanceof HTMLElement) {
            this.resizeObserver.observe(node);
          }
        }
        componentWillUnmount() {
          this.mounted = false;
          const node = this.elementRef.current;
          if (node instanceof HTMLElement) {
            this.resizeObserver.unobserve(node);
          }
          this.resizeObserver.disconnect();
        }
        render() {
          const {
            measureBeforeMount,
            ...rest
          } = this.props;
          if (measureBeforeMount && !this.mounted) {
            return /* @__PURE__ */ React71.createElement("div", {
              className: (0, _clsx.default)(this.props.className, layoutClassName),
              style: this.props.style,
              ref: this.elementRef
            });
          }
          return /* @__PURE__ */ React71.createElement(ComposedComponent, _extends({
            innerRef: this.elementRef
          }, rest, this.state));
        }
      }, _defineProperty3(_WidthProvider, "defaultProps", {
        measureBeforeMount: false
      }), _defineProperty3(_WidthProvider, "propTypes", {
        // If true, will not render children until mounted. Useful for getting the exact width before
        // rendering, to prevent any unsightly resizing.
        measureBeforeMount: _propTypes.default.bool
      }), _WidthProvider;
    }
  }
});

// ../node_modules/react-grid-layout/index.js
var require_react_grid_layout = __commonJS({
  "../node_modules/react-grid-layout/index.js"(exports, module) {
    module.exports = require_ReactGridLayout().default;
    module.exports.utils = require_utils();
    module.exports.calculateUtils = require_calculateUtils();
    module.exports.Responsive = require_ResponsiveReactGridLayout().default;
    module.exports.Responsive.utils = require_responsiveUtils();
    module.exports.WidthProvider = require_WidthProvider().default;
  }
});

// src/main.tsx
var import_client = __toESM(require_client(), 1);

// ../node_modules/react-router/dist/development/chunk-QMGIS6GS.mjs
var React3 = __toESM(require_react(), 1);
var React = __toESM(require_react(), 1);
var React2 = __toESM(require_react(), 1);
var React10 = __toESM(require_react(), 1);
var React9 = __toESM(require_react(), 1);
var React4 = __toESM(require_react(), 1);
var React8 = __toESM(require_react(), 1);
var React7 = __toESM(require_react(), 1);
var React5 = __toESM(require_react(), 1);
var React6 = __toESM(require_react(), 1);
var React11 = __toESM(require_react(), 1);
var React12 = __toESM(require_react(), 1);
var React13 = __toESM(require_react(), 1);
var import_cookie = __toESM(require_dist(), 1);
var PopStateEventType = "popstate";
function createHashHistory(options = {}) {
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substring(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      { pathname, search, hash },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base");
    let href2 = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href2 = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href2 + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function validateHashLocation(location, to) {
    warning(
      location.pathname.charAt(0) === "/",
      `relative pathnames are not supported in hash history.push(${JSON.stringify(
        to
      )})`
    );
  }
  return getUrlBasedHistory(
    createHashLocation,
    createHashHref,
    validateHashLocation,
    options
  );
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substring(2, 10);
}
function getHistoryState(location, index) {
  return {
    usr: location.state,
    key: location.key,
    idx: index
  };
}
function createLocation(current, to, state = null, key) {
  let location = {
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: "",
    ...typeof to === "string" ? parsePath(to) : to,
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  };
  return location;
}
function createPath({
  pathname = "/",
  search = "",
  hash = ""
}) {
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substring(hashIndex);
      path = path.substring(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substring(searchIndex);
      path = path.substring(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
  let { window: window2 = document.defaultView, v5Compat = false } = options;
  let globalHistory = window2.history;
  let action = "POP";
  let listener = null;
  let index = getIndex();
  if (index == null) {
    index = 0;
    globalHistory.replaceState({ ...globalHistory.state, idx: index }, "");
  }
  function getIndex() {
    let state = globalHistory.state || { idx: null };
    return state.idx;
  }
  function handlePop() {
    action = "POP";
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex;
    if (listener) {
      listener({ action, location: history.location, delta });
    }
  }
  function push(to, state) {
    action = "PUSH";
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index = getIndex() + 1;
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 1 });
    }
  }
  function replace2(to, state) {
    action = "REPLACE";
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index = getIndex();
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 0 });
    }
  }
  function createURL(to) {
    return createBrowserURLImpl(to);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref2(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
function createBrowserURLImpl(to, isAbsolute = false) {
  let base = "http://localhost";
  if (typeof window !== "undefined") {
    base = window.location.origin !== "null" ? window.location.origin : window.location.href;
  }
  invariant(base, "No window.location.(origin|href) available to create URL");
  let href2 = typeof to === "string" ? to : createPath(to);
  href2 = href2.replace(/ $/, "%20");
  if (!isAbsolute && href2.startsWith("//")) {
    href2 = base + href2;
  }
  return new URL(href2, base);
}
var _map;
_map = /* @__PURE__ */ new WeakMap();
function matchRoutes(routes, locationArg, basename = "/") {
  return matchRoutesImpl(routes, locationArg, basename, false);
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(
      branches[i],
      decoded,
      allowPartial
    );
  }
  return matches;
}
function convertRouteMatchToUiMatch(match, loaderData) {
  let { route, pathname, params } = match;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
  let flattenRoute = (route, index, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(
        meta.relativePath.startsWith(parentPath),
        `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
      );
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index) => {
    if (route.path === "" || !route.path?.includes("?")) {
      flattenRoute(route, index);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(
    ...restExploded.map(
      (subpath) => subpath === "" ? required : [required, subpath].join("/")
    )
  );
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map(
    (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
  );
}
function rankRouteBranches(branches) {
  branches.sort(
    (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(
      a.routesMeta.map((meta) => meta.childrenIndex),
      b.routesMeta.map((meta) => meta.childrenIndex)
    )
  );
}
var paramRe = /^:[\w-]+$/;
var dynamicSegmentValue = 3;
var indexRouteValue = 2;
var emptySegmentValue = 1;
var staticSegmentValue = 10;
var splatPenalty = -2;
var isSplat = (s) => s === "*";
function computeScore(path, index) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce(
    (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
    initialScore
  );
}
function compareIndexes(a, b) {
  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial = false) {
  let { routesMeta } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath(
      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
      remainingPathname
    );
    let route = meta.route;
    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match = matchPath(
        {
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        },
        remainingPathname
      );
    }
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(
        joinPaths([matchedPathname, match.pathnameBase])
      ),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = { path: pattern, caseSensitive: false, end: true };
  }
  let [matcher, compiledParams] = compilePath(
    pattern.path,
    pattern.caseSensitive,
    pattern.end
  );
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce(
    (memo2, { paramName, isOptional }, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index];
      if (isOptional && !value) {
        memo2[paramName] = void 0;
      } else {
        memo2[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo2;
    },
    {}
  );
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive = false, end = true) {
  warning(
    path === "*" || !path.endsWith("*") || path.endsWith("/*"),
    `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
  );
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
    /\/:([\w-]+)(\?)?/g,
    (_, paramName, isOptional) => {
      params.push({ paramName, isOptional: isOptional != null });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    }
  );
  if (path.endsWith("*")) {
    params.push({ paramName: "*" });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else {
  }
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(
      false,
      `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
    );
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname = "/") {
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
    path
  )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
}
function getPathContributingMatches(matches) {
  return matches.filter(
    (match, index) => index === 0 || match.route.path && match.route.path.length > 0
  );
}
function getResolveToMatches(matches) {
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches.map(
    (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
  );
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = { ...toArg };
    invariant(
      !to.pathname || !to.pathname.includes("?"),
      getInvalidPathError("?", "pathname", "search", to)
    );
    invariant(
      !to.pathname || !to.pathname.includes("#"),
      getInvalidPathError("#", "pathname", "hash", to)
    );
    invariant(
      !to.search || !to.search.includes("#"),
      getInvalidPathError("#", "search", "hash", to)
    );
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
var validMutationMethodsArr = [
  "POST",
  "PUT",
  "PATCH",
  "DELETE"
];
var validMutationMethods = new Set(
  validMutationMethodsArr
);
var validRequestMethodsArr = [
  "GET",
  ...validMutationMethodsArr
];
var validRequestMethods = new Set(validRequestMethodsArr);
var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
var DataRouterContext = React.createContext(null);
DataRouterContext.displayName = "DataRouter";
var DataRouterStateContext = React.createContext(null);
DataRouterStateContext.displayName = "DataRouterState";
var ViewTransitionContext = React.createContext({
  isTransitioning: false
});
ViewTransitionContext.displayName = "ViewTransition";
var FetchersContext = React.createContext(
  /* @__PURE__ */ new Map()
);
FetchersContext.displayName = "Fetchers";
var AwaitContext = React.createContext(null);
AwaitContext.displayName = "Await";
var NavigationContext = React.createContext(
  null
);
NavigationContext.displayName = "Navigation";
var LocationContext = React.createContext(
  null
);
LocationContext.displayName = "Location";
var RouteContext = React.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
RouteContext.displayName = "Route";
var RouteErrorContext = React.createContext(null);
RouteErrorContext.displayName = "RouteError";
var ENABLE_DEV_WARNINGS = true;
function useHref(to, { relative } = {}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useHref() may be used only in the context of a <Router> component.`
  );
  let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
  let { hash, pathname, search } = useResolvedPath(to, { relative });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({ pathname: joinedPathname, search, hash });
}
function useInRouterContext() {
  return React2.useContext(LocationContext) != null;
}
function useLocation() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useLocation() may be used only in the context of a <Router> component.`
  );
  return React2.useContext(LocationContext).location;
}
var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
function useIsomorphicLayoutEffect(cb) {
  let isStatic = React2.useContext(NavigationContext).static;
  if (!isStatic) {
    React2.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let { isDataRoute } = React2.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useNavigate() may be used only in the context of a <Router> component.`
  );
  let dataRouterContext = React2.useContext(DataRouterContext);
  let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
  let { matches } = React2.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  let activeRef = React2.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React2.useCallback(
    (to, options = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        options.relative === "path"
      );
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(
        path,
        options.state,
        options
      );
    },
    [
      basename,
      navigator2,
      routePathnamesJson,
      locationPathname,
      dataRouterContext
    ]
  );
  return navigate;
}
var OutletContext = React2.createContext(null);
function useParams() {
  let { matches } = React2.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, { relative } = {}) {
  let { matches } = React2.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  return React2.useMemo(
    () => resolveTo(
      to,
      JSON.parse(routePathnamesJson),
      locationPathname,
      relative === "path"
    ),
    [to, routePathnamesJson, locationPathname, relative]
  );
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useRoutes() may be used only in the context of a <Router> component.`
  );
  let { navigator: navigator2 } = React2.useContext(NavigationContext);
  let { matches: parentMatches } = React2.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  if (ENABLE_DEV_WARNINGS) {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(
      parentPathname,
      !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
      `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
    );
  }
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    invariant(
      parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
      `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
    );
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, { pathname: remainingPathname });
  if (ENABLE_DEV_WARNINGS) {
    warning(
      parentRoute || matches != null,
      `No routes matched location "${location.pathname}${location.search}${location.hash}" `
    );
    warning(
      matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
      `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
    );
  }
  let renderedMatches = _renderMatches(
    matches && matches.map(
      (match) => Object.assign({}, match, {
        params: Object.assign({}, parentParams, match.params),
        pathname: joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
        ]),
        pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
        ])
      })
    ),
    parentMatches,
    dataRouterState,
    future
  );
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ React2.createElement(
      LocationContext.Provider,
      {
        value: {
          location: {
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default",
            ...location
          },
          navigationType: "POP"
          /* Pop */
        }
      },
      renderedMatches
    );
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
  let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
  let devInfo = null;
  if (ENABLE_DEV_WARNINGS) {
    console.error(
      "Error handled by React Router default ErrorBoundary:",
      error
    );
    devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
}
var defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
var RenderErrorBoundary = class extends React2.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error(
      "React Router caught the following error during render",
      error,
      errorInfo
    );
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
      RouteErrorContext.Provider,
      {
        value: this.state.error,
        children: this.props.component
      }
    )) : this.props.children;
  }
};
function RenderedRoute({ routeContext, match, children }) {
  let dataRouterContext = React2.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
}
function _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {
  if (matches == null) {
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = dataRouterState?.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex(
      (m2) => m2.route.id && errors?.[m2.route.id] !== void 0
    );
    invariant(
      errorIndex >= 0,
      `Could not find a matching route for errors on route IDs: ${Object.keys(
        errors
      ).join(",")}`
    );
    renderedMatches = renderedMatches.slice(
      0,
      Math.min(renderedMatches.length, errorIndex + 1)
    );
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match = renderedMatches[i];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match.route.id) {
        let { loaderData, errors: errors2 } = dataRouterState;
        let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match, index) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match.route.id ? errors[match.route.id] : void 0;
      errorElement = match.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index === 0) {
          warningOnce(
            "route-fallback",
            false,
            "No `HydrateFallback` element provided to render during initial hydration"
          );
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match.route.Component) {
        children = /* @__PURE__ */ React2.createElement(match.route.Component, null);
      } else if (match.route.element) {
        children = match.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ React2.createElement(
        RenderedRoute,
        {
          match,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        }
      );
    };
    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(
      RenderErrorBoundary,
      {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: { outlet: null, matches: matches2, isDataRoute: true }
      }
    ) : getChildren();
  }, null);
}
function getDataRouterConsoleError(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError(hookName));
  return ctx;
}
function useDataRouterState(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError(hookName));
  return state;
}
function useRouteContext(hookName) {
  let route = React2.useContext(RouteContext);
  invariant(route, getDataRouterConsoleError(hookName));
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  invariant(
    thisRoute.route.id,
    `${hookName} can only be used on routes that contain a unique "id"`
  );
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(
    "useRouteId"
    /* UseRouteId */
  );
}
function useNavigation() {
  let state = useDataRouterState(
    "useNavigation"
    /* UseNavigation */
  );
  return state.navigation;
}
function useMatches() {
  let { matches, loaderData } = useDataRouterState(
    "useMatches"
    /* UseMatches */
  );
  return React2.useMemo(
    () => matches.map((m2) => convertRouteMatchToUiMatch(m2, loaderData)),
    [matches, loaderData]
  );
}
function useRouteError() {
  let error = React2.useContext(RouteErrorContext);
  let state = useDataRouterState(
    "useRouteError"
    /* UseRouteError */
  );
  let routeId = useCurrentRouteId(
    "useRouteError"
    /* UseRouteError */
  );
  if (error !== void 0) {
    return error;
  }
  return state.errors?.[routeId];
}
function useNavigateStable() {
  let { router } = useDataRouterContext(
    "useNavigate"
    /* UseNavigateStable */
  );
  let id2 = useCurrentRouteId(
    "useNavigate"
    /* UseNavigateStable */
  );
  let activeRef = React2.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React2.useCallback(
    async (to, options = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        await router.navigate(to, { fromRouteId: id2, ...options });
      }
    },
    [router, id2]
  );
  return navigate;
}
var alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
    warning(false, message);
  }
}
var MemoizedDataRoutes = React3.memo(DataRoutes);
function DataRoutes({
  routes,
  future,
  state
}) {
  return useRoutesImpl(routes, void 0, state, future);
}
function Navigate({
  to,
  replace: replace2,
  state,
  relative
}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    `<Navigate> may be used only in the context of a <Router> component.`
  );
  let { static: isStatic } = React3.useContext(NavigationContext);
  warning(
    !isStatic,
    `<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.`
  );
  let { matches } = React3.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(
    to,
    getResolveToMatches(matches),
    locationPathname,
    relative === "path"
  );
  let jsonPath = JSON.stringify(path);
  React3.useEffect(() => {
    navigate(JSON.parse(jsonPath), { replace: replace2, state, relative });
  }, [navigate, jsonPath, relative, replace2, state]);
  return null;
}
function Route(_props) {
  invariant(
    false,
    `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
  );
}
function Router({
  basename: basenameProp = "/",
  children = null,
  location: locationProp,
  navigationType = "POP",
  navigator: navigator2,
  static: staticProp = false
}) {
  invariant(
    !useInRouterContext(),
    `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
  );
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = React3.useMemo(
    () => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: {}
    }),
    [basename, navigator2, staticProp]
  );
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = React3.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  warning(
    locationContext != null,
    `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash}" because it does not start with the basename, so the <Router> won't render anything.`
  );
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
}
function Routes({
  children,
  location
}) {
  return useRoutes(createRoutesFromChildren(children), location);
}
function createRoutesFromChildren(children, parentPath = []) {
  let routes = [];
  React3.Children.forEach(children, (element, index) => {
    if (!React3.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index];
    if (element.type === React3.Fragment) {
      routes.push.apply(
        routes,
        createRoutesFromChildren(element.props.children, treePath)
      );
      return;
    }
    invariant(
      element.type === Route,
      `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
    );
    invariant(
      !element.props.index || !element.props.children,
      "An index route cannot have child routes."
    );
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      hydrateFallbackElement: element.props.hydrateFallbackElement,
      HydrateFallback: element.props.HydrateFallback,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(
        element.props.children,
        treePath
      );
    }
    routes.push(route);
  });
  return routes;
}
var defaultMethod = "get";
var defaultEncType = "application/x-www-form-urlencoded";
function isHtmlElement(object) {
  return object != null && typeof object.tagName === "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
var _formDataSupportsSubmitter = null;
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
var supportedFormEncTypes = /* @__PURE__ */ new Set([
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain"
]);
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    warning(
      false,
      `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
    );
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error(
        `Cannot submit a <button> or <input type="submit"> without a <form>`
      );
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let { name, type, value } = target;
      if (type === "image") {
        let prefix = name ? `${name}.` : "";
        formData.append(`${prefix}x`, "0");
        formData.append(`${prefix}y`, "0");
      } else if (name) {
        formData.append(name, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error(
      `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
    );
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return { action, method: method.toLowerCase(), encType, formData, body };
}
function invariant2(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache) {
    return routeModulesCache[route.id];
  }
  try {
    let routeModule = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      route.module
    );
    routeModulesCache[route.id] = routeModule;
    return routeModule;
  } catch (error) {
    console.error(
      `Error loading route module \`${route.module}\`, reloading page...`
    );
    console.error(error);
    if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
    import.meta.hot) {
      throw error;
    }
    window.location.reload();
    return new Promise(() => {
    });
  }
}
function isPageLinkDescriptor(object) {
  return object != null && typeof object.page === "string";
}
function isHtmlLinkDescriptor(object) {
  if (object == null) {
    return false;
  }
  if (object.href == null) {
    return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
  }
  return typeof object.rel === "string" && typeof object.href === "string";
}
async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
  let links = await Promise.all(
    matches.map(async (match) => {
      let route = manifest.routes[match.route.id];
      if (route) {
        let mod = await loadRouteModule(route, routeModules);
        return mod.links ? mod.links() : [];
      }
      return [];
    })
  );
  return dedupeLinkDescriptors(
    links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
      (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
    )
  );
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
  let isNew = (match, index) => {
    if (!currentMatches[index]) return true;
    return match.route.id !== currentMatches[index].route.id;
  };
  let matchPathChanged = (match, index) => {
    return (
      // param change, /users/123 -> /users/456
      currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path
      // e.g. /files/images/avatar.jpg -> files/finances.xls
      currentMatches[index].route.path?.endsWith("*") && currentMatches[index].params["*"] !== match.params["*"]
    );
  };
  if (mode === "assets") {
    return nextMatches.filter(
      (match, index) => isNew(match, index) || matchPathChanged(match, index)
    );
  }
  if (mode === "data") {
    return nextMatches.filter((match, index) => {
      let manifestRoute = manifest.routes[match.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return false;
      }
      if (isNew(match, index) || matchPathChanged(match, index)) {
        return true;
      }
      if (match.route.shouldRevalidate) {
        let routeChoice = match.route.shouldRevalidate({
          currentUrl: new URL(
            location.pathname + location.search + location.hash,
            window.origin
          ),
          currentParams: currentMatches[0]?.params || {},
          nextUrl: new URL(page, window.origin),
          nextParams: match.params,
          defaultShouldRevalidate: true
        });
        if (typeof routeChoice === "boolean") {
          return routeChoice;
        }
      }
      return true;
    });
  }
  return [];
}
function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
  return dedupeHrefs(
    matches.map((match) => {
      let route = manifest.routes[match.route.id];
      if (!route) return [];
      let hrefs = [route.module];
      if (route.clientActionModule) {
        hrefs = hrefs.concat(route.clientActionModule);
      }
      if (route.clientLoaderModule) {
        hrefs = hrefs.concat(route.clientLoaderModule);
      }
      if (includeHydrateFallback && route.hydrateFallbackModule) {
        hrefs = hrefs.concat(route.hydrateFallbackModule);
      }
      if (route.imports) {
        hrefs = hrefs.concat(route.imports);
      }
      return hrefs;
    }).flat(1)
  );
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function sortKeys(obj) {
  let sorted = {};
  let keys = Object.keys(obj).sort();
  for (let key of keys) {
    sorted[key] = obj[key];
  }
  return sorted;
}
function dedupeLinkDescriptors(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set();
  let preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
    if (alreadyModulePreload) {
      return deduped;
    }
    let key = JSON.stringify(sortKeys(descriptor));
    if (!set.has(key)) {
      set.add(key);
      deduped.push({ key, link: descriptor });
    }
    return deduped;
  }, []);
}
var objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
var SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
var NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([100, 101, 204, 205]);
function singleFetchUrl(reqUrl, basename) {
  let url = typeof reqUrl === "string" ? new URL(
    reqUrl,
    // This can be called during the SSR flow via PrefetchPageLinksImpl so
    // don't assume window is available
    typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
  ) : reqUrl;
  if (url.pathname === "/") {
    url.pathname = "_root.data";
  } else if (basename && stripBasename(url.pathname, basename) === "/") {
    url.pathname = `${basename.replace(/\/$/, "")}/_root.data`;
  } else {
    url.pathname = `${url.pathname.replace(/\/$/, "")}.data`;
  }
  return url;
}
function useDataRouterContext2() {
  let context = React9.useContext(DataRouterContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterContext.Provider> element"
  );
  return context;
}
function useDataRouterStateContext() {
  let context = React9.useContext(DataRouterStateContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterStateContext.Provider> element"
  );
  return context;
}
var FrameworkContext = React9.createContext(void 0);
FrameworkContext.displayName = "FrameworkContext";
function useFrameworkContext() {
  let context = React9.useContext(FrameworkContext);
  invariant2(
    context,
    "You must render this element inside a <HydratedRouter> element"
  );
  return context;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let frameworkContext = React9.useContext(FrameworkContext);
  let [maybePrefetch, setMaybePrefetch] = React9.useState(false);
  let [shouldPrefetch, setShouldPrefetch] = React9.useState(false);
  let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
  let ref = React9.useRef(null);
  React9.useEffect(() => {
    if (prefetch === "render") {
      setShouldPrefetch(true);
    }
    if (prefetch === "viewport") {
      let callback = (entries) => {
        entries.forEach((entry) => {
          setShouldPrefetch(entry.isIntersecting);
        });
      };
      let observer = new IntersectionObserver(callback, { threshold: 0.5 });
      if (ref.current) observer.observe(ref.current);
      return () => {
        observer.disconnect();
      };
    }
  }, [prefetch]);
  React9.useEffect(() => {
    if (maybePrefetch) {
      let id2 = setTimeout(() => {
        setShouldPrefetch(true);
      }, 100);
      return () => {
        clearTimeout(id2);
      };
    }
  }, [maybePrefetch]);
  let setIntent = () => {
    setMaybePrefetch(true);
  };
  let cancelIntent = () => {
    setMaybePrefetch(false);
    setShouldPrefetch(false);
  };
  if (!frameworkContext) {
    return [false, ref, {}];
  }
  if (prefetch !== "intent") {
    return [shouldPrefetch, ref, {}];
  }
  return [
    shouldPrefetch,
    ref,
    {
      onFocus: composeEventHandlers2(onFocus, setIntent),
      onBlur: composeEventHandlers2(onBlur, cancelIntent),
      onMouseEnter: composeEventHandlers2(onMouseEnter, setIntent),
      onMouseLeave: composeEventHandlers2(onMouseLeave, cancelIntent),
      onTouchStart: composeEventHandlers2(onTouchStart, setIntent)
    }
  ];
}
function composeEventHandlers2(theirHandler, ourHandler) {
  return (event) => {
    theirHandler && theirHandler(event);
    if (!event.defaultPrevented) {
      ourHandler(event);
    }
  };
}
function PrefetchPageLinks({
  page,
  ...dataLinkProps
}) {
  let { router } = useDataRouterContext2();
  let matches = React9.useMemo(
    () => matchRoutes(router.routes, page, router.basename),
    [router.routes, page, router.basename]
  );
  if (!matches) {
    return null;
  }
  return /* @__PURE__ */ React9.createElement(PrefetchPageLinksImpl, { page, matches, ...dataLinkProps });
}
function useKeyedPrefetchLinks(matches) {
  let { manifest, routeModules } = useFrameworkContext();
  let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React9.useState([]);
  React9.useEffect(() => {
    let interrupted = false;
    void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
      (links) => {
        if (!interrupted) {
          setKeyedPrefetchLinks(links);
        }
      }
    );
    return () => {
      interrupted = true;
    };
  }, [matches, manifest, routeModules]);
  return keyedPrefetchLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location = useLocation();
  let { manifest, routeModules } = useFrameworkContext();
  let { basename } = useDataRouterContext2();
  let { loaderData, matches } = useDataRouterStateContext();
  let newMatchesForData = React9.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location,
      "data"
    ),
    [page, nextMatches, matches, manifest, location]
  );
  let newMatchesForAssets = React9.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location,
      "assets"
    ),
    [page, nextMatches, matches, manifest, location]
  );
  let dataHrefs = React9.useMemo(() => {
    if (page === location.pathname + location.search + location.hash) {
      return [];
    }
    let routesParams = /* @__PURE__ */ new Set();
    let foundOptOutRoute = false;
    nextMatches.forEach((m2) => {
      let manifestRoute = manifest.routes[m2.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return;
      }
      if (!newMatchesForData.some((m22) => m22.route.id === m2.route.id) && m2.route.id in loaderData && routeModules[m2.route.id]?.shouldRevalidate) {
        foundOptOutRoute = true;
      } else if (manifestRoute.hasClientLoader) {
        foundOptOutRoute = true;
      } else {
        routesParams.add(m2.route.id);
      }
    });
    if (routesParams.size === 0) {
      return [];
    }
    let url = singleFetchUrl(page, basename);
    if (foundOptOutRoute && routesParams.size > 0) {
      url.searchParams.set(
        "_routes",
        nextMatches.filter((m2) => routesParams.has(m2.route.id)).map((m2) => m2.route.id).join(",")
      );
    }
    return [url.pathname + url.search];
  }, [
    basename,
    loaderData,
    location,
    manifest,
    newMatchesForData,
    nextMatches,
    page,
    routeModules
  ]);
  let moduleHrefs = React9.useMemo(
    () => getModuleLinkHrefs(newMatchesForAssets, manifest),
    [newMatchesForAssets, manifest]
  );
  let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, dataHrefs.map((href2) => /* @__PURE__ */ React9.createElement("link", { key: href2, rel: "prefetch", as: "fetch", href: href2, ...linkProps })), moduleHrefs.map((href2) => /* @__PURE__ */ React9.createElement("link", { key: href2, rel: "modulepreload", href: href2, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
    // these don't spread `linkProps` because they are full link descriptors
    // already with their own props
    /* @__PURE__ */ React9.createElement("link", { key, ...link })
  )));
}
function mergeRefs(...refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
try {
  if (isBrowser) {
    window.__reactRouterVersion = "7.6.3";
  }
} catch (e) {
}
function HashRouter({ basename, children, window: window2 }) {
  let historyRef = React10.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({ window: window2, v5Compat: true });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React10.useState({
    action: history.action,
    location: history.location
  });
  let setState = React10.useCallback(
    (newState) => {
      React10.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React10.createElement(
    Router,
    {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
function HistoryRouter({
  basename,
  children,
  history
}) {
  let [state, setStateImpl] = React10.useState({
    action: history.action,
    location: history.location
  });
  let setState = React10.useCallback(
    (newState) => {
      React10.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React10.createElement(
    Router,
    {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
HistoryRouter.displayName = "unstable_HistoryRouter";
var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
var Link2 = React10.forwardRef(
  function LinkWithRef({
    onClick,
    discover = "render",
    prefetch = "none",
    relative,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to,
    preventScrollReset,
    viewTransition,
    ...rest
  }, forwardedRef) {
    let { basename } = React10.useContext(NavigationContext);
    let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && isAbsolute) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e) {
          warning(
            false,
            `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
          );
        }
      }
    }
    let href2 = useHref(to, { relative });
    let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
      prefetch,
      rest
    );
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative,
      viewTransition
    });
    function handleClick(event) {
      if (onClick) onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    let link = (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React10.createElement(
        "a",
        {
          ...rest,
          ...prefetchHandlers,
          href: absoluteHref || href2,
          onClick: isExternal || reloadDocument ? onClick : handleClick,
          ref: mergeRefs(forwardedRef, prefetchRef),
          target,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      )
    );
    return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href2 })) : link;
  }
);
Link2.displayName = "Link";
var NavLink = React10.forwardRef(
  function NavLinkWithRef({
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to,
    viewTransition,
    children,
    ...rest
  }, ref) {
    let path = useResolvedPath(to, { relative: rest.relative });
    let location = useLocation();
    let routerState = React10.useContext(DataRouterStateContext);
    let { navigator: navigator2, basename } = React10.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path) && viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [
        classNameProp,
        isActive ? "active" : null,
        isPending ? "pending" : null,
        isTransitioning ? "transitioning" : null
      ].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ React10.createElement(
      Link2,
      {
        ...rest,
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to,
        viewTransition
      },
      typeof children === "function" ? children(renderProps) : children
    );
  }
);
NavLink.displayName = "NavLink";
var Form = React10.forwardRef(
  ({
    discover = "render",
    fetcherKey,
    navigate,
    reloadDocument,
    replace: replace2,
    state,
    method = defaultMethod,
    action,
    onSubmit,
    relative,
    preventScrollReset,
    viewTransition,
    ...props
  }, forwardedRef) => {
    let submit = useSubmit();
    let formAction = useFormAction(action, { relative });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented) return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = submitter?.getAttribute("formmethod") || method;
      submit(submitter || event.currentTarget, {
        fetcherKey,
        method: submitMethod,
        navigate,
        replace: replace2,
        state,
        relative,
        preventScrollReset,
        viewTransition
      });
    };
    return /* @__PURE__ */ React10.createElement(
      "form",
      {
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler,
        ...props,
        "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
      }
    );
  }
);
Form.displayName = "Form";
function ScrollRestoration({
  getKey,
  storageKey,
  ...props
}) {
  let remixContext = React10.useContext(FrameworkContext);
  let { basename } = React10.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  useScrollRestoration({ getKey, storageKey });
  let ssrKey = React10.useMemo(
    () => {
      if (!remixContext || !getKey) return null;
      let userKey = getScrollRestorationKey(
        location,
        matches,
        basename,
        getKey
      );
      return userKey !== location.key ? userKey : null;
    },
    // Nah, we only need this the first time for the SSR render
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  if (!remixContext || remixContext.isSpaMode) {
    return null;
  }
  let restoreScroll = ((storageKey2, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key = Math.random().toString(32).slice(2);
      window.history.replaceState({ key }, "");
    }
    try {
      let positions = JSON.parse(sessionStorage.getItem(storageKey2) || "{}");
      let storedY = positions[restoreKey || window.history.state.key];
      if (typeof storedY === "number") {
        window.scrollTo(0, storedY);
      }
    } catch (error) {
      console.error(error);
      sessionStorage.removeItem(storageKey2);
    }
  }).toString();
  return /* @__PURE__ */ React10.createElement(
    "script",
    {
      ...props,
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: {
        __html: `(${restoreScroll})(${JSON.stringify(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY
        )}, ${JSON.stringify(ssrKey)})`
      }
    }
  );
}
ScrollRestoration.displayName = "ScrollRestoration";
function getDataRouterConsoleError2(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext3(hookName) {
  let ctx = React10.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError2(hookName));
  return ctx;
}
function useDataRouterState2(hookName) {
  let state = React10.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError2(hookName));
  return state;
}
function useLinkClickHandler(to, {
  target,
  replace: replaceProp,
  state,
  preventScrollReset,
  relative,
  viewTransition
} = {}) {
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to, { relative });
  return React10.useCallback(
    (event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    },
    [
      location,
      navigate,
      path,
      replaceProp,
      state,
      target,
      to,
      preventScrollReset,
      relative,
      viewTransition
    ]
  );
}
var fetcherId = 0;
var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
function useSubmit() {
  let { router } = useDataRouterContext3(
    "useSubmit"
    /* UseSubmit */
  );
  let { basename } = React10.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return React10.useCallback(
    async (target, options = {}) => {
      let { action, method, encType, formData, body } = getFormSubmissionInfo(
        target,
        basename
      );
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        await router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          flushSync: options.flushSync
        });
      } else {
        await router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          flushSync: options.flushSync,
          viewTransition: options.viewTransition
        });
      }
    },
    [router, basename, currentRouteId]
  );
}
function useFormAction(action, { relative } = {}) {
  let { basename } = React10.useContext(NavigationContext);
  let routeContext = React10.useContext(RouteContext);
  invariant(routeContext, "useFormAction must be used inside a RouteContext");
  let [match] = routeContext.matches.slice(-1);
  let path = { ...useResolvedPath(action ? action : ".", { relative }) };
  let location = useLocation();
  if (action == null) {
    path.search = location.search;
    let params = new URLSearchParams(path.search);
    let indexValues = params.getAll("index");
    let hasNakedIndexParam = indexValues.some((v) => v === "");
    if (hasNakedIndexParam) {
      params.delete("index");
      indexValues.filter((v) => v).forEach((v) => params.append("index", v));
      let qs = params.toString();
      path.search = qs ? `?${qs}` : "";
    }
  }
  if ((!action || action === ".") && match.route.index) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
var savedScrollPositions = {};
function getScrollRestorationKey(location, matches, basename, getKey) {
  let key = null;
  if (getKey) {
    if (basename !== "/") {
      key = getKey(
        {
          ...location,
          pathname: stripBasename(location.pathname, basename) || location.pathname
        },
        matches
      );
    } else {
      key = getKey(location, matches);
    }
  }
  if (key == null) {
    key = location.key;
  }
  return key;
}
function useScrollRestoration({
  getKey,
  storageKey
} = {}) {
  let { router } = useDataRouterContext3(
    "useScrollRestoration"
    /* UseScrollRestoration */
  );
  let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
    "useScrollRestoration"
    /* UseScrollRestoration */
  );
  let { basename } = React10.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  React10.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(
    React10.useCallback(() => {
      if (navigation.state === "idle") {
        let key = getScrollRestorationKey(location, matches, basename, getKey);
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY,
          JSON.stringify(savedScrollPositions)
        );
      } catch (error) {
        warning(
          false,
          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`
        );
      }
      window.history.scrollRestoration = "auto";
    }, [navigation.state, getKey, basename, location, matches, storageKey])
  );
  if (typeof document !== "undefined") {
    React10.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY
        );
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e) {
      }
    }, [storageKey]);
    React10.useLayoutEffect(() => {
      let disableScrollRestoration = router?.enableScrollRestoration(
        savedScrollPositions,
        () => window.scrollY,
        getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename, getKey) : void 0
      );
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, basename, getKey]);
    React10.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(
          decodeURIComponent(location.hash.slice(1))
        );
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
}
function usePageHide(callback, options) {
  let { capture } = options || {};
  React10.useEffect(() => {
    let opts = capture != null ? { capture } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function useViewTransitionState(to, opts = {}) {
  let vtContext = React10.useContext(ViewTransitionContext);
  invariant(
    vtContext != null,
    "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
  );
  let { basename } = useDataRouterContext3(
    "useViewTransitionState"
    /* useViewTransitionState */
  );
  let path = useResolvedPath(to, { relative: opts.relative });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
var SERVER_NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([
  ...NO_BODY_STATUS_CODES,
  304
]);

// src/providers/TRPCProvider.tsx
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function TRPCProvider({ children }) {
  const [queryClient] = (0, import_react.useState)(
    () => new QueryClient({
      defaultOptions: {
        queries: {
          staleTime: 5 * 60 * 1e3,
          // 5 minutes
          refetchOnWindowFocus: false
        }
      }
    })
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(trpc.Provider, { client: trpcClient, queryClient, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(QueryClientProvider, { client: queryClient, children }) });
}

// src/App.tsx
var import_react50 = __toESM(require_react(), 1);

// src/pages/Test.tsx
var import_react12 = __toESM(require_react(), 1);

// src/components/forms/UniversalFormDemo.tsx
var import_react6 = __toESM(require_react(), 1);

// src/components/forms/UniversalInputForm.tsx
var import_react5 = __toESM(require_react(), 1);

// src/components/ui/dialog.tsx
var React14 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var Dialog = Root2;
var DialogTrigger = Trigger;
var DialogPortal = Portal2;
var DialogOverlay = React14.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  Overlay,
  {
    ref,
    className: cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props
  }
));
DialogOverlay.displayName = Overlay.displayName;
var DialogContent = React14.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(DialogPortal, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DialogOverlay, {}),
  /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    Content,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      ),
      ...props,
      children: [
        children,
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground", children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(X, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
DialogContent.displayName = Content.displayName;
var DialogHeader = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    ),
    ...props
  }
);
DialogHeader.displayName = "DialogHeader";
var DialogFooter = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
DialogFooter.displayName = "DialogFooter";
var DialogTitle = React14.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  Title,
  {
    ref,
    className: cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    ),
    ...props
  }
));
DialogTitle.displayName = Title.displayName;
var DialogDescription = React14.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  Description,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
DialogDescription.displayName = Description.displayName;

// src/components/ui/label.tsx
var React16 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-label/dist/index.mjs
var React15 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var NAME = "Label";
var Label = React15.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    Primitive.label,
    {
      ...props,
      ref: forwardedRef,
      onMouseDown: (event) => {
        const target = event.target;
        if (target.closest("button, input, select, textarea")) return;
        props.onMouseDown?.(event);
        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
      }
    }
  );
});
Label.displayName = NAME;
var Root4 = Label;

// src/components/ui/label.tsx
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);
var Label2 = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
  Root4,
  {
    ref,
    className: cn(labelVariants(), className),
    ...props
  }
));
Label2.displayName = Root4.displayName;

// src/components/ui/textarea.tsx
var React17 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var Textarea = React17.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "textarea",
    {
      className: cn(
        "flex min-h-[60px] w-full rounded-md border border-gray-300 bg-transparent px-3 py-2 text-sm shadow-sm hover:shadow-md transition-shadow placeholder:text-muted-foreground focus-visible:outline-none focus-visible:shadow-md focus-visible:border-krushr-primary disabled:cursor-not-allowed disabled:opacity-50",
        className
      ),
      ref,
      ...props
    }
  );
});
Textarea.displayName = "Textarea";

// ../node_modules/react-day-picker/dist/index.esm.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());

// ../node_modules/date-fns/addWeeks.mjs
function addWeeks(date, amount) {
  const days = amount * 7;
  return addDays(date, days);
}

// ../node_modules/date-fns/addYears.mjs
function addYears(date, amount) {
  return addMonths(date, amount * 12);
}

// ../node_modules/date-fns/max.mjs
function max(dates) {
  let result;
  dates.forEach(function(dirtyDate) {
    const currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// ../node_modules/date-fns/min.mjs
function min(dates) {
  let result;
  dates.forEach((dirtyDate) => {
    const date = toDate(dirtyDate);
    if (!result || result > date || isNaN(+date)) {
      result = date;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// ../node_modules/date-fns/differenceInCalendarWeeks.mjs
function differenceInCalendarWeeks(dateLeft, dateRight, options) {
  const startOfWeekLeft = startOfWeek(dateLeft, options);
  const startOfWeekRight = startOfWeek(dateRight, options);
  const timestampLeft = +startOfWeekLeft - getTimezoneOffsetInMilliseconds(startOfWeekLeft);
  const timestampRight = +startOfWeekRight - getTimezoneOffsetInMilliseconds(startOfWeekRight);
  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);
}

// ../node_modules/date-fns/differenceInDays.mjs
function differenceInDays(dateLeft, dateRight) {
  const _dateLeft = toDate(dateLeft);
  const _dateRight = toDate(dateRight);
  const sign = compareLocalAsc(_dateLeft, _dateRight);
  const difference = Math.abs(differenceInCalendarDays(_dateLeft, _dateRight));
  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);
  const isLastDayNotFull = Number(
    compareLocalAsc(_dateLeft, _dateRight) === -sign
  );
  const result = sign * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}
function compareLocalAsc(dateLeft, dateRight) {
  const diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}

// ../node_modules/date-fns/differenceInHours.mjs
function differenceInHours(dateLeft, dateRight, options) {
  const diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// ../node_modules/date-fns/differenceInMinutes.mjs
function differenceInMinutes(dateLeft, dateRight, options) {
  const diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// ../node_modules/date-fns/endOfISOWeek.mjs
function endOfISOWeek(date) {
  return endOfWeek(date, { weekStartsOn: 1 });
}

// ../node_modules/date-fns/getDaysInMonth.mjs
function getDaysInMonth(date) {
  const _date = toDate(date);
  const year = _date.getFullYear();
  const monthIndex = _date.getMonth();
  const lastDayOfMonth2 = constructFrom(date, 0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// ../node_modules/date-fns/getUnixTime.mjs
function getUnixTime(date) {
  return Math.trunc(+toDate(date) / 1e3);
}

// ../node_modules/date-fns/lastDayOfMonth.mjs
function lastDayOfMonth(date) {
  const _date = toDate(date);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// ../node_modules/date-fns/getWeeksInMonth.mjs
function getWeeksInMonth(date, options) {
  return differenceInCalendarWeeks(
    lastDayOfMonth(date),
    startOfMonth(date),
    options
  ) + 1;
}

// ../node_modules/date-fns/isAfter.mjs
function isAfter(date, dateToCompare) {
  const _date = toDate(date);
  const _dateToCompare = toDate(dateToCompare);
  return _date.getTime() > _dateToCompare.getTime();
}

// ../node_modules/date-fns/isBefore.mjs
function isBefore(date, dateToCompare) {
  const _date = toDate(date);
  const _dateToCompare = toDate(dateToCompare);
  return +_date < +_dateToCompare;
}

// ../node_modules/date-fns/isSameYear.mjs
function isSameYear(dateLeft, dateRight) {
  const _dateLeft = toDate(dateLeft);
  const _dateRight = toDate(dateRight);
  return _dateLeft.getFullYear() === _dateRight.getFullYear();
}

// ../node_modules/date-fns/subDays.mjs
function subDays(date, amount) {
  return addDays(date, -amount);
}

// ../node_modules/date-fns/isYesterday.mjs
function isYesterday(date) {
  return isSameDay(date, subDays(constructNow(date), 1));
}

// ../node_modules/date-fns/setMonth.mjs
function setMonth(date, month) {
  const _date = toDate(date);
  const year = _date.getFullYear();
  const day = _date.getDate();
  const dateWithDesiredMonth = constructFrom(date, 0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  const daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  _date.setMonth(month, Math.min(day, daysInMonth));
  return _date;
}

// ../node_modules/date-fns/setYear.mjs
function setYear(date, year) {
  const _date = toDate(date);
  if (isNaN(+_date)) {
    return constructFrom(date, NaN);
  }
  _date.setFullYear(year);
  return _date;
}

// ../node_modules/react-day-picker/dist/index.esm.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2)) t2[p2] = s[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t2 = {};
  for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
    t2[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t2[p2[i]] = s[p2[i]];
    }
  return t2;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function isDayPickerMultiple(props) {
  return props.mode === "multiple";
}
function isDayPickerRange(props) {
  return props.mode === "range";
}
function isDayPickerSingle(props) {
  return props.mode === "single";
}
var defaultClassNames = {
  root: "rdp",
  multiple_months: "rdp-multiple_months",
  with_weeknumber: "rdp-with_weeknumber",
  vhidden: "rdp-vhidden",
  button_reset: "rdp-button_reset",
  button: "rdp-button",
  caption: "rdp-caption",
  caption_start: "rdp-caption_start",
  caption_end: "rdp-caption_end",
  caption_between: "rdp-caption_between",
  caption_label: "rdp-caption_label",
  caption_dropdowns: "rdp-caption_dropdowns",
  dropdown: "rdp-dropdown",
  dropdown_month: "rdp-dropdown_month",
  dropdown_year: "rdp-dropdown_year",
  dropdown_icon: "rdp-dropdown_icon",
  months: "rdp-months",
  month: "rdp-month",
  table: "rdp-table",
  tbody: "rdp-tbody",
  tfoot: "rdp-tfoot",
  head: "rdp-head",
  head_row: "rdp-head_row",
  head_cell: "rdp-head_cell",
  nav: "rdp-nav",
  nav_button: "rdp-nav_button",
  nav_button_previous: "rdp-nav_button_previous",
  nav_button_next: "rdp-nav_button_next",
  nav_icon: "rdp-nav_icon",
  row: "rdp-row",
  weeknumber: "rdp-weeknumber",
  cell: "rdp-cell",
  day: "rdp-day",
  day_today: "rdp-day_today",
  day_outside: "rdp-day_outside",
  day_selected: "rdp-day_selected",
  day_disabled: "rdp-day_disabled",
  day_hidden: "rdp-day_hidden",
  day_range_start: "rdp-day_range_start",
  day_range_end: "rdp-day_range_end",
  day_range_middle: "rdp-day_range_middle"
};
function formatCaption(month, options) {
  return format(month, "LLLL y", options);
}
function formatDay(day, options) {
  return format(day, "d", options);
}
function formatMonthCaption(month, options) {
  return format(month, "LLLL", options);
}
function formatWeekNumber(weekNumber) {
  return "".concat(weekNumber);
}
function formatWeekdayName(weekday, options) {
  return format(weekday, "cccccc", options);
}
function formatYearCaption(year, options) {
  return format(year, "yyyy", options);
}
var formatters = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  formatCaption,
  formatDay,
  formatMonthCaption,
  formatWeekNumber,
  formatWeekdayName,
  formatYearCaption
});
var labelDay = function(day, activeModifiers, options) {
  return format(day, "do MMMM (EEEE)", options);
};
var labelMonthDropdown = function() {
  return "Month: ";
};
var labelNext = function() {
  return "Go to next month";
};
var labelPrevious = function() {
  return "Go to previous month";
};
var labelWeekday = function(day, options) {
  return format(day, "cccc", options);
};
var labelWeekNumber = function(n) {
  return "Week n. ".concat(n);
};
var labelYearDropdown = function() {
  return "Year: ";
};
var labels = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  labelDay,
  labelMonthDropdown,
  labelNext,
  labelPrevious,
  labelWeekNumber,
  labelWeekday,
  labelYearDropdown
});
function getDefaultContextValues() {
  var captionLayout = "buttons";
  var classNames = defaultClassNames;
  var locale = enUS;
  var modifiersClassNames = {};
  var modifiers = {};
  var numberOfMonths = 1;
  var styles = {};
  var today = /* @__PURE__ */ new Date();
  return {
    captionLayout,
    classNames,
    formatters,
    labels,
    locale,
    modifiersClassNames,
    modifiers,
    numberOfMonths,
    styles,
    today,
    mode: "default"
  };
}
function parseFromToProps(props) {
  var fromYear = props.fromYear, toYear = props.toYear, fromMonth = props.fromMonth, toMonth = props.toMonth;
  var fromDate = props.fromDate, toDate2 = props.toDate;
  if (fromMonth) {
    fromDate = startOfMonth(fromMonth);
  } else if (fromYear) {
    fromDate = new Date(fromYear, 0, 1);
  }
  if (toMonth) {
    toDate2 = endOfMonth(toMonth);
  } else if (toYear) {
    toDate2 = new Date(toYear, 11, 31);
  }
  return {
    fromDate: fromDate ? startOfDay(fromDate) : void 0,
    toDate: toDate2 ? startOfDay(toDate2) : void 0
  };
}
var DayPickerContext = (0, import_react2.createContext)(void 0);
function DayPickerProvider(props) {
  var _a;
  var initialProps = props.initialProps;
  var defaultContextValues = getDefaultContextValues();
  var _b = parseFromToProps(initialProps), fromDate = _b.fromDate, toDate2 = _b.toDate;
  var captionLayout = (_a = initialProps.captionLayout) !== null && _a !== void 0 ? _a : defaultContextValues.captionLayout;
  if (captionLayout !== "buttons" && (!fromDate || !toDate2)) {
    captionLayout = "buttons";
  }
  var onSelect;
  if (isDayPickerSingle(initialProps) || isDayPickerMultiple(initialProps) || isDayPickerRange(initialProps)) {
    onSelect = initialProps.onSelect;
  }
  var value = __assign(__assign(__assign({}, defaultContextValues), initialProps), { captionLayout, classNames: __assign(__assign({}, defaultContextValues.classNames), initialProps.classNames), components: __assign({}, initialProps.components), formatters: __assign(__assign({}, defaultContextValues.formatters), initialProps.formatters), fromDate, labels: __assign(__assign({}, defaultContextValues.labels), initialProps.labels), mode: initialProps.mode || defaultContextValues.mode, modifiers: __assign(__assign({}, defaultContextValues.modifiers), initialProps.modifiers), modifiersClassNames: __assign(__assign({}, defaultContextValues.modifiersClassNames), initialProps.modifiersClassNames), onSelect, styles: __assign(__assign({}, defaultContextValues.styles), initialProps.styles), toDate: toDate2 });
  return (0, import_jsx_runtime6.jsx)(DayPickerContext.Provider, { value, children: props.children });
}
function useDayPicker() {
  var context = (0, import_react2.useContext)(DayPickerContext);
  if (!context) {
    throw new Error("useDayPicker must be used within a DayPickerProvider.");
  }
  return context;
}
function CaptionLabel(props) {
  var _a = useDayPicker(), locale = _a.locale, classNames = _a.classNames, styles = _a.styles, formatCaption2 = _a.formatters.formatCaption;
  return (0, import_jsx_runtime6.jsx)("div", { className: classNames.caption_label, style: styles.caption_label, "aria-live": "polite", role: "presentation", id: props.id, children: formatCaption2(props.displayMonth, { locale }) });
}
function IconDropdown(props) {
  return (0, import_jsx_runtime6.jsx)("svg", __assign({ width: "8px", height: "8px", viewBox: "0 0 120 120", "data-testid": "iconDropdown" }, props, { children: (0, import_jsx_runtime6.jsx)("path", { d: "M4.22182541,48.2218254 C8.44222828,44.0014225 15.2388494,43.9273804 19.5496459,47.9996989 L19.7781746,48.2218254 L60,88.443 L100.221825,48.2218254 C104.442228,44.0014225 111.238849,43.9273804 115.549646,47.9996989 L115.778175,48.2218254 C119.998577,52.4422283 120.07262,59.2388494 116.000301,63.5496459 L115.778175,63.7781746 L67.7781746,111.778175 C63.5577717,115.998577 56.7611506,116.07262 52.4503541,112.000301 L52.2218254,111.778175 L4.22182541,63.7781746 C-0.0739418023,59.4824074 -0.0739418023,52.5175926 4.22182541,48.2218254 Z", fill: "currentColor", fillRule: "nonzero" }) }));
}
function Dropdown(props) {
  var _a, _b;
  var onChange = props.onChange, value = props.value, children = props.children, caption = props.caption, className = props.className, style = props.style;
  var dayPicker = useDayPicker();
  var IconDropdownComponent = (_b = (_a = dayPicker.components) === null || _a === void 0 ? void 0 : _a.IconDropdown) !== null && _b !== void 0 ? _b : IconDropdown;
  return (0, import_jsx_runtime6.jsxs)("div", { className, style, children: [(0, import_jsx_runtime6.jsx)("span", { className: dayPicker.classNames.vhidden, children: props["aria-label"] }), (0, import_jsx_runtime6.jsx)("select", { name: props.name, "aria-label": props["aria-label"], className: dayPicker.classNames.dropdown, style: dayPicker.styles.dropdown, value, onChange, children }), (0, import_jsx_runtime6.jsxs)("div", { className: dayPicker.classNames.caption_label, style: dayPicker.styles.caption_label, "aria-hidden": "true", children: [caption, (0, import_jsx_runtime6.jsx)(IconDropdownComponent, { className: dayPicker.classNames.dropdown_icon, style: dayPicker.styles.dropdown_icon })] })] });
}
function MonthsDropdown(props) {
  var _a;
  var _b = useDayPicker(), fromDate = _b.fromDate, toDate2 = _b.toDate, styles = _b.styles, locale = _b.locale, formatMonthCaption2 = _b.formatters.formatMonthCaption, classNames = _b.classNames, components = _b.components, labelMonthDropdown2 = _b.labels.labelMonthDropdown;
  if (!fromDate)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  if (!toDate2)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  var dropdownMonths = [];
  if (isSameYear(fromDate, toDate2)) {
    var date = startOfMonth(fromDate);
    for (var month = fromDate.getMonth(); month <= toDate2.getMonth(); month++) {
      dropdownMonths.push(setMonth(date, month));
    }
  } else {
    var date = startOfMonth(/* @__PURE__ */ new Date());
    for (var month = 0; month <= 11; month++) {
      dropdownMonths.push(setMonth(date, month));
    }
  }
  var handleChange = function(e) {
    var selectedMonth = Number(e.target.value);
    var newMonth = setMonth(startOfMonth(props.displayMonth), selectedMonth);
    props.onChange(newMonth);
  };
  var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown;
  return (0, import_jsx_runtime6.jsx)(DropdownComponent, { name: "months", "aria-label": labelMonthDropdown2(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: props.displayMonth.getMonth(), caption: formatMonthCaption2(props.displayMonth, { locale }), children: dropdownMonths.map(function(m2) {
    return (0, import_jsx_runtime6.jsx)("option", { value: m2.getMonth(), children: formatMonthCaption2(m2, { locale }) }, m2.getMonth());
  }) });
}
function YearsDropdown(props) {
  var _a;
  var displayMonth = props.displayMonth;
  var _b = useDayPicker(), fromDate = _b.fromDate, toDate2 = _b.toDate, locale = _b.locale, styles = _b.styles, classNames = _b.classNames, components = _b.components, formatYearCaption2 = _b.formatters.formatYearCaption, labelYearDropdown2 = _b.labels.labelYearDropdown;
  var years = [];
  if (!fromDate)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  if (!toDate2)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  var fromYear = fromDate.getFullYear();
  var toYear = toDate2.getFullYear();
  for (var year = fromYear; year <= toYear; year++) {
    years.push(setYear(startOfYear(/* @__PURE__ */ new Date()), year));
  }
  var handleChange = function(e) {
    var newMonth = setYear(startOfMonth(displayMonth), Number(e.target.value));
    props.onChange(newMonth);
  };
  var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown;
  return (0, import_jsx_runtime6.jsx)(DropdownComponent, { name: "years", "aria-label": labelYearDropdown2(), className: classNames.dropdown_year, style: styles.dropdown_year, onChange: handleChange, value: displayMonth.getFullYear(), caption: formatYearCaption2(displayMonth, { locale }), children: years.map(function(year2) {
    return (0, import_jsx_runtime6.jsx)("option", { value: year2.getFullYear(), children: formatYearCaption2(year2, { locale }) }, year2.getFullYear());
  }) });
}
function useControlledValue(defaultValue, controlledValue) {
  var _a = (0, import_react2.useState)(defaultValue), uncontrolledValue = _a[0], setValue = _a[1];
  var value = controlledValue === void 0 ? uncontrolledValue : controlledValue;
  return [value, setValue];
}
function getInitialMonth(context) {
  var month = context.month, defaultMonth = context.defaultMonth, today = context.today;
  var initialMonth = month || defaultMonth || today || /* @__PURE__ */ new Date();
  var toDate2 = context.toDate, fromDate = context.fromDate, _a = context.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
  if (toDate2 && differenceInCalendarMonths(toDate2, initialMonth) < 0) {
    var offset = -1 * (numberOfMonths - 1);
    initialMonth = addMonths(toDate2, offset);
  }
  if (fromDate && differenceInCalendarMonths(initialMonth, fromDate) < 0) {
    initialMonth = fromDate;
  }
  return startOfMonth(initialMonth);
}
function useNavigationState() {
  var context = useDayPicker();
  var initialMonth = getInitialMonth(context);
  var _a = useControlledValue(initialMonth, context.month), month = _a[0], setMonth2 = _a[1];
  var goToMonth = function(date) {
    var _a2;
    if (context.disableNavigation)
      return;
    var month2 = startOfMonth(date);
    setMonth2(month2);
    (_a2 = context.onMonthChange) === null || _a2 === void 0 ? void 0 : _a2.call(context, month2);
  };
  return [month, goToMonth];
}
function getDisplayMonths(month, _a) {
  var reverseMonths = _a.reverseMonths, numberOfMonths = _a.numberOfMonths;
  var start = startOfMonth(month);
  var end = startOfMonth(addMonths(start, numberOfMonths));
  var monthsDiff = differenceInCalendarMonths(end, start);
  var months = [];
  for (var i = 0; i < monthsDiff; i++) {
    var nextMonth = addMonths(start, i);
    months.push(nextMonth);
  }
  if (reverseMonths)
    months = months.reverse();
  return months;
}
function getNextMonth(startingMonth, options) {
  if (options.disableNavigation) {
    return void 0;
  }
  var toDate2 = options.toDate, pagedNavigation = options.pagedNavigation, _a = options.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
  var offset = pagedNavigation ? numberOfMonths : 1;
  var month = startOfMonth(startingMonth);
  if (!toDate2) {
    return addMonths(month, offset);
  }
  var monthsDiff = differenceInCalendarMonths(toDate2, startingMonth);
  if (monthsDiff < numberOfMonths) {
    return void 0;
  }
  return addMonths(month, offset);
}
function getPreviousMonth(startingMonth, options) {
  if (options.disableNavigation) {
    return void 0;
  }
  var fromDate = options.fromDate, pagedNavigation = options.pagedNavigation, _a = options.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a;
  var offset = pagedNavigation ? numberOfMonths : 1;
  var month = startOfMonth(startingMonth);
  if (!fromDate) {
    return addMonths(month, -offset);
  }
  var monthsDiff = differenceInCalendarMonths(month, fromDate);
  if (monthsDiff <= 0) {
    return void 0;
  }
  return addMonths(month, -offset);
}
var NavigationContext2 = (0, import_react2.createContext)(void 0);
function NavigationProvider(props) {
  var dayPicker = useDayPicker();
  var _a = useNavigationState(), currentMonth = _a[0], goToMonth = _a[1];
  var displayMonths = getDisplayMonths(currentMonth, dayPicker);
  var nextMonth = getNextMonth(currentMonth, dayPicker);
  var previousMonth = getPreviousMonth(currentMonth, dayPicker);
  var isDateDisplayed = function(date) {
    return displayMonths.some(function(displayMonth) {
      return isSameMonth(date, displayMonth);
    });
  };
  var goToDate = function(date, refDate) {
    if (isDateDisplayed(date)) {
      return;
    }
    if (refDate && isBefore(date, refDate)) {
      goToMonth(addMonths(date, 1 + dayPicker.numberOfMonths * -1));
    } else {
      goToMonth(date);
    }
  };
  var value = {
    currentMonth,
    displayMonths,
    goToMonth,
    goToDate,
    previousMonth,
    nextMonth,
    isDateDisplayed
  };
  return (0, import_jsx_runtime6.jsx)(NavigationContext2.Provider, { value, children: props.children });
}
function useNavigation2() {
  var context = (0, import_react2.useContext)(NavigationContext2);
  if (!context) {
    throw new Error("useNavigation must be used within a NavigationProvider");
  }
  return context;
}
function CaptionDropdowns(props) {
  var _a;
  var _b = useDayPicker(), classNames = _b.classNames, styles = _b.styles, components = _b.components;
  var goToMonth = useNavigation2().goToMonth;
  var handleMonthChange = function(newMonth) {
    goToMonth(addMonths(newMonth, props.displayIndex ? -props.displayIndex : 0));
  };
  var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;
  var captionLabel = (0, import_jsx_runtime6.jsx)(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth });
  return (0, import_jsx_runtime6.jsxs)("div", { className: classNames.caption_dropdowns, style: styles.caption_dropdowns, children: [(0, import_jsx_runtime6.jsx)("div", { className: classNames.vhidden, children: captionLabel }), (0, import_jsx_runtime6.jsx)(MonthsDropdown, { onChange: handleMonthChange, displayMonth: props.displayMonth }), (0, import_jsx_runtime6.jsx)(YearsDropdown, { onChange: handleMonthChange, displayMonth: props.displayMonth })] });
}
function IconLeft(props) {
  return (0, import_jsx_runtime6.jsx)("svg", __assign({ width: "16px", height: "16px", viewBox: "0 0 120 120" }, props, { children: (0, import_jsx_runtime6.jsx)("path", { d: "M69.490332,3.34314575 C72.6145263,0.218951416 77.6798462,0.218951416 80.8040405,3.34314575 C83.8617626,6.40086786 83.9268205,11.3179931 80.9992143,14.4548388 L80.8040405,14.6568542 L35.461,60 L80.8040405,105.343146 C83.8617626,108.400868 83.9268205,113.317993 80.9992143,116.454839 L80.8040405,116.656854 C77.7463184,119.714576 72.8291931,119.779634 69.6923475,116.852028 L69.490332,116.656854 L18.490332,65.6568542 C15.4326099,62.5991321 15.367552,57.6820069 18.2951583,54.5451612 L18.490332,54.3431458 L69.490332,3.34314575 Z", fill: "currentColor", fillRule: "nonzero" }) }));
}
function IconRight(props) {
  return (0, import_jsx_runtime6.jsx)("svg", __assign({ width: "16px", height: "16px", viewBox: "0 0 120 120" }, props, { children: (0, import_jsx_runtime6.jsx)("path", { d: "M49.8040405,3.34314575 C46.6798462,0.218951416 41.6145263,0.218951416 38.490332,3.34314575 C35.4326099,6.40086786 35.367552,11.3179931 38.2951583,14.4548388 L38.490332,14.6568542 L83.8333725,60 L38.490332,105.343146 C35.4326099,108.400868 35.367552,113.317993 38.2951583,116.454839 L38.490332,116.656854 C41.5480541,119.714576 46.4651794,119.779634 49.602025,116.852028 L49.8040405,116.656854 L100.804041,65.6568542 C103.861763,62.5991321 103.926821,57.6820069 100.999214,54.5451612 L100.804041,54.3431458 L49.8040405,3.34314575 Z", fill: "currentColor" }) }));
}
var Button2 = (0, import_react2.forwardRef)(function(props, ref) {
  var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
  var classNamesArr = [classNames.button_reset, classNames.button];
  if (props.className) {
    classNamesArr.push(props.className);
  }
  var className = classNamesArr.join(" ");
  var style = __assign(__assign({}, styles.button_reset), styles.button);
  if (props.style) {
    Object.assign(style, props.style);
  }
  return (0, import_jsx_runtime6.jsx)("button", __assign({}, props, { ref, type: "button", className, style }));
});
function Navigation(props) {
  var _a, _b;
  var _c = useDayPicker(), dir = _c.dir, locale = _c.locale, classNames = _c.classNames, styles = _c.styles, _d = _c.labels, labelPrevious2 = _d.labelPrevious, labelNext2 = _d.labelNext, components = _c.components;
  if (!props.nextMonth && !props.previousMonth) {
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  }
  var previousLabel = labelPrevious2(props.previousMonth, { locale });
  var previousClassName = [
    classNames.nav_button,
    classNames.nav_button_previous
  ].join(" ");
  var nextLabel = labelNext2(props.nextMonth, { locale });
  var nextClassName = [
    classNames.nav_button,
    classNames.nav_button_next
  ].join(" ");
  var IconRightComponent = (_a = components === null || components === void 0 ? void 0 : components.IconRight) !== null && _a !== void 0 ? _a : IconRight;
  var IconLeftComponent = (_b = components === null || components === void 0 ? void 0 : components.IconLeft) !== null && _b !== void 0 ? _b : IconLeft;
  return (0, import_jsx_runtime6.jsxs)("div", { className: classNames.nav, style: styles.nav, children: [!props.hidePrevious && (0, import_jsx_runtime6.jsx)(Button2, { name: "previous-month", "aria-label": previousLabel, className: previousClassName, style: styles.nav_button_previous, disabled: !props.previousMonth, onClick: props.onPreviousClick, children: dir === "rtl" ? (0, import_jsx_runtime6.jsx)(IconRightComponent, { className: classNames.nav_icon, style: styles.nav_icon }) : (0, import_jsx_runtime6.jsx)(IconLeftComponent, { className: classNames.nav_icon, style: styles.nav_icon }) }), !props.hideNext && (0, import_jsx_runtime6.jsx)(Button2, { name: "next-month", "aria-label": nextLabel, className: nextClassName, style: styles.nav_button_next, disabled: !props.nextMonth, onClick: props.onNextClick, children: dir === "rtl" ? (0, import_jsx_runtime6.jsx)(IconLeftComponent, { className: classNames.nav_icon, style: styles.nav_icon }) : (0, import_jsx_runtime6.jsx)(IconRightComponent, { className: classNames.nav_icon, style: styles.nav_icon }) })] });
}
function CaptionNavigation(props) {
  var numberOfMonths = useDayPicker().numberOfMonths;
  var _a = useNavigation2(), previousMonth = _a.previousMonth, nextMonth = _a.nextMonth, goToMonth = _a.goToMonth, displayMonths = _a.displayMonths;
  var displayIndex = displayMonths.findIndex(function(month) {
    return isSameMonth(props.displayMonth, month);
  });
  var isFirst = displayIndex === 0;
  var isLast = displayIndex === displayMonths.length - 1;
  var hideNext = numberOfMonths > 1 && (isFirst || !isLast);
  var hidePrevious = numberOfMonths > 1 && (isLast || !isFirst);
  var handlePreviousClick = function() {
    if (!previousMonth)
      return;
    goToMonth(previousMonth);
  };
  var handleNextClick = function() {
    if (!nextMonth)
      return;
    goToMonth(nextMonth);
  };
  return (0, import_jsx_runtime6.jsx)(Navigation, { displayMonth: props.displayMonth, hideNext, hidePrevious, nextMonth, previousMonth, onPreviousClick: handlePreviousClick, onNextClick: handleNextClick });
}
function Caption(props) {
  var _a;
  var _b = useDayPicker(), classNames = _b.classNames, disableNavigation = _b.disableNavigation, styles = _b.styles, captionLayout = _b.captionLayout, components = _b.components;
  var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;
  var caption;
  if (disableNavigation) {
    caption = (0, import_jsx_runtime6.jsx)(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth });
  } else if (captionLayout === "dropdown") {
    caption = (0, import_jsx_runtime6.jsx)(CaptionDropdowns, { displayMonth: props.displayMonth, id: props.id });
  } else if (captionLayout === "dropdown-buttons") {
    caption = (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(CaptionDropdowns, { displayMonth: props.displayMonth, displayIndex: props.displayIndex, id: props.id }), (0, import_jsx_runtime6.jsx)(CaptionNavigation, { displayMonth: props.displayMonth, displayIndex: props.displayIndex, id: props.id })] });
  } else {
    caption = (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(CaptionLabelComponent, { id: props.id, displayMonth: props.displayMonth, displayIndex: props.displayIndex }), (0, import_jsx_runtime6.jsx)(CaptionNavigation, { displayMonth: props.displayMonth, id: props.id })] });
  }
  return (0, import_jsx_runtime6.jsx)("div", { className: classNames.caption, style: styles.caption, children: caption });
}
function Footer(props) {
  var _a = useDayPicker(), footer = _a.footer, styles = _a.styles, tfoot = _a.classNames.tfoot;
  if (!footer)
    return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {});
  return (0, import_jsx_runtime6.jsx)("tfoot", { className: tfoot, style: styles.tfoot, children: (0, import_jsx_runtime6.jsx)("tr", { children: (0, import_jsx_runtime6.jsx)("td", { colSpan: 8, children: footer }) }) });
}
function getWeekdays(locale, weekStartsOn, ISOWeek) {
  var start = ISOWeek ? startOfISOWeek(/* @__PURE__ */ new Date()) : startOfWeek(/* @__PURE__ */ new Date(), { locale, weekStartsOn });
  var days = [];
  for (var i = 0; i < 7; i++) {
    var day = addDays(start, i);
    days.push(day);
  }
  return days;
}
function HeadRow() {
  var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles, showWeekNumber = _a.showWeekNumber, locale = _a.locale, weekStartsOn = _a.weekStartsOn, ISOWeek = _a.ISOWeek, formatWeekdayName2 = _a.formatters.formatWeekdayName, labelWeekday2 = _a.labels.labelWeekday;
  var weekdays = getWeekdays(locale, weekStartsOn, ISOWeek);
  return (0, import_jsx_runtime6.jsxs)("tr", { style: styles.head_row, className: classNames.head_row, children: [showWeekNumber && (0, import_jsx_runtime6.jsx)("td", { style: styles.head_cell, className: classNames.head_cell }), weekdays.map(function(weekday, i) {
    return (0, import_jsx_runtime6.jsx)("th", { scope: "col", className: classNames.head_cell, style: styles.head_cell, "aria-label": labelWeekday2(weekday, { locale }), children: formatWeekdayName2(weekday, { locale }) }, i);
  })] });
}
function Head() {
  var _a;
  var _b = useDayPicker(), classNames = _b.classNames, styles = _b.styles, components = _b.components;
  var HeadRowComponent = (_a = components === null || components === void 0 ? void 0 : components.HeadRow) !== null && _a !== void 0 ? _a : HeadRow;
  return (0, import_jsx_runtime6.jsx)("thead", { style: styles.head, className: classNames.head, children: (0, import_jsx_runtime6.jsx)(HeadRowComponent, {}) });
}
function DayContent(props) {
  var _a = useDayPicker(), locale = _a.locale, formatDay2 = _a.formatters.formatDay;
  return (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: formatDay2(props.date, { locale }) });
}
var SelectMultipleContext = (0, import_react2.createContext)(void 0);
function SelectMultipleProvider(props) {
  if (!isDayPickerMultiple(props.initialProps)) {
    var emptyContextValue = {
      selected: void 0,
      modifiers: {
        disabled: []
      }
    };
    return (0, import_jsx_runtime6.jsx)(SelectMultipleContext.Provider, { value: emptyContextValue, children: props.children });
  }
  return (0, import_jsx_runtime6.jsx)(SelectMultipleProviderInternal, { initialProps: props.initialProps, children: props.children });
}
function SelectMultipleProviderInternal(_a) {
  var initialProps = _a.initialProps, children = _a.children;
  var selected = initialProps.selected, min2 = initialProps.min, max2 = initialProps.max;
  var onDayClick = function(day, activeModifiers, e) {
    var _a2, _b;
    (_a2 = initialProps.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(initialProps, day, activeModifiers, e);
    var isMinSelected = Boolean(activeModifiers.selected && min2 && (selected === null || selected === void 0 ? void 0 : selected.length) === min2);
    if (isMinSelected) {
      return;
    }
    var isMaxSelected = Boolean(!activeModifiers.selected && max2 && (selected === null || selected === void 0 ? void 0 : selected.length) === max2);
    if (isMaxSelected) {
      return;
    }
    var selectedDays = selected ? __spreadArray([], selected, true) : [];
    if (activeModifiers.selected) {
      var index = selectedDays.findIndex(function(selectedDay) {
        return isSameDay(day, selectedDay);
      });
      selectedDays.splice(index, 1);
    } else {
      selectedDays.push(day);
    }
    (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, selectedDays, day, activeModifiers, e);
  };
  var modifiers = {
    disabled: []
  };
  if (selected) {
    modifiers.disabled.push(function(day) {
      var isMaxSelected = max2 && selected.length > max2 - 1;
      var isSelected = selected.some(function(selectedDay) {
        return isSameDay(selectedDay, day);
      });
      return Boolean(isMaxSelected && !isSelected);
    });
  }
  var contextValue = {
    selected,
    onDayClick,
    modifiers
  };
  return (0, import_jsx_runtime6.jsx)(SelectMultipleContext.Provider, { value: contextValue, children });
}
function useSelectMultiple() {
  var context = (0, import_react2.useContext)(SelectMultipleContext);
  if (!context) {
    throw new Error("useSelectMultiple must be used within a SelectMultipleProvider");
  }
  return context;
}
function addToRange(day, range) {
  var _a = range || {}, from = _a.from, to = _a.to;
  if (from && to) {
    if (isSameDay(to, day) && isSameDay(from, day)) {
      return void 0;
    }
    if (isSameDay(to, day)) {
      return { from: to, to: void 0 };
    }
    if (isSameDay(from, day)) {
      return void 0;
    }
    if (isAfter(from, day)) {
      return { from: day, to };
    }
    return { from, to: day };
  }
  if (to) {
    if (isAfter(day, to)) {
      return { from: to, to: day };
    }
    return { from: day, to };
  }
  if (from) {
    if (isBefore(day, from)) {
      return { from: day, to: from };
    }
    return { from, to: day };
  }
  return { from: day, to: void 0 };
}
var SelectRangeContext = (0, import_react2.createContext)(void 0);
function SelectRangeProvider(props) {
  if (!isDayPickerRange(props.initialProps)) {
    var emptyContextValue = {
      selected: void 0,
      modifiers: {
        range_start: [],
        range_end: [],
        range_middle: [],
        disabled: []
      }
    };
    return (0, import_jsx_runtime6.jsx)(SelectRangeContext.Provider, { value: emptyContextValue, children: props.children });
  }
  return (0, import_jsx_runtime6.jsx)(SelectRangeProviderInternal, { initialProps: props.initialProps, children: props.children });
}
function SelectRangeProviderInternal(_a) {
  var initialProps = _a.initialProps, children = _a.children;
  var selected = initialProps.selected;
  var _b = selected || {}, selectedFrom = _b.from, selectedTo = _b.to;
  var min2 = initialProps.min;
  var max2 = initialProps.max;
  var onDayClick = function(day, activeModifiers, e) {
    var _a2, _b2;
    (_a2 = initialProps.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(initialProps, day, activeModifiers, e);
    var newRange = addToRange(day, selected);
    (_b2 = initialProps.onSelect) === null || _b2 === void 0 ? void 0 : _b2.call(initialProps, newRange, day, activeModifiers, e);
  };
  var modifiers = {
    range_start: [],
    range_end: [],
    range_middle: [],
    disabled: []
  };
  if (selectedFrom) {
    modifiers.range_start = [selectedFrom];
    if (!selectedTo) {
      modifiers.range_end = [selectedFrom];
    } else {
      modifiers.range_end = [selectedTo];
      if (!isSameDay(selectedFrom, selectedTo)) {
        modifiers.range_middle = [
          {
            after: selectedFrom,
            before: selectedTo
          }
        ];
      }
    }
  } else if (selectedTo) {
    modifiers.range_start = [selectedTo];
    modifiers.range_end = [selectedTo];
  }
  if (min2) {
    if (selectedFrom && !selectedTo) {
      modifiers.disabled.push({
        after: subDays(selectedFrom, min2 - 1),
        before: addDays(selectedFrom, min2 - 1)
      });
    }
    if (selectedFrom && selectedTo) {
      modifiers.disabled.push({
        after: selectedFrom,
        before: addDays(selectedFrom, min2 - 1)
      });
    }
    if (!selectedFrom && selectedTo) {
      modifiers.disabled.push({
        after: subDays(selectedTo, min2 - 1),
        before: addDays(selectedTo, min2 - 1)
      });
    }
  }
  if (max2) {
    if (selectedFrom && !selectedTo) {
      modifiers.disabled.push({
        before: addDays(selectedFrom, -max2 + 1)
      });
      modifiers.disabled.push({
        after: addDays(selectedFrom, max2 - 1)
      });
    }
    if (selectedFrom && selectedTo) {
      var selectedCount = differenceInCalendarDays(selectedTo, selectedFrom) + 1;
      var offset = max2 - selectedCount;
      modifiers.disabled.push({
        before: subDays(selectedFrom, offset)
      });
      modifiers.disabled.push({
        after: addDays(selectedTo, offset)
      });
    }
    if (!selectedFrom && selectedTo) {
      modifiers.disabled.push({
        before: addDays(selectedTo, -max2 + 1)
      });
      modifiers.disabled.push({
        after: addDays(selectedTo, max2 - 1)
      });
    }
  }
  return (0, import_jsx_runtime6.jsx)(SelectRangeContext.Provider, { value: { selected, onDayClick, modifiers }, children });
}
function useSelectRange() {
  var context = (0, import_react2.useContext)(SelectRangeContext);
  if (!context) {
    throw new Error("useSelectRange must be used within a SelectRangeProvider");
  }
  return context;
}
function matcherToArray(matcher) {
  if (Array.isArray(matcher)) {
    return __spreadArray([], matcher, true);
  } else if (matcher !== void 0) {
    return [matcher];
  } else {
    return [];
  }
}
function getCustomModifiers(dayModifiers) {
  var customModifiers = {};
  Object.entries(dayModifiers).forEach(function(_a) {
    var modifier = _a[0], matcher = _a[1];
    customModifiers[modifier] = matcherToArray(matcher);
  });
  return customModifiers;
}
var InternalModifier;
(function(InternalModifier2) {
  InternalModifier2["Outside"] = "outside";
  InternalModifier2["Disabled"] = "disabled";
  InternalModifier2["Selected"] = "selected";
  InternalModifier2["Hidden"] = "hidden";
  InternalModifier2["Today"] = "today";
  InternalModifier2["RangeStart"] = "range_start";
  InternalModifier2["RangeEnd"] = "range_end";
  InternalModifier2["RangeMiddle"] = "range_middle";
})(InternalModifier || (InternalModifier = {}));
var Selected = InternalModifier.Selected;
var Disabled = InternalModifier.Disabled;
var Hidden = InternalModifier.Hidden;
var Today = InternalModifier.Today;
var RangeEnd = InternalModifier.RangeEnd;
var RangeMiddle = InternalModifier.RangeMiddle;
var RangeStart = InternalModifier.RangeStart;
var Outside = InternalModifier.Outside;
function getInternalModifiers(dayPicker, selectMultiple, selectRange) {
  var _a;
  var internalModifiers = (_a = {}, _a[Selected] = matcherToArray(dayPicker.selected), _a[Disabled] = matcherToArray(dayPicker.disabled), _a[Hidden] = matcherToArray(dayPicker.hidden), _a[Today] = [dayPicker.today], _a[RangeEnd] = [], _a[RangeMiddle] = [], _a[RangeStart] = [], _a[Outside] = [], _a);
  if (dayPicker.fromDate) {
    internalModifiers[Disabled].push({ before: dayPicker.fromDate });
  }
  if (dayPicker.toDate) {
    internalModifiers[Disabled].push({ after: dayPicker.toDate });
  }
  if (isDayPickerMultiple(dayPicker)) {
    internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectMultiple.modifiers[Disabled]);
  } else if (isDayPickerRange(dayPicker)) {
    internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectRange.modifiers[Disabled]);
    internalModifiers[RangeStart] = selectRange.modifiers[RangeStart];
    internalModifiers[RangeMiddle] = selectRange.modifiers[RangeMiddle];
    internalModifiers[RangeEnd] = selectRange.modifiers[RangeEnd];
  }
  return internalModifiers;
}
var ModifiersContext = (0, import_react2.createContext)(void 0);
function ModifiersProvider(props) {
  var dayPicker = useDayPicker();
  var selectMultiple = useSelectMultiple();
  var selectRange = useSelectRange();
  var internalModifiers = getInternalModifiers(dayPicker, selectMultiple, selectRange);
  var customModifiers = getCustomModifiers(dayPicker.modifiers);
  var modifiers = __assign(__assign({}, internalModifiers), customModifiers);
  return (0, import_jsx_runtime6.jsx)(ModifiersContext.Provider, { value: modifiers, children: props.children });
}
function useModifiers() {
  var context = (0, import_react2.useContext)(ModifiersContext);
  if (!context) {
    throw new Error("useModifiers must be used within a ModifiersProvider");
  }
  return context;
}
function isDateInterval(matcher) {
  return Boolean(matcher && typeof matcher === "object" && "before" in matcher && "after" in matcher);
}
function isDateRange(value) {
  return Boolean(value && typeof value === "object" && "from" in value);
}
function isDateAfterType(value) {
  return Boolean(value && typeof value === "object" && "after" in value);
}
function isDateBeforeType(value) {
  return Boolean(value && typeof value === "object" && "before" in value);
}
function isDayOfWeekType(value) {
  return Boolean(value && typeof value === "object" && "dayOfWeek" in value);
}
function isDateInRange(date, range) {
  var _a;
  var from = range.from, to = range.to;
  if (from && to) {
    var isRangeInverted = differenceInCalendarDays(to, from) < 0;
    if (isRangeInverted) {
      _a = [to, from], from = _a[0], to = _a[1];
    }
    var isInRange = differenceInCalendarDays(date, from) >= 0 && differenceInCalendarDays(to, date) >= 0;
    return isInRange;
  }
  if (to) {
    return isSameDay(to, date);
  }
  if (from) {
    return isSameDay(from, date);
  }
  return false;
}
function isDateType(value) {
  return isDate(value);
}
function isArrayOfDates(value) {
  return Array.isArray(value) && value.every(isDate);
}
function isMatch(day, matchers) {
  return matchers.some(function(matcher) {
    if (typeof matcher === "boolean") {
      return matcher;
    }
    if (isDateType(matcher)) {
      return isSameDay(day, matcher);
    }
    if (isArrayOfDates(matcher)) {
      return matcher.includes(day);
    }
    if (isDateRange(matcher)) {
      return isDateInRange(day, matcher);
    }
    if (isDayOfWeekType(matcher)) {
      return matcher.dayOfWeek.includes(day.getDay());
    }
    if (isDateInterval(matcher)) {
      var diffBefore = differenceInCalendarDays(matcher.before, day);
      var diffAfter = differenceInCalendarDays(matcher.after, day);
      var isDayBefore = diffBefore > 0;
      var isDayAfter = diffAfter < 0;
      var isClosedInterval = isAfter(matcher.before, matcher.after);
      if (isClosedInterval) {
        return isDayAfter && isDayBefore;
      } else {
        return isDayBefore || isDayAfter;
      }
    }
    if (isDateAfterType(matcher)) {
      return differenceInCalendarDays(day, matcher.after) > 0;
    }
    if (isDateBeforeType(matcher)) {
      return differenceInCalendarDays(matcher.before, day) > 0;
    }
    if (typeof matcher === "function") {
      return matcher(day);
    }
    return false;
  });
}
function getActiveModifiers(day, modifiers, displayMonth) {
  var matchedModifiers = Object.keys(modifiers).reduce(function(result, key) {
    var modifier = modifiers[key];
    if (isMatch(day, modifier)) {
      result.push(key);
    }
    return result;
  }, []);
  var activeModifiers = {};
  matchedModifiers.forEach(function(modifier) {
    return activeModifiers[modifier] = true;
  });
  if (displayMonth && !isSameMonth(day, displayMonth)) {
    activeModifiers.outside = true;
  }
  return activeModifiers;
}
function getInitialFocusTarget(displayMonths, modifiers) {
  var firstDayInMonth = startOfMonth(displayMonths[0]);
  var lastDayInMonth = endOfMonth(displayMonths[displayMonths.length - 1]);
  var firstFocusableDay;
  var today;
  var date = firstDayInMonth;
  while (date <= lastDayInMonth) {
    var activeModifiers = getActiveModifiers(date, modifiers);
    var isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;
    if (!isFocusable) {
      date = addDays(date, 1);
      continue;
    }
    if (activeModifiers.selected) {
      return date;
    }
    if (activeModifiers.today && !today) {
      today = date;
    }
    if (!firstFocusableDay) {
      firstFocusableDay = date;
    }
    date = addDays(date, 1);
  }
  if (today) {
    return today;
  } else {
    return firstFocusableDay;
  }
}
var MAX_RETRY = 365;
function getNextFocus(focusedDay, options) {
  var moveBy = options.moveBy, direction = options.direction, context = options.context, modifiers = options.modifiers, _a = options.retry, retry = _a === void 0 ? { count: 0, lastFocused: focusedDay } : _a;
  var weekStartsOn = context.weekStartsOn, fromDate = context.fromDate, toDate2 = context.toDate, locale = context.locale;
  var moveFns = {
    day: addDays,
    week: addWeeks,
    month: addMonths,
    year: addYears,
    startOfWeek: function(date) {
      return context.ISOWeek ? startOfISOWeek(date) : startOfWeek(date, { locale, weekStartsOn });
    },
    endOfWeek: function(date) {
      return context.ISOWeek ? endOfISOWeek(date) : endOfWeek(date, { locale, weekStartsOn });
    }
  };
  var newFocusedDay = moveFns[moveBy](focusedDay, direction === "after" ? 1 : -1);
  if (direction === "before" && fromDate) {
    newFocusedDay = max([fromDate, newFocusedDay]);
  } else if (direction === "after" && toDate2) {
    newFocusedDay = min([toDate2, newFocusedDay]);
  }
  var isFocusable = true;
  if (modifiers) {
    var activeModifiers = getActiveModifiers(newFocusedDay, modifiers);
    isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;
  }
  if (isFocusable) {
    return newFocusedDay;
  } else {
    if (retry.count > MAX_RETRY) {
      return retry.lastFocused;
    }
    return getNextFocus(newFocusedDay, {
      moveBy,
      direction,
      context,
      modifiers,
      retry: __assign(__assign({}, retry), { count: retry.count + 1 })
    });
  }
}
var FocusContext = (0, import_react2.createContext)(void 0);
function FocusProvider(props) {
  var navigation = useNavigation2();
  var modifiers = useModifiers();
  var _a = (0, import_react2.useState)(), focusedDay = _a[0], setFocusedDay = _a[1];
  var _b = (0, import_react2.useState)(), lastFocused = _b[0], setLastFocused = _b[1];
  var initialFocusTarget = getInitialFocusTarget(navigation.displayMonths, modifiers);
  var focusTarget = (focusedDay !== null && focusedDay !== void 0 ? focusedDay : lastFocused && navigation.isDateDisplayed(lastFocused)) ? lastFocused : initialFocusTarget;
  var blur = function() {
    setLastFocused(focusedDay);
    setFocusedDay(void 0);
  };
  var focus = function(date) {
    setFocusedDay(date);
  };
  var context = useDayPicker();
  var moveFocus = function(moveBy, direction) {
    if (!focusedDay)
      return;
    var nextFocused = getNextFocus(focusedDay, {
      moveBy,
      direction,
      context,
      modifiers
    });
    if (isSameDay(focusedDay, nextFocused))
      return void 0;
    navigation.goToDate(nextFocused, focusedDay);
    focus(nextFocused);
  };
  var value = {
    focusedDay,
    focusTarget,
    blur,
    focus,
    focusDayAfter: function() {
      return moveFocus("day", "after");
    },
    focusDayBefore: function() {
      return moveFocus("day", "before");
    },
    focusWeekAfter: function() {
      return moveFocus("week", "after");
    },
    focusWeekBefore: function() {
      return moveFocus("week", "before");
    },
    focusMonthBefore: function() {
      return moveFocus("month", "before");
    },
    focusMonthAfter: function() {
      return moveFocus("month", "after");
    },
    focusYearBefore: function() {
      return moveFocus("year", "before");
    },
    focusYearAfter: function() {
      return moveFocus("year", "after");
    },
    focusStartOfWeek: function() {
      return moveFocus("startOfWeek", "before");
    },
    focusEndOfWeek: function() {
      return moveFocus("endOfWeek", "after");
    }
  };
  return (0, import_jsx_runtime6.jsx)(FocusContext.Provider, { value, children: props.children });
}
function useFocusContext() {
  var context = (0, import_react2.useContext)(FocusContext);
  if (!context) {
    throw new Error("useFocusContext must be used within a FocusProvider");
  }
  return context;
}
function useActiveModifiers(day, displayMonth) {
  var modifiers = useModifiers();
  var activeModifiers = getActiveModifiers(day, modifiers, displayMonth);
  return activeModifiers;
}
var SelectSingleContext = (0, import_react2.createContext)(void 0);
function SelectSingleProvider(props) {
  if (!isDayPickerSingle(props.initialProps)) {
    var emptyContextValue = {
      selected: void 0
    };
    return (0, import_jsx_runtime6.jsx)(SelectSingleContext.Provider, { value: emptyContextValue, children: props.children });
  }
  return (0, import_jsx_runtime6.jsx)(SelectSingleProviderInternal, { initialProps: props.initialProps, children: props.children });
}
function SelectSingleProviderInternal(_a) {
  var initialProps = _a.initialProps, children = _a.children;
  var onDayClick = function(day, activeModifiers, e) {
    var _a2, _b, _c;
    (_a2 = initialProps.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(initialProps, day, activeModifiers, e);
    if (activeModifiers.selected && !initialProps.required) {
      (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, void 0, day, activeModifiers, e);
      return;
    }
    (_c = initialProps.onSelect) === null || _c === void 0 ? void 0 : _c.call(initialProps, day, day, activeModifiers, e);
  };
  var contextValue = {
    selected: initialProps.selected,
    onDayClick
  };
  return (0, import_jsx_runtime6.jsx)(SelectSingleContext.Provider, { value: contextValue, children });
}
function useSelectSingle() {
  var context = (0, import_react2.useContext)(SelectSingleContext);
  if (!context) {
    throw new Error("useSelectSingle must be used within a SelectSingleProvider");
  }
  return context;
}
function useDayEventHandlers(date, activeModifiers) {
  var dayPicker = useDayPicker();
  var single = useSelectSingle();
  var multiple = useSelectMultiple();
  var range = useSelectRange();
  var _a = useFocusContext(), focusDayAfter = _a.focusDayAfter, focusDayBefore = _a.focusDayBefore, focusWeekAfter = _a.focusWeekAfter, focusWeekBefore = _a.focusWeekBefore, blur = _a.blur, focus = _a.focus, focusMonthBefore = _a.focusMonthBefore, focusMonthAfter = _a.focusMonthAfter, focusYearBefore = _a.focusYearBefore, focusYearAfter = _a.focusYearAfter, focusStartOfWeek = _a.focusStartOfWeek, focusEndOfWeek = _a.focusEndOfWeek;
  var onClick = function(e) {
    var _a2, _b, _c, _d;
    if (isDayPickerSingle(dayPicker)) {
      (_a2 = single.onDayClick) === null || _a2 === void 0 ? void 0 : _a2.call(single, date, activeModifiers, e);
    } else if (isDayPickerMultiple(dayPicker)) {
      (_b = multiple.onDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, activeModifiers, e);
    } else if (isDayPickerRange(dayPicker)) {
      (_c = range.onDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, activeModifiers, e);
    } else {
      (_d = dayPicker.onDayClick) === null || _d === void 0 ? void 0 : _d.call(dayPicker, date, activeModifiers, e);
    }
  };
  var onFocus = function(e) {
    var _a2;
    focus(date);
    (_a2 = dayPicker.onDayFocus) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onBlur = function(e) {
    var _a2;
    blur();
    (_a2 = dayPicker.onDayBlur) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onMouseEnter = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayMouseEnter) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onMouseLeave = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayMouseLeave) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onPointerEnter = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayPointerEnter) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onPointerLeave = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayPointerLeave) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchCancel = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchCancel) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchEnd = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchEnd) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchMove = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchMove) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onTouchStart = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayTouchStart) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onKeyUp = function(e) {
    var _a2;
    (_a2 = dayPicker.onDayKeyUp) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var onKeyDown = function(e) {
    var _a2;
    switch (e.key) {
      case "ArrowLeft":
        e.preventDefault();
        e.stopPropagation();
        dayPicker.dir === "rtl" ? focusDayAfter() : focusDayBefore();
        break;
      case "ArrowRight":
        e.preventDefault();
        e.stopPropagation();
        dayPicker.dir === "rtl" ? focusDayBefore() : focusDayAfter();
        break;
      case "ArrowDown":
        e.preventDefault();
        e.stopPropagation();
        focusWeekAfter();
        break;
      case "ArrowUp":
        e.preventDefault();
        e.stopPropagation();
        focusWeekBefore();
        break;
      case "PageUp":
        e.preventDefault();
        e.stopPropagation();
        e.shiftKey ? focusYearBefore() : focusMonthBefore();
        break;
      case "PageDown":
        e.preventDefault();
        e.stopPropagation();
        e.shiftKey ? focusYearAfter() : focusMonthAfter();
        break;
      case "Home":
        e.preventDefault();
        e.stopPropagation();
        focusStartOfWeek();
        break;
      case "End":
        e.preventDefault();
        e.stopPropagation();
        focusEndOfWeek();
        break;
    }
    (_a2 = dayPicker.onDayKeyDown) === null || _a2 === void 0 ? void 0 : _a2.call(dayPicker, date, activeModifiers, e);
  };
  var eventHandlers = {
    onClick,
    onFocus,
    onBlur,
    onKeyDown,
    onKeyUp,
    onMouseEnter,
    onMouseLeave,
    onPointerEnter,
    onPointerLeave,
    onTouchCancel,
    onTouchEnd,
    onTouchMove,
    onTouchStart
  };
  return eventHandlers;
}
function useSelectedDays() {
  var dayPicker = useDayPicker();
  var single = useSelectSingle();
  var multiple = useSelectMultiple();
  var range = useSelectRange();
  var selectedDays = isDayPickerSingle(dayPicker) ? single.selected : isDayPickerMultiple(dayPicker) ? multiple.selected : isDayPickerRange(dayPicker) ? range.selected : void 0;
  return selectedDays;
}
function isInternalModifier(modifier) {
  return Object.values(InternalModifier).includes(modifier);
}
function getDayClassNames(dayPicker, activeModifiers) {
  var classNames = [dayPicker.classNames.day];
  Object.keys(activeModifiers).forEach(function(modifier) {
    var customClassName = dayPicker.modifiersClassNames[modifier];
    if (customClassName) {
      classNames.push(customClassName);
    } else if (isInternalModifier(modifier)) {
      var internalClassName = dayPicker.classNames["day_".concat(modifier)];
      if (internalClassName) {
        classNames.push(internalClassName);
      }
    }
  });
  return classNames;
}
function getDayStyle(dayPicker, activeModifiers) {
  var style = __assign({}, dayPicker.styles.day);
  Object.keys(activeModifiers).forEach(function(modifier) {
    var _a;
    style = __assign(__assign({}, style), (_a = dayPicker.modifiersStyles) === null || _a === void 0 ? void 0 : _a[modifier]);
  });
  return style;
}
function useDayRender(day, displayMonth, buttonRef) {
  var _a;
  var _b, _c;
  var dayPicker = useDayPicker();
  var focusContext = useFocusContext();
  var activeModifiers = useActiveModifiers(day, displayMonth);
  var eventHandlers = useDayEventHandlers(day, activeModifiers);
  var selectedDays = useSelectedDays();
  var isButton = Boolean(dayPicker.onDayClick || dayPicker.mode !== "default");
  (0, import_react2.useEffect)(function() {
    var _a2;
    if (activeModifiers.outside)
      return;
    if (!focusContext.focusedDay)
      return;
    if (!isButton)
      return;
    if (isSameDay(focusContext.focusedDay, day)) {
      (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [
    focusContext.focusedDay,
    day,
    buttonRef,
    isButton,
    activeModifiers.outside
  ]);
  var className = getDayClassNames(dayPicker, activeModifiers).join(" ");
  var style = getDayStyle(dayPicker, activeModifiers);
  var isHidden = Boolean(activeModifiers.outside && !dayPicker.showOutsideDays || activeModifiers.hidden);
  var DayContentComponent = (_c = (_b = dayPicker.components) === null || _b === void 0 ? void 0 : _b.DayContent) !== null && _c !== void 0 ? _c : DayContent;
  var children = (0, import_jsx_runtime6.jsx)(DayContentComponent, { date: day, displayMonth, activeModifiers });
  var divProps = {
    style,
    className,
    children,
    role: "gridcell"
  };
  var isFocusTarget = focusContext.focusTarget && isSameDay(focusContext.focusTarget, day) && !activeModifiers.outside;
  var isFocused = focusContext.focusedDay && isSameDay(focusContext.focusedDay, day);
  var buttonProps = __assign(__assign(__assign({}, divProps), (_a = { disabled: activeModifiers.disabled, role: "gridcell" }, _a["aria-selected"] = activeModifiers.selected, _a.tabIndex = isFocused || isFocusTarget ? 0 : -1, _a)), eventHandlers);
  var dayRender = {
    isButton,
    isHidden,
    activeModifiers,
    selectedDays,
    buttonProps,
    divProps
  };
  return dayRender;
}
function Day(props) {
  var buttonRef = (0, import_react2.useRef)(null);
  var dayRender = useDayRender(props.date, props.displayMonth, buttonRef);
  if (dayRender.isHidden) {
    return (0, import_jsx_runtime6.jsx)("div", { role: "gridcell" });
  }
  if (!dayRender.isButton) {
    return (0, import_jsx_runtime6.jsx)("div", __assign({}, dayRender.divProps));
  }
  return (0, import_jsx_runtime6.jsx)(Button2, __assign({ name: "day", ref: buttonRef }, dayRender.buttonProps));
}
function WeekNumber(props) {
  var weekNumber = props.number, dates = props.dates;
  var _a = useDayPicker(), onWeekNumberClick = _a.onWeekNumberClick, styles = _a.styles, classNames = _a.classNames, locale = _a.locale, labelWeekNumber2 = _a.labels.labelWeekNumber, formatWeekNumber2 = _a.formatters.formatWeekNumber;
  var content = formatWeekNumber2(Number(weekNumber), { locale });
  if (!onWeekNumberClick) {
    return (0, import_jsx_runtime6.jsx)("span", { className: classNames.weeknumber, style: styles.weeknumber, children: content });
  }
  var label = labelWeekNumber2(Number(weekNumber), { locale });
  var handleClick = function(e) {
    onWeekNumberClick(weekNumber, dates, e);
  };
  return (0, import_jsx_runtime6.jsx)(Button2, { name: "week-number", "aria-label": label, className: classNames.weeknumber, style: styles.weeknumber, onClick: handleClick, children: content });
}
function Row(props) {
  var _a, _b;
  var _c = useDayPicker(), styles = _c.styles, classNames = _c.classNames, showWeekNumber = _c.showWeekNumber, components = _c.components;
  var DayComponent = (_a = components === null || components === void 0 ? void 0 : components.Day) !== null && _a !== void 0 ? _a : Day;
  var WeeknumberComponent = (_b = components === null || components === void 0 ? void 0 : components.WeekNumber) !== null && _b !== void 0 ? _b : WeekNumber;
  var weekNumberCell;
  if (showWeekNumber) {
    weekNumberCell = (0, import_jsx_runtime6.jsx)("td", { className: classNames.cell, style: styles.cell, children: (0, import_jsx_runtime6.jsx)(WeeknumberComponent, { number: props.weekNumber, dates: props.dates }) });
  }
  return (0, import_jsx_runtime6.jsxs)("tr", { className: classNames.row, style: styles.row, children: [weekNumberCell, props.dates.map(function(date) {
    return (0, import_jsx_runtime6.jsx)("td", { className: classNames.cell, style: styles.cell, role: "presentation", children: (0, import_jsx_runtime6.jsx)(DayComponent, { displayMonth: props.displayMonth, date }) }, getUnixTime(date));
  })] });
}
function daysToMonthWeeks(fromDate, toDate2, options) {
  var toWeek = (options === null || options === void 0 ? void 0 : options.ISOWeek) ? endOfISOWeek(toDate2) : endOfWeek(toDate2, options);
  var fromWeek = (options === null || options === void 0 ? void 0 : options.ISOWeek) ? startOfISOWeek(fromDate) : startOfWeek(fromDate, options);
  var nOfDays = differenceInCalendarDays(toWeek, fromWeek);
  var days = [];
  for (var i = 0; i <= nOfDays; i++) {
    days.push(addDays(fromWeek, i));
  }
  var weeksInMonth = days.reduce(function(result, date) {
    var weekNumber = (options === null || options === void 0 ? void 0 : options.ISOWeek) ? getISOWeek(date) : getWeek(date, options);
    var existingWeek = result.find(function(value) {
      return value.weekNumber === weekNumber;
    });
    if (existingWeek) {
      existingWeek.dates.push(date);
      return result;
    }
    result.push({
      weekNumber,
      dates: [date]
    });
    return result;
  }, []);
  return weeksInMonth;
}
function getMonthWeeks(month, options) {
  var weeksInMonth = daysToMonthWeeks(startOfMonth(month), endOfMonth(month), options);
  if (options === null || options === void 0 ? void 0 : options.useFixedWeeks) {
    var nrOfMonthWeeks = getWeeksInMonth(month, options);
    if (nrOfMonthWeeks < 6) {
      var lastWeek = weeksInMonth[weeksInMonth.length - 1];
      var lastDate = lastWeek.dates[lastWeek.dates.length - 1];
      var toDate2 = addWeeks(lastDate, 6 - nrOfMonthWeeks);
      var extraWeeks = daysToMonthWeeks(addWeeks(lastDate, 1), toDate2, options);
      weeksInMonth.push.apply(weeksInMonth, extraWeeks);
    }
  }
  return weeksInMonth;
}
function Table(props) {
  var _a, _b, _c;
  var _d = useDayPicker(), locale = _d.locale, classNames = _d.classNames, styles = _d.styles, hideHead = _d.hideHead, fixedWeeks = _d.fixedWeeks, components = _d.components, weekStartsOn = _d.weekStartsOn, firstWeekContainsDate = _d.firstWeekContainsDate, ISOWeek = _d.ISOWeek;
  var weeks = getMonthWeeks(props.displayMonth, {
    useFixedWeeks: Boolean(fixedWeeks),
    ISOWeek,
    locale,
    weekStartsOn,
    firstWeekContainsDate
  });
  var HeadComponent = (_a = components === null || components === void 0 ? void 0 : components.Head) !== null && _a !== void 0 ? _a : Head;
  var RowComponent = (_b = components === null || components === void 0 ? void 0 : components.Row) !== null && _b !== void 0 ? _b : Row;
  var FooterComponent = (_c = components === null || components === void 0 ? void 0 : components.Footer) !== null && _c !== void 0 ? _c : Footer;
  return (0, import_jsx_runtime6.jsxs)("table", { id: props.id, className: classNames.table, style: styles.table, role: "grid", "aria-labelledby": props["aria-labelledby"], children: [!hideHead && (0, import_jsx_runtime6.jsx)(HeadComponent, {}), (0, import_jsx_runtime6.jsx)("tbody", { className: classNames.tbody, style: styles.tbody, children: weeks.map(function(week) {
    return (0, import_jsx_runtime6.jsx)(RowComponent, { displayMonth: props.displayMonth, dates: week.dates, weekNumber: week.weekNumber }, week.weekNumber);
  }) }), (0, import_jsx_runtime6.jsx)(FooterComponent, { displayMonth: props.displayMonth })] });
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var useIsomorphicLayoutEffect2 = canUseDOM() ? import_react2.useLayoutEffect : import_react2.useEffect;
var serverHandoffComplete = false;
var id = 0;
function genId() {
  return "react-day-picker-".concat(++id);
}
function useId3(providedId) {
  var _a;
  var initialId = providedId !== null && providedId !== void 0 ? providedId : serverHandoffComplete ? genId() : null;
  var _b = (0, import_react2.useState)(initialId), id2 = _b[0], setId = _b[1];
  useIsomorphicLayoutEffect2(function() {
    if (id2 === null) {
      setId(genId());
    }
  }, []);
  (0, import_react2.useEffect)(function() {
    if (serverHandoffComplete === false) {
      serverHandoffComplete = true;
    }
  }, []);
  return (_a = providedId !== null && providedId !== void 0 ? providedId : id2) !== null && _a !== void 0 ? _a : void 0;
}
function Month(props) {
  var _a;
  var _b;
  var dayPicker = useDayPicker();
  var dir = dayPicker.dir, classNames = dayPicker.classNames, styles = dayPicker.styles, components = dayPicker.components;
  var displayMonths = useNavigation2().displayMonths;
  var captionId = useId3(dayPicker.id ? "".concat(dayPicker.id, "-").concat(props.displayIndex) : void 0);
  var tableId = dayPicker.id ? "".concat(dayPicker.id, "-grid-").concat(props.displayIndex) : void 0;
  var className = [classNames.month];
  var style = styles.month;
  var isStart = props.displayIndex === 0;
  var isEnd = props.displayIndex === displayMonths.length - 1;
  var isCenter = !isStart && !isEnd;
  if (dir === "rtl") {
    _a = [isStart, isEnd], isEnd = _a[0], isStart = _a[1];
  }
  if (isStart) {
    className.push(classNames.caption_start);
    style = __assign(__assign({}, style), styles.caption_start);
  }
  if (isEnd) {
    className.push(classNames.caption_end);
    style = __assign(__assign({}, style), styles.caption_end);
  }
  if (isCenter) {
    className.push(classNames.caption_between);
    style = __assign(__assign({}, style), styles.caption_between);
  }
  var CaptionComponent = (_b = components === null || components === void 0 ? void 0 : components.Caption) !== null && _b !== void 0 ? _b : Caption;
  return (0, import_jsx_runtime6.jsxs)("div", { className: className.join(" "), style, children: [(0, import_jsx_runtime6.jsx)(CaptionComponent, { id: captionId, displayMonth: props.displayMonth, displayIndex: props.displayIndex }), (0, import_jsx_runtime6.jsx)(Table, { id: tableId, "aria-labelledby": captionId, displayMonth: props.displayMonth })] }, props.displayIndex);
}
function Months(props) {
  var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
  return (0, import_jsx_runtime6.jsx)("div", { className: classNames.months, style: styles.months, children: props.children });
}
function Root5(_a) {
  var _b, _c;
  var initialProps = _a.initialProps;
  var dayPicker = useDayPicker();
  var focusContext = useFocusContext();
  var navigation = useNavigation2();
  var _d = (0, import_react2.useState)(false), hasInitialFocus = _d[0], setHasInitialFocus = _d[1];
  (0, import_react2.useEffect)(function() {
    if (!dayPicker.initialFocus)
      return;
    if (!focusContext.focusTarget)
      return;
    if (hasInitialFocus)
      return;
    focusContext.focus(focusContext.focusTarget);
    setHasInitialFocus(true);
  }, [
    dayPicker.initialFocus,
    hasInitialFocus,
    focusContext.focus,
    focusContext.focusTarget,
    focusContext
  ]);
  var classNames = [dayPicker.classNames.root, dayPicker.className];
  if (dayPicker.numberOfMonths > 1) {
    classNames.push(dayPicker.classNames.multiple_months);
  }
  if (dayPicker.showWeekNumber) {
    classNames.push(dayPicker.classNames.with_weeknumber);
  }
  var style = __assign(__assign({}, dayPicker.styles.root), dayPicker.style);
  var dataAttributes = Object.keys(initialProps).filter(function(key) {
    return key.startsWith("data-");
  }).reduce(function(attrs, key) {
    var _a2;
    return __assign(__assign({}, attrs), (_a2 = {}, _a2[key] = initialProps[key], _a2));
  }, {});
  var MonthsComponent = (_c = (_b = initialProps.components) === null || _b === void 0 ? void 0 : _b.Months) !== null && _c !== void 0 ? _c : Months;
  return (0, import_jsx_runtime6.jsx)("div", __assign({ className: classNames.join(" "), style, dir: dayPicker.dir, id: dayPicker.id, nonce: initialProps.nonce, title: initialProps.title, lang: initialProps.lang }, dataAttributes, { children: (0, import_jsx_runtime6.jsx)(MonthsComponent, { children: navigation.displayMonths.map(function(month, i) {
    return (0, import_jsx_runtime6.jsx)(Month, { displayIndex: i, displayMonth: month }, i);
  }) }) }));
}
function RootProvider(props) {
  var children = props.children, initialProps = __rest(props, ["children"]);
  return (0, import_jsx_runtime6.jsx)(DayPickerProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(NavigationProvider, { children: (0, import_jsx_runtime6.jsx)(SelectSingleProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(SelectMultipleProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(SelectRangeProvider, { initialProps, children: (0, import_jsx_runtime6.jsx)(ModifiersProvider, { children: (0, import_jsx_runtime6.jsx)(FocusProvider, { children }) }) }) }) }) }) });
}
function DayPicker(props) {
  return (0, import_jsx_runtime6.jsx)(RootProvider, __assign({}, props, { children: (0, import_jsx_runtime6.jsx)(Root5, { initialProps: props }) }));
}

// src/components/ui/calendar.tsx
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function Calendar2({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
    DayPicker,
    {
      showOutsideDays,
      className: cn("p-3", className),
      classNames: {
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range" ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md" : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames
      },
      components: {
        IconLeft: ({ className: className2, ...props2 }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ChevronLeft, { className: cn("h-4 w-4", className2), ...props2 }),
        IconRight: ({ className: className2, ...props2 }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ChevronRight, { className: cn("h-4 w-4", className2), ...props2 })
      },
      ...props
    }
  );
}
Calendar2.displayName = "Calendar";

// src/components/ui/popover.tsx
var React19 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-popover/dist/index.mjs
var React18 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var POPOVER_NAME = "Popover";
var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
  createPopperScope
]);
var usePopperScope = createPopperScope();
var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
var Popover = (props) => {
  const {
    __scopePopover,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = false
  } = props;
  const popperScope = usePopperScope(__scopePopover);
  const triggerRef = React18.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React18.useState(false);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: POPOVER_NAME
  });
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Root22, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    PopoverProvider,
    {
      scope: __scopePopover,
      contentId: useId(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: React18.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      hasCustomAnchor,
      onCustomAnchorAdd: React18.useCallback(() => setHasCustomAnchor(true), []),
      onCustomAnchorRemove: React18.useCallback(() => setHasCustomAnchor(false), []),
      modal,
      children
    }
  ) });
};
Popover.displayName = POPOVER_NAME;
var ANCHOR_NAME = "PopoverAnchor";
var PopoverAnchor = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    React18.useEffect(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [onCustomAnchorAdd, onCustomAnchorRemove]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
PopoverAnchor.displayName = ANCHOR_NAME;
var TRIGGER_NAME = "PopoverTrigger";
var PopoverTrigger = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
    const trigger = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      Primitive.button,
      {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
      }
    );
    return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Anchor, { asChild: true, ...popperScope, children: trigger });
  }
);
PopoverTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "PopoverPortal";
var [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {
  forceMount: void 0
});
var PopoverPortal = (props) => {
  const { __scopePopover, forceMount, children, container } = props;
  const context = usePopoverContext(PORTAL_NAME, __scopePopover);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PortalProvider, { scope: __scopePopover, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Portal, { asChild: true, container, children }) }) });
};
PopoverPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "PopoverContent";
var PopoverContent = React18.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
  }
);
PopoverContent.displayName = CONTENT_NAME;
var Slot = createSlot("PopoverContent.RemoveScroll");
var PopoverContentModal = React18.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const contentRef = React18.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const isRightClickOutsideRef = React18.useRef(false);
    React18.useEffect(() => {
      const content = contentRef.current;
      if (content) return hideOthers(content);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          event.preventDefault();
          if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();
        }),
        onPointerDownOutside: composeEventHandlers(
          props.onPointerDownOutside,
          (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            isRightClickOutsideRef.current = isRightClick;
          },
          { checkForDefaultPrevented: false }
        ),
        onFocusOutside: composeEventHandlers(
          props.onFocusOutside,
          (event) => event.preventDefault(),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
var PopoverContentNonModal = React18.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = React18.useRef(false);
    const hasPointerDownOutsideRef = React18.useRef(false);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event) => {
          props.onCloseAutoFocus?.(event);
          if (!event.defaultPrevented) {
            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
          hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          props.onInteractOutside?.(event);
          if (!event.defaultPrevented) {
            hasInteractedOutsideRef.current = true;
            if (event.detail.originalEvent.type === "pointerdown") {
              hasPointerDownOutsideRef.current = true;
            }
          }
          const target = event.target;
          const targetIsTrigger = context.triggerRef.current?.contains(target);
          if (targetIsTrigger) event.preventDefault();
          if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
            event.preventDefault();
          }
        }
      }
    );
  }
);
var PopoverContentImpl = React18.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopePopover,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      ...contentProps
    } = props;
    const context = usePopoverContext(CONTENT_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    useFocusGuards();
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      FocusScope,
      {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          DismissableLayer,
          {
            asChild: true,
            disableOutsidePointerEvents,
            onInteractOutside,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside,
            onDismiss: () => context.onOpenChange(false),
            children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
              Content2,
              {
                "data-state": getState(context.open),
                role: "dialog",
                id: context.contentId,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                  ...contentProps.style,
                  // re-namespace exposed content custom properties
                  ...{
                    "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                  }
                }
              }
            )
          }
        )
      }
    );
  }
);
var CLOSE_NAME = "PopoverClose";
var PopoverClose = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
      }
    );
  }
);
PopoverClose.displayName = CLOSE_NAME;
var ARROW_NAME = "PopoverArrow";
var PopoverArrow = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
PopoverArrow.displayName = ARROW_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
var Root23 = Popover;
var Trigger2 = PopoverTrigger;
var Portal3 = PopoverPortal;
var Content22 = PopoverContent;

// src/components/ui/popover.tsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var Popover2 = Root23;
var PopoverTrigger2 = Trigger2;
var PopoverContent2 = React19.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Portal3, { children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
  Content22,
  {
    ref,
    align,
    sideOffset,
    className: cn(
      "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
) }));
PopoverContent2.displayName = Content22.displayName;

// src/components/ui/switch.tsx
var React21 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-switch/dist/index.mjs
var React20 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var SWITCH_NAME = "Switch";
var [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);
var [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);
var Switch = React20.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSwitch,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      disabled,
      value = "on",
      onCheckedChange,
      form,
      ...switchProps
    } = props;
    const [button, setButton] = React20.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React20.useRef(false);
    const isFormControl = button ? form || !!button.closest("form") : true;
    const [checked, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked ?? false,
      onChange: onCheckedChange,
      caller: SWITCH_NAME
    });
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "switch",
          "aria-checked": checked,
          "aria-required": required,
          "data-state": getState2(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...switchProps,
          ref: composedRefs,
          onClick: composeEventHandlers(props.onClick, (event) => {
            setChecked((prevChecked) => !prevChecked);
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
            }
          })
        }
      ),
      isFormControl && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        SwitchBubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          form,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Switch.displayName = SWITCH_NAME;
var THUMB_NAME = "SwitchThumb";
var SwitchThumb = React20.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSwitch, ...thumbProps } = props;
    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      Primitive.span,
      {
        "data-state": getState2(context.checked),
        "data-disabled": context.disabled ? "" : void 0,
        ...thumbProps,
        ref: forwardedRef
      }
    );
  }
);
SwitchThumb.displayName = THUMB_NAME;
var BUBBLE_INPUT_NAME = "SwitchBubbleInput";
var SwitchBubbleInput = React20.forwardRef(
  ({
    __scopeSwitch,
    control,
    checked,
    bubbles = true,
    ...props
  }, forwardedRef) => {
    const ref = React20.useRef(null);
    const composedRefs = useComposedRefs(ref, forwardedRef);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React20.useEffect(() => {
      const input = ref.current;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "input",
      {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: checked,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        }
      }
    );
  }
);
SwitchBubbleInput.displayName = BUBBLE_INPUT_NAME;
function getState2(checked) {
  return checked ? "checked" : "unchecked";
}
var Root6 = Switch;
var Thumb = SwitchThumb;

// src/components/ui/switch.tsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var Switch2 = React21.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
  Root6,
  {
    className: cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    ),
    ...props,
    ref,
    children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      Thumb,
      {
        className: cn(
          "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
        )
      }
    )
  }
));
Switch2.displayName = Root6.displayName;

// src/components/ui/checkbox.tsx
var React23 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-checkbox/dist/index.mjs
var React22 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var CHECKBOX_NAME = "Checkbox";
var [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);
var [CheckboxProviderImpl, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
function CheckboxProvider(props) {
  const {
    __scopeCheckbox,
    checked: checkedProp,
    children,
    defaultChecked,
    disabled,
    form,
    name,
    onCheckedChange,
    required,
    value = "on",
    // @ts-expect-error
    internal_do_not_use_render
  } = props;
  const [checked, setChecked] = useControllableState({
    prop: checkedProp,
    defaultProp: defaultChecked ?? false,
    onChange: onCheckedChange,
    caller: CHECKBOX_NAME
  });
  const [control, setControl] = React22.useState(null);
  const [bubbleInput, setBubbleInput] = React22.useState(null);
  const hasConsumerStoppedPropagationRef = React22.useRef(false);
  const isFormControl = control ? !!form || !!control.closest("form") : (
    // We set this to true by default so that events bubble to forms without JS (SSR)
    true
  );
  const context = {
    checked,
    disabled,
    setChecked,
    control,
    setControl,
    name,
    form,
    value,
    hasConsumerStoppedPropagationRef,
    required,
    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,
    isFormControl,
    bubbleInput,
    setBubbleInput
  };
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    CheckboxProviderImpl,
    {
      scope: __scopeCheckbox,
      ...context,
      children: isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children
    }
  );
}
var TRIGGER_NAME2 = "CheckboxTrigger";
var CheckboxTrigger = React22.forwardRef(
  ({ __scopeCheckbox, onKeyDown, onClick, ...checkboxProps }, forwardedRef) => {
    const {
      control,
      value,
      disabled,
      checked,
      required,
      setControl,
      setChecked,
      hasConsumerStoppedPropagationRef,
      isFormControl,
      bubbleInput
    } = useCheckboxContext(TRIGGER_NAME2, __scopeCheckbox);
    const composedRefs = useComposedRefs(forwardedRef, setControl);
    const initialCheckedStateRef = React22.useRef(checked);
    React22.useEffect(() => {
      const form = control?.form;
      if (form) {
        const reset = () => setChecked(initialCheckedStateRef.current);
        form.addEventListener("reset", reset);
        return () => form.removeEventListener("reset", reset);
      }
    }, [control, setChecked]);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Primitive.button,
      {
        type: "button",
        role: "checkbox",
        "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
        "aria-required": required,
        "data-state": getState3(checked),
        "data-disabled": disabled ? "" : void 0,
        disabled,
        value,
        ...checkboxProps,
        ref: composedRefs,
        onKeyDown: composeEventHandlers(onKeyDown, (event) => {
          if (event.key === "Enter") event.preventDefault();
        }),
        onClick: composeEventHandlers(onClick, (event) => {
          setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);
          if (bubbleInput && isFormControl) {
            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
            if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
          }
        })
      }
    );
  }
);
CheckboxTrigger.displayName = TRIGGER_NAME2;
var Checkbox = React22.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeCheckbox,
      name,
      checked,
      defaultChecked,
      required,
      disabled,
      value,
      onCheckedChange,
      form,
      ...checkboxProps
    } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      CheckboxProvider,
      {
        __scopeCheckbox,
        checked,
        defaultChecked,
        disabled,
        required,
        onCheckedChange,
        name,
        form,
        value,
        internal_do_not_use_render: ({ isFormControl }) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            CheckboxTrigger,
            {
              ...checkboxProps,
              ref: forwardedRef,
              __scopeCheckbox
            }
          ),
          isFormControl && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            CheckboxBubbleInput,
            {
              __scopeCheckbox
            }
          )
        ] })
      }
    );
  }
);
Checkbox.displayName = CHECKBOX_NAME;
var INDICATOR_NAME = "CheckboxIndicator";
var CheckboxIndicator = React22.forwardRef(
  (props, forwardedRef) => {
    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;
    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Presence,
      {
        present: forceMount || isIndeterminate(context.checked) || context.checked === true,
        children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          Primitive.span,
          {
            "data-state": getState3(context.checked),
            "data-disabled": context.disabled ? "" : void 0,
            ...indicatorProps,
            ref: forwardedRef,
            style: { pointerEvents: "none", ...props.style }
          }
        )
      }
    );
  }
);
CheckboxIndicator.displayName = INDICATOR_NAME;
var BUBBLE_INPUT_NAME2 = "CheckboxBubbleInput";
var CheckboxBubbleInput = React22.forwardRef(
  ({ __scopeCheckbox, ...props }, forwardedRef) => {
    const {
      control,
      hasConsumerStoppedPropagationRef,
      checked,
      defaultChecked,
      required,
      disabled,
      name,
      value,
      form,
      bubbleInput,
      setBubbleInput
    } = useCheckboxContext(BUBBLE_INPUT_NAME2, __scopeCheckbox);
    const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React22.useEffect(() => {
      const input = bubbleInput;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      const bubbles = !hasConsumerStoppedPropagationRef.current;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        input.indeterminate = isIndeterminate(checked);
        setChecked.call(input, isIndeterminate(checked) ? false : checked);
        input.dispatchEvent(event);
      }
    }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);
    const defaultCheckedRef = React22.useRef(isIndeterminate(checked) ? false : checked);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Primitive.input,
      {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: defaultChecked ?? defaultCheckedRef.current,
        required,
        disabled,
        name,
        value,
        form,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0,
          // We transform because the input is absolutely positioned but we have
          // rendered it **after** the button. This pulls it back to sit on top
          // of the button.
          transform: "translateX(-100%)"
        }
      }
    );
  }
);
CheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME2;
function isFunction(value) {
  return typeof value === "function";
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState3(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}

// src/components/ui/checkbox.tsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var Checkbox2 = React23.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
  Checkbox,
  {
    ref,
    className: cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    ),
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      CheckboxIndicator,
      {
        className: cn("flex items-center justify-center text-current"),
        children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Check, { className: "h-4 w-4" })
      }
    )
  }
));
Checkbox2.displayName = Checkbox.displayName;

// src/components/ui/separator.tsx
var React25 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-separator/dist/index.mjs
var React24 = __toESM(require_react(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var NAME2 = "Separator";
var DEFAULT_ORIENTATION = "horizontal";
var ORIENTATIONS = ["horizontal", "vertical"];
var Separator = React24.forwardRef((props, forwardedRef) => {
  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;
  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;
  const ariaOrientation = orientation === "vertical" ? orientation : void 0;
  const semanticProps = decorative ? { role: "none" } : { "aria-orientation": ariaOrientation, role: "separator" };
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    Primitive.div,
    {
      "data-orientation": orientation,
      ...semanticProps,
      ...domProps,
      ref: forwardedRef
    }
  );
});
Separator.displayName = NAME2;
function isValidOrientation(orientation) {
  return ORIENTATIONS.includes(orientation);
}
var Root7 = Separator;

// src/components/ui/separator.tsx
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var Separator2 = React25.forwardRef(
  ({ className, orientation = "horizontal", decorative = true, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    Root7,
    {
      ref,
      decorative,
      orientation,
      className: cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      ),
      ...props
    }
  )
);
Separator2.displayName = Root7.displayName;

// src/components/common/FileUpload.tsx
var import_react4 = __toESM(require_react(), 1);

// ../node_modules/react-dropzone/dist/es/index.js
var import_react3 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// ../node_modules/file-selector/dist/es2015/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  // https://github.com/guzzle/psr7/blob/2d9260799e713f1c475d3c5fdc3d6561ff7441b2/src/MimeType.php
  ["1km", "application/vnd.1000minds.decision-model+xml"],
  ["3dml", "text/vnd.in3d.3dml"],
  ["3ds", "image/x-3ds"],
  ["3g2", "video/3gpp2"],
  ["3gp", "video/3gp"],
  ["3gpp", "video/3gpp"],
  ["3mf", "model/3mf"],
  ["7z", "application/x-7z-compressed"],
  ["7zip", "application/x-7z-compressed"],
  ["123", "application/vnd.lotus-1-2-3"],
  ["aab", "application/x-authorware-bin"],
  ["aac", "audio/x-acc"],
  ["aam", "application/x-authorware-map"],
  ["aas", "application/x-authorware-seg"],
  ["abw", "application/x-abiword"],
  ["ac", "application/vnd.nokia.n-gage.ac+xml"],
  ["ac3", "audio/ac3"],
  ["acc", "application/vnd.americandynamics.acc"],
  ["ace", "application/x-ace-compressed"],
  ["acu", "application/vnd.acucobol"],
  ["acutc", "application/vnd.acucorp"],
  ["adp", "audio/adpcm"],
  ["aep", "application/vnd.audiograph"],
  ["afm", "application/x-font-type1"],
  ["afp", "application/vnd.ibm.modcap"],
  ["ahead", "application/vnd.ahead.space"],
  ["ai", "application/pdf"],
  ["aif", "audio/x-aiff"],
  ["aifc", "audio/x-aiff"],
  ["aiff", "audio/x-aiff"],
  ["air", "application/vnd.adobe.air-application-installer-package+zip"],
  ["ait", "application/vnd.dvb.ait"],
  ["ami", "application/vnd.amiga.ami"],
  ["amr", "audio/amr"],
  ["apk", "application/vnd.android.package-archive"],
  ["apng", "image/apng"],
  ["appcache", "text/cache-manifest"],
  ["application", "application/x-ms-application"],
  ["apr", "application/vnd.lotus-approach"],
  ["arc", "application/x-freearc"],
  ["arj", "application/x-arj"],
  ["asc", "application/pgp-signature"],
  ["asf", "video/x-ms-asf"],
  ["asm", "text/x-asm"],
  ["aso", "application/vnd.accpac.simply.aso"],
  ["asx", "video/x-ms-asf"],
  ["atc", "application/vnd.acucorp"],
  ["atom", "application/atom+xml"],
  ["atomcat", "application/atomcat+xml"],
  ["atomdeleted", "application/atomdeleted+xml"],
  ["atomsvc", "application/atomsvc+xml"],
  ["atx", "application/vnd.antix.game-component"],
  ["au", "audio/x-au"],
  ["avi", "video/x-msvideo"],
  ["avif", "image/avif"],
  ["aw", "application/applixware"],
  ["azf", "application/vnd.airzip.filesecure.azf"],
  ["azs", "application/vnd.airzip.filesecure.azs"],
  ["azv", "image/vnd.airzip.accelerator.azv"],
  ["azw", "application/vnd.amazon.ebook"],
  ["b16", "image/vnd.pco.b16"],
  ["bat", "application/x-msdownload"],
  ["bcpio", "application/x-bcpio"],
  ["bdf", "application/x-font-bdf"],
  ["bdm", "application/vnd.syncml.dm+wbxml"],
  ["bdoc", "application/x-bdoc"],
  ["bed", "application/vnd.realvnc.bed"],
  ["bh2", "application/vnd.fujitsu.oasysprs"],
  ["bin", "application/octet-stream"],
  ["blb", "application/x-blorb"],
  ["blorb", "application/x-blorb"],
  ["bmi", "application/vnd.bmi"],
  ["bmml", "application/vnd.balsamiq.bmml+xml"],
  ["bmp", "image/bmp"],
  ["book", "application/vnd.framemaker"],
  ["box", "application/vnd.previewsystems.box"],
  ["boz", "application/x-bzip2"],
  ["bpk", "application/octet-stream"],
  ["bpmn", "application/octet-stream"],
  ["bsp", "model/vnd.valve.source.compiled-map"],
  ["btif", "image/prs.btif"],
  ["buffer", "application/octet-stream"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["c", "text/x-c"],
  ["c4d", "application/vnd.clonk.c4group"],
  ["c4f", "application/vnd.clonk.c4group"],
  ["c4g", "application/vnd.clonk.c4group"],
  ["c4p", "application/vnd.clonk.c4group"],
  ["c4u", "application/vnd.clonk.c4group"],
  ["c11amc", "application/vnd.cluetrust.cartomobile-config"],
  ["c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"],
  ["cab", "application/vnd.ms-cab-compressed"],
  ["caf", "audio/x-caf"],
  ["cap", "application/vnd.tcpdump.pcap"],
  ["car", "application/vnd.curl.car"],
  ["cat", "application/vnd.ms-pki.seccat"],
  ["cb7", "application/x-cbr"],
  ["cba", "application/x-cbr"],
  ["cbr", "application/x-cbr"],
  ["cbt", "application/x-cbr"],
  ["cbz", "application/x-cbr"],
  ["cc", "text/x-c"],
  ["cco", "application/x-cocoa"],
  ["cct", "application/x-director"],
  ["ccxml", "application/ccxml+xml"],
  ["cdbcmsg", "application/vnd.contact.cmsg"],
  ["cda", "application/x-cdf"],
  ["cdf", "application/x-netcdf"],
  ["cdfx", "application/cdfx+xml"],
  ["cdkey", "application/vnd.mediastation.cdkey"],
  ["cdmia", "application/cdmi-capability"],
  ["cdmic", "application/cdmi-container"],
  ["cdmid", "application/cdmi-domain"],
  ["cdmio", "application/cdmi-object"],
  ["cdmiq", "application/cdmi-queue"],
  ["cdr", "application/cdr"],
  ["cdx", "chemical/x-cdx"],
  ["cdxml", "application/vnd.chemdraw+xml"],
  ["cdy", "application/vnd.cinderella"],
  ["cer", "application/pkix-cert"],
  ["cfs", "application/x-cfs-compressed"],
  ["cgm", "image/cgm"],
  ["chat", "application/x-chat"],
  ["chm", "application/vnd.ms-htmlhelp"],
  ["chrt", "application/vnd.kde.kchart"],
  ["cif", "chemical/x-cif"],
  ["cii", "application/vnd.anser-web-certificate-issue-initiation"],
  ["cil", "application/vnd.ms-artgalry"],
  ["cjs", "application/node"],
  ["cla", "application/vnd.claymore"],
  ["class", "application/octet-stream"],
  ["clkk", "application/vnd.crick.clicker.keyboard"],
  ["clkp", "application/vnd.crick.clicker.palette"],
  ["clkt", "application/vnd.crick.clicker.template"],
  ["clkw", "application/vnd.crick.clicker.wordbank"],
  ["clkx", "application/vnd.crick.clicker"],
  ["clp", "application/x-msclip"],
  ["cmc", "application/vnd.cosmocaller"],
  ["cmdf", "chemical/x-cmdf"],
  ["cml", "chemical/x-cml"],
  ["cmp", "application/vnd.yellowriver-custom-menu"],
  ["cmx", "image/x-cmx"],
  ["cod", "application/vnd.rim.cod"],
  ["coffee", "text/coffeescript"],
  ["com", "application/x-msdownload"],
  ["conf", "text/plain"],
  ["cpio", "application/x-cpio"],
  ["cpp", "text/x-c"],
  ["cpt", "application/mac-compactpro"],
  ["crd", "application/x-mscardfile"],
  ["crl", "application/pkix-crl"],
  ["crt", "application/x-x509-ca-cert"],
  ["crx", "application/x-chrome-extension"],
  ["cryptonote", "application/vnd.rig.cryptonote"],
  ["csh", "application/x-csh"],
  ["csl", "application/vnd.citationstyles.style+xml"],
  ["csml", "chemical/x-csml"],
  ["csp", "application/vnd.commonspace"],
  ["csr", "application/octet-stream"],
  ["css", "text/css"],
  ["cst", "application/x-director"],
  ["csv", "text/csv"],
  ["cu", "application/cu-seeme"],
  ["curl", "text/vnd.curl"],
  ["cww", "application/prs.cww"],
  ["cxt", "application/x-director"],
  ["cxx", "text/x-c"],
  ["dae", "model/vnd.collada+xml"],
  ["daf", "application/vnd.mobius.daf"],
  ["dart", "application/vnd.dart"],
  ["dataless", "application/vnd.fdsn.seed"],
  ["davmount", "application/davmount+xml"],
  ["dbf", "application/vnd.dbf"],
  ["dbk", "application/docbook+xml"],
  ["dcr", "application/x-director"],
  ["dcurl", "text/vnd.curl.dcurl"],
  ["dd2", "application/vnd.oma.dd2+xml"],
  ["ddd", "application/vnd.fujixerox.ddd"],
  ["ddf", "application/vnd.syncml.dmddf+xml"],
  ["dds", "image/vnd.ms-dds"],
  ["deb", "application/x-debian-package"],
  ["def", "text/plain"],
  ["deploy", "application/octet-stream"],
  ["der", "application/x-x509-ca-cert"],
  ["dfac", "application/vnd.dreamfactory"],
  ["dgc", "application/x-dgc-compressed"],
  ["dic", "text/x-c"],
  ["dir", "application/x-director"],
  ["dis", "application/vnd.mobius.dis"],
  ["disposition-notification", "message/disposition-notification"],
  ["dist", "application/octet-stream"],
  ["distz", "application/octet-stream"],
  ["djv", "image/vnd.djvu"],
  ["djvu", "image/vnd.djvu"],
  ["dll", "application/octet-stream"],
  ["dmg", "application/x-apple-diskimage"],
  ["dmn", "application/octet-stream"],
  ["dmp", "application/vnd.tcpdump.pcap"],
  ["dms", "application/octet-stream"],
  ["dna", "application/vnd.dna"],
  ["doc", "application/msword"],
  ["docm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["dot", "application/msword"],
  ["dotm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"],
  ["dp", "application/vnd.osgi.dp"],
  ["dpg", "application/vnd.dpgraph"],
  ["dra", "audio/vnd.dra"],
  ["drle", "image/dicom-rle"],
  ["dsc", "text/prs.lines.tag"],
  ["dssc", "application/dssc+der"],
  ["dtb", "application/x-dtbook+xml"],
  ["dtd", "application/xml-dtd"],
  ["dts", "audio/vnd.dts"],
  ["dtshd", "audio/vnd.dts.hd"],
  ["dump", "application/octet-stream"],
  ["dvb", "video/vnd.dvb.file"],
  ["dvi", "application/x-dvi"],
  ["dwd", "application/atsc-dwd+xml"],
  ["dwf", "model/vnd.dwf"],
  ["dwg", "image/vnd.dwg"],
  ["dxf", "image/vnd.dxf"],
  ["dxp", "application/vnd.spotfire.dxp"],
  ["dxr", "application/x-director"],
  ["ear", "application/java-archive"],
  ["ecelp4800", "audio/vnd.nuera.ecelp4800"],
  ["ecelp7470", "audio/vnd.nuera.ecelp7470"],
  ["ecelp9600", "audio/vnd.nuera.ecelp9600"],
  ["ecma", "application/ecmascript"],
  ["edm", "application/vnd.novadigm.edm"],
  ["edx", "application/vnd.novadigm.edx"],
  ["efif", "application/vnd.picsel"],
  ["ei6", "application/vnd.pg.osasli"],
  ["elc", "application/octet-stream"],
  ["emf", "image/emf"],
  ["eml", "message/rfc822"],
  ["emma", "application/emma+xml"],
  ["emotionml", "application/emotionml+xml"],
  ["emz", "application/x-msmetafile"],
  ["eol", "audio/vnd.digital-winds"],
  ["eot", "application/vnd.ms-fontobject"],
  ["eps", "application/postscript"],
  ["epub", "application/epub+zip"],
  ["es", "application/ecmascript"],
  ["es3", "application/vnd.eszigno3+xml"],
  ["esa", "application/vnd.osgi.subsystem"],
  ["esf", "application/vnd.epson.esf"],
  ["et3", "application/vnd.eszigno3+xml"],
  ["etx", "text/x-setext"],
  ["eva", "application/x-eva"],
  ["evy", "application/x-envoy"],
  ["exe", "application/octet-stream"],
  ["exi", "application/exi"],
  ["exp", "application/express"],
  ["exr", "image/aces"],
  ["ext", "application/vnd.novadigm.ext"],
  ["ez", "application/andrew-inset"],
  ["ez2", "application/vnd.ezpix-album"],
  ["ez3", "application/vnd.ezpix-package"],
  ["f", "text/x-fortran"],
  ["f4v", "video/mp4"],
  ["f77", "text/x-fortran"],
  ["f90", "text/x-fortran"],
  ["fbs", "image/vnd.fastbidsheet"],
  ["fcdt", "application/vnd.adobe.formscentral.fcdt"],
  ["fcs", "application/vnd.isac.fcs"],
  ["fdf", "application/vnd.fdf"],
  ["fdt", "application/fdt+xml"],
  ["fe_launch", "application/vnd.denovo.fcselayout-link"],
  ["fg5", "application/vnd.fujitsu.oasysgp"],
  ["fgd", "application/x-director"],
  ["fh", "image/x-freehand"],
  ["fh4", "image/x-freehand"],
  ["fh5", "image/x-freehand"],
  ["fh7", "image/x-freehand"],
  ["fhc", "image/x-freehand"],
  ["fig", "application/x-xfig"],
  ["fits", "image/fits"],
  ["flac", "audio/x-flac"],
  ["fli", "video/x-fli"],
  ["flo", "application/vnd.micrografx.flo"],
  ["flv", "video/x-flv"],
  ["flw", "application/vnd.kde.kivio"],
  ["flx", "text/vnd.fmi.flexstor"],
  ["fly", "text/vnd.fly"],
  ["fm", "application/vnd.framemaker"],
  ["fnc", "application/vnd.frogans.fnc"],
  ["fo", "application/vnd.software602.filler.form+xml"],
  ["for", "text/x-fortran"],
  ["fpx", "image/vnd.fpx"],
  ["frame", "application/vnd.framemaker"],
  ["fsc", "application/vnd.fsc.weblaunch"],
  ["fst", "image/vnd.fst"],
  ["ftc", "application/vnd.fluxtime.clip"],
  ["fti", "application/vnd.anser-web-funds-transfer-initiation"],
  ["fvt", "video/vnd.fvt"],
  ["fxp", "application/vnd.adobe.fxp"],
  ["fxpl", "application/vnd.adobe.fxp"],
  ["fzs", "application/vnd.fuzzysheet"],
  ["g2w", "application/vnd.geoplan"],
  ["g3", "image/g3fax"],
  ["g3w", "application/vnd.geospace"],
  ["gac", "application/vnd.groove-account"],
  ["gam", "application/x-tads"],
  ["gbr", "application/rpki-ghostbusters"],
  ["gca", "application/x-gca-compressed"],
  ["gdl", "model/vnd.gdl"],
  ["gdoc", "application/vnd.google-apps.document"],
  ["geo", "application/vnd.dynageo"],
  ["geojson", "application/geo+json"],
  ["gex", "application/vnd.geometry-explorer"],
  ["ggb", "application/vnd.geogebra.file"],
  ["ggt", "application/vnd.geogebra.tool"],
  ["ghf", "application/vnd.groove-help"],
  ["gif", "image/gif"],
  ["gim", "application/vnd.groove-identity-message"],
  ["glb", "model/gltf-binary"],
  ["gltf", "model/gltf+json"],
  ["gml", "application/gml+xml"],
  ["gmx", "application/vnd.gmx"],
  ["gnumeric", "application/x-gnumeric"],
  ["gpg", "application/gpg-keys"],
  ["gph", "application/vnd.flographit"],
  ["gpx", "application/gpx+xml"],
  ["gqf", "application/vnd.grafeq"],
  ["gqs", "application/vnd.grafeq"],
  ["gram", "application/srgs"],
  ["gramps", "application/x-gramps-xml"],
  ["gre", "application/vnd.geometry-explorer"],
  ["grv", "application/vnd.groove-injector"],
  ["grxml", "application/srgs+xml"],
  ["gsf", "application/x-font-ghostscript"],
  ["gsheet", "application/vnd.google-apps.spreadsheet"],
  ["gslides", "application/vnd.google-apps.presentation"],
  ["gtar", "application/x-gtar"],
  ["gtm", "application/vnd.groove-tool-message"],
  ["gtw", "model/vnd.gtw"],
  ["gv", "text/vnd.graphviz"],
  ["gxf", "application/gxf"],
  ["gxt", "application/vnd.geonext"],
  ["gz", "application/gzip"],
  ["gzip", "application/gzip"],
  ["h", "text/x-c"],
  ["h261", "video/h261"],
  ["h263", "video/h263"],
  ["h264", "video/h264"],
  ["hal", "application/vnd.hal+xml"],
  ["hbci", "application/vnd.hbci"],
  ["hbs", "text/x-handlebars-template"],
  ["hdd", "application/x-virtualbox-hdd"],
  ["hdf", "application/x-hdf"],
  ["heic", "image/heic"],
  ["heics", "image/heic-sequence"],
  ["heif", "image/heif"],
  ["heifs", "image/heif-sequence"],
  ["hej2", "image/hej2k"],
  ["held", "application/atsc-held+xml"],
  ["hh", "text/x-c"],
  ["hjson", "application/hjson"],
  ["hlp", "application/winhlp"],
  ["hpgl", "application/vnd.hp-hpgl"],
  ["hpid", "application/vnd.hp-hpid"],
  ["hps", "application/vnd.hp-hps"],
  ["hqx", "application/mac-binhex40"],
  ["hsj2", "image/hsj2"],
  ["htc", "text/x-component"],
  ["htke", "application/vnd.kenameaapp"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["hvd", "application/vnd.yamaha.hv-dic"],
  ["hvp", "application/vnd.yamaha.hv-voice"],
  ["hvs", "application/vnd.yamaha.hv-script"],
  ["i2g", "application/vnd.intergeo"],
  ["icc", "application/vnd.iccprofile"],
  ["ice", "x-conference/x-cooltalk"],
  ["icm", "application/vnd.iccprofile"],
  ["ico", "image/x-icon"],
  ["ics", "text/calendar"],
  ["ief", "image/ief"],
  ["ifb", "text/calendar"],
  ["ifm", "application/vnd.shana.informed.formdata"],
  ["iges", "model/iges"],
  ["igl", "application/vnd.igloader"],
  ["igm", "application/vnd.insors.igm"],
  ["igs", "model/iges"],
  ["igx", "application/vnd.micrografx.igx"],
  ["iif", "application/vnd.shana.informed.interchange"],
  ["img", "application/octet-stream"],
  ["imp", "application/vnd.accpac.simply.imp"],
  ["ims", "application/vnd.ms-ims"],
  ["in", "text/plain"],
  ["ini", "text/plain"],
  ["ink", "application/inkml+xml"],
  ["inkml", "application/inkml+xml"],
  ["install", "application/x-install-instructions"],
  ["iota", "application/vnd.astraea-software.iota"],
  ["ipfix", "application/ipfix"],
  ["ipk", "application/vnd.shana.informed.package"],
  ["irm", "application/vnd.ibm.rights-management"],
  ["irp", "application/vnd.irepository.package+xml"],
  ["iso", "application/x-iso9660-image"],
  ["itp", "application/vnd.shana.informed.formtemplate"],
  ["its", "application/its+xml"],
  ["ivp", "application/vnd.immervision-ivp"],
  ["ivu", "application/vnd.immervision-ivu"],
  ["jad", "text/vnd.sun.j2me.app-descriptor"],
  ["jade", "text/jade"],
  ["jam", "application/vnd.jam"],
  ["jar", "application/java-archive"],
  ["jardiff", "application/x-java-archive-diff"],
  ["java", "text/x-java-source"],
  ["jhc", "image/jphc"],
  ["jisp", "application/vnd.jisp"],
  ["jls", "image/jls"],
  ["jlt", "application/vnd.hp-jlyt"],
  ["jng", "image/x-jng"],
  ["jnlp", "application/x-java-jnlp-file"],
  ["joda", "application/vnd.joost.joda-archive"],
  ["jp2", "image/jp2"],
  ["jpe", "image/jpeg"],
  ["jpeg", "image/jpeg"],
  ["jpf", "image/jpx"],
  ["jpg", "image/jpeg"],
  ["jpg2", "image/jp2"],
  ["jpgm", "video/jpm"],
  ["jpgv", "video/jpeg"],
  ["jph", "image/jph"],
  ["jpm", "video/jpm"],
  ["jpx", "image/jpx"],
  ["js", "application/javascript"],
  ["json", "application/json"],
  ["json5", "application/json5"],
  ["jsonld", "application/ld+json"],
  // https://jsonlines.org/
  ["jsonl", "application/jsonl"],
  ["jsonml", "application/jsonml+json"],
  ["jsx", "text/jsx"],
  ["jxr", "image/jxr"],
  ["jxra", "image/jxra"],
  ["jxrs", "image/jxrs"],
  ["jxs", "image/jxs"],
  ["jxsc", "image/jxsc"],
  ["jxsi", "image/jxsi"],
  ["jxss", "image/jxss"],
  ["kar", "audio/midi"],
  ["karbon", "application/vnd.kde.karbon"],
  ["kdb", "application/octet-stream"],
  ["kdbx", "application/x-keepass2"],
  ["key", "application/x-iwork-keynote-sffkey"],
  ["kfo", "application/vnd.kde.kformula"],
  ["kia", "application/vnd.kidspiration"],
  ["kml", "application/vnd.google-earth.kml+xml"],
  ["kmz", "application/vnd.google-earth.kmz"],
  ["kne", "application/vnd.kinar"],
  ["knp", "application/vnd.kinar"],
  ["kon", "application/vnd.kde.kontour"],
  ["kpr", "application/vnd.kde.kpresenter"],
  ["kpt", "application/vnd.kde.kpresenter"],
  ["kpxx", "application/vnd.ds-keypoint"],
  ["ksp", "application/vnd.kde.kspread"],
  ["ktr", "application/vnd.kahootz"],
  ["ktx", "image/ktx"],
  ["ktx2", "image/ktx2"],
  ["ktz", "application/vnd.kahootz"],
  ["kwd", "application/vnd.kde.kword"],
  ["kwt", "application/vnd.kde.kword"],
  ["lasxml", "application/vnd.las.las+xml"],
  ["latex", "application/x-latex"],
  ["lbd", "application/vnd.llamagraphics.life-balance.desktop"],
  ["lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"],
  ["les", "application/vnd.hhe.lesson-player"],
  ["less", "text/less"],
  ["lgr", "application/lgr+xml"],
  ["lha", "application/octet-stream"],
  ["link66", "application/vnd.route66.link66+xml"],
  ["list", "text/plain"],
  ["list3820", "application/vnd.ibm.modcap"],
  ["listafp", "application/vnd.ibm.modcap"],
  ["litcoffee", "text/coffeescript"],
  ["lnk", "application/x-ms-shortcut"],
  ["log", "text/plain"],
  ["lostxml", "application/lost+xml"],
  ["lrf", "application/octet-stream"],
  ["lrm", "application/vnd.ms-lrm"],
  ["ltf", "application/vnd.frogans.ltf"],
  ["lua", "text/x-lua"],
  ["luac", "application/x-lua-bytecode"],
  ["lvp", "audio/vnd.lucent.voice"],
  ["lwp", "application/vnd.lotus-wordpro"],
  ["lzh", "application/octet-stream"],
  ["m1v", "video/mpeg"],
  ["m2a", "audio/mpeg"],
  ["m2v", "video/mpeg"],
  ["m3a", "audio/mpeg"],
  ["m3u", "text/plain"],
  ["m3u8", "application/vnd.apple.mpegurl"],
  ["m4a", "audio/x-m4a"],
  ["m4p", "application/mp4"],
  ["m4s", "video/iso.segment"],
  ["m4u", "application/vnd.mpegurl"],
  ["m4v", "video/x-m4v"],
  ["m13", "application/x-msmediaview"],
  ["m14", "application/x-msmediaview"],
  ["m21", "application/mp21"],
  ["ma", "application/mathematica"],
  ["mads", "application/mads+xml"],
  ["maei", "application/mmt-aei+xml"],
  ["mag", "application/vnd.ecowin.chart"],
  ["maker", "application/vnd.framemaker"],
  ["man", "text/troff"],
  ["manifest", "text/cache-manifest"],
  ["map", "application/json"],
  ["mar", "application/octet-stream"],
  ["markdown", "text/markdown"],
  ["mathml", "application/mathml+xml"],
  ["mb", "application/mathematica"],
  ["mbk", "application/vnd.mobius.mbk"],
  ["mbox", "application/mbox"],
  ["mc1", "application/vnd.medcalcdata"],
  ["mcd", "application/vnd.mcd"],
  ["mcurl", "text/vnd.curl.mcurl"],
  ["md", "text/markdown"],
  ["mdb", "application/x-msaccess"],
  ["mdi", "image/vnd.ms-modi"],
  ["mdx", "text/mdx"],
  ["me", "text/troff"],
  ["mesh", "model/mesh"],
  ["meta4", "application/metalink4+xml"],
  ["metalink", "application/metalink+xml"],
  ["mets", "application/mets+xml"],
  ["mfm", "application/vnd.mfmp"],
  ["mft", "application/rpki-manifest"],
  ["mgp", "application/vnd.osgeo.mapguide.package"],
  ["mgz", "application/vnd.proteus.magazine"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mie", "application/x-mie"],
  ["mif", "application/vnd.mif"],
  ["mime", "message/rfc822"],
  ["mj2", "video/mj2"],
  ["mjp2", "video/mj2"],
  ["mjs", "application/javascript"],
  ["mk3d", "video/x-matroska"],
  ["mka", "audio/x-matroska"],
  ["mkd", "text/x-markdown"],
  ["mks", "video/x-matroska"],
  ["mkv", "video/x-matroska"],
  ["mlp", "application/vnd.dolby.mlp"],
  ["mmd", "application/vnd.chipnuts.karaoke-mmd"],
  ["mmf", "application/vnd.smaf"],
  ["mml", "text/mathml"],
  ["mmr", "image/vnd.fujixerox.edmics-mmr"],
  ["mng", "video/x-mng"],
  ["mny", "application/x-msmoney"],
  ["mobi", "application/x-mobipocket-ebook"],
  ["mods", "application/mods+xml"],
  ["mov", "video/quicktime"],
  ["movie", "video/x-sgi-movie"],
  ["mp2", "audio/mpeg"],
  ["mp2a", "audio/mpeg"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mp4a", "audio/mp4"],
  ["mp4s", "application/mp4"],
  ["mp4v", "video/mp4"],
  ["mp21", "application/mp21"],
  ["mpc", "application/vnd.mophun.certificate"],
  ["mpd", "application/dash+xml"],
  ["mpe", "video/mpeg"],
  ["mpeg", "video/mpeg"],
  ["mpg", "video/mpeg"],
  ["mpg4", "video/mp4"],
  ["mpga", "audio/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["mpm", "application/vnd.blueice.multipass"],
  ["mpn", "application/vnd.mophun.application"],
  ["mpp", "application/vnd.ms-project"],
  ["mpt", "application/vnd.ms-project"],
  ["mpy", "application/vnd.ibm.minipay"],
  ["mqy", "application/vnd.mobius.mqy"],
  ["mrc", "application/marc"],
  ["mrcx", "application/marcxml+xml"],
  ["ms", "text/troff"],
  ["mscml", "application/mediaservercontrol+xml"],
  ["mseed", "application/vnd.fdsn.mseed"],
  ["mseq", "application/vnd.mseq"],
  ["msf", "application/vnd.epson.msf"],
  ["msg", "application/vnd.ms-outlook"],
  ["msh", "model/mesh"],
  ["msi", "application/x-msdownload"],
  ["msl", "application/vnd.mobius.msl"],
  ["msm", "application/octet-stream"],
  ["msp", "application/octet-stream"],
  ["msty", "application/vnd.muvee.style"],
  ["mtl", "model/mtl"],
  ["mts", "model/vnd.mts"],
  ["mus", "application/vnd.musician"],
  ["musd", "application/mmt-usd+xml"],
  ["musicxml", "application/vnd.recordare.musicxml+xml"],
  ["mvb", "application/x-msmediaview"],
  ["mvt", "application/vnd.mapbox-vector-tile"],
  ["mwf", "application/vnd.mfer"],
  ["mxf", "application/mxf"],
  ["mxl", "application/vnd.recordare.musicxml"],
  ["mxmf", "audio/mobile-xmf"],
  ["mxml", "application/xv+xml"],
  ["mxs", "application/vnd.triscape.mxs"],
  ["mxu", "video/vnd.mpegurl"],
  ["n-gage", "application/vnd.nokia.n-gage.symbian.install"],
  ["n3", "text/n3"],
  ["nb", "application/mathematica"],
  ["nbp", "application/vnd.wolfram.player"],
  ["nc", "application/x-netcdf"],
  ["ncx", "application/x-dtbncx+xml"],
  ["nfo", "text/x-nfo"],
  ["ngdat", "application/vnd.nokia.n-gage.data"],
  ["nitf", "application/vnd.nitf"],
  ["nlu", "application/vnd.neurolanguage.nlu"],
  ["nml", "application/vnd.enliven"],
  ["nnd", "application/vnd.noblenet-directory"],
  ["nns", "application/vnd.noblenet-sealer"],
  ["nnw", "application/vnd.noblenet-web"],
  ["npx", "image/vnd.net-fpx"],
  ["nq", "application/n-quads"],
  ["nsc", "application/x-conference"],
  ["nsf", "application/vnd.lotus-notes"],
  ["nt", "application/n-triples"],
  ["ntf", "application/vnd.nitf"],
  ["numbers", "application/x-iwork-numbers-sffnumbers"],
  ["nzb", "application/x-nzb"],
  ["oa2", "application/vnd.fujitsu.oasys2"],
  ["oa3", "application/vnd.fujitsu.oasys3"],
  ["oas", "application/vnd.fujitsu.oasys"],
  ["obd", "application/x-msbinder"],
  ["obgx", "application/vnd.openblox.game+xml"],
  ["obj", "model/obj"],
  ["oda", "application/oda"],
  ["odb", "application/vnd.oasis.opendocument.database"],
  ["odc", "application/vnd.oasis.opendocument.chart"],
  ["odf", "application/vnd.oasis.opendocument.formula"],
  ["odft", "application/vnd.oasis.opendocument.formula-template"],
  ["odg", "application/vnd.oasis.opendocument.graphics"],
  ["odi", "application/vnd.oasis.opendocument.image"],
  ["odm", "application/vnd.oasis.opendocument.text-master"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogex", "model/vnd.opengex"],
  ["ogg", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["omdoc", "application/omdoc+xml"],
  ["onepkg", "application/onenote"],
  ["onetmp", "application/onenote"],
  ["onetoc", "application/onenote"],
  ["onetoc2", "application/onenote"],
  ["opf", "application/oebps-package+xml"],
  ["opml", "text/x-opml"],
  ["oprc", "application/vnd.palm"],
  ["opus", "audio/ogg"],
  ["org", "text/x-org"],
  ["osf", "application/vnd.yamaha.openscoreformat"],
  ["osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml"],
  ["osm", "application/vnd.openstreetmap.data+xml"],
  ["otc", "application/vnd.oasis.opendocument.chart-template"],
  ["otf", "font/otf"],
  ["otg", "application/vnd.oasis.opendocument.graphics-template"],
  ["oth", "application/vnd.oasis.opendocument.text-web"],
  ["oti", "application/vnd.oasis.opendocument.image-template"],
  ["otp", "application/vnd.oasis.opendocument.presentation-template"],
  ["ots", "application/vnd.oasis.opendocument.spreadsheet-template"],
  ["ott", "application/vnd.oasis.opendocument.text-template"],
  ["ova", "application/x-virtualbox-ova"],
  ["ovf", "application/x-virtualbox-ovf"],
  ["owl", "application/rdf+xml"],
  ["oxps", "application/oxps"],
  ["oxt", "application/vnd.openofficeorg.extension"],
  ["p", "text/x-pascal"],
  ["p7a", "application/x-pkcs7-signature"],
  ["p7b", "application/x-pkcs7-certificates"],
  ["p7c", "application/pkcs7-mime"],
  ["p7m", "application/pkcs7-mime"],
  ["p7r", "application/x-pkcs7-certreqresp"],
  ["p7s", "application/pkcs7-signature"],
  ["p8", "application/pkcs8"],
  ["p10", "application/x-pkcs10"],
  ["p12", "application/x-pkcs12"],
  ["pac", "application/x-ns-proxy-autoconfig"],
  ["pages", "application/x-iwork-pages-sffpages"],
  ["pas", "text/x-pascal"],
  ["paw", "application/vnd.pawaafile"],
  ["pbd", "application/vnd.powerbuilder6"],
  ["pbm", "image/x-portable-bitmap"],
  ["pcap", "application/vnd.tcpdump.pcap"],
  ["pcf", "application/x-font-pcf"],
  ["pcl", "application/vnd.hp-pcl"],
  ["pclxl", "application/vnd.hp-pclxl"],
  ["pct", "image/x-pict"],
  ["pcurl", "application/vnd.curl.pcurl"],
  ["pcx", "image/x-pcx"],
  ["pdb", "application/x-pilot"],
  ["pde", "text/x-processing"],
  ["pdf", "application/pdf"],
  ["pem", "application/x-x509-user-cert"],
  ["pfa", "application/x-font-type1"],
  ["pfb", "application/x-font-type1"],
  ["pfm", "application/x-font-type1"],
  ["pfr", "application/font-tdpfr"],
  ["pfx", "application/x-pkcs12"],
  ["pgm", "image/x-portable-graymap"],
  ["pgn", "application/x-chess-pgn"],
  ["pgp", "application/pgp"],
  ["php", "application/x-httpd-php"],
  ["php3", "application/x-httpd-php"],
  ["php4", "application/x-httpd-php"],
  ["phps", "application/x-httpd-php-source"],
  ["phtml", "application/x-httpd-php"],
  ["pic", "image/x-pict"],
  ["pkg", "application/octet-stream"],
  ["pki", "application/pkixcmp"],
  ["pkipath", "application/pkix-pkipath"],
  ["pkpass", "application/vnd.apple.pkpass"],
  ["pl", "application/x-perl"],
  ["plb", "application/vnd.3gpp.pic-bw-large"],
  ["plc", "application/vnd.mobius.plc"],
  ["plf", "application/vnd.pocketlearn"],
  ["pls", "application/pls+xml"],
  ["pm", "application/x-perl"],
  ["pml", "application/vnd.ctc-posml"],
  ["png", "image/png"],
  ["pnm", "image/x-portable-anymap"],
  ["portpkg", "application/vnd.macports.portpkg"],
  ["pot", "application/vnd.ms-powerpoint"],
  ["potm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["potx", "application/vnd.openxmlformats-officedocument.presentationml.template"],
  ["ppa", "application/vnd.ms-powerpoint"],
  ["ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"],
  ["ppd", "application/vnd.cups-ppd"],
  ["ppm", "image/x-portable-pixmap"],
  ["pps", "application/vnd.ms-powerpoint"],
  ["ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"],
  ["ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"],
  ["ppt", "application/powerpoint"],
  ["pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["pqa", "application/vnd.palm"],
  ["prc", "application/x-pilot"],
  ["pre", "application/vnd.lotus-freelance"],
  ["prf", "application/pics-rules"],
  ["provx", "application/provenance+xml"],
  ["ps", "application/postscript"],
  ["psb", "application/vnd.3gpp.pic-bw-small"],
  ["psd", "application/x-photoshop"],
  ["psf", "application/x-font-linux-psf"],
  ["pskcxml", "application/pskc+xml"],
  ["pti", "image/prs.pti"],
  ["ptid", "application/vnd.pvi.ptid1"],
  ["pub", "application/x-mspublisher"],
  ["pvb", "application/vnd.3gpp.pic-bw-var"],
  ["pwn", "application/vnd.3m.post-it-notes"],
  ["pya", "audio/vnd.ms-playready.media.pya"],
  ["pyv", "video/vnd.ms-playready.media.pyv"],
  ["qam", "application/vnd.epson.quickanime"],
  ["qbo", "application/vnd.intu.qbo"],
  ["qfx", "application/vnd.intu.qfx"],
  ["qps", "application/vnd.publishare-delta-tree"],
  ["qt", "video/quicktime"],
  ["qwd", "application/vnd.quark.quarkxpress"],
  ["qwt", "application/vnd.quark.quarkxpress"],
  ["qxb", "application/vnd.quark.quarkxpress"],
  ["qxd", "application/vnd.quark.quarkxpress"],
  ["qxl", "application/vnd.quark.quarkxpress"],
  ["qxt", "application/vnd.quark.quarkxpress"],
  ["ra", "audio/x-realaudio"],
  ["ram", "audio/x-pn-realaudio"],
  ["raml", "application/raml+yaml"],
  ["rapd", "application/route-apd+xml"],
  ["rar", "application/x-rar"],
  ["ras", "image/x-cmu-raster"],
  ["rcprofile", "application/vnd.ipunplugged.rcprofile"],
  ["rdf", "application/rdf+xml"],
  ["rdz", "application/vnd.data-vision.rdz"],
  ["relo", "application/p2p-overlay+xml"],
  ["rep", "application/vnd.businessobjects"],
  ["res", "application/x-dtbresource+xml"],
  ["rgb", "image/x-rgb"],
  ["rif", "application/reginfo+xml"],
  ["rip", "audio/vnd.rip"],
  ["ris", "application/x-research-info-systems"],
  ["rl", "application/resource-lists+xml"],
  ["rlc", "image/vnd.fujixerox.edmics-rlc"],
  ["rld", "application/resource-lists-diff+xml"],
  ["rm", "audio/x-pn-realaudio"],
  ["rmi", "audio/midi"],
  ["rmp", "audio/x-pn-realaudio-plugin"],
  ["rms", "application/vnd.jcp.javame.midlet-rms"],
  ["rmvb", "application/vnd.rn-realmedia-vbr"],
  ["rnc", "application/relax-ng-compact-syntax"],
  ["rng", "application/xml"],
  ["roa", "application/rpki-roa"],
  ["roff", "text/troff"],
  ["rp9", "application/vnd.cloanto.rp9"],
  ["rpm", "audio/x-pn-realaudio-plugin"],
  ["rpss", "application/vnd.nokia.radio-presets"],
  ["rpst", "application/vnd.nokia.radio-preset"],
  ["rq", "application/sparql-query"],
  ["rs", "application/rls-services+xml"],
  ["rsa", "application/x-pkcs7"],
  ["rsat", "application/atsc-rsat+xml"],
  ["rsd", "application/rsd+xml"],
  ["rsheet", "application/urc-ressheet+xml"],
  ["rss", "application/rss+xml"],
  ["rtf", "text/rtf"],
  ["rtx", "text/richtext"],
  ["run", "application/x-makeself"],
  ["rusd", "application/route-usd+xml"],
  ["rv", "video/vnd.rn-realvideo"],
  ["s", "text/x-asm"],
  ["s3m", "audio/s3m"],
  ["saf", "application/vnd.yamaha.smaf-audio"],
  ["sass", "text/x-sass"],
  ["sbml", "application/sbml+xml"],
  ["sc", "application/vnd.ibm.secure-container"],
  ["scd", "application/x-msschedule"],
  ["scm", "application/vnd.lotus-screencam"],
  ["scq", "application/scvp-cv-request"],
  ["scs", "application/scvp-cv-response"],
  ["scss", "text/x-scss"],
  ["scurl", "text/vnd.curl.scurl"],
  ["sda", "application/vnd.stardivision.draw"],
  ["sdc", "application/vnd.stardivision.calc"],
  ["sdd", "application/vnd.stardivision.impress"],
  ["sdkd", "application/vnd.solent.sdkm+xml"],
  ["sdkm", "application/vnd.solent.sdkm+xml"],
  ["sdp", "application/sdp"],
  ["sdw", "application/vnd.stardivision.writer"],
  ["sea", "application/octet-stream"],
  ["see", "application/vnd.seemail"],
  ["seed", "application/vnd.fdsn.seed"],
  ["sema", "application/vnd.sema"],
  ["semd", "application/vnd.semd"],
  ["semf", "application/vnd.semf"],
  ["senmlx", "application/senml+xml"],
  ["sensmlx", "application/sensml+xml"],
  ["ser", "application/java-serialized-object"],
  ["setpay", "application/set-payment-initiation"],
  ["setreg", "application/set-registration-initiation"],
  ["sfd-hdstx", "application/vnd.hydrostatix.sof-data"],
  ["sfs", "application/vnd.spotfire.sfs"],
  ["sfv", "text/x-sfv"],
  ["sgi", "image/sgi"],
  ["sgl", "application/vnd.stardivision.writer-global"],
  ["sgm", "text/sgml"],
  ["sgml", "text/sgml"],
  ["sh", "application/x-sh"],
  ["shar", "application/x-shar"],
  ["shex", "text/shex"],
  ["shf", "application/shf+xml"],
  ["shtml", "text/html"],
  ["sid", "image/x-mrsid-image"],
  ["sieve", "application/sieve"],
  ["sig", "application/pgp-signature"],
  ["sil", "audio/silk"],
  ["silo", "model/mesh"],
  ["sis", "application/vnd.symbian.install"],
  ["sisx", "application/vnd.symbian.install"],
  ["sit", "application/x-stuffit"],
  ["sitx", "application/x-stuffitx"],
  ["siv", "application/sieve"],
  ["skd", "application/vnd.koan"],
  ["skm", "application/vnd.koan"],
  ["skp", "application/vnd.koan"],
  ["skt", "application/vnd.koan"],
  ["sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12"],
  ["sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"],
  ["slim", "text/slim"],
  ["slm", "text/slim"],
  ["sls", "application/route-s-tsid+xml"],
  ["slt", "application/vnd.epson.salt"],
  ["sm", "application/vnd.stepmania.stepchart"],
  ["smf", "application/vnd.stardivision.math"],
  ["smi", "application/smil"],
  ["smil", "application/smil"],
  ["smv", "video/x-smv"],
  ["smzip", "application/vnd.stepmania.package"],
  ["snd", "audio/basic"],
  ["snf", "application/x-font-snf"],
  ["so", "application/octet-stream"],
  ["spc", "application/x-pkcs7-certificates"],
  ["spdx", "text/spdx"],
  ["spf", "application/vnd.yamaha.smaf-phrase"],
  ["spl", "application/x-futuresplash"],
  ["spot", "text/vnd.in3d.spot"],
  ["spp", "application/scvp-vp-response"],
  ["spq", "application/scvp-vp-request"],
  ["spx", "audio/ogg"],
  ["sql", "application/x-sql"],
  ["src", "application/x-wais-source"],
  ["srt", "application/x-subrip"],
  ["sru", "application/sru+xml"],
  ["srx", "application/sparql-results+xml"],
  ["ssdl", "application/ssdl+xml"],
  ["sse", "application/vnd.kodak-descriptor"],
  ["ssf", "application/vnd.epson.ssf"],
  ["ssml", "application/ssml+xml"],
  ["sst", "application/octet-stream"],
  ["st", "application/vnd.sailingtracker.track"],
  ["stc", "application/vnd.sun.xml.calc.template"],
  ["std", "application/vnd.sun.xml.draw.template"],
  ["stf", "application/vnd.wt.stf"],
  ["sti", "application/vnd.sun.xml.impress.template"],
  ["stk", "application/hyperstudio"],
  ["stl", "model/stl"],
  ["stpx", "model/step+xml"],
  ["stpxz", "model/step-xml+zip"],
  ["stpz", "model/step+zip"],
  ["str", "application/vnd.pg.format"],
  ["stw", "application/vnd.sun.xml.writer.template"],
  ["styl", "text/stylus"],
  ["stylus", "text/stylus"],
  ["sub", "text/vnd.dvb.subtitle"],
  ["sus", "application/vnd.sus-calendar"],
  ["susp", "application/vnd.sus-calendar"],
  ["sv4cpio", "application/x-sv4cpio"],
  ["sv4crc", "application/x-sv4crc"],
  ["svc", "application/vnd.dvb.service"],
  ["svd", "application/vnd.svd"],
  ["svg", "image/svg+xml"],
  ["svgz", "image/svg+xml"],
  ["swa", "application/x-director"],
  ["swf", "application/x-shockwave-flash"],
  ["swi", "application/vnd.aristanetworks.swi"],
  ["swidtag", "application/swid+xml"],
  ["sxc", "application/vnd.sun.xml.calc"],
  ["sxd", "application/vnd.sun.xml.draw"],
  ["sxg", "application/vnd.sun.xml.writer.global"],
  ["sxi", "application/vnd.sun.xml.impress"],
  ["sxm", "application/vnd.sun.xml.math"],
  ["sxw", "application/vnd.sun.xml.writer"],
  ["t", "text/troff"],
  ["t3", "application/x-t3vm-image"],
  ["t38", "image/t38"],
  ["taglet", "application/vnd.mynfc"],
  ["tao", "application/vnd.tao.intent-module-archive"],
  ["tap", "image/vnd.tencent.tap"],
  ["tar", "application/x-tar"],
  ["tcap", "application/vnd.3gpp2.tcap"],
  ["tcl", "application/x-tcl"],
  ["td", "application/urc-targetdesc+xml"],
  ["teacher", "application/vnd.smart.teacher"],
  ["tei", "application/tei+xml"],
  ["teicorpus", "application/tei+xml"],
  ["tex", "application/x-tex"],
  ["texi", "application/x-texinfo"],
  ["texinfo", "application/x-texinfo"],
  ["text", "text/plain"],
  ["tfi", "application/thraud+xml"],
  ["tfm", "application/x-tex-tfm"],
  ["tfx", "image/tiff-fx"],
  ["tga", "image/x-tga"],
  ["tgz", "application/x-tar"],
  ["thmx", "application/vnd.ms-officetheme"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["tk", "application/x-tcl"],
  ["tmo", "application/vnd.tmobile-livetv"],
  ["toml", "application/toml"],
  ["torrent", "application/x-bittorrent"],
  ["tpl", "application/vnd.groove-tool-template"],
  ["tpt", "application/vnd.trid.tpt"],
  ["tr", "text/troff"],
  ["tra", "application/vnd.trueapp"],
  ["trig", "application/trig"],
  ["trm", "application/x-msterminal"],
  ["ts", "video/mp2t"],
  ["tsd", "application/timestamped-data"],
  ["tsv", "text/tab-separated-values"],
  ["ttc", "font/collection"],
  ["ttf", "font/ttf"],
  ["ttl", "text/turtle"],
  ["ttml", "application/ttml+xml"],
  ["twd", "application/vnd.simtech-mindmapper"],
  ["twds", "application/vnd.simtech-mindmapper"],
  ["txd", "application/vnd.genomatix.tuxedo"],
  ["txf", "application/vnd.mobius.txf"],
  ["txt", "text/plain"],
  ["u8dsn", "message/global-delivery-status"],
  ["u8hdr", "message/global-headers"],
  ["u8mdn", "message/global-disposition-notification"],
  ["u8msg", "message/global"],
  ["u32", "application/x-authorware-bin"],
  ["ubj", "application/ubjson"],
  ["udeb", "application/x-debian-package"],
  ["ufd", "application/vnd.ufdl"],
  ["ufdl", "application/vnd.ufdl"],
  ["ulx", "application/x-glulx"],
  ["umj", "application/vnd.umajin"],
  ["unityweb", "application/vnd.unity"],
  ["uoml", "application/vnd.uoml+xml"],
  ["uri", "text/uri-list"],
  ["uris", "text/uri-list"],
  ["urls", "text/uri-list"],
  ["usdz", "model/vnd.usdz+zip"],
  ["ustar", "application/x-ustar"],
  ["utz", "application/vnd.uiq.theme"],
  ["uu", "text/x-uuencode"],
  ["uva", "audio/vnd.dece.audio"],
  ["uvd", "application/vnd.dece.data"],
  ["uvf", "application/vnd.dece.data"],
  ["uvg", "image/vnd.dece.graphic"],
  ["uvh", "video/vnd.dece.hd"],
  ["uvi", "image/vnd.dece.graphic"],
  ["uvm", "video/vnd.dece.mobile"],
  ["uvp", "video/vnd.dece.pd"],
  ["uvs", "video/vnd.dece.sd"],
  ["uvt", "application/vnd.dece.ttml+xml"],
  ["uvu", "video/vnd.uvvu.mp4"],
  ["uvv", "video/vnd.dece.video"],
  ["uvva", "audio/vnd.dece.audio"],
  ["uvvd", "application/vnd.dece.data"],
  ["uvvf", "application/vnd.dece.data"],
  ["uvvg", "image/vnd.dece.graphic"],
  ["uvvh", "video/vnd.dece.hd"],
  ["uvvi", "image/vnd.dece.graphic"],
  ["uvvm", "video/vnd.dece.mobile"],
  ["uvvp", "video/vnd.dece.pd"],
  ["uvvs", "video/vnd.dece.sd"],
  ["uvvt", "application/vnd.dece.ttml+xml"],
  ["uvvu", "video/vnd.uvvu.mp4"],
  ["uvvv", "video/vnd.dece.video"],
  ["uvvx", "application/vnd.dece.unspecified"],
  ["uvvz", "application/vnd.dece.zip"],
  ["uvx", "application/vnd.dece.unspecified"],
  ["uvz", "application/vnd.dece.zip"],
  ["vbox", "application/x-virtualbox-vbox"],
  ["vbox-extpack", "application/x-virtualbox-vbox-extpack"],
  ["vcard", "text/vcard"],
  ["vcd", "application/x-cdlink"],
  ["vcf", "text/x-vcard"],
  ["vcg", "application/vnd.groove-vcard"],
  ["vcs", "text/x-vcalendar"],
  ["vcx", "application/vnd.vcx"],
  ["vdi", "application/x-virtualbox-vdi"],
  ["vds", "model/vnd.sap.vds"],
  ["vhd", "application/x-virtualbox-vhd"],
  ["vis", "application/vnd.visionary"],
  ["viv", "video/vnd.vivo"],
  ["vlc", "application/videolan"],
  ["vmdk", "application/x-virtualbox-vmdk"],
  ["vob", "video/x-ms-vob"],
  ["vor", "application/vnd.stardivision.writer"],
  ["vox", "application/x-authorware-bin"],
  ["vrml", "model/vrml"],
  ["vsd", "application/vnd.visio"],
  ["vsf", "application/vnd.vsf"],
  ["vss", "application/vnd.visio"],
  ["vst", "application/vnd.visio"],
  ["vsw", "application/vnd.visio"],
  ["vtf", "image/vnd.valve.source.texture"],
  ["vtt", "text/vtt"],
  ["vtu", "model/vnd.vtu"],
  ["vxml", "application/voicexml+xml"],
  ["w3d", "application/x-director"],
  ["wad", "application/x-doom"],
  ["wadl", "application/vnd.sun.wadl+xml"],
  ["war", "application/java-archive"],
  ["wasm", "application/wasm"],
  ["wav", "audio/x-wav"],
  ["wax", "audio/x-ms-wax"],
  ["wbmp", "image/vnd.wap.wbmp"],
  ["wbs", "application/vnd.criticaltools.wbs+xml"],
  ["wbxml", "application/wbxml"],
  ["wcm", "application/vnd.ms-works"],
  ["wdb", "application/vnd.ms-works"],
  ["wdp", "image/vnd.ms-photo"],
  ["weba", "audio/webm"],
  ["webapp", "application/x-web-app-manifest+json"],
  ["webm", "video/webm"],
  ["webmanifest", "application/manifest+json"],
  ["webp", "image/webp"],
  ["wg", "application/vnd.pmi.widget"],
  ["wgt", "application/widget"],
  ["wks", "application/vnd.ms-works"],
  ["wm", "video/x-ms-wm"],
  ["wma", "audio/x-ms-wma"],
  ["wmd", "application/x-ms-wmd"],
  ["wmf", "image/wmf"],
  ["wml", "text/vnd.wap.wml"],
  ["wmlc", "application/wmlc"],
  ["wmls", "text/vnd.wap.wmlscript"],
  ["wmlsc", "application/vnd.wap.wmlscriptc"],
  ["wmv", "video/x-ms-wmv"],
  ["wmx", "video/x-ms-wmx"],
  ["wmz", "application/x-msmetafile"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["word", "application/msword"],
  ["wpd", "application/vnd.wordperfect"],
  ["wpl", "application/vnd.ms-wpl"],
  ["wps", "application/vnd.ms-works"],
  ["wqd", "application/vnd.wqd"],
  ["wri", "application/x-mswrite"],
  ["wrl", "model/vrml"],
  ["wsc", "message/vnd.wfa.wsc"],
  ["wsdl", "application/wsdl+xml"],
  ["wspolicy", "application/wspolicy+xml"],
  ["wtb", "application/vnd.webturbo"],
  ["wvx", "video/x-ms-wvx"],
  ["x3d", "model/x3d+xml"],
  ["x3db", "model/x3d+fastinfoset"],
  ["x3dbz", "model/x3d+binary"],
  ["x3dv", "model/x3d-vrml"],
  ["x3dvz", "model/x3d+vrml"],
  ["x3dz", "model/x3d+xml"],
  ["x32", "application/x-authorware-bin"],
  ["x_b", "model/vnd.parasolid.transmit.binary"],
  ["x_t", "model/vnd.parasolid.transmit.text"],
  ["xaml", "application/xaml+xml"],
  ["xap", "application/x-silverlight-app"],
  ["xar", "application/vnd.xara"],
  ["xav", "application/xcap-att+xml"],
  ["xbap", "application/x-ms-xbap"],
  ["xbd", "application/vnd.fujixerox.docuworks.binder"],
  ["xbm", "image/x-xbitmap"],
  ["xca", "application/xcap-caps+xml"],
  ["xcs", "application/calendar+xml"],
  ["xdf", "application/xcap-diff+xml"],
  ["xdm", "application/vnd.syncml.dm+xml"],
  ["xdp", "application/vnd.adobe.xdp+xml"],
  ["xdssc", "application/dssc+xml"],
  ["xdw", "application/vnd.fujixerox.docuworks"],
  ["xel", "application/xcap-el+xml"],
  ["xenc", "application/xenc+xml"],
  ["xer", "application/patch-ops-error+xml"],
  ["xfdf", "application/vnd.adobe.xfdf"],
  ["xfdl", "application/vnd.xfdl"],
  ["xht", "application/xhtml+xml"],
  ["xhtml", "application/xhtml+xml"],
  ["xhvml", "application/xv+xml"],
  ["xif", "image/vnd.xiff"],
  ["xl", "application/excel"],
  ["xla", "application/vnd.ms-excel"],
  ["xlam", "application/vnd.ms-excel.addin.macroEnabled.12"],
  ["xlc", "application/vnd.ms-excel"],
  ["xlf", "application/xliff+xml"],
  ["xlm", "application/vnd.ms-excel"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"],
  ["xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xlt", "application/vnd.ms-excel"],
  ["xltm", "application/vnd.ms-excel.template.macroEnabled.12"],
  ["xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
  ["xlw", "application/vnd.ms-excel"],
  ["xm", "audio/xm"],
  ["xml", "application/xml"],
  ["xns", "application/xcap-ns+xml"],
  ["xo", "application/vnd.olpc-sugar"],
  ["xop", "application/xop+xml"],
  ["xpi", "application/x-xpinstall"],
  ["xpl", "application/xproc+xml"],
  ["xpm", "image/x-xpixmap"],
  ["xpr", "application/vnd.is-xpr"],
  ["xps", "application/vnd.ms-xpsdocument"],
  ["xpw", "application/vnd.intercon.formnet"],
  ["xpx", "application/vnd.intercon.formnet"],
  ["xsd", "application/xml"],
  ["xsl", "application/xml"],
  ["xslt", "application/xslt+xml"],
  ["xsm", "application/vnd.syncml+xml"],
  ["xspf", "application/xspf+xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["xvm", "application/xv+xml"],
  ["xvml", "application/xv+xml"],
  ["xwd", "image/x-xwindowdump"],
  ["xyz", "chemical/x-xyz"],
  ["xz", "application/x-xz"],
  ["yaml", "text/yaml"],
  ["yang", "application/yang"],
  ["yin", "application/yin+xml"],
  ["yml", "text/yaml"],
  ["ymp", "text/x-suse-ymp"],
  ["z", "application/x-compress"],
  ["z1", "application/x-zmachine"],
  ["z2", "application/x-zmachine"],
  ["z3", "application/x-zmachine"],
  ["z4", "application/x-zmachine"],
  ["z5", "application/x-zmachine"],
  ["z6", "application/x-zmachine"],
  ["z7", "application/x-zmachine"],
  ["z8", "application/x-zmachine"],
  ["zaz", "application/vnd.zzazz.deck+xml"],
  ["zip", "application/zip"],
  ["zir", "application/vnd.zul"],
  ["zirz", "application/vnd.zul"],
  ["zmm", "application/vnd.handheld-entertainment+xml"],
  ["zsh", "text/x-scriptzsh"]
]);
function toFileWithPath(file, path, h) {
  const f = withMimeType(file);
  const { webkitRelativePath } = file;
  const p2 = typeof path === "string" ? path : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : `./${file.name}`;
  if (typeof f.path !== "string") {
    setObjProp(f, "path", p2);
  }
  if (h !== void 0) {
    Object.defineProperty(f, "handle", {
      value: h,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  setObjProp(f, "relativePath", p2);
  return f;
}
function withMimeType(file) {
  const { name } = file;
  const hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    const ext = name.split(".").pop().toLowerCase();
    const type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}
function setObjProp(f, key, value) {
  Object.defineProperty(f, key, {
    value,
    writable: false,
    configurable: false,
    enumerable: true
  });
}

// ../node_modules/file-selector/dist/es2015/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  // macOs
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function* () {
    if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
      return getDataTransferFiles(evt.dataTransfer, evt.type);
    } else if (isChangeEvt(evt)) {
      return getInputFiles(evt);
    } else if (Array.isArray(evt) && evt.every((item) => "getFile" in item && typeof item.getFile === "function")) {
      return getFsHandleFiles(evt);
    }
    return [];
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map((file) => toFileWithPath(file));
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function* () {
    const files = yield Promise.all(handles.map((h) => h.getFile()));
    return files.map((file) => toFileWithPath(file));
  });
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function* () {
    if (dt.items) {
      const items = fromList(dt.items).filter((item) => item.kind === "file");
      if (type !== "drop") {
        return items;
      }
      const files = yield Promise.all(items.map(toFilePromises));
      return noIgnoredFiles(flatten(files));
    }
    return noIgnoredFiles(fromList(dt.files).map((file) => toFileWithPath(file)));
  });
}
function noIgnoredFiles(files) {
  return files.filter((file) => FILES_TO_IGNORE.indexOf(file.name) === -1);
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  const files = [];
  for (let i = 0; i < items.length; i++) {
    const file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  const entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item, entry);
}
function flatten(items) {
  return items.reduce((acc, files) => [
    ...acc,
    ...Array.isArray(files) ? flatten(files) : [files]
  ], []);
}
function fromDataTransferItem(item, entry) {
  return __awaiter(this, void 0, void 0, function* () {
    var _a;
    if (globalThis.isSecureContext && typeof item.getAsFileSystemHandle === "function") {
      const h = yield item.getAsFileSystemHandle();
      if (h === null) {
        throw new Error(`${item} is not a File`);
      }
      if (h !== void 0) {
        const file2 = yield h.getFile();
        file2.handle = h;
        return toFileWithPath(file2);
      }
    }
    const file = item.getAsFile();
    if (!file) {
      throw new Error(`${item} is not a File`);
    }
    const fwp = toFileWithPath(file, (_a = entry === null || entry === void 0 ? void 0 : entry.fullPath) !== null && _a !== void 0 ? _a : void 0);
    return fwp;
  });
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);
  });
}
function fromDirEntry(entry) {
  const reader = entry.createReader();
  return new Promise((resolve, reject) => {
    const entries = [];
    function readEntries() {
      reader.readEntries((batch) => __awaiter(this, void 0, void 0, function* () {
        if (!batch.length) {
          try {
            const files = yield Promise.all(entries);
            resolve(files);
          } catch (err) {
            reject(err);
          }
        } else {
          const items = Promise.all(batch.map(fromEntry));
          entries.push(items);
          readEntries();
        }
      }), (err) => {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      entry.file((file) => {
        const fwp = toFileWithPath(file, entry.fullPath);
        resolve(fwp);
      }, (err) => {
        reject(err);
      });
    });
  });
}

// ../node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es(), 1);
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e2;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var accepts = typeof import_attr_accept.default === "function" ? import_attr_accept.default : import_attr_accept.default.default;
var FILE_INVALID_TYPE = "file-invalid-type";
var FILE_TOO_LARGE = "file-too-large";
var FILE_TOO_SMALL = "file-too-small";
var TOO_MANY_FILES = "too-many-files";
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2() {
  var accept = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var acceptArr = accept.split(",");
  var msg = acceptArr.length > 1 ? "one of ".concat(acceptArr.join(", ")) : acceptArr[0];
  return {
    code: FILE_INVALID_TYPE,
    message: "File type must be ".concat(msg)
  };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
  return {
    code: FILE_TOO_LARGE,
    message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
  };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
  return {
    code: FILE_TOO_SMALL,
    message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
  };
};
var TOO_MANY_FILES_REJECTION = {
  code: TOO_MANY_FILES,
  message: "Too many files"
};
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || accepts(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers3() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn) {
      if (!isPropagationStopped(event) && fn) {
        fn.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok = false;
      }
      return ok;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread(_objectSpread({}, agg), {}, _defineProperty({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v) {
      return isMIMEType(v) || isExt(v);
    }).join(",");
  }
  return void 0;
}
function isAbort(v) {
  return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
}
function isSecurityError(v) {
  return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || v === "application/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}

// ../node_modules/react-dropzone/dist/es/index.js
var _excluded = ["children"];
var _excluded2 = ["open"];
var _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
var _excluded4 = ["refKey", "onChange", "onClick"];
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e2;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = /* @__PURE__ */ (0, import_react3.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
  (0, import_react3.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return /* @__PURE__ */ import_react3.default.createElement(import_react3.Fragment, null, children(_objectSpread2(_objectSpread2({}, props), {}, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
var defaultProps = {
  disabled: false,
  getFilesFromEvent: fromEvent,
  maxSize: Infinity,
  minSize: 0,
  multiple: true,
  maxFiles: 0,
  preventDropOnDocument: true,
  noClick: false,
  noKeyboard: false,
  noDrag: false,
  noDragEventsBubbling: false,
  validator: null,
  useFsAccessApi: false,
  autoFocus: false
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: import_prop_types.default.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: import_prop_types.default.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: import_prop_types.default.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: import_prop_types.default.func
};
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: [],
  fileRejections: []
};
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread2(_objectSpread2({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react3.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react3.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react3.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react3.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react3.useRef)(null);
  var inputRef = (0, import_react3.useRef)(null);
  var _useReducer = (0, import_react3.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react3.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react3.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react3.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react3.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react3.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react3.useCallback)(function(e) {
    if (onError) {
      onError(e);
    } else {
      console.error(e);
    }
  }, [onError]);
  var onDragEnterCb = (0, import_react3.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react3.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react3.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react3.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      isDragReject: fileRejections.length > 0,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react3.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react3.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react3.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react3.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react3.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react3.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn) {
    return disabled ? null : fn;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn) {
    return noKeyboard ? null : composeHandler(fn);
  };
  var composeDragHandler = function composeDragHandler2(fn) {
    return noDrag ? null : composeHandler(fn);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react3.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
      return _objectSpread2(_objectSpread2(_defineProperty2({
        onKeyDown: composeKeyboardHandler(composeEventHandlers3(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers3(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers3(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers3(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers3(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers3(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers3(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers3(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react3.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react3.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty2({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          border: 0,
          clip: "rect(0, 0, 0, 0)",
          clipPath: "inset(50%)",
          height: "1px",
          margin: "0 -1px -1px 0",
          overflow: "hidden",
          padding: 0,
          position: "absolute",
          width: "1px",
          whiteSpace: "nowrap"
        },
        onChange: composeHandler(composeEventHandlers3(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers3(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread2(_objectSpread2({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread2(_objectSpread2({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread2(_objectSpread2({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections,
        isDragReject: action.isDragReject
      });
    case "reset":
      return _objectSpread2({}, initialState);
    default:
      return state;
  }
}
function noop() {
}

// src/components/common/FileUpload.tsx
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
function FileUpload({
  onUpload,
  accept,
  maxSize = 15 * 1024 * 1024,
  // 15MB default
  maxFiles = 5,
  className
}) {
  const [uploadingFiles, setUploadingFiles] = (0, import_react4.useState)(/* @__PURE__ */ new Map());
  const handleFileUpload = (0, import_react4.useCallback)(async (acceptedFiles) => {
    const newUploadingFiles = new Map(uploadingFiles);
    acceptedFiles.forEach((file) => {
      newUploadingFiles.set(file.name, {
        file,
        progress: 0,
        status: "uploading"
      });
    });
    setUploadingFiles(newUploadingFiles);
    try {
      await onUpload(acceptedFiles);
      acceptedFiles.forEach((file) => {
        newUploadingFiles.set(file.name, {
          file,
          progress: 100,
          status: "success"
        });
      });
      setUploadingFiles(new Map(newUploadingFiles));
      setTimeout(() => {
        setUploadingFiles((prev) => {
          const updated = new Map(prev);
          acceptedFiles.forEach((file) => {
            if (updated.get(file.name)?.status === "success") {
              updated.delete(file.name);
            }
          });
          return updated;
        });
      }, 3e3);
    } catch (error) {
      acceptedFiles.forEach((file) => {
        newUploadingFiles.set(file.name, {
          file,
          progress: 0,
          status: "error",
          error: "Upload failed"
        });
      });
      setUploadingFiles(new Map(newUploadingFiles));
    }
  }, [onUpload, uploadingFiles]);
  const { getRootProps, getInputProps, isDragActive, fileRejections } = useDropzone({
    onDrop: handleFileUpload,
    accept,
    maxSize,
    maxFiles
  });
  const getFileIcon2 = (fileName) => {
    const ext = fileName.split(".").pop()?.toLowerCase();
    if (["jpg", "jpeg", "png", "gif", "svg", "webp"].includes(ext || "")) return FileImage;
    if (["mp4", "avi", "mov", "webm"].includes(ext || "")) return FileVideo;
    if (["zip", "rar", "7z", "tar", "gz"].includes(ext || "")) return FileArchive;
    if (["pdf", "doc", "docx", "txt", "md"].includes(ext || "")) return FileText;
    return File;
  };
  const formatFileSize3 = (bytes) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };
  const removeFile = (fileName) => {
    setUploadingFiles((prev) => {
      const updated = new Map(prev);
      updated.delete(fileName);
      return updated;
    });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className, children: [
    /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
      Card,
      {
        ...getRootProps(),
        className: cn(
          "relative border-2 border-dashed transition-all cursor-pointer",
          isDragActive ? "border-blue-500 bg-blue-50" : "border-gray-300 hover:border-gray-400",
          "p-8"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("input", { ...getInputProps() }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Upload, { className: cn(
              "mx-auto w-12 h-12 mb-4",
              isDragActive ? "text-blue-500" : "text-gray-400"
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-sm font-medium text-gray-900 mb-1", children: isDragActive ? "Drop files here" : "Drop files here or click to browse" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("p", { className: "text-xs text-gray-500", children: [
              "Maximum ",
              maxFiles,
              " files, up to ",
              formatFileSize3(maxSize),
              " each"
            ] })
          ] })
        ]
      }
    ),
    fileRejections.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "mt-4 space-y-2", children: fileRejections.map(({ file, errors }) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-start space-x-2 text-sm text-red-600", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CircleAlert, { className: "w-4 h-4 mt-0.5 flex-shrink-0" }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "font-medium", children: [
          file.name,
          ":"
        ] }),
        errors.map((error) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "ml-1", children: [
          error.code === "file-too-large" && `File too large (max ${formatFileSize3(maxSize)})`,
          error.code === "file-invalid-type" && "Invalid file type",
          error.code === "too-many-files" && `Too many files (max ${maxFiles})`
        ] }, error.code))
      ] })
    ] }, file.name)) }),
    uploadingFiles.size > 0 && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "mt-4 space-y-3", children: Array.from(uploadingFiles.entries()).map(([fileName, uploadInfo]) => {
      const FileIcon = getFileIcon2(fileName);
      return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Card, { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-start space-x-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(FileIcon, { className: "w-8 h-8 text-gray-400 flex-shrink-0" }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex-1 min-w-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-sm font-medium text-gray-900 truncate", children: fileName }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-6 w-6 p-0",
                onClick: () => removeFile(fileName),
                children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(X, { className: "w-3 h-3" })
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-xs text-gray-500 mb-2", children: formatFileSize3(uploadInfo.file.size) }),
          uploadInfo.status === "uploading" && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Progress, { value: uploadInfo.progress, className: "h-1" }),
          uploadInfo.status === "success" && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center space-x-1 text-green-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CircleCheck, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "text-xs", children: "Upload complete" })
          ] }),
          uploadInfo.status === "error" && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center space-x-1 text-red-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CircleAlert, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "text-xs", children: uploadInfo.error })
          ] })
        ] })
      ] }) }, fileName);
    }) })
  ] });
}

// src/types/universal-form.ts
var ContentType = /* @__PURE__ */ ((ContentType2) => {
  ContentType2["TASK"] = "TASK";
  ContentType2["NOTE"] = "NOTE";
  ContentType2["CALENDAR_EVENT"] = "CALENDAR_EVENT";
  ContentType2["MIXED"] = "MIXED";
  return ContentType2;
})(ContentType || {});

// src/components/forms/UniversalInputForm.tsx
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var PRIORITY_CONFIGS = {
  ["low" /* LOW */]: { level: "low" /* LOW */, dots: 1, color: "bg-krushr-priority-low" },
  ["medium" /* MEDIUM */]: { level: "medium" /* MEDIUM */, dots: 2, color: "bg-krushr-priority-medium" },
  ["high" /* HIGH */]: { level: "high" /* HIGH */, dots: 3, color: "bg-krushr-priority-high" },
  ["critical" /* CRITICAL */]: { level: "critical" /* CRITICAL */, dots: 4, color: "bg-krushr-priority-critical" }
};
var DEFAULT_WORKFLOW = {
  createVideoMeeting: true,
  createCall: true,
  kanbanTaskBoard: true,
  notes: true,
  ganttTimeline: true,
  ganttDependency: false,
  reminder: true,
  notifyTeam: false,
  changesNotifyTeam: false,
  reminders: [
    { enabled: true, timeBefore: "1d", type: "notification" },
    { enabled: true, timeBefore: "1h", type: "notification" }
  ]
};
var DEFAULT_RECURRING = {
  enabled: false,
  pattern: "weekly",
  interval: 1,
  daysOfWeek: []
};
function UniversalInputForm({
  open,
  onClose,
  onSuccess,
  initialData,
  contentType = "TASK" /* TASK */,
  workspaceId,
  projectId,
  kanbanColumnId,
  showWorkflowToggles = true,
  showFileUploads = true,
  allowContentTypeSwitch = false,
  compactMode = false,
  requiredFields = ["title"],
  maxTitleLength = 200,
  maxDescriptionLength = 5e3
}) {
  const [formData, setFormData] = (0, import_react5.useState)(() => ({
    contentType,
    title: "",
    description: "",
    priority: "medium" /* MEDIUM */,
    tags: [],
    allDay: false,
    status: "TODO" /* TODO */,
    teamMembers: [],
    checklist: [],
    subtasks: [],
    attachments: [],
    workflow: DEFAULT_WORKFLOW,
    recurring: DEFAULT_RECURRING,
    workspaceId,
    ...initialData
  }));
  const [currentTag, setCurrentTag] = (0, import_react5.useState)("");
  const [newChecklistItem, setNewChecklistItem] = (0, import_react5.useState)("");
  const [expandedSections, setExpandedSections] = (0, import_react5.useState)({
    dates: true,
    description: true,
    checklist: false,
    subtasks: false,
    files: false,
    workflow: true
  });
  const [validation, setValidation] = (0, import_react5.useState)({
    isValid: true,
    errors: {},
    warnings: {}
  });
  const { data: users = [] } = trpc.user.listWorkspaceMembers.useQuery(
    { workspaceId },
    { enabled: !!workspaceId }
  );
  const { data: projects = [] } = trpc.project.list.useQuery(
    { workspaceId },
    { enabled: !!workspaceId }
  );
  const { data: templates = [] } = trpc.template.list.useQuery(
    { workspaceId },
    { enabled: !!workspaceId }
  );
  const createTaskMutation = trpc.task.create.useMutation({
    onSuccess: (data2) => {
      onSuccess?.(formData, "TASK" /* TASK */);
      onClose();
      resetForm();
    }
  });
  const createNoteMutation = trpc.notes?.create?.useMutation?.({
    onSuccess: (data2) => {
      onSuccess?.(formData, "NOTE" /* NOTE */);
      onClose();
      resetForm();
    }
  }) || { mutate: () => {
  }, isLoading: false };
  const uploadFileMutation = trpc.upload.uploadTaskFile?.useMutation?.() || { mutate: () => {
  }, isLoading: false };
  const updateField = (0, import_react5.useCallback)((field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  }, []);
  const handleFileUpload = (0, import_react5.useCallback)(async (files) => {
    try {
      const newAttachments = [];
      for (const file of files) {
        const attachment = {
          name: file.name,
          size: file.size,
          type: file.type,
          file
        };
        newAttachments.push(attachment);
      }
      updateField("attachments", [...formData.attachments, ...newAttachments]);
    } catch (error) {
      console.error("File preparation error:", error);
    }
  }, [formData.attachments, updateField]);
  const handleRemoveFile = (0, import_react5.useCallback)((index) => {
    const newAttachments = formData.attachments.filter((_, i) => i !== index);
    updateField("attachments", newAttachments);
  }, [formData.attachments, updateField]);
  const isEditMode = (0, import_react5.useMemo)(() => !!formData.id, [formData.id]);
  const isLoading = (0, import_react5.useMemo)(
    () => createTaskMutation.isLoading || createNoteMutation.isLoading || uploadFileMutation.isLoading,
    [createTaskMutation.isLoading, createNoteMutation.isLoading, uploadFileMutation.isLoading]
  );
  const resetForm = (0, import_react5.useCallback)(() => {
    setFormData({
      contentType,
      title: "",
      description: "",
      priority: "medium" /* MEDIUM */,
      tags: [],
      allDay: false,
      status: "TODO" /* TODO */,
      teamMembers: [],
      checklist: [],
      subtasks: [],
      attachments: [],
      workflow: DEFAULT_WORKFLOW,
      recurring: DEFAULT_RECURRING,
      workspaceId,
      ...initialData
    });
    setCurrentTag("");
    setNewChecklistItem("");
    setValidation({ isValid: true, errors: {}, warnings: {} });
  }, [contentType, workspaceId, initialData]);
  const validateForm = (0, import_react5.useCallback)(() => {
    const errors = {};
    const warnings = {};
    if (requiredFields.includes("title") && !formData.title.trim()) {
      errors.title = "Title is required";
    }
    if (formData.title.length > maxTitleLength) {
      errors.title = `Title must be less than ${maxTitleLength} characters`;
    }
    if (formData.description.length > maxDescriptionLength) {
      errors.description = `Description must be less than ${maxDescriptionLength} characters`;
    }
    if (formData.startDate && formData.endDate && formData.startDate > formData.endDate) {
      errors.dates = "Start date must be before end date";
    }
    if (formData.contentType === "TASK" /* TASK */ && !formData.assigneeId) {
      warnings.assignee = "Consider assigning this task to someone";
    }
    const result = {
      isValid: Object.keys(errors).length === 0,
      errors,
      warnings
    };
    setValidation(result);
    return result;
  }, [formData, requiredFields, maxTitleLength, maxDescriptionLength]);
  const handleSubmit = (0, import_react5.useCallback)(async () => {
    const validation2 = validateForm();
    if (!validation2.isValid) return;
    try {
      switch (formData.contentType) {
        case "TASK" /* TASK */:
          await createTaskMutation.mutateAsync({
            title: formData.title,
            description: formData.description,
            priority: formData.priority,
            status: formData.status,
            dueDate: formData.endDate?.toISOString(),
            assigneeId: formData.assigneeId,
            estimatedHours: formData.estimatedHours,
            tags: formData.tags,
            workspaceId: formData.workspaceId,
            projectId: projectId || formData.projectId,
            kanbanColumnId: kanbanColumnId || formData.kanbanColumnId
          });
          break;
        case "NOTE" /* NOTE */:
          createNoteMutation.mutate({
            title: formData.title,
            content: formData.description,
            tags: formData.tags,
            workspaceId: formData.workspaceId
          });
          break;
        case "CALENDAR_EVENT" /* CALENDAR_EVENT */:
          console.log("Calendar event creation not yet implemented");
          break;
        case "MIXED" /* MIXED */:
          console.log("Mixed content creation not yet implemented");
          break;
      }
    } catch (error) {
      console.error("Form submission error:", error);
    }
  }, [formData, validateForm, createTaskMutation, createNoteMutation, projectId, kanbanColumnId]);
  const toggleSection = (0, import_react5.useCallback)((section) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }));
  }, []);
  const handleAddTag = (0, import_react5.useCallback)(() => {
    if (currentTag && !formData.tags.includes(currentTag)) {
      updateField("tags", [...formData.tags, currentTag]);
      setCurrentTag("");
    }
  }, [currentTag, formData.tags, updateField]);
  const handleRemoveTag = (0, import_react5.useCallback)((tag) => {
    updateField("tags", formData.tags.filter((t2) => t2 !== tag));
  }, [formData.tags, updateField]);
  const handleAddChecklistItem = (0, import_react5.useCallback)(() => {
    if (newChecklistItem.trim()) {
      const newItem = {
        text: newChecklistItem.trim(),
        completed: false,
        order: formData.checklist.length
      };
      updateField("checklist", [...formData.checklist, newItem]);
      setNewChecklistItem("");
    }
  }, [newChecklistItem, formData.checklist, updateField]);
  const handleUpdateChecklistItem = (0, import_react5.useCallback)((index, updates) => {
    const newChecklist = [...formData.checklist];
    newChecklist[index] = { ...newChecklist[index], ...updates };
    updateField("checklist", newChecklist);
  }, [formData.checklist, updateField]);
  const handleRemoveChecklistItem = (0, import_react5.useCallback)((index) => {
    updateField("checklist", formData.checklist.filter((_, i) => i !== index));
  }, [formData.checklist, updateField]);
  const renderPriorityDots = (0, import_react5.useCallback)((priority) => {
    const config = PRIORITY_CONFIGS[priority];
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "flex items-center gap-1", children: Array.from({ length: 5 }, (_, i) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      "div",
      {
        className: cn(
          "w-3 h-3 rounded-full",
          i < config.dots ? config.color : "bg-gray-200"
        )
      },
      i
    )) });
  }, []);
  const renderSectionHeader = (0, import_react5.useCallback)((title, sectionKey, showEditIcon = false) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between mb-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { className: "text-base font-medium", children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
      showEditIcon && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SquarePen, { className: "h-4 w-4 text-gray-400" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "h-8 w-8 p-0",
          onClick: () => toggleSection(sectionKey),
          children: expandedSections[sectionKey] ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ChevronUp, { className: "h-4 w-4 text-gray-400" }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ChevronDown, { className: "h-4 w-4 text-gray-400" })
        }
      )
    ] })
  ] }), [expandedSections, toggleSection]);
  (0, import_react5.useEffect)(() => {
    if (initialData) {
      setFormData((prev) => ({ ...prev, ...initialData }));
    }
  }, [initialData]);
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Dialog, { open, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(DialogContent, { className: "max-w-5xl max-h-[95vh] overflow-hidden p-0", children: [
    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(DialogHeader, { className: "px-6 py-4 border-b", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(DialogTitle, { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: isEditMode ? "Edit Item" : "New Item" }),
      allowContentTypeSwitch && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
        Select,
        {
          value: formData.contentType,
          onValueChange: (value) => updateField("contentType", value),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectTrigger, { className: "w-40", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectValue, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(SelectContent, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "TASK" /* TASK */, children: "Task" }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "NOTE" /* NOTE */, children: "Note" }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "CALENDAR_EVENT" /* CALENDAR_EVENT */, children: "Calendar Event" }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "MIXED" /* MIXED */, children: "Mixed" })
            ] })
          ]
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ScrollArea, { className: "flex-1 px-6", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "py-6 space-y-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "pt-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex gap-4 mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "w-32 h-20 bg-gradient-to-br from-blue-100 to-blue-200 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Paperclip, { className: "w-8 h-8 text-blue-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "w-32 h-20 bg-gradient-to-br from-green-100 to-green-200 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Tag, { className: "w-8 h-8 text-green-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "w-32 h-20 bg-gradient-to-br from-purple-100 to-purple-200 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Users, { className: "w-8 h-8 text-purple-600" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex justify-between items-start mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2 mb-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                FloatingInput,
                {
                  value: formData.title,
                  onChange: (e) => updateField("title", e.target.value),
                  label: "Enter title...",
                  className: "text-2xl font-medium text-krushr-primary",
                  maxLength: maxTitleLength
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SquarePen, { className: "h-4 w-4 text-gray-400" }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2 mb-4", children: [
              formData.tags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Badge, { variant: "secondary", className: "gap-1", children: [
                tag,
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-4 w-4 p-0 hover:text-destructive",
                    onClick: () => handleRemoveTag(tag),
                    children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(X, { className: "h-3 w-3" })
                  }
                )
              ] }, tag)),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  FloatingInput,
                  {
                    value: currentTag,
                    onChange: (e) => setCurrentTag(e.target.value),
                    onKeyPress: (e) => e.key === "Enter" && handleAddTag(),
                    label: "+ Add Tag",
                    className: "w-24 h-7 text-xs"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Button,
                  {
                    variant: "outline",
                    size: "sm",
                    onClick: handleAddTag,
                    className: "h-7 px-2",
                    children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Plus, { className: "w-3 h-3" })
                  }
                )
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "ml-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { className: "text-sm text-gray-600 mb-2 block", children: "Priority" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
              Select,
              {
                value: formData.priority,
                onValueChange: (value) => updateField("priority", value),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectTrigger, { className: "w-32", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectValue, { children: renderPriorityDots(formData.priority) }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectContent, { children: Object.values(Priority).map((priority) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: priority, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                    renderPriorityDots(priority),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { className: "capitalize", children: priority.toLowerCase() })
                  ] }) }, priority)) })
                ]
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex -space-x-2 mr-2", children: [
            formData.teamMembers.slice(0, 3).map((member, index) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Avatar, { className: "w-8 h-8 border-2 border-white", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(AvatarImage, { src: member.avatar }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(AvatarFallback, { className: "text-xs", children: member.name.charAt(0) })
            ] }, member.userId)),
            formData.teamMembers.length > 3 && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "w-8 h-8 rounded-full bg-gray-200 border-2 border-white flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("span", { className: "text-xs font-medium", children: [
              "+",
              formData.teamMembers.length - 3
            ] }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "font-medium", children: "Design Team" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "text-sm text-gray-500", children: [
              "Last updated by ",
              formData.lastUpdatedBy || "Unknown",
              " at ",
              format(/* @__PURE__ */ new Date(), "h:mm a, M/d/yy")
            ] })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "grid grid-cols-3 gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "col-span-2 space-y-6", children: [
          (formData.contentType === "CALENDAR_EVENT" /* CALENDAR_EVENT */ || formData.contentType === "MIXED" /* MIXED */) && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { children: "All Day" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
              Switch2,
              {
                checked: formData.allDay,
                onCheckedChange: (checked) => updateField("allDay", checked)
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Dates", "dates") }),
            expandedSections.dates && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "grid grid-cols-3 gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { className: "text-xs text-gray-500 uppercase tracking-wide", children: "Start Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Popover2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
                      Button,
                      {
                        variant: "outline",
                        className: cn(
                          "w-full justify-start text-left font-normal mt-1",
                          !formData.startDate && "text-muted-foreground"
                        ),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                          formData.startDate ? format(formData.startDate, "MMM dd") : "Start Date"
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                      Calendar2,
                      {
                        mode: "single",
                        selected: formData.startDate,
                        onSelect: (date) => updateField("startDate", date),
                        initialFocus: true
                      }
                    ) })
                  ] })
                ] }),
                !formData.allDay && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  FloatingInput,
                  {
                    type: "time",
                    value: formData.startTime || "",
                    onChange: (e) => updateField("startTime", e.target.value),
                    label: "Time",
                    className: "mt-1"
                  }
                ) }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { className: "text-xs text-gray-500 uppercase tracking-wide", children: "Duration" }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
                    Select,
                    {
                      value: formData.duration || "",
                      onValueChange: (value) => updateField("duration", value),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectTrigger, { className: "mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectValue, { placeholder: "Duration" }) }),
                        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(SelectContent, { children: [
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "15m", children: "15 minutes" }),
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "30m", children: "30 minutes" }),
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "1h", children: "1 hour" }),
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "2h", children: "2 hours" }),
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "4h", children: "4 hours" }),
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectItem, { value: "1d", children: "1 day" })
                        ] })
                      ]
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { className: "text-xs text-gray-500 uppercase tracking-wide", children: "End Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Popover2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
                      Button,
                      {
                        variant: "outline",
                        className: cn(
                          "w-full justify-start text-left font-normal mt-1",
                          !formData.endDate && "text-muted-foreground"
                        ),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                          formData.endDate ? format(formData.endDate, "MMM dd") : "End Date"
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                      Calendar2,
                      {
                        mode: "single",
                        selected: formData.endDate,
                        onSelect: (date) => updateField("endDate", date),
                        initialFocus: true
                      }
                    ) })
                  ] })
                ] }),
                !formData.allDay && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  FloatingInput,
                  {
                    type: "time",
                    value: formData.endTime || "",
                    onChange: (e) => updateField("endTime", e.target.value),
                    label: "End Time",
                    className: "mt-1"
                  }
                ) })
              ] })
            ] })
          ] }),
          (formData.contentType === "CALENDAR_EVENT" /* CALENDAR_EVENT */ || formData.contentType === "MIXED" /* MIXED */) && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            FloatingInput,
            {
              value: formData.calendar || "",
              onChange: (e) => updateField("calendar", e.target.value),
              label: "Calendar Email",
              className: "mt-1"
            }
          ) }),
          (formData.contentType === "CALENDAR_EVENT" /* CALENDAR_EVENT */ || formData.contentType === "MIXED" /* MIXED */) && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { children: "Recurring" }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                Switch2,
                {
                  checked: formData.recurring.enabled,
                  onCheckedChange: (checked) => updateField("recurring", { ...formData.recurring, enabled: checked })
                }
              )
            ] }),
            formData.recurring.enabled && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Popover2, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { variant: "outline", className: "justify-start", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                  formData.recurring.startDate ? format(formData.recurring.startDate, "PPP") : "Start Date"
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Calendar2,
                  {
                    mode: "single",
                    selected: formData.recurring.startDate,
                    onSelect: (date) => updateField("recurring", { ...formData.recurring, startDate: date }),
                    initialFocus: true
                  }
                ) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Popover2, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { variant: "outline", className: "justify-start", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                  formData.recurring.endDate ? format(formData.recurring.endDate, "PPP") : "End Date"
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Calendar2,
                  {
                    mode: "single",
                    selected: formData.recurring.endDate,
                    onSelect: (date) => updateField("recurring", { ...formData.recurring, endDate: date }),
                    initialFocus: true
                  }
                ) })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Description & Notes", "description", true) }),
            expandedSections.description && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "border rounded-lg p-4", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                Textarea,
                {
                  value: formData.description,
                  onChange: (e) => updateField("description", e.target.value),
                  placeholder: "Add a detailed description...",
                  className: "min-h-[120px] border-0 resize-none focus-visible:ring-0",
                  maxLength: maxDescriptionLength
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-center gap-1 py-2 border-t", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SquarePen, { className: "h-4 w-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(X, { className: "h-4 w-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Separator2, { orientation: "vertical", className: "h-6" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", className: "font-bold", children: "B" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", className: "italic", children: "I" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", className: "underline", children: "U" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Separator2, { orientation: "vertical", className: "h-6" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: "\u2022" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: "1." }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { className: "h-4 w-4" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: "@" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: "\u{1F60A}" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Tag" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Checklist", "checklist", true) }),
            expandedSections.checklist && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "space-y-4", children: [
              formData.checklist.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Checkbox2,
                  {
                    checked: item.completed,
                    onCheckedChange: (checked) => handleUpdateChecklistItem(index, { completed: !!checked })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  FloatingInput,
                  {
                    label: "Checklist item",
                    value: item.text,
                    onChange: (e) => handleUpdateChecklistItem(index, { text: e.target.value }),
                    className: "flex-1"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => handleRemoveChecklistItem(index),
                    className: "h-8 w-8 p-0 text-krushr-secondary hover:text-krushr-secondary-600",
                    children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(X, { className: "h-4 w-4" })
                  }
                )
              ] }, index)),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  FloatingInput,
                  {
                    value: newChecklistItem,
                    onChange: (e) => setNewChecklistItem(e.target.value),
                    onKeyPress: (e) => e.key === "Enter" && handleAddChecklistItem(),
                    label: "Add new item...",
                    className: "flex-1"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                  Button,
                  {
                    variant: "outline",
                    size: "sm",
                    onClick: handleAddChecklistItem,
                    children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Plus, { className: "w-4 h-4" })
                  }
                )
              ] })
            ] })
          ] }),
          showFileUploads && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { className: "pb-3", children: renderSectionHeader("Files", "files", true) }),
            expandedSections.files && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "space-y-4", children: [
              formData.attachments.map((file, index) => {
                const sizeInKB = (file.size / 1024).toFixed(1);
                const isImage = file.type?.startsWith("image/");
                return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-3 p-3 border rounded-lg", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden", children: isImage && file.file ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                    "img",
                    {
                      src: URL.createObjectURL(file.file),
                      alt: file.name,
                      className: "w-full h-full object-cover"
                    }
                  ) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Paperclip, { className: "w-6 h-6 text-gray-500" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "font-medium truncate", children: file.name }),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "text-sm text-gray-500", children: [
                      sizeInKB,
                      " KB"
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                    file.url && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                      Button,
                      {
                        variant: "ghost",
                        size: "sm",
                        className: "h-8 w-8 p-0 text-krushr-info hover:text-krushr-info-600",
                        onClick: () => window.open(file.url, "_blank"),
                        children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Download, { className: "h-4 w-4" })
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                      Button,
                      {
                        variant: "ghost",
                        size: "sm",
                        className: "h-8 w-8 p-0 text-krushr-secondary hover:text-krushr-secondary-600",
                        onClick: () => handleRemoveFile(index),
                        children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Trash2, { className: "h-4 w-4" })
                      }
                    )
                  ] })
                ] }, index);
              }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                FileUpload,
                {
                  onUpload: handleFileUpload,
                  accept: {
                    "image/*": [".jpg", ".jpeg", ".png", ".gif", ".webp"],
                    "application/pdf": [".pdf"],
                    "text/*": [".txt", ".md"],
                    "application/msword": [".doc"],
                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [".docx"]
                  },
                  maxSize: 10 * 1024 * 1024,
                  maxFiles: 5,
                  className: "mt-4"
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { children: "Workflow" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { className: "space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { variant: "outline", className: "w-full justify-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Play, { className: "w-4 h-4 mr-2 text-krushr-success" }),
                "Load Template"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { variant: "outline", className: "w-full justify-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(WandSparkles, { className: "w-4 h-4 mr-2 text-krushr-secondary" }),
                "Set As Template"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { variant: "outline", className: "w-full justify-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Share2, { className: "w-4 h-4 mr-2 text-krushr-info" }),
                "Share"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { className: "w-full justify-start bg-krushr-secondary hover:bg-krushr-secondary-600", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
                "Team"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { className: "w-full justify-start bg-krushr-primary hover:bg-krushr-primary-700", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
                "User"
              ] })
            ] }) })
          ] }),
          showWorkflowToggles && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { children: "Workflow Additions" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "space-y-4", children: [
              Object.entries({
                "Create video meeting": "createVideoMeeting",
                "Create call": "createCall",
                "Kanban task board": "kanbanTaskBoard",
                "Notes": "notes",
                "Gantt timeline": "ganttTimeline",
                "Gantt Dependency": "ganttDependency",
                "Reminder": "reminder",
                "Notify team": "notifyTeam",
                "Changes notify team": "changesNotifyTeam"
              }).map(([label, key]) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Label2, { className: "text-sm", children: label }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                    Switch2,
                    {
                      checked: formData.workflow[key],
                      onCheckedChange: (checked) => updateField("workflow", {
                        ...formData.workflow,
                        [key]: checked
                      })
                    }
                  ),
                  ["kanbanTaskBoard", "notes", "ganttTimeline"].includes(key) && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ChevronDown, { className: "h-4 w-4 text-gray-400" }) })
                ] })
              ] }, key)),
              formData.workflow.reminder && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "pl-6 space-y-2 border-l-2 border-gray-200", children: [
                formData.workflow.reminders.map((reminder, index) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center text-gray-700", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-warning mr-3" }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { className: "text-sm", children: reminder.timeBefore === "1d" ? "1 Day Prior" : "1 Hour Prior" })
                ] }, index)),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-krushr-primary text-lg font-bold cursor-pointer hover:text-krushr-primary-700", children: "+" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardContent, { className: "pt-6 space-y-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
              Button,
              {
                className: "w-full justify-start bg-krushr-success hover:bg-krushr-success-600",
                onClick: () => {
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CircleCheckBig, { className: "w-4 h-4 mr-2" }),
                  "Mark As Complete"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
              Button,
              {
                variant: "destructive",
                className: "w-full justify-start",
                onClick: () => {
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Trash2, { className: "w-4 h-4 mr-2" }),
                  "Delete"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
              Button,
              {
                className: "w-full justify-start bg-krushr-primary hover:bg-krushr-primary-700",
                onClick: handleSubmit,
                disabled: isLoading || !validation.isValid,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Save, { className: "w-4 h-4 mr-2" }),
                  isLoading ? "Saving..." : "Save Changes"
                ]
              }
            )
          ] }) })
        ] })
      ] })
    ] }) }),
    Object.keys(validation.errors).length > 0 && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "px-6 py-3 border-t bg-krushr-secondary-50", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-sm text-krushr-secondary-600", children: Object.values(validation.errors).join(", ") }) })
  ] }) });
}

// src/components/forms/UniversalFormDemo.tsx
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
function UniversalFormDemo() {
  const [isFormOpen, setIsFormOpen] = (0, import_react6.useState)(false);
  const [selectedContentType, setSelectedContentType] = (0, import_react6.useState)("TASK" /* TASK */);
  const [recentItems, setRecentItems] = (0, import_react6.useState)([]);
  const handleFormSuccess = (data2, contentType) => {
    console.log("Form submitted successfully:", { data: data2, contentType });
    const newItem = {
      id: Date.now().toString(),
      title: data2.title,
      type: contentType,
      createdAt: /* @__PURE__ */ new Date()
    };
    setRecentItems((prev) => [newItem, ...prev.slice(0, 4)]);
  };
  const openForm = (type) => {
    setSelectedContentType(type);
    setIsFormOpen(true);
  };
  const getContentTypeIcon = (type) => {
    switch (type) {
      case "TASK" /* TASK */:
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Kanban, { className: "w-4 h-4" });
      case "NOTE" /* NOTE */:
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FileText, { className: "w-4 h-4" });
      case "CALENDAR_EVENT" /* CALENDAR_EVENT */:
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Calendar, { className: "w-4 h-4" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Plus, { className: "w-4 h-4" });
    }
  };
  const getContentTypeColor = (type) => {
    switch (type) {
      case "TASK" /* TASK */:
        return "bg-blue-100 text-blue-800";
      case "NOTE" /* NOTE */:
        return "bg-green-100 text-green-800";
      case "CALENDAR_EVENT" /* CALENDAR_EVENT */:
        return "bg-purple-100 text-purple-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "p-6 max-w-4xl mx-auto space-y-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h1", { className: "text-3xl font-bold text-gray-900 mb-2", children: "Universal Input Form Demo" }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-gray-600", children: "Comprehensive form for creating tasks, notes, calendar events, and mixed content" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardTitle, { children: "Quick Actions" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(CardContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            Button,
            {
              onClick: () => openForm("TASK" /* TASK */),
              className: "h-24 flex flex-col items-center justify-center gap-2",
              variant: "outline",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Kanban, { className: "w-8 h-8 text-blue-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Create Task" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            Button,
            {
              onClick: () => openForm("NOTE" /* NOTE */),
              className: "h-24 flex flex-col items-center justify-center gap-2",
              variant: "outline",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FileText, { className: "w-8 h-8 text-green-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Create Note" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
            Button,
            {
              onClick: () => openForm("CALENDAR_EVENT" /* CALENDAR_EVENT */),
              className: "h-24 flex flex-col items-center justify-center gap-2",
              variant: "outline",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Calendar, { className: "w-8 h-8 text-purple-600" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "Create Event" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mt-4 pt-4 border-t", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
          Button,
          {
            onClick: () => openForm("MIXED" /* MIXED */),
            className: "w-full",
            variant: "default",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
              "Universal Form (All Types)"
            ]
          }
        ) })
      ] })
    ] }),
    recentItems.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardTitle, { children: "Recently Created" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "space-y-3", children: recentItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
        "div",
        {
          className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center gap-3", children: [
              getContentTypeIcon(item.type),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "font-medium", children: item.title }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-500", children: item.createdAt.toLocaleString() })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Badge, { variant: "secondary", className: getContentTypeColor(item.type), children: item.type.toLowerCase().replace("_", " ") })
          ]
        },
        item.id
      )) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardTitle, { children: "Form Features" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "font-semibold mb-3", children: "Content Creation" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("ul", { className: "space-y-2 text-sm text-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Multi-content type support" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Rich text editing with toolbar" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Priority and tag management" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Team assignment" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Due dates and scheduling" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { className: "font-semibold mb-3", children: "Advanced Features" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("ul", { className: "space-y-2 text-sm text-gray-600", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 File attachments with drag & drop" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Recurring events" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Workflow automation toggles" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Checklist and subtasks" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("li", { children: "\u2022 Form validation and error handling" })
          ] })
        ] })
      ] }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      UniversalInputForm,
      {
        open: isFormOpen,
        onClose: () => setIsFormOpen(false),
        onSuccess: handleFormSuccess,
        contentType: selectedContentType,
        workspaceId: "demo-workspace-id",
        projectId: "demo-project-id",
        kanbanColumnId: "demo-column-id",
        showWorkflowToggles: true,
        showFileUploads: true,
        allowContentTypeSwitch: selectedContentType === "MIXED" /* MIXED */,
        initialData: {
          priority: "medium" /* MEDIUM */,
          status: "TODO" /* TODO */,
          tags: [],
          workflow: {
            createVideoMeeting: true,
            createCall: true,
            kanbanTaskBoard: true,
            notes: true,
            ganttTimeline: true,
            ganttDependency: false,
            reminder: true,
            notifyTeam: false,
            changesNotifyTeam: false,
            reminders: [
              { enabled: true, timeBefore: "1d", type: "notification" },
              { enabled: true, timeBefore: "1h", type: "notification" }
            ]
          }
        }
      }
    )
  ] });
}

// src/components/forms/UniversalInputFormCompact.tsx
var import_react7 = __toESM(require_react(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var DEFAULT_FORM_DATA = {
  contentType: "TASK" /* TASK */,
  title: "",
  description: "",
  priority: "medium" /* MEDIUM */,
  tags: [],
  allDay: false,
  status: "TODO" /* TODO */,
  teamMembers: [],
  checklist: [],
  subtasks: [],
  attachments: [],
  assigneeId: void 0,
  workflow: {
    createVideoMeeting: false,
    createCall: false,
    kanbanTaskBoard: false,
    notes: false,
    ganttTimeline: false,
    ganttDependency: false,
    reminder: false,
    notifyTeam: false,
    changesNotifyTeam: false,
    reminders: []
  },
  recurring: {
    enabled: false,
    pattern: "weekly",
    endDate: void 0
  },
  workspaceId: ""
};
function UniversalInputFormCompact({
  contentType = "TASK" /* TASK */,
  workspaceId,
  initialData = {},
  onSuccess,
  onClose,
  integrationMode = "panel",
  maxHeight = "400px",
  showHeader = true
}) {
  const [formData, setFormData] = (0, import_react7.useState)({
    ...DEFAULT_FORM_DATA,
    contentType,
    workspaceId,
    ...initialData
  });
  const [currentTag, setCurrentTag] = (0, import_react7.useState)("");
  const [newChecklistItem, setNewChecklistItem] = (0, import_react7.useState)("");
  const [expandedSections, setExpandedSections] = (0, import_react7.useState)({
    basic: true,
    dates: false,
    team: false,
    workflow: false,
    checklist: false
  });
  const updateField = (0, import_react7.useCallback)((field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  }, []);
  const createTaskMutation = trpc.task.create.useMutation();
  const createChecklistMutation = trpc.checklist.create.useMutation();
  const addChecklistItemMutation = trpc.checklist.addItem.useMutation();
  const createNoteMutation = trpc.notes?.create?.useMutation?.({
    onSuccess: (data2) => {
      onSuccess?.(formData, "NOTE" /* NOTE */);
      onClose?.();
    }
  }) || { mutate: () => {
  }, isLoading: false };
  const toggleSection = (section) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }));
  };
  const addTag = () => {
    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {
      updateField("tags", [...formData.tags, currentTag.trim()]);
      setCurrentTag("");
    }
  };
  const removeTag = (tag) => {
    updateField("tags", formData.tags.filter((t2) => t2 !== tag));
  };
  const addChecklistItem = () => {
    if (newChecklistItem.trim()) {
      const newItem = {
        id: `temp-${Date.now()}`,
        text: newChecklistItem.trim(),
        completed: false,
        order: formData.checklist.length
      };
      updateField("checklist", [...formData.checklist, newItem]);
      setNewChecklistItem("");
    }
  };
  const removeChecklistItem = (id2) => {
    updateField("checklist", formData.checklist.filter((item) => item.id !== id2));
  };
  const toggleChecklistItem = (id2) => {
    updateField("checklist", formData.checklist.map(
      (item) => item.id === id2 ? { ...item, completed: !item.completed } : item
    ));
  };
  const renderPriorityDots = (priority) => {
    const colors = {
      ["low" /* LOW */]: "bg-krushr-priority-low",
      ["medium" /* MEDIUM */]: "bg-krushr-priority-medium",
      ["high" /* HIGH */]: "bg-krushr-priority-high",
      ["critical" /* CRITICAL */]: "bg-krushr-priority-critical"
    };
    const count = {
      ["low" /* LOW */]: 1,
      ["medium" /* MEDIUM */]: 2,
      ["high" /* HIGH */]: 3,
      ["critical" /* CRITICAL */]: 4
    };
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex gap-0.5", children: Array.from({ length: count[priority] }).map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: cn("w-1.5 h-1.5 rounded-full", colors[priority]) }, i)) });
  };
  const handleSubmit = async () => {
    if (!formData.title.trim()) return;
    try {
      switch (formData.contentType) {
        case "TASK" /* TASK */:
          const task = await createTaskMutation.mutateAsync({
            title: formData.title,
            description: formData.description,
            priority: formData.priority,
            status: formData.status,
            workspaceId: formData.workspaceId,
            tags: formData.tags,
            startDate: formData.startDate,
            endDate: formData.endDate,
            assigneeId: formData.assigneeId,
            projectId: formData.projectId,
            kanbanColumnId: formData.kanbanColumnId
          });
          if (formData.checklist.length > 0 && task.id) {
            try {
              const checklist = await createChecklistMutation.mutateAsync({
                taskId: task.id,
                title: "Task Checklist"
              });
              for (const item of formData.checklist) {
                if (item.text.trim()) {
                  await addChecklistItemMutation.mutateAsync({
                    checklistId: checklist.id,
                    text: item.text.trim()
                  });
                }
              }
            } catch (checklistError) {
              console.error("Failed to create checklist:", checklistError);
            }
          }
          onSuccess?.(formData, "TASK" /* TASK */);
          onClose?.();
          break;
        case "NOTE" /* NOTE */:
          await createNoteMutation.mutateAsync({
            title: formData.title,
            content: formData.description,
            workspaceId: formData.workspaceId,
            tags: formData.tags
          });
          onSuccess?.(formData, "NOTE" /* NOTE */);
          onClose?.();
          break;
        default:
          console.log("Creating:", formData.contentType, formData);
      }
    } catch (error) {
      console.error("Failed to create item:", error);
    }
  };
  const isLoading = createTaskMutation.isLoading || createNoteMutation.isLoading;
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: cn(
    "bg-white border rounded-lg overflow-hidden",
    integrationMode === "modal" && "shadow-lg",
    integrationMode === "panel" && "border-gray-200",
    integrationMode === "inline" && "border-transparent"
  ), children: [
    showHeader && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center justify-between p-3 border-b bg-gray-50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
          Select,
          {
            value: formData.contentType,
            onValueChange: (value) => updateField("contentType", value),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectTrigger, { className: "h-7 w-auto text-sm border-none bg-transparent p-1", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectValue, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(SelectContent, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "TASK" /* TASK */, children: "\u{1F4CB} Task" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "NOTE" /* NOTE */, children: "\u{1F4DD} Note" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: ContentType.EVENT, children: "\u{1F4C5} Event" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "CALENDAR_EVENT" /* CALENDAR_EVENT */, children: "\u{1F5D3}\uFE0F Calendar" })
              ] })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex items-center gap-1", children: renderPriorityDots(formData.priority) })
      ] }),
      onClose && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: onClose,
          className: "h-6 w-6 p-0",
          children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(X, { className: "h-3 w-3" })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "div",
      {
        className: "overflow-y-auto",
        style: { maxHeight },
        children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "p-3 space-y-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              FloatingInput,
              {
                label: "What needs to be done?",
                value: formData.title,
                onChange: (e) => updateField("title", e.target.value),
                className: "font-medium border-none shadow-none p-0 text-base focus-visible:ring-0",
                autoFocus: true
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              Textarea,
              {
                placeholder: "Add description...",
                value: formData.description,
                onChange: (e) => updateField("description", e.target.value),
                className: "min-h-[60px] resize-none border-none shadow-none p-0 text-base placeholder:text-gray-400 focus-visible:ring-0",
                rows: 2
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex items-center gap-2 text-sm" }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex flex-wrap gap-1", children: formData.tags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              Badge,
              {
                variant: "secondary",
                className: "text-sm h-5 px-1.5 gap-1",
                children: [
                  tag,
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: () => removeTag(tag),
                      className: "h-3 w-3 p-0 hover:bg-transparent",
                      children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(X, { className: "h-2 w-2" })
                    }
                  )
                ]
              },
              tag
            )) }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                FloatingInput,
                {
                  label: "Add tag",
                  value: currentTag,
                  onChange: (e) => setCurrentTag(e.target.value),
                  onKeyDown: (e) => e.key === "Enter" && addTag(),
                  className: "h-6 text-sm flex-1"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: addTag,
                  className: "h-6 w-6 p-0",
                  children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Plus, { className: "h-3 w-3" })
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("dates"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "\u{1F4C5} Dates & Timing" }),
                  expandedSections.dates ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.dates && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "p-2 border-t border-gray-100 space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex-1 grid grid-cols-3 gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm text-gray-500", children: "Priority" }),
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex items-center gap-1 mt-1", children: [1, 2, 3].map((level) => {
                      const isActive = formData.priority === "low" /* LOW */ && level <= 1 || formData.priority === "medium" /* MEDIUM */ && level <= 2 || formData.priority === "high" /* HIGH */ && level <= 3;
                      const targetPriority = level === 1 ? "low" /* LOW */ : level === 2 ? "medium" /* MEDIUM */ : "high" /* HIGH */;
                      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                        "button",
                        {
                          onClick: () => updateField("priority", targetPriority),
                          className: cn(
                            "w-3 h-3 rounded-full transition-colors border-2",
                            isActive ? "bg-krushr-secondary border-krushr-secondary" : "bg-white border-gray-300 hover:border-krushr-secondary/50"
                          ),
                          title: `${level === 1 ? "Low" : level === 2 ? "Medium" : "High"} Priority`
                        },
                        level
                      );
                    }) })
                  ] }),
                  formData.contentType === "TASK" /* TASK */ && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm text-gray-500", children: "Column" }),
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
                      Select,
                      {
                        value: formData.status,
                        onValueChange: (value) => updateField("status", value),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectTrigger, { className: "h-7 w-full border border-gray-200 text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectValue, {}) }),
                          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(SelectContent, { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "TODO" /* TODO */, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-task-todo" }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "To Do" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "IN_PROGRESS" /* IN_PROGRESS */, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-task-progress" }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "In Progress" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "DONE" /* DONE */, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "w-2 h-2 rounded-full bg-krushr-task-done" }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Done" })
                            ] }) })
                          ] })
                        ]
                      }
                    )
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm text-gray-500", children: "Assign To" }),
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
                      Select,
                      {
                        value: formData.assigneeId || "",
                        onValueChange: (value) => updateField("assigneeId", value),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectTrigger, { className: "h-7 w-full border border-gray-200 text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectValue, { placeholder: "Unassigned" }) }),
                          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(SelectContent, { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AvatarFallback, { className: "text-xs bg-gray-200", children: "?" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Unassigned" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "user1", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AvatarFallback, { className: "text-xs bg-krushr-primary text-white", children: "ME" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Assign to me" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "user2", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AvatarFallback, { className: "text-xs bg-krushr-secondary text-white", children: "JS" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "John Smith" })
                            ] }) }),
                            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SelectItem, { value: "user3", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Avatar, { className: "w-4 h-4", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AvatarFallback, { className: "text-xs bg-krushr-success text-white", children: "AD" }) }),
                              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "Alice Davis" })
                            ] }) })
                          ] })
                        ]
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex-shrink-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-xs text-gray-500", children: "Start Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(Popover2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
                      Button,
                      {
                        variant: "outline",
                        className: "w-full h-7 justify-start text-left text-sm",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Calendar, { className: "mr-1 h-3 w-3" }),
                          formData.startDate ? format(formData.startDate, "MMM dd") : "Date"
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(PopoverContent2, { className: "w-auto p-0", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                      Calendar2,
                      {
                        mode: "single",
                        selected: formData.startDate,
                        onSelect: (date) => updateField("startDate", date),
                        initialFocus: true
                      }
                    ) })
                  ] })
                ] })
              ] }),
              !formData.allDay && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "flex-1" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex-shrink-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm text-gray-500", children: "Start Time" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    FloatingInput,
                    {
                      type: "time",
                      label: "Time",
                      value: formData.startTime || "",
                      onChange: (e) => updateField("startTime", e.target.value),
                      className: "h-7 text-sm"
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm", children: "All Day" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  Switch2,
                  {
                    checked: formData.allDay,
                    onCheckedChange: (checked) => updateField("allDay", checked)
                  }
                )
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("team"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "\u{1F465} Team & Assignment" }),
                  expandedSections.team ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.team && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "p-2 border-t border-gray-100", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "text-sm text-gray-500", children: "Team assignment features coming soon..." }) })
          ] }),
          formData.contentType === "TASK" /* TASK */ && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("checklist"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { children: [
                    "\u2713 Checklist (",
                    formData.checklist.length,
                    ")"
                  ] }),
                  expandedSections.checklist ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.checklist && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "p-2 border-t border-gray-100 space-y-2", children: [
              formData.checklist.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2 group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  "button",
                  {
                    type: "button",
                    onClick: () => toggleChecklistItem(item.id),
                    className: cn(
                      "w-4 h-4 rounded border flex items-center justify-center",
                      item.completed ? "bg-krushr-primary border-krushr-primary" : "border-gray-300 hover:border-krushr-primary"
                    ),
                    children: item.completed && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Check, { className: "w-3 h-3 text-white" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: cn(
                  "flex-1 text-sm",
                  item.completed && "line-through text-gray-400"
                ), children: item.text }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => removeChecklistItem(item.id),
                    className: "h-6 w-6 p-0 opacity-0 group-hover:opacity-100",
                    children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(X, { className: "h-3 w-3" })
                  }
                )
              ] }, item.id)),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "w-4 h-4 rounded border border-gray-300" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  "input",
                  {
                    type: "text",
                    placeholder: "Add item...",
                    value: newChecklistItem,
                    onChange: (e) => setNewChecklistItem(e.target.value),
                    onKeyDown: (e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        addChecklistItem();
                      }
                    },
                    className: "flex-1 text-sm bg-transparent border-none focus:outline-none placeholder:text-gray-400"
                  }
                )
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "border border-gray-100 rounded", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
              "button",
              {
                type: "button",
                onClick: () => toggleSection("workflow"),
                className: "flex items-center justify-between w-full p-2 text-sm font-medium text-left hover:bg-gray-50",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { children: "\u26A1 Workflow & Automation" }),
                  expandedSections.workflow ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronDown, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ChevronRight, { className: "h-3 w-3" })
                ]
              }
            ),
            expandedSections.workflow && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "p-2 border-t border-gray-100 space-y-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm", children: "Auto-assign to team" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  Switch2,
                  {
                    checked: formData.workflow.autoAssign,
                    onCheckedChange: (checked) => updateField("workflow", { ...formData.workflow, autoAssign: checked })
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Label2, { className: "text-sm", children: "Notify team members" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  Switch2,
                  {
                    checked: formData.workflow.notifyTeam,
                    onCheckedChange: (checked) => updateField("workflow", { ...formData.workflow, notifyTeam: checked })
                  }
                )
              ] })
            ] })
          ] })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center justify-between p-3 border-t bg-gray-50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-1", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Upload, { className: "h-3 w-3" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { className: "text-sm text-gray-500", children: [
          formData.attachments.length,
          " files"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
        onClose && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: onClose,
            className: "h-7 text-sm",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          Button,
          {
            onClick: handleSubmit,
            disabled: !formData.title.trim() || isLoading,
            size: "sm",
            className: "h-7 text-xs",
            children: isLoading ? "Creating..." : "Create"
          }
        )
      ] })
    ] })
  ] });
}

// src/components/kanban/KanbanQuickCreate.tsx
var import_react8 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
function KanbanQuickCreate({
  workspaceId,
  projectId,
  columnId,
  columnStatus,
  onTaskCreated,
  className
}) {
  const [isOpen, setIsOpen] = (0, import_react8.useState)(false);
  const contextualDefaults = {
    status: columnStatus,
    projectId,
    kanbanColumnId: columnId,
    priority: "medium" /* MEDIUM */
  };
  const handleSuccess = (data2, type) => {
    onTaskCreated?.(data2);
    setIsOpen(false);
  };
  const handleClose = () => {
    setIsOpen(false);
  };
  if (!isOpen) {
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
      Button,
      {
        variant: "ghost",
        className: cn(
          "w-full h-8 justify-start text-base text-krushr-secondary hover:text-krushr-secondary",
          "border-2 border-dashed border-krushr-secondary/30 hover:border-krushr-secondary/50 hover:bg-krushr-secondary/5",
          "rounded-lg mb-2 font-medium",
          className
        ),
        onClick: () => setIsOpen(true),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Plus, { className: "h-4 w-4 mr-2" }),
          "Add a card"
        ]
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Card, { className: cn("mb-2", className), children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
    UniversalInputFormCompact,
    {
      workspaceId,
      contentType: "TASK" /* TASK */,
      initialData: contextualDefaults,
      onSuccess: handleSuccess,
      onClose: handleClose,
      integrationMode: "inline",
      maxHeight: "300px",
      showHeader: false
    }
  ) });
}

// src/components/workspace/WorkspaceHeader.tsx
var import_react11 = __toESM(require_react(), 1);

// src/components/workspace/QuickCreatePanel.tsx
var import_react10 = __toESM(require_react(), 1);

// src/components/forms/SimpleCreatePanelEnhanced.tsx
var import_react9 = __toESM(require_react(), 1);
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var initialState2 = {
  title: "",
  description: "",
  priority: "medium" /* MEDIUM */,
  status: "TODO" /* TODO */,
  projectId: null,
  assigneeId: null,
  dueDate: null,
  startDate: null,
  storyPoints: null,
  businessValue: null,
  tags: [],
  estimatedHours: null,
  complexity: null,
  riskLevel: null,
  isRecurring: false,
  recurringPattern: null,
  epicId: null,
  dependsOnTaskIds: [],
  blockedByTaskIds: [],
  attachments: [],
  isPrivate: false,
  isArchived: false,
  isTemplate: false,
  autoAssign: false,
  watchers: [],
  customFields: {},
  isBlocked: false,
  blockedBy: null,
  blockedReason: null
};
function formReducer(state, action) {
  switch (action.type) {
    case "SET_FIELD":
      return { ...state, [action.field]: action.value };
    case "ADD_TAG":
      return { ...state, tags: [...state.tags, action.tag] };
    case "REMOVE_TAG":
      return { ...state, tags: state.tags.filter((t2) => t2 !== action.tag) };
    case "ADD_ATTACHMENT":
      return { ...state, attachments: [...state.attachments, action.attachment] };
    case "REMOVE_ATTACHMENT":
      return { ...state, attachments: state.attachments.filter((a) => a.id !== action.id) };
    case "UPDATE_ATTACHMENT":
      return {
        ...state,
        attachments: state.attachments.map(
          (a) => a.id === action.id ? { ...a, ...action.updates } : a
        )
      };
    case "ADD_WATCHER":
      return { ...state, watchers: [...state.watchers, action.userId] };
    case "REMOVE_WATCHER":
      return { ...state, watchers: state.watchers.filter((id2) => id2 !== action.userId) };
    case "ADD_DEPENDENCY":
      return { ...state, dependsOnTaskIds: [...state.dependsOnTaskIds, action.taskId] };
    case "REMOVE_DEPENDENCY":
      return { ...state, dependsOnTaskIds: state.dependsOnTaskIds.filter((id2) => id2 !== action.taskId) };
    case "RESET_FORM":
      return initialState2;
    default:
      return state;
  }
}
var PrioritySelector = import_react9.default.memo(({
  value,
  onChange
}) => {
  const [hoveredPriority, setHoveredPriority] = (0, import_react9.useState)(null);
  const priorities = [
    { value: "low" /* LOW */, color: "bg-krushr-priority-low", label: "Low Priority" },
    { value: "medium" /* MEDIUM */, color: "bg-krushr-priority-medium", label: "Medium Priority" },
    { value: "high" /* HIGH */, color: "bg-krushr-priority-high", label: "High Priority" }
  ];
  const getPriorityIndex = (priority) => {
    return priorities.findIndex((p2) => p2.value === priority);
  };
  const currentIndex = getPriorityIndex(value);
  const hoveredIndex = hoveredPriority ? getPriorityIndex(hoveredPriority) : -1;
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center gap-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "text-xs font-medium text-krushr-gray-dark", children: "Priority:" }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "flex gap-1", onMouseLeave: () => setHoveredPriority(null), children: priorities.map((priority, index) => {
      const isActive = index <= currentIndex;
      const isHovered = hoveredIndex >= 0 && index <= hoveredIndex;
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        "button",
        {
          type: "button",
          className: cn(
            "w-3 h-3 rounded-full transition-all duration-200 shadow-sm",
            isActive && !hoveredPriority ? priority.color : "bg-krushr-gray-300",
            isHovered ? priority.color : "",
            "hover:scale-125"
          ),
          title: priority.label,
          onMouseEnter: () => setHoveredPriority(priority.value),
          onClick: () => onChange(priority.value)
        },
        priority.value
      );
    }) }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "text-xs text-krushr-gray ml-1", children: hoveredPriority || value })
  ] });
});
PrioritySelector.displayName = "PrioritySelector";
var StatusColumnButton = import_react9.default.memo(({
  status,
  label,
  icon: Icon,
  isSelected,
  onClick,
  color
}) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
  "button",
  {
    type: "button",
    onClick,
    className: cn(
      "flex-1 px-4 py-3 rounded-lg border-2 transition-all duration-200",
      "flex flex-col items-center gap-2",
      isSelected ? `${color} border-transparent shadow-elevation-sm text-white` : "bg-white text-gray-600 border-gray-200 hover:border-gray-300"
    ),
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Icon, { className: "w-5 h-5" }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "text-sm font-medium", children: label })
    ]
  }
));
StatusColumnButton.displayName = "StatusColumnButton";
function SimpleCreatePanel({
  workspaceId,
  kanbanColumnId,
  open,
  onClose,
  onSuccess
}) {
  const [state, dispatch] = (0, import_react9.useReducer)(formReducer, initialState2);
  const [isCreating, setIsCreating] = (0, import_react9.useState)(false);
  const [showNewTag, setShowNewTag] = (0, import_react9.useState)(false);
  const [newTag, setNewTag] = (0, import_react9.useState)("");
  const [showCalendar, setShowCalendar] = (0, import_react9.useState)(false);
  const fileInputRef = (0, import_react9.useRef)(null);
  const workspaceMembersQuery = trpc.user.listWorkspaceMembers.useQuery(
    { workspaceId },
    {
      enabled: open && !!workspaceId,
      staleTime: 5 * 60 * 1e3,
      cacheTime: 10 * 60 * 1e3
    }
  );
  const workspaceMembers = workspaceMembersQuery.data || [];
  const projectsQuery = trpc.project.listByWorkspace.useQuery(
    { workspaceId },
    {
      enabled: open && !!workspaceId,
      staleTime: 5 * 60 * 1e3
    }
  );
  const projects = projectsQuery.data || [];
  const epics = [];
  const existingTags = [
    { id: "1", name: "urgent" },
    { id: "2", name: "bug" },
    { id: "3", name: "feature" },
    { id: "4", name: "enhancement" },
    { id: "5", name: "documentation" },
    { id: "6", name: "frontend" },
    { id: "7", name: "backend" },
    { id: "8", name: "design" },
    { id: "9", name: "testing" },
    { id: "10", name: "devops" }
  ];
  const createTaskMutation = trpc.task.createEnhanced.useMutation({
    onSuccess: () => {
      dispatch({ type: "RESET_FORM" });
      onSuccess?.();
      onClose();
    }
  });
  const handleSetField = (0, import_react9.useCallback)((field, value) => {
    dispatch({ type: "SET_FIELD", field, value });
  }, []);
  const handleFileSelect = (0, import_react9.useCallback)(async (files) => {
    const fileArray = Array.from(files);
    for (const file of fileArray) {
      if (file.size > 15 * 1024 * 1024) {
        continue;
      }
      const tempId = `temp-${Date.now()}-${Math.random()}`;
      dispatch({
        type: "ADD_ATTACHMENT",
        attachment: {
          id: tempId,
          name: file.name,
          size: file.size,
          type: file.type,
          progress: 0,
          file
        }
      });
      try {
        const formData = new FormData();
        formData.append("file", file);
        for (let i = 0; i <= 100; i += 10) {
          await new Promise((resolve) => setTimeout(resolve, 100));
          dispatch({
            type: "UPDATE_ATTACHMENT",
            id: tempId,
            updates: { progress: i }
          });
        }
        dispatch({
          type: "UPDATE_ATTACHMENT",
          id: tempId,
          updates: {
            progress: 100,
            url: URL.createObjectURL(file)
          }
        });
      } catch (error) {
        dispatch({
          type: "UPDATE_ATTACHMENT",
          id: tempId,
          updates: {
            error: "Upload failed",
            progress: void 0
          }
        });
      }
    }
  }, []);
  const handleSubmit = (0, import_react9.useCallback)(async () => {
    if (!state.title.trim() || !state.projectId) return;
    setIsCreating(true);
    try {
      await createTaskMutation.mutateAsync({
        title: state.title.trim(),
        description: state.description,
        priority: state.priority,
        status: state.status,
        projectId: state.projectId,
        workspaceId,
        kanbanColumnId,
        assigneeId: state.assigneeId,
        dueDate: state.dueDate?.toISOString(),
        startDate: state.startDate?.toISOString(),
        storyPoints: state.storyPoints,
        businessValue: state.businessValue,
        tags: state.tags,
        estimatedHours: state.estimatedHours,
        complexity: state.complexity,
        riskLevel: state.riskLevel,
        isRecurring: state.isRecurring,
        recurringPattern: state.recurringPattern,
        epicId: state.epicId,
        watchers: state.watchers,
        customFields: state.customFields,
        isTemplate: state.isTemplate,
        isPrivate: state.isPrivate,
        isBlocked: state.isBlocked,
        blockedBy: state.blockedBy,
        blockedReason: state.blockedReason
      });
    } finally {
      setIsCreating(false);
    }
  }, [state, workspaceId, kanbanColumnId, createTaskMutation]);
  const handleCreateAndNew = (0, import_react9.useCallback)(async () => {
    await handleSubmit();
    dispatch({ type: "RESET_FORM" });
  }, [handleSubmit]);
  const quickDates = (0, import_react9.useMemo)(() => {
    const today = /* @__PURE__ */ new Date();
    const tomorrow = addDays(today, 1);
    const nextWeek = addWeeks(today, 1);
    return { today, tomorrow, nextWeek };
  }, []);
  (0, import_react9.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (!open) return;
      if ((e.metaKey || e.ctrlKey) && e.key === "Enter") {
        e.preventDefault();
        handleSubmit();
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "s") {
        e.preventDefault();
        handleCreateAndNew();
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [open, handleSubmit, handleCreateAndNew]);
  const canSubmit = state.title.trim() && state.projectId && !isCreating;
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Sheet, { open, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(SheetContent, { className: "w-full sm:max-w-3xl overflow-y-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(SheetHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(SheetTitle, { className: "text-2xl font-brand", children: "Create Task" }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        PrioritySelector,
        {
          value: state.priority,
          onChange: (priority) => handleSetField("priority", priority)
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "mt-6 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        FloatingInput,
        {
          label: "Task Title",
          value: state.title,
          onChange: (e) => handleSetField("title", e.target.value),
          className: "text-xl font-semibold",
          autoFocus: true,
          required: true
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
          "Project ",
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "text-red-500", children: "*" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "grid grid-cols-2 sm:grid-cols-3 gap-2", children: projects.map((project) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "button",
          {
            onClick: () => handleSetField("projectId", project.id),
            className: cn(
              "px-4 py-3 text-sm font-medium rounded-lg border-2 transition-all",
              "flex items-center gap-2",
              state.projectId === project.id ? "bg-krushr-primary text-white border-krushr-primary shadow-elevation-sm" : "bg-white text-gray-700 border-gray-200 hover:border-krushr-primary"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Briefcase, { className: "w-4 h-4" }),
              project.name
            ]
          },
          project.id
        )) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Status" }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "grid grid-cols-4 gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            StatusColumnButton,
            {
              status: "TODO" /* TODO */,
              label: "To Do",
              icon: Circle,
              isSelected: state.status === "TODO" /* TODO */,
              onClick: () => handleSetField("status", "TODO" /* TODO */),
              color: "bg-gray-500"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            StatusColumnButton,
            {
              status: "IN_PROGRESS" /* IN_PROGRESS */,
              label: "In Progress",
              icon: Timer,
              isSelected: state.status === "IN_PROGRESS" /* IN_PROGRESS */,
              onClick: () => handleSetField("status", "IN_PROGRESS" /* IN_PROGRESS */),
              color: "bg-blue-500"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            StatusColumnButton,
            {
              status: "REVIEW" /* REVIEW */,
              label: "Review",
              icon: CircleAlert,
              isSelected: state.status === "REVIEW" /* REVIEW */,
              onClick: () => handleSetField("status", "REVIEW" /* REVIEW */),
              color: "bg-purple-500"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            StatusColumnButton,
            {
              status: "DONE" /* DONE */,
              label: "Done",
              icon: CircleCheck,
              isSelected: state.status === "DONE" /* DONE */,
              onClick: () => handleSetField("status", "DONE" /* DONE */),
              color: "bg-green-500"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Assignee" }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "grid grid-cols-6 sm:grid-cols-8 gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("assigneeId", null),
              className: cn(
                "aspect-square rounded-lg border-2 transition-all",
                "flex items-center justify-center",
                !state.assigneeId ? "bg-gray-100 border-gray-300 shadow-elevation-sm" : "bg-white border-gray-200 hover:border-krushr-primary"
              ),
              children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(User, { className: "w-5 h-5 text-gray-400" })
            }
          ),
          workspaceMembers.map((member) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("assigneeId", member.id),
              className: cn(
                "aspect-square rounded-lg border-2 transition-all overflow-hidden",
                state.assigneeId === member.id ? "border-krushr-primary ring-2 ring-krushr-primary ring-offset-2" : "border-gray-200 hover:border-krushr-primary"
              ),
              title: member.name,
              children: member.avatar ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("img", { src: member.avatar, alt: member.name, className: "w-full h-full object-cover" }) : /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "w-full h-full bg-krushr-primary text-white flex items-center justify-center text-sm font-medium", children: member.name?.charAt(0).toUpperCase() })
            },
            member.id
          ))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Due Date" }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "button",
              {
                onClick: () => handleSetField("dueDate", quickDates.today),
                className: cn(
                  "px-4 py-2 text-sm font-medium rounded-full border-2 transition-all",
                  state.dueDate?.toDateString() === quickDates.today.toDateString() ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-primary"
                ),
                children: "Today"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "button",
              {
                onClick: () => handleSetField("dueDate", quickDates.tomorrow),
                className: cn(
                  "px-4 py-2 text-sm font-medium rounded-full border-2 transition-all",
                  state.dueDate?.toDateString() === quickDates.tomorrow.toDateString() ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-primary"
                ),
                children: "Tomorrow"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "button",
              {
                onClick: () => handleSetField("dueDate", quickDates.nextWeek),
                className: cn(
                  "px-4 py-2 text-sm font-medium rounded-full border-2 transition-all",
                  state.dueDate?.toDateString() === quickDates.nextWeek.toDateString() ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-primary"
                ),
                children: "Next Week"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(Popover2, { open: showCalendar, onOpenChange: setShowCalendar, children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
              Button,
              {
                variant: "outline",
                className: cn(
                  "w-full justify-start text-left font-normal",
                  !state.dueDate && "text-muted-foreground"
                ),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Calendar, { className: "mr-2 h-4 w-4" }),
                  state.dueDate ? format(state.dueDate, "PPP") : "Pick a date"
                ]
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(PopoverContent2, { className: "w-auto p-0", align: "start", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              Calendar2,
              {
                mode: "single",
                selected: state.dueDate || void 0,
                onSelect: (date) => {
                  handleSetField("dueDate", date);
                  setShowCalendar(false);
                },
                initialFocus: true
              }
            ) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Target, { className: "inline w-4 h-4 mr-1" }),
            "Story Points"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "flex gap-1", children: [1, 2, 3, 5, 8, 13, 21].map((points) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("storyPoints", state.storyPoints === points ? null : points),
              className: cn(
                "flex-1 py-2 text-sm font-medium rounded border-2 transition-all",
                state.storyPoints === points ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-primary"
              ),
              children: points
            },
            points
          )) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DollarSign, { className: "inline w-4 h-4 mr-1" }),
            "Business Value"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "flex gap-1", children: [1, 2, 3, 4, 5].map((value) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("businessValue", state.businessValue === value ? null : value),
              className: cn(
                "flex-1 py-2 text-sm font-medium rounded border-2 transition-all",
                state.businessValue === value ? "bg-green-600 text-white border-green-600" : "bg-white text-gray-600 border-gray-200 hover:border-green-600"
              ),
              children: value
            },
            value
          )) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Tag, { className: "inline w-4 h-4 mr-1" }),
          "Tags"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex flex-wrap gap-2", children: [
          existingTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => {
                if (state.tags.includes(tag.name)) {
                  dispatch({ type: "REMOVE_TAG", tag: tag.name });
                } else {
                  dispatch({ type: "ADD_TAG", tag: tag.name });
                }
              },
              className: cn(
                "px-3 py-1.5 text-sm rounded-full border-2 transition-all",
                state.tags.includes(tag.name) ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-primary"
              ),
              children: tag.name
            },
            tag.id
          )),
          !showNewTag ? /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
            "button",
            {
              onClick: () => setShowNewTag(true),
              className: "px-3 py-1.5 text-sm rounded-full border-2 border-dashed border-gray-300 text-gray-500 hover:border-krushr-primary hover:text-krushr-primary transition-all",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Plus, { className: "inline w-3 h-3 mr-1" }),
                "New Tag"
              ]
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center gap-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "input",
              {
                type: "text",
                value: newTag,
                onChange: (e) => setNewTag(e.target.value),
                onKeyPress: (e) => {
                  if (e.key === "Enter" && newTag.trim()) {
                    dispatch({ type: "ADD_TAG", tag: newTag.trim() });
                    setNewTag("");
                    setShowNewTag(false);
                  }
                },
                placeholder: "Tag name",
                className: "px-3 py-1.5 text-sm border-2 border-krushr-primary rounded-full focus:outline-none",
                autoFocus: true
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "button",
              {
                onClick: () => {
                  if (newTag.trim()) {
                    dispatch({ type: "ADD_TAG", tag: newTag.trim() });
                    setNewTag("");
                  }
                  setShowNewTag(false);
                },
                className: "p-1.5 bg-krushr-primary text-white rounded-full",
                children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Plus, { className: "w-3 h-3" })
              }
            )
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "grid grid-cols-2 sm:grid-cols-4 gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-xs font-medium text-gray-700 mb-1 block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Clock, { className: "inline w-3 h-3 mr-1" }),
            "Hours"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "input",
            {
              type: "number",
              value: state.estimatedHours || "",
              onChange: (e) => handleSetField("estimatedHours", e.target.value ? Number(e.target.value) : null),
              className: "w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm hover:shadow-md transition-shadow focus:shadow-md focus:border-krushr-primary",
              placeholder: "0",
              min: "0",
              step: "0.5"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-xs font-medium text-gray-700 mb-1 block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ChartColumn, { className: "inline w-3 h-3 mr-1" }),
            "Complexity"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
            "select",
            {
              value: state.complexity || "",
              onChange: (e) => handleSetField("complexity", e.target.value || null),
              className: "w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm hover:shadow-md transition-shadow focus:shadow-md focus:border-krushr-primary",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "", children: "None" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "SIMPLE" /* SIMPLE */, children: "Simple" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "MEDIUM" /* MEDIUM */, children: "Medium" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "COMPLEX" /* COMPLEX */, children: "Complex" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-xs font-medium text-gray-700 mb-1 block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(TriangleAlert, { className: "inline w-3 h-3 mr-1" }),
            "Risk"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
            "select",
            {
              value: state.riskLevel || "",
              onChange: (e) => handleSetField("riskLevel", e.target.value || null),
              className: "w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm hover:shadow-md transition-shadow focus:shadow-md focus:border-krushr-primary",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "", children: "None" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "LOW" /* LOW */, children: "Low" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "MEDIUM" /* MEDIUM */, children: "Medium" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("option", { value: "HIGH" /* HIGH */, children: "High" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-xs font-medium text-gray-700 mb-1 block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Repeat, { className: "inline w-3 h-3 mr-1" }),
            "Recurring"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("isRecurring", !state.isRecurring),
              className: cn(
                "w-full px-3 py-2 rounded-lg border-2 transition-all",
                "flex items-center justify-center gap-2 text-sm",
                state.isRecurring ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200"
              ),
              children: state.isRecurring ? "Yes" : "No"
            }
          )
        ] })
      ] }),
      epics.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(GitBranch, { className: "inline w-4 h-4 mr-1" }),
          "Epic"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "grid grid-cols-1 gap-2 max-h-48 overflow-y-auto", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("epicId", null),
              className: cn(
                "w-full p-3 rounded-lg border-2 text-left transition-all",
                !state.epicId ? "border-krushr-primary bg-krushr-primary-50" : "border-gray-200 hover:border-krushr-primary"
              ),
              children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "text-sm text-gray-500", children: "No epic" })
            }
          ),
          epics.map((epic) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => handleSetField("epicId", epic.id),
              className: cn(
                "w-full p-3 rounded-lg border-2 text-left transition-all",
                state.epicId === epic.id ? "border-krushr-primary bg-krushr-primary-50" : "border-gray-200 hover:border-krushr-primary"
              ),
              children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "font-medium text-sm", children: epic.title })
            },
            epic.id
          ))
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "grid grid-cols-2 sm:grid-cols-4 gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "button",
          {
            onClick: () => handleSetField("isPrivate", !state.isPrivate),
            className: cn(
              "px-4 py-3 rounded-lg border-2 transition-all",
              "flex items-center justify-center gap-2 text-sm font-medium",
              state.isPrivate ? "bg-gray-100 text-gray-800 border-gray-300" : "bg-white text-gray-600 border-gray-200 hover:border-gray-300"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Lock, { className: "w-4 h-4" }),
              "Private"
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "button",
          {
            onClick: () => handleSetField("isArchived", !state.isArchived),
            className: cn(
              "px-4 py-3 rounded-lg border-2 transition-all",
              "flex items-center justify-center gap-2 text-sm font-medium",
              state.isArchived ? "bg-gray-100 text-gray-800 border-gray-300" : "bg-white text-gray-600 border-gray-200 hover:border-gray-300"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Archive, { className: "w-4 h-4" }),
              "Archived"
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "button",
          {
            onClick: () => handleSetField("autoAssign", !state.autoAssign),
            className: cn(
              "px-4 py-3 rounded-lg border-2 transition-all",
              "flex items-center justify-center gap-2 text-sm font-medium",
              state.autoAssign ? "bg-krushr-primary text-white border-krushr-primary" : "bg-white text-gray-600 border-gray-200 hover:border-krushr-primary"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Zap, { className: "w-4 h-4" }),
              "Auto-Assign"
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "button",
          {
            onClick: () => handleSetField("isBlocked", !state.isBlocked),
            className: cn(
              "px-4 py-3 rounded-lg border-2 transition-all",
              "flex items-center justify-center gap-2 text-sm font-medium",
              state.isBlocked ? "bg-red-100 text-red-800 border-red-300" : "bg-white text-gray-600 border-gray-200 hover:border-red-300"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Ban, { className: "w-4 h-4" }),
              "Blocked"
            ]
          }
        )
      ] }),
      state.isBlocked && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Blocked Reason" }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "input",
          {
            type: "text",
            value: state.blockedReason || "",
            onChange: (e) => handleSetField("blockedReason", e.target.value),
            placeholder: "Why is this task blocked?",
            className: "w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm hover:shadow-md transition-shadow focus:shadow-md focus:border-red-400"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Eye, { className: "inline w-4 h-4 mr-1" }),
          "Watchers (",
          state.watchers.length,
          ")"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "grid grid-cols-6 sm:grid-cols-8 gap-2", children: workspaceMembers.map((member) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "button",
          {
            onClick: () => {
              if (state.watchers.includes(member.id)) {
                dispatch({ type: "REMOVE_WATCHER", userId: member.id });
              } else {
                dispatch({ type: "ADD_WATCHER", userId: member.id });
              }
            },
            className: cn(
              "aspect-square rounded-lg border-2 transition-all overflow-hidden",
              state.watchers.includes(member.id) ? "border-krushr-info ring-2 ring-krushr-info ring-offset-2" : "border-gray-200 hover:border-krushr-info opacity-50"
            ),
            title: member.name,
            children: member.avatar ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("img", { src: member.avatar, alt: member.name, className: "w-full h-full object-cover" }) : /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "w-full h-full bg-krushr-info text-white flex items-center justify-center text-xs font-medium", children: member.name?.charAt(0).toUpperCase() })
          },
          member.id
        )) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(FileText, { className: "inline w-4 h-4 mr-1" }),
          "Description"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          RichTextEditor,
          {
            value: state.description,
            onChange: (value) => handleSetField("description", value),
            placeholder: "Add task details, requirements, or notes...",
            className: "min-h-[150px] border-2 border-gray-200 rounded-lg"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Upload, { className: "inline w-4 h-4 mr-1" }),
          "Attachments"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
          "div",
          {
            onClick: () => fileInputRef.current?.click(),
            className: "border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-krushr-primary transition-colors cursor-pointer",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Upload, { className: "w-8 h-8 mx-auto text-gray-400 mb-2" }),
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "text-sm text-gray-600", children: "Drop files here or click to browse" }),
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "text-xs text-gray-400 mt-1", children: "Maximum file size: 15MB" })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "input",
          {
            ref: fileInputRef,
            type: "file",
            multiple: true,
            className: "hidden",
            onChange: (e) => e.target.files && handleFileSelect(e.target.files)
          }
        ),
        state.attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "mt-3 space-y-2", children: state.attachments.map((attachment) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center gap-3 p-3 bg-gray-50 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(FileText, { className: "w-4 h-4 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "text-sm font-medium", children: attachment.name }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center gap-2 text-xs text-gray-500", children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { children: [
                (attachment.size / 1024).toFixed(1),
                " KB"
              ] }),
              attachment.progress !== void 0 && attachment.progress < 100 && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(import_jsx_runtime21.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { children: "\u2022" }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { children: [
                  attachment.progress,
                  "%"
                ] })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: () => dispatch({ type: "REMOVE_ATTACHMENT", id: attachment.id }),
              className: "p-1.5 hover:bg-gray-200 rounded transition-colors",
              children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(X, { className: "w-4 h-4 text-gray-500" })
            }
          )
        ] }, attachment.id)) })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "sticky bottom-0 left-0 right-0 bg-white border-t-2 border-gray-200 px-6 py-4 -mx-6 -mb-6 mt-8", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex justify-between items-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "text-sm text-gray-500", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { className: "inline-flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "font-medium", children: "\u2318\u21B5" }),
          " to create"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "mx-2", children: "\u2022" }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { className: "inline-flex items-center gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "font-medium", children: "\u2318S" }),
          " to create & new"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          Button,
          {
            variant: "outline",
            onClick: onClose,
            disabled: isCreating,
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          Button,
          {
            onClick: handleCreateAndNew,
            disabled: !canSubmit,
            variant: "outline",
            children: "Create & New"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          Button,
          {
            onClick: handleSubmit,
            disabled: !canSubmit,
            className: "min-w-[120px]",
            children: isCreating ? /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(import_jsx_runtime21.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(LoaderCircle, { className: "w-4 h-4 animate-spin mr-2" }),
              "Creating..."
            ] }) : "Create Task"
          }
        )
      ] })
    ] }) })
  ] }) });
}

// src/components/workspace/QuickCreatePanel.tsx
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
function QuickCreatePanel({
  workspaceId,
  isOpen = false,
  onToggle,
  position = "floating"
}) {
  const [isMinimized, setIsMinimized] = (0, import_react10.useState)(false);
  const [isDragging, setIsDragging] = (0, import_react10.useState)(false);
  const [panelPosition, setPanelPosition] = (0, import_react10.useState)({ x: 20, y: 20 });
  const handleSuccess = () => {
    onToggle?.();
  };
  const handleClose = () => {
    onToggle?.();
  };
  if (!isOpen) {
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      Button,
      {
        onClick: onToggle,
        className: cn(
          "fixed bottom-6 right-6 h-12 w-12 rounded-full shadow-lg z-50",
          "bg-krushr-coral-red hover:bg-krushr-coral-red/90 text-white",
          "flex items-center justify-center"
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Plus, { className: "h-6 w-6" })
      }
    );
  }
  if (position === "modal") {
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      SimpleCreatePanel,
      {
        workspaceId,
        open: isOpen,
        onClose: handleClose,
        onSuccess: handleSuccess
      }
    );
  }
  if (position === "floating") {
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
      Card,
      {
        className: cn(
          "fixed z-50 shadow-xl border-2",
          "w-80 max-h-96",
          isDragging && "cursor-move"
        ),
        style: {
          left: panelPosition.x,
          top: panelPosition.y
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "div",
            {
              className: "flex items-center justify-between p-2 bg-gray-50 border-b cursor-move",
              onMouseDown: (e) => {
                setIsDragging(true);
                const startX = e.clientX - panelPosition.x;
                const startY = e.clientY - panelPosition.y;
                const handleMouseMove = (e2) => {
                  setPanelPosition({
                    x: e2.clientX - startX,
                    y: e2.clientY - startY
                  });
                };
                const handleMouseUp = () => {
                  setIsDragging(false);
                  document.removeEventListener("mousemove", handleMouseMove);
                  document.removeEventListener("mouseup", handleMouseUp);
                };
                document.addEventListener("mousemove", handleMouseMove);
                document.addEventListener("mouseup", handleMouseUp);
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "text-sm font-medium", children: "Quick Create" }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center gap-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: () => setIsMinimized(!isMinimized),
                      className: "h-6 w-6 p-0",
                      children: isMinimized ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Maximize, { className: "h-3 w-3" }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Minimize, { className: "h-3 w-3" })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: handleClose,
                      className: "h-6 w-6 p-0",
                      children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(X, { className: "h-3 w-3" })
                    }
                  )
                ] })
              ]
            }
          ),
          !isMinimized && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "p-3 text-center text-sm text-gray-500", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { children: "Click to open task creator" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Button, { onClick: () => {
              setIsMinimized(true);
              onToggle?.();
            }, className: "mt-2", size: "sm", children: "Create Task" })
          ] })
        ]
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
    SimpleCreatePanel,
    {
      workspaceId,
      open: isOpen,
      onClose: handleClose,
      onSuccess: handleSuccess
    }
  );
}

// src/components/workspace/WorkspaceHeader.tsx
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
function WorkspaceHeader({
  workspaceName,
  workspaceId,
  currentPanel,
  onPanelChange
}) {
  const [isQuickCreateOpen, setIsQuickCreateOpen] = (0, import_react11.useState)(false);
  const { user } = useAuthStore();
  const handleQuickCreateToggle = () => {
    setIsQuickCreateOpen(!isQuickCreateOpen);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("header", { className: "h-14 border-b bg-white px-4 flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "flex items-center gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h1", { className: "text-lg font-semibold text-gray-900", children: workspaceName }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
          Button,
          {
            onClick: handleQuickCreateToggle,
            className: "h-8 gap-2 bg-krushr-coral-red hover:bg-krushr-coral-red/90 text-white",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Plus, { className: "h-4 w-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("span", { className: "hidden sm:inline", children: "Create" })
            ]
          }
        ),
        currentPanel && /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(Badge, { variant: "secondary", className: "text-xs", children: [
          currentPanel === "kanban" && "\u{1F4CB}",
          currentPanel === "calendar" && "\u{1F4C5}",
          currentPanel === "notes" && "\u{1F4DD}",
          currentPanel === "chat" && "\u{1F4AC}",
          currentPanel?.charAt(0).toUpperCase() + currentPanel?.slice(1)
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "flex-1 max-w-md mx-8", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          FloatingInput,
          {
            label: "Search workspace",
            className: "pl-10 h-8 bg-gray-50 border-gray-200"
          }
        )
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "flex items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0 relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Bell, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Badge, { className: "absolute -top-1 -right-1 h-4 w-4 p-0 text-xs", children: "3" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Settings, { className: "h-4 w-4" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(Avatar, { className: "h-8 w-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AvatarImage, { src: user?.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AvatarFallback, { className: "text-xs", children: user?.name?.charAt(0) || "U" })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
      QuickCreatePanel,
      {
        workspaceId,
        isOpen: isQuickCreateOpen,
        onToggle: handleQuickCreateToggle,
        position: "modal"
      }
    )
  ] });
}

// src/pages/Test.tsx
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
function Test() {
  const [email, setEmail] = (0, import_react12.useState)("alice@krushr.dev");
  const [password, setPassword] = (0, import_react12.useState)("password123");
  const [name, setName] = (0, import_react12.useState)("Test User");
  const [isRegistering, setIsRegistering] = (0, import_react12.useState)(false);
  const { user, isAuthenticated, setUser, setToken, logout } = useAuthStore();
  const navigate = useNavigate();
  const loginMutation = trpc.auth.login.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      console.log("\u2705 Login successful:", data2);
    },
    onError: (error) => {
      console.error("\u274C Login failed:", error.message);
    }
  });
  const registerMutation = trpc.auth.register.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      console.log("\u2705 Registration successful:", data2);
    },
    onError: (error) => {
      console.error("\u274C Registration failed:", error.message);
    }
  });
  const meQuery = trpc.auth.me.useQuery(void 0, {
    enabled: isAuthenticated
  });
  const handleLogin = () => {
    console.log("\u{1F510} Attempting login with:", { email, password });
    loginMutation.mutate({ email, password });
  };
  const handleRegister = () => {
    console.log("\u{1F4DD} Attempting registration with:", { email, password, name });
    registerMutation.mutate({ email, password, name });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "p-8 max-w-md mx-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h1", { className: "text-2xl font-bold text-gray-900 mb-6", children: "\u{1F680} Krushr tRPC Test" }),
    isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "p-4 bg-green-50 border border-green-200 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-lg font-semibold text-green-800", children: "\u2705 Authenticated!" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("p", { className: "text-green-700", children: [
          "Welcome, ",
          user?.name,
          "!"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-sm text-green-600", children: user?.email })
      ] }),
      meQuery.data && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "p-4 bg-blue-50 border border-blue-200 rounded-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "font-semibold text-blue-800", children: "Profile from API:" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("pre", { className: "text-sm text-blue-700 mt-2", children: JSON.stringify(meQuery.data, null, 2) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        "button",
        {
          onClick: logout,
          className: "w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700",
          children: "Logout"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-8 pt-8 border-t border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-xl font-semibold text-gray-800 mb-4", children: "\u{1F3A8} Universal Input Form Demo" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(UniversalFormDemo, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-8 pt-8 border-t border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { className: "text-xl font-semibold text-gray-800 mb-4", children: "\u{1F527} Workspace Panel Integration" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-lg font-medium mb-3", children: "Compact Panel Form" }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "border rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              UniversalInputFormCompact,
              {
                workspaceId: "demo-workspace",
                contentType: "TASK" /* TASK */,
                maxHeight: "400px",
                integrationMode: "panel"
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-lg font-medium mb-3", children: "Kanban Quick Create" }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "space-y-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "bg-gray-50 p-3 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "text-sm font-medium text-gray-600 mb-2", children: "To Do Column" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
                  KanbanQuickCreate,
                  {
                    workspaceId: "demo-workspace",
                    columnId: "todo",
                    columnStatus: "TODO" /* TODO */
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "bg-gray-50 p-3 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "text-sm font-medium text-gray-600 mb-2", children: "In Progress Column" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
                  KanbanQuickCreate,
                  {
                    workspaceId: "demo-workspace",
                    columnId: "in-progress",
                    columnStatus: "IN_PROGRESS" /* IN_PROGRESS */
                  }
                )
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h3", { className: "text-lg font-medium mb-3", children: "Workspace Header Integration" }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "border rounded-lg overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            WorkspaceHeader,
            {
              workspaceName: "Demo Workspace",
              workspaceId: "demo-workspace",
              currentPanel: "kanban"
            }
          ) })
        ] })
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Email" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          FloatingInput,
          {
            id: "email",
            type: "email",
            label: "Email",
            value: email,
            onChange: (e) => setEmail(e.target.value),
            autoComplete: "email"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Password" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          FloatingInput,
          {
            id: "password",
            type: "password",
            label: "Password",
            value: password,
            onChange: (e) => setPassword(e.target.value),
            autoComplete: "current-password"
          }
        )
      ] }),
      isRegistering && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Name" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          FloatingInput,
          {
            id: "name",
            type: "text",
            label: "Name",
            value: name,
            onChange: (e) => setName(e.target.value),
            autoComplete: "name"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          "button",
          {
            onClick: isRegistering ? handleRegister : handleLogin,
            disabled: loginMutation.isPending || registerMutation.isPending,
            className: "w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50",
            children: loginMutation.isPending || registerMutation.isPending ? "Loading..." : isRegistering ? "Register" : "Login"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          "button",
          {
            onClick: () => setIsRegistering(!isRegistering),
            className: "w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200",
            children: isRegistering ? "Switch to Login" : "Switch to Register"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "text-sm text-gray-600", children: [
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { children: "Demo credentials:" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { children: "Email: alice@krushr.dev" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { children: "Password: password123" })
      ] })
    ] })
  ] });
}

// src/pages/Login.tsx
var import_react13 = __toESM(require_react(), 1);

// src/components/ui/alert.tsx
var React36 = __toESM(require_react(), 1);
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);
var Alert = React36.forwardRef(({ className, variant, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
  "div",
  {
    ref,
    role: "alert",
    className: cn(alertVariants({ variant }), className),
    ...props
  }
));
Alert.displayName = "Alert";
var AlertTitle = React36.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
  "h5",
  {
    ref,
    className: cn("mb-1 font-medium leading-none tracking-tight", className),
    ...props
  }
));
AlertTitle.displayName = "AlertTitle";
var AlertDescription = React36.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
  "div",
  {
    ref,
    className: cn("text-sm [&_p]:leading-relaxed", className),
    ...props
  }
));
AlertDescription.displayName = "AlertDescription";

// src/components/common/KrushrLogo.tsx
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
function KrushrLogo({
  size = "md",
  className,
  showText = true
}) {
  const sizeClasses = {
    sm: "h-6",
    md: "h-8",
    lg: "h-12",
    xl: "h-16"
  };
  const textSizeClasses = {
    sm: "text-sm",
    md: "text-lg",
    lg: "text-xl",
    xl: "text-2xl"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: cn("flex items-center gap-2", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
      "img",
      {
        src: "/krushr.svg",
        alt: "Krushr",
        className: cn("object-contain", sizeClasses[size])
      }
    ),
    showText && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: cn("font-bold text-krushr-primary", textSizeClasses[size]) })
  ] });
}

// src/pages/Login.tsx
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
function Login() {
  const navigate = useNavigate();
  const { setUser, setToken } = useAuthStore();
  const [email, setEmail] = (0, import_react13.useState)("alice@krushr.dev");
  const [password, setPassword] = (0, import_react13.useState)("password123");
  const [error, setError] = (0, import_react13.useState)("");
  const loginMutation = trpc.auth.login.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      navigate("/board");
    },
    onError: (error2) => {
      setError(error2.message || "Invalid email or password");
    }
  });
  const handleSubmit = (e) => {
    e.preventDefault();
    setError("");
    if (!email || !password) {
      setError("Please fill in all fields");
      return;
    }
    loginMutation.mutate({ email, password });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-blue-100 py-12 px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "max-w-md w-full space-y-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(KrushrLogo, { size: "xl" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-muted-foreground", children: "Welcome back! Please sign in to continue." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(CardHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardTitle, { children: "Sign in to your account" }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardDescription, { children: "Enter your email and password to access your workspace" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
        error && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(Alert, { variant: "destructive", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CircleAlert, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(AlertDescription, { children: error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Mail, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            FloatingInput,
            {
              id: "email",
              type: "email",
              label: "Email address",
              value: email,
              onChange: (e) => setEmail(e.target.value),
              className: "pl-10",
              autoComplete: "email",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Lock, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            FloatingInput,
            {
              id: "password",
              type: "password",
              label: "Password",
              value: password,
              onChange: (e) => setPassword(e.target.value),
              className: "pl-10",
              autoComplete: "current-password",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("label", { className: "flex items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
              "input",
              {
                type: "checkbox",
                className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "ml-2 text-sm text-gray-600", children: "Remember me" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            Link2,
            {
              to: "/forgot-password",
              className: "text-sm text-blue-600 hover:text-blue-500",
              children: "Forgot password?"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
          Button,
          {
            type: "submit",
            className: "w-full",
            style: { backgroundColor: "#143197", color: "white" },
            disabled: loginMutation.isLoading,
            children: loginMutation.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(import_jsx_runtime27.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(LoaderCircle, { className: "mr-2 h-4 w-4 animate-spin" }),
              "Signing in..."
            ] }) : "Sign in"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "absolute inset-0 flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "w-full border-t" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "relative flex justify-center text-xs uppercase", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "bg-white px-2 text-gray-500", children: "New to Krushr?" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Link2, { to: "/register", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
          Button,
          {
            type: "button",
            variant: "outline",
            className: "w-full",
            disabled: loginMutation.isLoading,
            children: "Create Free Account"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "text-center text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "text-gray-600", children: "Don't have an account? " }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
            Link2,
            {
              to: "/register",
              className: "font-medium text-blue-600 hover:text-blue-500",
              children: "Sign up"
            }
          )
        ] })
      ] }) })
    ] })
  ] }) });
}

// src/pages/Register.tsx
var import_react14 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
function Register() {
  const navigate = useNavigate();
  const { setUser, setToken } = useAuthStore();
  const [formData, setFormData] = (0, import_react14.useState)({
    name: "",
    email: "",
    password: "",
    confirmPassword: ""
  });
  const [error, setError] = (0, import_react14.useState)("");
  const registerMutation = trpc.auth.register.useMutation({
    onSuccess: (data2) => {
      setUser(data2.user);
      setToken(data2.token);
      navigate("/board");
    },
    onError: (error2) => {
      setError(error2.message || "Registration failed");
    }
  });
  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    setError("");
    if (!formData.name || !formData.email || !formData.password) {
      setError("Please fill in all fields");
      return;
    }
    if (formData.password.length < 6) {
      setError("Password must be at least 6 characters");
      return;
    }
    if (formData.password !== formData.confirmPassword) {
      setError("Passwords do not match");
      return;
    }
    registerMutation.mutate({
      name: formData.name,
      email: formData.email,
      password: formData.password
    });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-red-100 py-12 px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "max-w-md w-full space-y-8", children: [
    /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(KrushrLogo, { size: "xl" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-muted-foreground", children: "Create your account to get started" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(CardHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CardTitle, { children: "Sign up for an account" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CardDescription, { children: "Join Krushr to manage your projects and collaborate with your team" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
        error && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(Alert, { variant: "destructive", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CircleAlert, { className: "h-4 w-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AlertDescription, { children: error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(User, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            FloatingInput,
            {
              id: "name",
              name: "name",
              type: "text",
              label: "Full name",
              value: formData.name,
              onChange: handleChange,
              className: "pl-10",
              autoComplete: "name",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Mail, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            FloatingInput,
            {
              id: "email",
              name: "email",
              type: "email",
              label: "Email address",
              value: formData.email,
              onChange: handleChange,
              className: "pl-10",
              autoComplete: "email",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Lock, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
              FloatingInput,
              {
                id: "password",
                name: "password",
                type: "password",
                label: "Password",
                value: formData.password,
                onChange: handleChange,
                className: "pl-10",
                autoComplete: "new-password",
                required: true
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-xs text-gray-500", children: "Must be at least 6 characters long" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Lock, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            FloatingInput,
            {
              id: "confirmPassword",
              name: "confirmPassword",
              type: "password",
              label: "Confirm password",
              value: formData.confirmPassword,
              onChange: handleChange,
              className: "pl-10",
              autoComplete: "new-password",
              required: true
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("label", { className: "flex items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            "input",
            {
              type: "checkbox",
              className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-0.5",
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("span", { className: "ml-2 text-sm text-gray-600", children: [
            "I agree to the",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Link2, { to: "/terms", className: "text-primary hover:text-primary/80", children: "Terms of Service" }),
            " ",
            "and",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Link2, { to: "/privacy", className: "text-primary hover:text-primary/80", children: "Privacy Policy" })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          Button,
          {
            type: "submit",
            className: "w-full bg-primary hover:bg-primary/90",
            disabled: registerMutation.isLoading,
            children: registerMutation.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(LoaderCircle, { className: "mr-2 h-4 w-4 animate-spin" }),
              "Creating account..."
            ] }) : "Create account"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "text-center text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "text-gray-600", children: "Already have an account? " }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            Link2,
            {
              to: "/login",
              className: "font-medium text-blue-600 hover:text-blue-500",
              children: "Sign in"
            }
          )
        ] })
      ] }) })
    ] })
  ] }) });
}

// src/pages/Home.tsx
var import_react31 = __toESM(require_react(), 1);

// src/components/layout/ResponsiveLayout.tsx
var import_react21 = __toESM(require_react(), 1);

// src/components/project/Sidebar.tsx
var import_react15 = __toESM(require_react(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
function Sidebar({ currentPage, onPageChange }) {
  const [isCollapsed, setIsCollapsed] = (0, import_react15.useState)(false);
  const [isBrandkitOpen, setIsBrandkitOpen] = (0, import_react15.useState)(false);
  const { user, logout } = useAuthStore();
  const navigate = useNavigate();
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const activeWorkspace = workspaces2[0];
  const { data: workspaceMembers = [], isLoading: membersLoading, error: membersError } = trpc.user.listWorkspaceMembers.useQuery(
    { workspaceId: activeWorkspace?.id || "" },
    {
      enabled: !!activeWorkspace?.id,
      staleTime: 5 * 60 * 1e3,
      // Cache for 5 minutes
      retry: 3,
      refetchOnWindowFocus: false
    }
  );
  const displayMembers = workspaceMembers.length > 0 ? workspaceMembers : [];
  const shouldShowMembersList = activeWorkspace && !membersError;
  const navigation = [
    { name: "Dashboard", icon: House, href: "/home", key: "home" },
    { name: "Workspace", icon: PanelsTopLeft, href: "/workspace", key: "workspace" },
    { name: "Board", icon: FolderOpen, href: "/board", key: "board" },
    { name: "Calendar", icon: Calendar, href: "/calendar", key: "calendar" },
    { name: "Chat", icon: MessageCircle, href: "/chat", key: "chat" },
    { name: "Notes", icon: StickyNote, href: "/notes", key: "notes" },
    { name: "Teams", icon: Users, href: "/teams", key: "teams" },
    { name: "Projects", icon: FolderOpen, href: "/projects", key: "projects" },
    { name: "Contacts", icon: User, href: "/contacts", key: "contacts" }
  ];
  const brandkitItems = [
    { name: "Brandkit", icon: Palette, href: "/brandkit.html", key: "brandkit" },
    { name: "Brandkit 2", icon: Palette, href: "/brandkit-2.html", key: "brandkit2" },
    { name: "Landing Design System", icon: BookOpen, href: "/design-system-landing.html", key: "landingkit" }
  ];
  const getInitials = (name) => {
    return name.split(" ").map((n) => n[0]).join("").toUpperCase().substring(0, 2);
  };
  const handleLogout = () => {
    logout();
    navigate("/login");
  };
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: `${isCollapsed ? "w-16" : "w-48"} bg-sidebar border-r border-sidebar-border flex flex-col h-full transition-all duration-300`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "p-3 border-b border-sidebar-border flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(KrushrLogo, { size: isCollapsed ? "sm" : "md", showText: !isCollapsed }) }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        "button",
        {
          onClick: () => setIsCollapsed(!isCollapsed),
          className: "p-1 hover:bg-sidebar-accent rounded transition-colors ml-2",
          title: isCollapsed ? "Expand sidebar" : "Collapse sidebar",
          children: isCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Menu, { className: "w-4 h-4 text-sidebar-foreground" }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ChevronLeft, { className: "w-4 h-4 text-sidebar-foreground" })
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "p-3 border-b border-sidebar-border flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("nav", { className: "space-y-0.5", children: [
        navigation.map((item) => {
          const isActive = currentPage === item.key;
          return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
            "button",
            {
              onClick: (e) => {
                e.preventDefault();
                onPageChange(item.key);
              },
              className: `w-full flex items-center ${isCollapsed ? "justify-center px-2" : "px-3"} py-1.5 text-sm font-light rounded-lg transition-colors ${isActive ? "bg-krushr-primary text-white font-medium" : "text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground"}`,
              title: isCollapsed ? item.name : void 0,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(item.icon, { className: `w-4 h-4 ${isCollapsed ? "" : "mr-2"} ${isActive ? "" : "text-sidebar-icon"}` }),
                !isCollapsed && item.name
              ]
            },
            item.key
          );
        }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
            "button",
            {
              onClick: () => setIsBrandkitOpen(!isBrandkitOpen),
              className: `w-full flex items-center ${isCollapsed ? "justify-center px-2" : "px-3"} py-1.5 text-sm font-light rounded-lg transition-colors text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground`,
              title: isCollapsed ? "Design System" : void 0,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Palette, { className: `w-4 h-4 ${isCollapsed ? "" : "mr-2"} text-sidebar-icon` }),
                !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(import_jsx_runtime29.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: "flex-1 text-left", children: "Design System" }),
                  isBrandkitOpen ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ChevronDown, { className: "w-4 h-4 text-sidebar-icon" }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ChevronRight, { className: "w-4 h-4 text-sidebar-icon" })
                ] })
              ]
            }
          ),
          isBrandkitOpen && !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "ml-6 mt-0.5 space-y-0.5", children: brandkitItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
            "a",
            {
              href: item.href,
              target: "_blank",
              rel: "noopener noreferrer",
              className: "w-full flex items-center px-3 py-1.5 text-sm font-light rounded-lg transition-colors text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(item.icon, { className: "w-4 h-4 mr-2 text-sidebar-icon" }),
                item.name
              ]
            },
            item.key
          )) })
        ] })
      ] }) }),
      shouldShowMembersList && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: `${isCollapsed ? "p-2" : "p-3"} border-t border-sidebar-border flex-shrink-0 overflow-hidden`, children: [
        !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("h3", { className: "text-xs font-semibold text-sidebar-foreground/70 uppercase tracking-wide", children: [
            "Team ",
            membersLoading ? "..." : `(${displayMembers.length})`
          ] }),
          membersLoading && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "w-3 h-3 border border-sidebar-foreground/30 border-t-sidebar-foreground rounded-full animate-spin" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: `space-y-1 ${isCollapsed ? "flex flex-col items-center" : ""} max-h-[200px] overflow-y-auto`, children: [
          membersLoading && displayMembers.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: `flex ${isCollapsed ? "justify-center" : "items-center space-x-2"} p-1`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "w-7 h-7 rounded-full bg-sidebar-accent animate-pulse" }),
            !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "h-2.5 bg-sidebar-accent rounded animate-pulse mb-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "h-2 bg-sidebar-accent/60 rounded w-3/4 animate-pulse" })
            ] })
          ] }),
          displayMembers.slice(0, isCollapsed ? 6 : 5).map((member) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
            "div",
            {
              className: `group transition-colors cursor-pointer ${isCollapsed ? "flex justify-center" : "flex items-center space-x-2 p-1 rounded-lg hover:bg-sidebar-accent"}`,
              title: isCollapsed ? `${member.name} (${member.email})` : void 0,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "relative flex-shrink-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "w-7 h-7 rounded-full bg-gradient-to-br from-krushr-primary to-krushr-primary/80 flex items-center justify-center text-white text-xs font-medium group-hover:scale-105 transition-transform", children: getInitials(member.name || "U") }),
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "absolute -bottom-0.5 -right-0.5 w-2.5 h-2.5 bg-emerald-400 border-2 border-sidebar rounded-full" })
                ] }),
                !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-xs font-medium text-sidebar-foreground truncate leading-tight", children: member.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-xs text-sidebar-foreground/60 truncate leading-tight", children: member.email.split("@")[0] })
                ] })
              ]
            },
            member.id
          )),
          displayMembers.length > (isCollapsed ? 6 : 5) && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: `${isCollapsed ? "flex justify-center" : "text-center pt-1"}`, children: isCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "w-7 h-7 rounded-full bg-sidebar-accent flex items-center justify-center text-sidebar-foreground text-xs font-medium", title: `+${displayMembers.length - 6} more members`, children: [
            "+",
            displayMembers.length - 6
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("button", { className: "text-xs text-sidebar-foreground/60 hover:text-sidebar-foreground transition-colors", children: [
            "+",
            displayMembers.length - 5,
            " more members"
          ] }) }),
          !membersLoading && displayMembers.length === 0 && !isCollapsed && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "text-xs text-sidebar-foreground/60 text-center py-1", children: "No team members yet" })
        ] })
      ] }),
      !shouldShowMembersList && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "flex-1" })
    ] }),
    user && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "p-3 border-t border-sidebar-border flex-shrink-0", children: !isCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center space-x-2 p-1.5 rounded-lg hover:bg-sidebar-accent transition-colors", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(Avatar, { className: "w-7 h-7", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AvatarImage, { src: user.avatar }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AvatarFallback, { className: "bg-gradient-to-br from-pink-400 to-red-500 text-white text-xs font-medium", children: getInitials(user.name || "U") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex-1 min-w-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-xs font-medium text-sidebar-foreground truncate leading-tight", children: user.name }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("p", { className: "text-xs text-sidebar-foreground/60 truncate leading-tight", children: user.email })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex space-x-0.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "button",
          {
            onClick: () => navigate("/settings"),
            className: "p-1 hover:bg-sidebar-accent rounded transition-colors",
            title: "Settings",
            children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Settings, { className: "w-3.5 h-3.5 text-sidebar-foreground/60" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "button",
          {
            onClick: handleLogout,
            className: "p-1 hover:bg-red-100 hover:text-red-600 rounded transition-colors",
            title: "Logout",
            children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(LogOut, { className: "w-3.5 h-3.5 text-sidebar-foreground/60" })
          }
        )
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex flex-col items-center space-y-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(Avatar, { className: "w-7 h-7", title: user.name, children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AvatarImage, { src: user.avatar }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AvatarFallback, { className: "bg-gradient-to-br from-pink-400 to-red-500 text-white text-xs font-medium", children: getInitials(user.name || "U") })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex flex-col space-y-0.5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "button",
          {
            onClick: () => navigate("/settings"),
            className: "p-1 hover:bg-sidebar-accent rounded transition-colors",
            title: "Settings",
            children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Settings, { className: "w-3.5 h-3.5 text-sidebar-foreground/60" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "button",
          {
            onClick: handleLogout,
            className: "p-1 hover:bg-red-100 hover:text-red-600 rounded transition-colors",
            title: "Logout",
            children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(LogOut, { className: "w-3.5 h-3.5 text-sidebar-foreground/60" })
          }
        )
      ] })
    ] }) })
  ] });
}

// src/components/layout/MobileNavigation.tsx
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
function MobileNavigation({
  currentPage,
  onPageChange,
  className
}) {
  const { notifications: notifications2 } = useAppStore();
  const unreadCount = notifications2.filter((n) => !n.is_read).length;
  const navigationItems = [
    {
      key: "home",
      label: "Home",
      icon: House,
      href: "/",
      badge: null
    },
    {
      key: "board",
      label: "Board",
      icon: ChartColumn,
      href: "/board",
      badge: null
    },
    {
      key: "calendar",
      label: "Calendar",
      icon: Calendar,
      href: "/calendar",
      badge: null
    },
    {
      key: "chat",
      label: "Chat",
      icon: MessageCircle,
      href: "/chat",
      badge: unreadCount > 0 ? unreadCount : null
    },
    {
      key: "notes",
      label: "Notes",
      icon: StickyNote,
      href: "/notes",
      badge: null
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("nav", { className: cn(
    "fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-50 md:hidden",
    className
  ), children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "grid grid-cols-5 h-16", children: navigationItems.map((item) => {
    const IconComponent = item.icon;
    const isActive = currentPage === item.key;
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
      Button,
      {
        variant: "ghost",
        className: cn(
          "h-full rounded-none flex flex-col items-center justify-center space-y-1 relative",
          isActive && "text-blue-600 bg-blue-50"
        ),
        onClick: () => onPageChange(item.key),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(IconComponent, { className: cn(
              "w-5 h-5",
              isActive ? "text-blue-600" : "text-gray-900/90"
            ) }),
            item.badge && /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Badge, { className: "absolute -top-2 -right-2 h-4 w-4 p-0 flex items-center justify-center text-xs bg-red-500", children: item.badge > 9 ? "9+" : item.badge })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: cn(
            "text-xs font-light",
            isActive ? "text-blue-600" : "text-gray-900/90"
          ), children: item.label })
        ]
      },
      item.key
    );
  }) }) });
}

// src/components/notifications/NotificationBell.tsx
var import_react17 = __toESM(require_react(), 1);

// src/components/notifications/NotificationCenter.tsx
var import_react16 = __toESM(require_react(), 1);

// src/components/ui/tabs.tsx
var React40 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-tabs/dist/index.mjs
var React39 = __toESM(require_react(), 1);
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var TABS_NAME = "Tabs";
var [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
  createRovingFocusGroupScope
]);
var useRovingFocusGroupScope = createRovingFocusGroupScope();
var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
var Tabs = React39.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeTabs,
      value: valueProp,
      onValueChange,
      defaultValue,
      orientation = "horizontal",
      dir,
      activationMode = "automatic",
      ...tabsProps
    } = props;
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue ?? "",
      caller: TABS_NAME
    });
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      TabsProvider,
      {
        scope: __scopeTabs,
        baseId: useId(),
        value,
        onValueChange: setValue,
        orientation,
        dir: direction,
        activationMode,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          Primitive.div,
          {
            dir: direction,
            "data-orientation": orientation,
            ...tabsProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
Tabs.displayName = TABS_NAME;
var TAB_LIST_NAME = "TabsList";
var TabsList = React39.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Root3,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation: context.orientation,
        dir: context.dir,
        loop,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          Primitive.div,
          {
            role: "tablist",
            "aria-orientation": context.orientation,
            ...listProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
TabsList.displayName = TAB_LIST_NAME;
var TRIGGER_NAME3 = "TabsTrigger";
var TabsTrigger = React39.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = useTabsContext(TRIGGER_NAME3, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        active: isSelected,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          Primitive.button,
          {
            type: "button",
            role: "tab",
            "aria-selected": isSelected,
            "aria-controls": contentId,
            "data-state": isSelected ? "active" : "inactive",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            id: triggerId,
            ...triggerProps,
            ref: forwardedRef,
            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onValueChange(value);
              } else {
                event.preventDefault();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if ([" ", "Enter"].includes(event.key)) context.onValueChange(value);
            }),
            onFocus: composeEventHandlers(props.onFocus, () => {
              const isAutomaticActivation = context.activationMode !== "manual";
              if (!isSelected && !disabled && isAutomaticActivation) {
                context.onValueChange(value);
              }
            })
          }
        )
      }
    );
  }
);
TabsTrigger.displayName = TRIGGER_NAME3;
var CONTENT_NAME2 = "TabsContent";
var TabsContent = React39.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
    const context = useTabsContext(CONTENT_NAME2, __scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    const isMountAnimationPreventedRef = React39.useRef(isSelected);
    React39.useEffect(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Presence, { present: forceMount || isSelected, children: ({ present }) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Primitive.div,
      {
        "data-state": isSelected ? "active" : "inactive",
        "data-orientation": context.orientation,
        role: "tabpanel",
        "aria-labelledby": triggerId,
        hidden: !present,
        id: contentId,
        tabIndex: 0,
        ...contentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
        },
        children: present && children
      }
    ) });
  }
);
TabsContent.displayName = CONTENT_NAME2;
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
var Root24 = Tabs;
var List2 = TabsList;
var Trigger3 = TabsTrigger;
var Content3 = TabsContent;

// src/components/ui/tabs.tsx
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var Tabs2 = Root24;
var TabsList2 = React40.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
  List2,
  {
    ref,
    className: cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    ),
    ...props
  }
));
TabsList2.displayName = List2.displayName;
var TabsTrigger2 = React40.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
  Trigger3,
  {
    ref,
    className: cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    ),
    ...props
  }
));
TabsTrigger2.displayName = Trigger3.displayName;
var TabsContent2 = React40.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
  Content3,
  {
    ref,
    className: cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    ),
    ...props
  }
));
TabsContent2.displayName = Content3.displayName;

// src/components/notifications/NotificationCenter.tsx
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
function NotificationCenter({ className }) {
  const [activeTab, setActiveTab] = (0, import_react16.useState)("all");
  const [searchTerm, setSearchTerm] = (0, import_react16.useState)("");
  const { notifications: notifications2, markNotificationRead } = useAppStore();
  const filteredNotifications = notifications2.filter((notification) => {
    const matchesSearch = !searchTerm || notification.title.toLowerCase().includes(searchTerm.toLowerCase()) || notification.message.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesTab = activeTab === "all" || activeTab === "unread" && !notification.is_read || activeTab === "mentions" && notification.type.includes("mention") || activeTab === "tasks" && notification.type.includes("task");
    return matchesSearch && matchesTab;
  });
  const unreadCount = notifications2.filter((n) => !n.is_read).length;
  const getNotificationIcon = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CircleCheck, { className: "w-4 h-4 text-blue-600" });
      case "comment_added":
      case "mention":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(MessageCircle, { className: "w-4 h-4 text-purple-600" });
      case "meeting_scheduled":
      case "deadline_reminder":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Calendar, { className: "w-4 h-4 text-green-600" });
      case "team_invitation":
      case "user_invited":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(UserPlus, { className: "w-4 h-4 text-indigo-600" });
      case "file_shared":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(FileText, { className: "w-4 h-4 text-orange-600" });
      case "system_alert":
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TriangleAlert, { className: "w-4 h-4 text-red-600" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Bell, { className: "w-4 h-4 text-gray-600" });
    }
  };
  const getNotificationColor = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return "border-l-blue-500 bg-blue-50";
      case "comment_added":
      case "mention":
        return "border-l-purple-500 bg-purple-50";
      case "meeting_scheduled":
      case "deadline_reminder":
        return "border-l-green-500 bg-green-50";
      case "team_invitation":
      case "user_invited":
        return "border-l-indigo-500 bg-indigo-50";
      case "file_shared":
        return "border-l-orange-500 bg-orange-50";
      case "system_alert":
        return "border-l-red-500 bg-red-50";
      default:
        return "border-l-gray-300 bg-white";
    }
  };
  const handleMarkAsRead = (notificationId) => {
    markNotificationRead(notificationId);
  };
  const handleMarkAllAsRead = () => {
    notifications2.filter((n) => !n.is_read).forEach((notification) => markNotificationRead(notification.id));
  };
  const formatNotificationType = (type) => {
    return type.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase());
  };
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(CardHeader, { className: "flex-shrink-0 pb-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Notifications" }),
          unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Badge, { variant: "secondary", className: "bg-red-100 text-red-700", children: [
            unreadCount,
            " new"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Funnel, { className: "w-4 h-4" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Settings, { className: "w-4 h-4" }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "input",
          {
            type: "text",
            placeholder: "Search notifications...",
            value: searchTerm,
            onChange: (e) => setSearchTerm(e.target.value),
            className: "w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg shadow-sm hover:shadow-md transition-shadow focus:shadow-md focus:border-krushr-primary text-sm"
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-shrink-0 px-6", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Tabs2, { value: activeTab, onValueChange: setActiveTab, children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(TabsList2, { className: "grid w-full grid-cols-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TabsTrigger2, { value: "all", className: "text-xs", children: "All" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(TabsTrigger2, { value: "unread", className: "text-xs", children: [
          "Unread",
          unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Badge, { variant: "secondary", className: "ml-1 h-4 w-4 p-0 text-xs", children: unreadCount > 9 ? "9+" : unreadCount })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TabsTrigger2, { value: "mentions", className: "text-xs", children: "Mentions" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TabsTrigger2, { value: "tasks", className: "text-xs", children: "Tasks" })
      ] }),
      unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex items-center justify-between mt-3", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: handleMarkAllAsRead,
          className: "text-blue-600 hover:text-blue-700",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CheckCheck, { className: "w-4 h-4 mr-2" }),
            "Mark all as read"
          ]
        }
      ) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ScrollArea, { className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "p-6 pt-4 space-y-3", children: filteredNotifications.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "text-center py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Bell, { className: "w-12 h-12 mx-auto text-gray-400 mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: searchTerm ? "No matching notifications" : "No notifications" }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "text-gray-500", children: searchTerm ? "Try adjusting your search terms" : "You're all caught up! New notifications will appear here." })
    ] }) : filteredNotifications.map((notification) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      "div",
      {
        className: cn(
          "group p-4 rounded-lg border-l-4 transition-all duration-200 hover:shadow-sm cursor-pointer",
          notification.is_read ? "bg-white" : getNotificationColor(notification.type),
          !notification.is_read && "shadow-sm"
        ),
        onClick: () => !notification.is_read && handleMarkAsRead(notification.id),
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-start space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-shrink-0 mt-1", children: getNotificationIcon(notification.type) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex-1 min-w-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-start justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex-1 pr-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h4", { className: "font-medium text-gray-900 text-sm", children: notification.title }),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: notification.message }),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-3 mt-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-xs text-gray-500", children: formatDateTime(notification.created_at) }),
                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Badge, { variant: "outline", className: "text-xs", children: formatNotificationType(notification.type) }),
                  notification.sender && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Avatar, { className: "w-4 h-4", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AvatarImage, { src: notification.sender.avatar }),
                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AvatarFallback, { className: "text-xs bg-gray-100", children: notification.sender.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-xs text-gray-500", children: notification.sender.name })
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity", children: [
                !notification.is_read && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0",
                    onClick: (e) => {
                      e.stopPropagation();
                      handleMarkAsRead(notification.id);
                    },
                    title: "Mark as read",
                    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Check, { className: "w-3 h-3" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0",
                    title: "Open",
                    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ExternalLink, { className: "w-3 h-3" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0",
                    title: "Dismiss",
                    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(X, { className: "w-3 h-3" })
                  }
                )
              ] })
            ] }),
            !notification.is_read && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "absolute left-2 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-blue-600 rounded-full" })
          ] })
        ] })
      },
      notification.id
    )) }) })
  ] });
}

// src/components/notifications/NotificationBell.tsx
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
function NotificationBell({
  className,
  variant = "desktop"
}) {
  const [isOpen, setIsOpen] = (0, import_react17.useState)(false);
  const { notifications: notifications2 } = useAppStore();
  const unreadCount = notifications2.filter((n) => !n.is_read).length;
  return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(Popover2, { open: isOpen, onOpenChange: setIsOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
      Button,
      {
        variant: "ghost",
        size: variant === "mobile" ? "sm" : "default",
        className: cn(
          "relative",
          variant === "mobile" && "p-2",
          className
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Bell, { className: cn(
            variant === "mobile" ? "w-5 h-5" : "w-5 h-5"
          ) }),
          unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Badge, { className: cn(
            "absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-red-500",
            variant === "mobile" && "h-4 w-4"
          ), children: unreadCount > 9 ? "9+" : unreadCount })
        ]
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
      PopoverContent2,
      {
        className: "w-96 p-0",
        align: "end",
        side: variant === "mobile" ? "bottom" : "bottom",
        sideOffset: 8,
        children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(NotificationCenter, { className: "border-0 shadow-none" })
      }
    )
  ] });
}

// src/components/notifications/ToastContainer.tsx
var import_react19 = __toESM(require_react(), 1);

// src/components/notifications/NotificationToast.tsx
var import_react18 = __toESM(require_react(), 1);
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
function NotificationToast({
  notification,
  onClose,
  onAction,
  className
}) {
  const [isVisible, setIsVisible] = (0, import_react18.useState)(false);
  const [isClosing, setIsClosing] = (0, import_react18.useState)(false);
  (0, import_react18.useEffect)(() => {
    const timer = setTimeout(() => setIsVisible(true), 100);
    return () => clearTimeout(timer);
  }, []);
  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      onClose();
    }, 200);
  };
  const getNotificationIcon = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(CircleCheck, { className: "w-5 h-5 text-blue-600" });
      case "comment_added":
      case "mention":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(MessageCircle, { className: "w-5 h-5 text-purple-600" });
      case "meeting_scheduled":
      case "deadline_reminder":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Calendar, { className: "w-5 h-5 text-green-600" });
      case "team_invitation":
      case "user_invited":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(UserPlus, { className: "w-5 h-5 text-indigo-600" });
      case "file_shared":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(FileText, { className: "w-5 h-5 text-orange-600" });
      case "system_alert":
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TriangleAlert, { className: "w-5 h-5 text-red-600" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Bell, { className: "w-5 h-5 text-gray-600" });
    }
  };
  const getNotificationColor = (type) => {
    switch (type) {
      case "task_assigned":
      case "task_completed":
      case "task_updated":
        return "border-l-blue-500 bg-blue-50";
      case "comment_added":
      case "mention":
        return "border-l-purple-500 bg-purple-50";
      case "meeting_scheduled":
      case "deadline_reminder":
        return "border-l-green-500 bg-green-50";
      case "team_invitation":
      case "user_invited":
        return "border-l-indigo-500 bg-indigo-50";
      case "file_shared":
        return "border-l-orange-500 bg-orange-50";
      case "system_alert":
        return "border-l-red-500 bg-red-50";
      default:
        return "border-l-gray-300 bg-white";
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Card, { className: cn(
    "fixed top-4 right-4 w-96 max-w-[calc(100vw-2rem)] shadow-lg border-l-4 z-50 transition-all duration-200",
    getNotificationColor(notification.type),
    isVisible && !isClosing ? "translate-x-0 opacity-100" : "translate-x-full opacity-0",
    className
  ), children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-start space-x-3", children: [
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "flex-shrink-0 mt-0.5", children: getNotificationIcon(notification.type) }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex-1 min-w-0", children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-start justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex-1 pr-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h4", { className: "font-medium text-gray-900 text-sm", children: notification.title }),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("p", { className: "text-sm text-gray-600 mt-1 line-clamp-2", children: notification.message }),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "flex items-center justify-between mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "text-xs text-gray-500", children: formatDateTime(notification.created_at) }),
            notification.sender && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center space-x-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(Avatar, { className: "w-4 h-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(AvatarImage, { src: notification.sender.avatar }),
                /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(AvatarFallback, { className: "text-xs bg-gray-100", children: notification.sender.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "text-xs text-gray-500", children: notification.sender.name })
            ] })
          ] }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-6 w-6 p-0 text-gray-400 hover:text-gray-600",
            onClick: handleClose,
            children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(X, { className: "w-4 h-4" })
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex items-center space-x-2 mt-3", children: [
        onAction && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
          Button,
          {
            variant: "outline",
            size: "sm",
            className: "h-7 text-xs",
            onClick: onAction,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ExternalLink, { className: "w-3 h-3 mr-1" }),
              "View"
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-7 text-xs text-gray-500 hover:text-gray-700",
            onClick: handleClose,
            children: "Dismiss"
          }
        )
      ] })
    ] })
  ] }) }) });
}

// src/components/notifications/ToastContainer.tsx
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
function ToastContainer() {
  const [toasts, setToasts] = (0, import_react19.useState)([]);
  const { notifications: notifications2, markNotificationRead } = useAppStore();
  (0, import_react19.useEffect)(() => {
    const newNotifications = notifications2.filter((n) => !n.is_read).filter((n) => !toasts.some((t2) => t2.id === n.id)).slice(0, 3);
    if (newNotifications.length > 0) {
      const newToasts = newNotifications.map((notification) => ({
        ...notification,
        toastId: `toast-${notification.id}-${Date.now()}`,
        timestamp: Date.now()
      }));
      setToasts((prev) => [...prev, ...newToasts]);
    }
  }, [notifications2, toasts]);
  (0, import_react19.useEffect)(() => {
    toasts.forEach((toast2) => {
      const timer = setTimeout(() => {
        handleDismissToast(toast2.toastId);
      }, 5e3);
      return () => clearTimeout(timer);
    });
  }, [toasts]);
  const handleDismissToast = (toastId) => {
    setToasts((prev) => prev.filter((t2) => t2.toastId !== toastId));
  };
  const handleToastAction = (notification) => {
    markNotificationRead(notification.id);
    handleDismissToast(notification.toastId);
    console.log("Navigate to:", notification.type, notification.id);
  };
  const handleToastClose = (notification) => {
    markNotificationRead(notification.id);
    handleDismissToast(notification.toastId);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "fixed top-0 right-0 z-50 p-4 space-y-3 pointer-events-none", children: toasts.map((toast2, index) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
    "div",
    {
      className: "pointer-events-auto",
      style: {
        transform: `translateY(${index * 10}px)`,
        zIndex: 1e3 - index
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
        NotificationToast,
        {
          notification: toast2,
          onClose: () => handleToastClose(toast2),
          onAction: () => handleToastAction(toast2)
        }
      )
    },
    toast2.toastId
  )) });
}

// src/components/common/GlobalSearch.tsx
var import_react20 = __toESM(require_react(), 1);

// ../node_modules/cmdk/dist/chunk-NZJY6EH4.mjs
var U = 1;
var Y = 0.9;
var H = 0.8;
var J = 0.17;
var p = 0.1;
var u = 0.999;
var $ = 0.9999;
var k = 0.99;
var m = /[\\\/_+.#"@\[\(\{&]/;
var B = /[\\\/_+.#"@\[\(\{&]/g;
var K = /[\s-]/;
var X2 = /[\s-]/g;
function G(_, C, h, P2, A, f, O) {
  if (f === C.length) return A === _.length ? U : k;
  var T2 = `${A},${f}`;
  if (O[T2] !== void 0) return O[T2];
  for (var L2 = P2.charAt(f), c = h.indexOf(L2, A), S = 0, E, N2, R, M; c >= 0; ) E = G(_, C, h, P2, c + 1, f + 1, O), E > S && (c === A ? E *= U : m.test(_.charAt(c - 1)) ? (E *= H, R = _.slice(A, c - 1).match(B), R && A > 0 && (E *= Math.pow(u, R.length))) : K.test(_.charAt(c - 1)) ? (E *= Y, M = _.slice(A, c - 1).match(X2), M && A > 0 && (E *= Math.pow(u, M.length))) : (E *= J, A > 0 && (E *= Math.pow(u, c - A))), _.charAt(c) !== C.charAt(f) && (E *= $)), (E < p && h.charAt(c - 1) === P2.charAt(f + 1) || P2.charAt(f + 1) === P2.charAt(f) && h.charAt(c - 1) !== P2.charAt(f)) && (N2 = G(_, C, h, P2, c + 1, f + 2, O), N2 * p > E && (E = N2 * p)), E > S && (S = E), c = h.indexOf(L2, c + 1);
  return O[T2] = S, S;
}
function D(_) {
  return _.toLowerCase().replace(X2, " ");
}
function W(_, C, h) {
  return _ = h && h.length > 0 ? `${_ + " " + h.join(" ")}` : _, G(_, C, D(_), D(C), 0, 0, {});
}

// ../node_modules/cmdk/dist/index.mjs
var t = __toESM(require_react(), 1);
var N = '[cmdk-group=""]';
var Y2 = '[cmdk-group-items=""]';
var be = '[cmdk-group-heading=""]';
var le = '[cmdk-item=""]';
var ce = `${le}:not([aria-disabled="true"])`;
var Z = "cmdk-item-select";
var T = "data-value";
var Re = (r, o, n) => W(r, o, n);
var ue = t.createContext(void 0);
var K2 = () => t.useContext(ue);
var de = t.createContext(void 0);
var ee = () => t.useContext(de);
var fe = t.createContext(void 0);
var me = t.forwardRef((r, o) => {
  let n = L(() => {
    var e, a;
    return { search: "", value: (a = (e = r.value) != null ? e : r.defaultValue) != null ? a : "", selectedItemId: void 0, filtered: { count: 0, items: /* @__PURE__ */ new Map(), groups: /* @__PURE__ */ new Set() } };
  }), u2 = L(() => /* @__PURE__ */ new Set()), c = L(() => /* @__PURE__ */ new Map()), d = L(() => /* @__PURE__ */ new Map()), f = L(() => /* @__PURE__ */ new Set()), p2 = pe(r), { label: b, children: m2, value: R, onValueChange: x, filter: C, shouldFilter: S, loop: A, disablePointerSelection: ge = false, vimBindings: j = true, ...O } = r, $2 = useId(), q = useId(), _ = useId(), I = t.useRef(null), v = ke();
  k2(() => {
    if (R !== void 0) {
      let e = R.trim();
      n.current.value = e, E.emit();
    }
  }, [R]), k2(() => {
    v(6, ne);
  }, []);
  let E = t.useMemo(() => ({ subscribe: (e) => (f.current.add(e), () => f.current.delete(e)), snapshot: () => n.current, setState: (e, a, s) => {
    var i, l, g, y;
    if (!Object.is(n.current[e], a)) {
      if (n.current[e] = a, e === "search") J2(), z(), v(1, W2);
      else if (e === "value") {
        if (document.activeElement.hasAttribute("cmdk-input") || document.activeElement.hasAttribute("cmdk-root")) {
          let h = document.getElementById(_);
          h ? h.focus() : (i = document.getElementById($2)) == null || i.focus();
        }
        if (v(7, () => {
          var h;
          n.current.selectedItemId = (h = M()) == null ? void 0 : h.id, E.emit();
        }), s || v(5, ne), ((l = p2.current) == null ? void 0 : l.value) !== void 0) {
          let h = a != null ? a : "";
          (y = (g = p2.current).onValueChange) == null || y.call(g, h);
          return;
        }
      }
      E.emit();
    }
  }, emit: () => {
    f.current.forEach((e) => e());
  } }), []), U2 = t.useMemo(() => ({ value: (e, a, s) => {
    var i;
    a !== ((i = d.current.get(e)) == null ? void 0 : i.value) && (d.current.set(e, { value: a, keywords: s }), n.current.filtered.items.set(e, te(a, s)), v(2, () => {
      z(), E.emit();
    }));
  }, item: (e, a) => (u2.current.add(e), a && (c.current.has(a) ? c.current.get(a).add(e) : c.current.set(a, /* @__PURE__ */ new Set([e]))), v(3, () => {
    J2(), z(), n.current.value || W2(), E.emit();
  }), () => {
    d.current.delete(e), u2.current.delete(e), n.current.filtered.items.delete(e);
    let s = M();
    v(4, () => {
      J2(), (s == null ? void 0 : s.getAttribute("id")) === e && W2(), E.emit();
    });
  }), group: (e) => (c.current.has(e) || c.current.set(e, /* @__PURE__ */ new Set()), () => {
    d.current.delete(e), c.current.delete(e);
  }), filter: () => p2.current.shouldFilter, label: b || r["aria-label"], getDisablePointerSelection: () => p2.current.disablePointerSelection, listId: $2, inputId: _, labelId: q, listInnerRef: I }), []);
  function te(e, a) {
    var i, l;
    let s = (l = (i = p2.current) == null ? void 0 : i.filter) != null ? l : Re;
    return e ? s(e, n.current.search, a) : 0;
  }
  function z() {
    if (!n.current.search || p2.current.shouldFilter === false) return;
    let e = n.current.filtered.items, a = [];
    n.current.filtered.groups.forEach((i) => {
      let l = c.current.get(i), g = 0;
      l.forEach((y) => {
        let h = e.get(y);
        g = Math.max(h, g);
      }), a.push([i, g]);
    });
    let s = I.current;
    V().sort((i, l) => {
      var h, F;
      let g = i.getAttribute("id"), y = l.getAttribute("id");
      return ((h = e.get(y)) != null ? h : 0) - ((F = e.get(g)) != null ? F : 0);
    }).forEach((i) => {
      let l = i.closest(Y2);
      l ? l.appendChild(i.parentElement === l ? i : i.closest(`${Y2} > *`)) : s.appendChild(i.parentElement === s ? i : i.closest(`${Y2} > *`));
    }), a.sort((i, l) => l[1] - i[1]).forEach((i) => {
      var g;
      let l = (g = I.current) == null ? void 0 : g.querySelector(`${N}[${T}="${encodeURIComponent(i[0])}"]`);
      l == null || l.parentElement.appendChild(l);
    });
  }
  function W2() {
    let e = V().find((s) => s.getAttribute("aria-disabled") !== "true"), a = e == null ? void 0 : e.getAttribute(T);
    E.setState("value", a || void 0);
  }
  function J2() {
    var a, s, i, l;
    if (!n.current.search || p2.current.shouldFilter === false) {
      n.current.filtered.count = u2.current.size;
      return;
    }
    n.current.filtered.groups = /* @__PURE__ */ new Set();
    let e = 0;
    for (let g of u2.current) {
      let y = (s = (a = d.current.get(g)) == null ? void 0 : a.value) != null ? s : "", h = (l = (i = d.current.get(g)) == null ? void 0 : i.keywords) != null ? l : [], F = te(y, h);
      n.current.filtered.items.set(g, F), F > 0 && e++;
    }
    for (let [g, y] of c.current) for (let h of y) if (n.current.filtered.items.get(h) > 0) {
      n.current.filtered.groups.add(g);
      break;
    }
    n.current.filtered.count = e;
  }
  function ne() {
    var a, s, i;
    let e = M();
    e && (((a = e.parentElement) == null ? void 0 : a.firstChild) === e && ((i = (s = e.closest(N)) == null ? void 0 : s.querySelector(be)) == null || i.scrollIntoView({ block: "nearest" })), e.scrollIntoView({ block: "nearest" }));
  }
  function M() {
    var e;
    return (e = I.current) == null ? void 0 : e.querySelector(`${le}[aria-selected="true"]`);
  }
  function V() {
    var e;
    return Array.from(((e = I.current) == null ? void 0 : e.querySelectorAll(ce)) || []);
  }
  function X3(e) {
    let s = V()[e];
    s && E.setState("value", s.getAttribute(T));
  }
  function Q(e) {
    var g;
    let a = M(), s = V(), i = s.findIndex((y) => y === a), l = s[i + e];
    (g = p2.current) != null && g.loop && (l = i + e < 0 ? s[s.length - 1] : i + e === s.length ? s[0] : s[i + e]), l && E.setState("value", l.getAttribute(T));
  }
  function re(e) {
    let a = M(), s = a == null ? void 0 : a.closest(N), i;
    for (; s && !i; ) s = e > 0 ? we(s, N) : De(s, N), i = s == null ? void 0 : s.querySelector(ce);
    i ? E.setState("value", i.getAttribute(T)) : Q(e);
  }
  let oe = () => X3(V().length - 1), ie = (e) => {
    e.preventDefault(), e.metaKey ? oe() : e.altKey ? re(1) : Q(1);
  }, se = (e) => {
    e.preventDefault(), e.metaKey ? X3(0) : e.altKey ? re(-1) : Q(-1);
  };
  return t.createElement(Primitive.div, { ref: o, tabIndex: -1, ...O, "cmdk-root": "", onKeyDown: (e) => {
    var s;
    (s = O.onKeyDown) == null || s.call(O, e);
    let a = e.nativeEvent.isComposing || e.keyCode === 229;
    if (!(e.defaultPrevented || a)) switch (e.key) {
      case "n":
      case "j": {
        j && e.ctrlKey && ie(e);
        break;
      }
      case "ArrowDown": {
        ie(e);
        break;
      }
      case "p":
      case "k": {
        j && e.ctrlKey && se(e);
        break;
      }
      case "ArrowUp": {
        se(e);
        break;
      }
      case "Home": {
        e.preventDefault(), X3(0);
        break;
      }
      case "End": {
        e.preventDefault(), oe();
        break;
      }
      case "Enter": {
        e.preventDefault();
        let i = M();
        if (i) {
          let l = new Event(Z);
          i.dispatchEvent(l);
        }
      }
    }
  } }, t.createElement("label", { "cmdk-label": "", htmlFor: U2.inputId, id: U2.labelId, style: Te }, b), B2(r, (e) => t.createElement(de.Provider, { value: E }, t.createElement(ue.Provider, { value: U2 }, e))));
});
var he = t.forwardRef((r, o) => {
  var _, I;
  let n = useId(), u2 = t.useRef(null), c = t.useContext(fe), d = K2(), f = pe(r), p2 = (I = (_ = f.current) == null ? void 0 : _.forceMount) != null ? I : c == null ? void 0 : c.forceMount;
  k2(() => {
    if (!p2) return d.item(n, c == null ? void 0 : c.id);
  }, [p2]);
  let b = ve(n, u2, [r.value, r.children, u2], r.keywords), m2 = ee(), R = P((v) => v.value && v.value === b.current), x = P((v) => p2 || d.filter() === false ? true : v.search ? v.filtered.items.get(n) > 0 : true);
  t.useEffect(() => {
    let v = u2.current;
    if (!(!v || r.disabled)) return v.addEventListener(Z, C), () => v.removeEventListener(Z, C);
  }, [x, r.onSelect, r.disabled]);
  function C() {
    var v, E;
    S(), (E = (v = f.current).onSelect) == null || E.call(v, b.current);
  }
  function S() {
    m2.setState("value", b.current, true);
  }
  if (!x) return null;
  let { disabled: A, value: ge, onSelect: j, forceMount: O, keywords: $2, ...q } = r;
  return t.createElement(Primitive.div, { ref: composeRefs(u2, o), ...q, id: n, "cmdk-item": "", role: "option", "aria-disabled": !!A, "aria-selected": !!R, "data-disabled": !!A, "data-selected": !!R, onPointerMove: A || d.getDisablePointerSelection() ? void 0 : S, onClick: A ? void 0 : C }, r.children);
});
var Ee = t.forwardRef((r, o) => {
  let { heading: n, children: u2, forceMount: c, ...d } = r, f = useId(), p2 = t.useRef(null), b = t.useRef(null), m2 = useId(), R = K2(), x = P((S) => c || R.filter() === false ? true : S.search ? S.filtered.groups.has(f) : true);
  k2(() => R.group(f), []), ve(f, p2, [r.value, r.heading, b]);
  let C = t.useMemo(() => ({ id: f, forceMount: c }), [c]);
  return t.createElement(Primitive.div, { ref: composeRefs(p2, o), ...d, "cmdk-group": "", role: "presentation", hidden: x ? void 0 : true }, n && t.createElement("div", { ref: b, "cmdk-group-heading": "", "aria-hidden": true, id: m2 }, n), B2(r, (S) => t.createElement("div", { "cmdk-group-items": "", role: "group", "aria-labelledby": n ? m2 : void 0 }, t.createElement(fe.Provider, { value: C }, S))));
});
var ye = t.forwardRef((r, o) => {
  let { alwaysRender: n, ...u2 } = r, c = t.useRef(null), d = P((f) => !f.search);
  return !n && !d ? null : t.createElement(Primitive.div, { ref: composeRefs(c, o), ...u2, "cmdk-separator": "", role: "separator" });
});
var Se = t.forwardRef((r, o) => {
  let { onValueChange: n, ...u2 } = r, c = r.value != null, d = ee(), f = P((m2) => m2.search), p2 = P((m2) => m2.selectedItemId), b = K2();
  return t.useEffect(() => {
    r.value != null && d.setState("search", r.value);
  }, [r.value]), t.createElement(Primitive.input, { ref: o, ...u2, "cmdk-input": "", autoComplete: "off", autoCorrect: "off", spellCheck: false, "aria-autocomplete": "list", role: "combobox", "aria-expanded": true, "aria-controls": b.listId, "aria-labelledby": b.labelId, "aria-activedescendant": p2, id: b.inputId, type: "text", value: c ? r.value : f, onChange: (m2) => {
    c || d.setState("search", m2.target.value), n == null || n(m2.target.value);
  } });
});
var Ce = t.forwardRef((r, o) => {
  let { children: n, label: u2 = "Suggestions", ...c } = r, d = t.useRef(null), f = t.useRef(null), p2 = P((m2) => m2.selectedItemId), b = K2();
  return t.useEffect(() => {
    if (f.current && d.current) {
      let m2 = f.current, R = d.current, x, C = new ResizeObserver(() => {
        x = requestAnimationFrame(() => {
          let S = m2.offsetHeight;
          R.style.setProperty("--cmdk-list-height", S.toFixed(1) + "px");
        });
      });
      return C.observe(m2), () => {
        cancelAnimationFrame(x), C.unobserve(m2);
      };
    }
  }, []), t.createElement(Primitive.div, { ref: composeRefs(d, o), ...c, "cmdk-list": "", role: "listbox", tabIndex: -1, "aria-activedescendant": p2, "aria-label": u2, id: b.listId }, B2(r, (m2) => t.createElement("div", { ref: composeRefs(f, b.listInnerRef), "cmdk-list-sizer": "" }, m2)));
});
var xe = t.forwardRef((r, o) => {
  let { open: n, onOpenChange: u2, overlayClassName: c, contentClassName: d, container: f, ...p2 } = r;
  return t.createElement(Root2, { open: n, onOpenChange: u2 }, t.createElement(Portal2, { container: f }, t.createElement(Overlay, { "cmdk-overlay": "", className: c }), t.createElement(Content, { "aria-label": r.label, "cmdk-dialog": "", className: d }, t.createElement(me, { ref: o, ...p2 }))));
});
var Ie = t.forwardRef((r, o) => P((u2) => u2.filtered.count === 0) ? t.createElement(Primitive.div, { ref: o, ...r, "cmdk-empty": "", role: "presentation" }) : null);
var Pe = t.forwardRef((r, o) => {
  let { progress: n, children: u2, label: c = "Loading...", ...d } = r;
  return t.createElement(Primitive.div, { ref: o, ...d, "cmdk-loading": "", role: "progressbar", "aria-valuenow": n, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": c }, B2(r, (f) => t.createElement("div", { "aria-hidden": true }, f)));
});
var _e = Object.assign(me, { List: Ce, Item: he, Input: Se, Group: Ee, Separator: ye, Dialog: xe, Empty: Ie, Loading: Pe });
function we(r, o) {
  let n = r.nextElementSibling;
  for (; n; ) {
    if (n.matches(o)) return n;
    n = n.nextElementSibling;
  }
}
function De(r, o) {
  let n = r.previousElementSibling;
  for (; n; ) {
    if (n.matches(o)) return n;
    n = n.previousElementSibling;
  }
}
function pe(r) {
  let o = t.useRef(r);
  return k2(() => {
    o.current = r;
  }), o;
}
var k2 = typeof window == "undefined" ? t.useEffect : t.useLayoutEffect;
function L(r) {
  let o = t.useRef();
  return o.current === void 0 && (o.current = r()), o;
}
function P(r) {
  let o = ee(), n = () => r(o.snapshot());
  return t.useSyncExternalStore(o.subscribe, n, n);
}
function ve(r, o, n, u2 = []) {
  let c = t.useRef(), d = K2();
  return k2(() => {
    var b;
    let f = (() => {
      var m2;
      for (let R of n) {
        if (typeof R == "string") return R.trim();
        if (typeof R == "object" && "current" in R) return R.current ? (m2 = R.current.textContent) == null ? void 0 : m2.trim() : c.current;
      }
    })(), p2 = u2.map((m2) => m2.trim());
    d.value(r, f, p2), (b = o.current) == null || b.setAttribute(T, f), c.current = f;
  }), c;
}
var ke = () => {
  let [r, o] = t.useState(), n = L(() => /* @__PURE__ */ new Map());
  return k2(() => {
    n.current.forEach((u2) => u2()), n.current = /* @__PURE__ */ new Map();
  }, [r]), (u2, c) => {
    n.current.set(u2, c), o({});
  };
};
function Me(r) {
  let o = r.type;
  return typeof o == "function" ? o(r.props) : "render" in o ? o.render(r.props) : r;
}
function B2({ asChild: r, children: o }, n) {
  return r && t.isValidElement(o) ? t.cloneElement(Me(o), { ref: o.ref }, n(o.props.children)) : n(o);
}
var Te = { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0" };

// src/components/common/GlobalSearch.tsx
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
function GlobalSearch({ open, onClose }) {
  const navigate = useNavigate();
  const inputRef = (0, import_react20.useRef)(null);
  const [query, setQuery] = (0, import_react20.useState)("");
  const [selectedIndex, setSelectedIndex] = (0, import_react20.useState)(0);
  const { data: searchResults, isLoading } = trpc.search.global.useQuery(
    { query },
    {
      enabled: query.length > 2,
      debounceMs: 300
    }
  );
  (0, import_react20.useEffect)(() => {
    if (!open) {
      setQuery("");
      setSelectedIndex(0);
    }
  }, [open]);
  (0, import_react20.useEffect)(() => {
    if (open && inputRef.current) {
      inputRef.current.focus();
    }
  }, [open]);
  const getIcon = (type) => {
    switch (type) {
      case "task":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(SquareCheckBig, { className: "w-4 h-4" });
      case "project":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Folder, { className: "w-4 h-4" });
      case "team":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Users, { className: "w-4 h-4" });
      case "workspace":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Hash, { className: "w-4 h-4" });
      case "document":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(FileText, { className: "w-4 h-4" });
      case "event":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Calendar, { className: "w-4 h-4" });
      case "message":
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(MessageSquare, { className: "w-4 h-4" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(FileText, { className: "w-4 h-4" });
    }
  };
  const getTypeColor = (type) => {
    switch (type) {
      case "task":
        return "bg-blue-100 text-blue-700";
      case "project":
        return "bg-purple-100 text-purple-700";
      case "team":
        return "bg-green-100 text-green-700";
      case "workspace":
        return "bg-gray-100 text-gray-700";
      case "document":
        return "bg-orange-100 text-orange-700";
      case "event":
        return "bg-red-100 text-red-700";
      case "message":
        return "bg-indigo-100 text-indigo-700";
      default:
        return "bg-gray-100 text-gray-700";
    }
  };
  const handleSelect = (result) => {
    switch (result.type) {
      case "task":
        navigate(`/board?task=${result.id}`);
        break;
      case "project":
        navigate(`/projects/${result.id}`);
        break;
      case "team":
        navigate(`/teams/${result.id}`);
        break;
      case "workspace":
        navigate(`/workspaces/${result.id}`);
        break;
      default:
        break;
    }
    onClose();
  };
  const allResults = [
    ...(searchResults?.tasks || []).map((t2) => ({ ...t2, type: "task" })),
    ...(searchResults?.projects || []).map((p2) => ({ ...p2, type: "project" })),
    ...(searchResults?.teams || []).map((t2) => ({ ...t2, type: "team" })),
    ...(searchResults?.workspaces || []).map((w) => ({ ...w, type: "workspace" }))
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Dialog, { open, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(DialogContent, { className: "max-w-2xl p-0", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(_e, { className: "rounded-lg shadow-md", children: [
    /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex items-center border-b px-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Search, { className: "mr-2 h-4 w-4 shrink-0 opacity-50" }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        FloatingInput,
        {
          ref: inputRef,
          label: "Search everything",
          value: query,
          onChange: (e) => setQuery(e.target.value),
          className: "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none disabled:cursor-not-allowed disabled:opacity-50 border-0 focus:ring-0"
        }
      ),
      query && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: () => setQuery(""),
          className: "h-6 w-6 p-0",
          children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(X, { className: "h-4 w-4" })
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(_e.List, { className: "max-h-[400px] overflow-y-auto p-2", children: [
      isLoading && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "flex items-center justify-center py-6", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(LoaderCircle, { className: "h-6 w-6 animate-spin text-gray-400" }) }),
      !isLoading && query.length > 2 && allResults.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "py-6 text-center text-sm text-gray-500", children: [
        'No results found for "',
        query,
        '"'
      ] }),
      !isLoading && query.length <= 2 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "py-6 text-center text-sm text-gray-500", children: "Type at least 3 characters to search" }),
      !isLoading && allResults.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
        searchResults?.tasks && searchResults.tasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(_e.Group, { heading: "Tasks", children: searchResults.tasks.map((task, index) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          _e.Item,
          {
            value: task.id,
            onSelect: () => handleSelect({ ...task, type: "task" }),
            className: cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-sm cursor-pointer",
              "hover:bg-gray-100",
              selectedIndex === index && "bg-gray-100"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: cn("p-1 rounded", getTypeColor("task")), children: getIcon("task") }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-medium", children: task.title }),
                task.project && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("p", { className: "text-xs text-gray-500", children: [
                  "in ",
                  task.project.name
                ] })
              ] }),
              task.status && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Badge, { variant: "outline", className: "text-xs", children: task.status })
            ]
          },
          task.id
        )) }),
        searchResults?.projects && searchResults.projects.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(_e.Group, { heading: "Projects", children: searchResults.projects.map((project) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          _e.Item,
          {
            value: project.id,
            onSelect: () => handleSelect({ ...project, type: "project" }),
            className: cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-sm cursor-pointer",
              "hover:bg-gray-100"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: cn("p-1 rounded", getTypeColor("project")), children: getIcon("project") }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-medium", children: project.name }),
                project.description && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "text-xs text-gray-500", children: project.description })
              ] })
            ]
          },
          project.id
        )) }),
        searchResults?.teams && searchResults.teams.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(_e.Group, { heading: "Teams", children: searchResults.teams.map((team) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          _e.Item,
          {
            value: team.id,
            onSelect: () => handleSelect({ ...team, type: "team" }),
            className: cn(
              "flex items-center gap-3 rounded-md px-3 py-2 text-sm cursor-pointer",
              "hover:bg-gray-100"
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: cn("p-1 rounded", getTypeColor("team")), children: getIcon("team") }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "font-medium", children: team.name }),
                team._count?.members && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("p", { className: "text-xs text-gray-500", children: [
                  team._count.members,
                  " members"
                ] })
              ] })
            ]
          },
          team.id
        )) })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "border-t px-3 py-2", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("p", { className: "text-xs text-gray-500", children: [
      "Press ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "\u2191" }),
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "\u2193" }),
      " to navigate,",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "Enter" }),
      " to select,",
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("kbd", { className: "rounded bg-gray-100 px-1", children: "Esc" }),
      " to close"
    ] }) })
  ] }) }) });
}

// src/components/layout/ResponsiveLayout.tsx
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
function ResponsiveLayout({ children }) {
  const navigate = useNavigate();
  const [currentPage, setCurrentPage] = (0, import_react21.useState)("home");
  const [sidebarOpen, setSidebarOpen] = (0, import_react21.useState)(false);
  const [isMobile, setIsMobile] = (0, import_react21.useState)(false);
  const [showSearch, setShowSearch] = (0, import_react21.useState)(false);
  const { user } = useAuthStore();
  const isConnected = true;
  const activeWorkspace = null;
  (0, import_react21.useEffect)(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);
    return () => window.removeEventListener("resize", checkScreenSize);
  }, []);
  (0, import_react21.useEffect)(() => {
    const path = window.location.pathname.slice(1) || "home";
    setCurrentPage(path);
  }, []);
  const handlePageChange = (page) => {
    setCurrentPage(page);
    const routes = {
      home: "/home",
      workspace: "/workspace",
      board: "/board",
      calendar: "/calendar",
      chat: "/chat",
      notes: "/notes",
      teams: "/teams",
      projects: "/projects"
    };
    if (routes[page]) {
      navigate(routes[page]);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "h-screen flex flex-col bg-gray-50", children: [
    isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("header", { className: "bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between md:hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Sheet, { open: sidebarOpen, onOpenChange: setSidebarOpen, children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SheetTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { variant: "ghost", size: "sm", className: "p-2", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Menu, { className: "w-5 h-5" }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SheetContent, { side: "left", className: "w-80 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Sidebar, { currentPage, onPageChange: handlePageChange }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h1", { className: "text-lg font-semibold text-foreground ml-2", children: activeWorkspace?.name || "Workspace" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          Badge,
          {
            variant: isConnected ? "default" : "outline",
            className: cn(
              "text-xs",
              isConnected ? "bg-emerald-100 text-emerald-700 border-emerald-200" : "bg-amber-100 text-amber-700 border-amber-300"
            ),
            children: isConnected ? "Live" : "Offline"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { variant: "ghost", size: "sm", className: "p-2", onClick: () => setShowSearch(true), children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Search, { className: "w-5 h-5" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(NotificationBell, { variant: "mobile" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Avatar, { className: "w-8 h-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarImage, { src: user?.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarFallback, { className: "text-xs bg-secondary text-secondary-foreground", children: user?.name?.split(" ").map((n) => n[0]).join("").toUpperCase() || "U" })
        ] })
      ] })
    ] }),
    !isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("header", { className: "bg-white/95 backdrop-blur-sm border-b border-border px-6 py-4 hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h1", { className: "text-xl font-semibold text-foreground", children: activeWorkspace?.name || "Workspace" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          Badge,
          {
            variant: isConnected ? "default" : "outline",
            className: cn(
              "text-xs",
              isConnected ? "bg-emerald-100 text-emerald-700 border-emerald-200" : "bg-amber-100 text-amber-700 border-amber-300"
            ),
            children: isConnected ? "Live" : "Connecting..."
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
          Button,
          {
            variant: "outline",
            className: "w-64 justify-start text-muted-foreground hover:text-foreground",
            onClick: () => setShowSearch(true),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Search, { className: "mr-2 h-4 w-4" }),
              "Search..."
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(NotificationBell, { variant: "desktop" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Avatar, { className: "w-8 h-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarImage, { src: user?.avatar }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AvatarFallback, { className: "text-xs bg-secondary text-secondary-foreground", children: user?.name?.split(" ").map((n) => n[0]).join("").toUpperCase() || "U" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "hidden lg:block", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-sm font-medium text-foreground", children: user?.name || "User" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-xs text-gray-500", children: user?.email || "user@example.com" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ChevronDown, { className: "w-4 h-4" }) })
        ] })
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex-1 flex overflow-hidden", children: [
      !isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Sidebar, { currentPage, onPageChange: handlePageChange }) }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("main", { className: cn(
        "flex-1 overflow-auto",
        isMobile && "pb-16"
        // Add padding for mobile navigation
      ), children })
    ] }),
    isMobile && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      MobileNavigation,
      {
        currentPage,
        onPageChange: handlePageChange
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ToastContainer, {}),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      GlobalSearch,
      {
        open: showSearch,
        onClose: () => setShowSearch(false)
      }
    )
  ] });
}

// src/components/dashboard/ActivityFeed.tsx
var import_react23 = __toESM(require_react(), 1);

// src/components/ui/input.tsx
var React47 = __toESM(require_react(), 1);
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var Input = React47.forwardRef(
  ({ className, type, ...props }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
      "input",
      {
        type,
        className: cn(
          "flex h-10 w-full rounded-md border border-gray-300 bg-background px-3 py-2 text-sm shadow-sm hover:shadow-md transition-shadow file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:shadow-md focus-visible:border-krushr-primary disabled:cursor-not-allowed disabled:opacity-50",
          className
        ),
        ref,
        ...props
      }
    );
  }
);
Input.displayName = "Input";

// src/hooks/use-realtime-activities.ts
var import_react22 = __toESM(require_react(), 1);
function useRealtimeActivities(workspaceId) {
  const queryClient = useQueryClient();
  const wsRef = (0, import_react22.useRef)(null);
  const reconnectTimeoutRef = (0, import_react22.useRef)();
  const reconnectAttemptsRef = (0, import_react22.useRef)(0);
  (0, import_react22.useEffect)(() => {
    if (!workspaceId) return;
    const connectWebSocket = () => {
      const token = localStorage.getItem("auth-token");
      if (!token) return;
      const wsUrl = window.location.protocol === "https:" ? `wss://${window.location.hostname}:3002/ws?token=${token}` : `ws://127.0.0.1:3002/ws?token=${token}`;
      const ws = new WebSocket(wsUrl);
      wsRef.current = ws;
      ws.onopen = () => {
        console.log("WebSocket connected for activities");
        reconnectAttemptsRef.current = 0;
        ws.send(JSON.stringify({
          type: "join-workspace",
          payload: { workspaceId },
          timestamp: Date.now()
        }));
        ws.send(JSON.stringify({
          type: "workspace-activity-stream",
          payload: { workspaceId },
          timestamp: Date.now()
        }));
      };
      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          if (message.type === "activity-created" || message.type === "workspace-activity-update") {
            const activity = message.payload;
            queryClient.setQueryData(
              ["activity.getRecent", { workspaceId, limit: 10 }],
              (oldData) => {
                if (!oldData) return [activity];
                const newActivities = [activity, ...oldData];
                return newActivities.slice(0, 10);
              }
            );
            queryClient.invalidateQueries({
              queryKey: ["activity.getRecent", { workspaceId }],
              exact: false
            });
          }
        } catch (error) {
          console.error("Failed to parse WebSocket message:", error);
        }
      };
      ws.onerror = (error) => {
        console.error("WebSocket error:", error);
      };
      ws.onclose = () => {
        console.log("WebSocket disconnected");
        wsRef.current = null;
        if (reconnectAttemptsRef.current < 5) {
          const delay = Math.min(1e3 * Math.pow(2, reconnectAttemptsRef.current), 1e4);
          reconnectAttemptsRef.current++;
          reconnectTimeoutRef.current = setTimeout(() => {
            console.log(`Reconnecting WebSocket (attempt ${reconnectAttemptsRef.current})...`);
            connectWebSocket();
          }, delay);
        }
      };
    };
    connectWebSocket();
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
        wsRef.current = null;
      }
    };
  }, [workspaceId, queryClient]);
}

// src/components/dashboard/ActivityFeed.tsx
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var REACTION_EMOJIS = ["\u{1F44D}", "\u{1F44F}", "\u{1F389}"];
function ActivityFeed({ className }) {
  const [isLoadingMore, setIsLoadingMore] = (0, import_react23.useState)(false);
  const [expandedGroups, setExpandedGroups] = (0, import_react23.useState)(/* @__PURE__ */ new Set());
  const [reactions, setReactions] = (0, import_react23.useState)({});
  const [replyingTo, setReplyingTo] = (0, import_react23.useState)(null);
  const [replyText, setReplyText] = (0, import_react23.useState)("");
  const scrollContainerRef = (0, import_react23.useRef)(null);
  const [visibleRange, setVisibleRange] = (0, import_react23.useState)({ start: 0, end: 50 });
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const workspaceId = workspaces2[0]?.id;
  const { data: currentUser } = trpc.user.me.useQuery();
  const { data: activities = [], isLoading, refetch } = trpc.activity.getRecent.useQuery(
    {
      workspaceId: workspaceId || "",
      limit: 50
    },
    {
      enabled: !!workspaceId,
      refetchInterval: false,
      // Disable polling - we'll use WebSocket
      refetchOnWindowFocus: true,
      staleTime: 1e3
      // Consider data stale after 1 second
    }
  );
  useRealtimeActivities(workspaceId);
  const handleScroll = (0, import_react23.useCallback)(() => {
    if (!scrollContainerRef.current) return;
    const container = scrollContainerRef.current;
    const scrollTop = container.scrollTop;
    const itemHeight = 80;
    const containerHeight = container.clientHeight;
    const start = Math.floor(scrollTop / itemHeight);
    const visibleCount = Math.ceil(containerHeight / itemHeight);
    const end = start + visibleCount + 5;
    setVisibleRange({ start: Math.max(0, start - 5), end });
  }, []);
  (0, import_react23.useEffect)(() => {
    const container = scrollContainerRef.current;
    if (container) {
      container.addEventListener("scroll", handleScroll);
      return () => container.removeEventListener("scroll", handleScroll);
    }
  }, []);
  const groupedActivities = (0, import_react23.useMemo)(() => {
    const groups = [];
    const tempGroups = {};
    activities.forEach((activity) => {
      const activityTime = new Date(activity.createdAt);
      const hourKey = format(activityTime, "yyyy-MM-dd-HH");
      const groupKey = `${activity.type}-${activity.userId}-${hourKey}`;
      if (activity.type === "task_completed" || activity.type === "task_created") {
        if (!tempGroups[groupKey]) {
          tempGroups[groupKey] = [];
        }
        tempGroups[groupKey].push(activity);
      } else {
        groups.push({
          id: activity.id,
          type: "single",
          timestamp: activityTime,
          activities: [activity],
          isExpanded: false
        });
      }
    });
    Object.entries(tempGroups).forEach(([key, activities2]) => {
      if (activities2.length > 1) {
        groups.push({
          id: key,
          type: "grouped",
          timestamp: new Date(activities2[0].createdAt),
          activities: activities2,
          isExpanded: expandedGroups.has(key)
        });
      } else {
        groups.push({
          id: activities2[0].id,
          type: "single",
          timestamp: new Date(activities2[0].createdAt),
          activities: activities2,
          isExpanded: false
        });
      }
    });
    return groups.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
  }, [activities, expandedGroups]);
  const getActivityIcon = (type) => {
    switch (type) {
      case "task_completed":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CircleCheck, { className: "w-4 h-4 text-krushr-task-done" });
      case "task_created":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Plus, { className: "w-4 h-4 text-krushr-primary" });
      case "task_assigned":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Users, { className: "w-4 h-4 text-krushr-purple" });
      case "comment_added":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(MessageCircle, { className: "w-4 h-4 text-krushr-warning" });
      case "file_uploaded":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(FileText, { className: "w-4 h-4 text-krushr-gray" });
      case "meeting_scheduled":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Calendar, { className: "w-4 h-4 text-krushr-info" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Clock, { className: "w-4 h-4 text-krushr-gray-light" });
    }
  };
  const getActivityColor = (type) => {
    switch (type) {
      case "task_completed":
        return "bg-krushr-task-done/10 border-krushr-task-done/20";
      case "task_created":
        return "bg-krushr-primary/10 border-krushr-primary/20";
      case "task_assigned":
        return "bg-krushr-purple/10 border-krushr-purple/20";
      case "comment_added":
        return "bg-krushr-warning/10 border-krushr-warning/20";
      case "file_uploaded":
        return "bg-krushr-gray-bg border-krushr-gray-border";
      case "meeting_scheduled":
        return "bg-krushr-info/10 border-krushr-info/20";
      default:
        return "bg-krushr-gray-bg border-krushr-gray-border";
    }
  };
  const formatTimeAgo = (timestamp) => {
    const now = /* @__PURE__ */ new Date();
    const time = new Date(timestamp);
    const diffInMinutes = differenceInMinutes(now, time);
    const diffInHours = differenceInHours(now, time);
    const diffInDays = differenceInDays(now, time);
    if (diffInMinutes < 1) return "Just now";
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    if (diffInHours < 24) return `${diffInHours}h ago`;
    if (diffInDays < 7) return `${diffInDays}d ago`;
    if (isToday(time)) return format(time, "h:mm a");
    if (isYesterday(time)) return `Yesterday ${format(time, "h:mm a")}`;
    return format(time, "MMM d, h:mm a");
  };
  const formatGroupHeader = (group) => {
    const time = group.timestamp;
    if (isToday(time)) return `Today ${format(time, "h:mm a")}`;
    if (isYesterday(time)) return `Yesterday ${format(time, "h:mm a")}`;
    return format(time, "EEEE, MMM d, h:mm a");
  };
  const handleLoadMore = async () => {
    setIsLoadingMore(true);
    setTimeout(() => setIsLoadingMore(false), 1e3);
  };
  const toggleGroup = (groupId) => {
    setExpandedGroups((prev) => {
      const next = new Set(prev);
      if (next.has(groupId)) {
        next.delete(groupId);
      } else {
        next.add(groupId);
      }
      return next;
    });
  };
  const handleReaction = async (activityId, emoji) => {
    setReactions((prev) => {
      const current = prev[activityId] || [];
      const existingReaction = current.find((r) => r.emoji === emoji);
      if (existingReaction) {
        if (existingReaction.users.includes(currentUser?.id || "")) {
          return {
            ...prev,
            [activityId]: current.map(
              (r) => r.emoji === emoji ? { ...r, count: r.count - 1, users: r.users.filter((u2) => u2 !== currentUser?.id) } : r
            ).filter((r) => r.count > 0)
          };
        } else {
          return {
            ...prev,
            [activityId]: current.map(
              (r) => r.emoji === emoji ? { ...r, count: r.count + 1, users: [...r.users, currentUser?.id || ""] } : r
            )
          };
        }
      } else {
        return {
          ...prev,
          [activityId]: [...current, { emoji, count: 1, users: [currentUser?.id || ""] }]
        };
      }
    });
  };
  const handleReply = async (activityId) => {
    if (!replyText.trim()) return;
    console.log("Replying to activity:", activityId, "with text:", replyText);
    setReplyText("");
    setReplyingTo(null);
  };
  const renderActivityContent = (activity) => {
    const parts = activity.action.split(/(@\w+|#\w+)/g);
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("span", { className: "text-sm text-krushr-gray-dark leading-relaxed", children: [
      parts.map((part, index) => {
        if (part.startsWith("@")) {
          return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "font-medium text-krushr-primary", children: part }, index);
        }
        if (part.startsWith("#")) {
          return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "font-medium text-krushr-purple", children: part }, index);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { children: part }, index);
      }),
      activity.entityName && /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("span", { className: "font-semibold text-krushr-black ml-1", children: [
        '"',
        activity.entityName,
        '"'
      ] }),
      activity.targetUser && /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("span", { className: "text-krushr-gray-dark", children: [
        " to ",
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("span", { className: "font-medium text-krushr-primary", children: [
          "@",
          activity.targetUser.name
        ] })
      ] })
    ] });
  };
  const getPriorityBadge = (priority) => {
    const configs = {
      critical: { bg: "bg-krushr-priority-critical/10", text: "text-krushr-priority-critical", border: "border-krushr-priority-critical/20" },
      high: { bg: "bg-krushr-priority-high/10", text: "text-krushr-priority-high", border: "border-krushr-priority-high/20" },
      medium: { bg: "bg-krushr-priority-medium/10", text: "text-krushr-priority-medium", border: "border-krushr-priority-medium/20" },
      low: { bg: "bg-krushr-priority-low/10", text: "text-krushr-priority-low", border: "border-krushr-priority-low/20" }
    };
    const config = configs[priority] || configs.medium;
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
      Badge,
      {
        variant: "outline",
        className: cn(
          "text-xs font-medium uppercase tracking-wide",
          config.bg,
          config.text,
          config.border
        ),
        children: priority
      }
    );
  };
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Card, { className: cn("h-full flex items-center justify-center", className), children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin text-gray-400" }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CardHeader, { className: "flex-shrink-0 pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Recent Activity" }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "h-8 w-8 p-0",
          onClick: () => refetch(),
          children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(RefreshCw, { className: "w-4 h-4" })
        }
      )
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(CardContent, { className: "flex-1 p-0 overflow-y-auto", ref: scrollContainerRef, children: [
      activities.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "p-8 text-center text-gray-500", children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Clock, { className: "w-12 h-12 mx-auto mb-3 opacity-30" }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-sm", children: "No recent activity" }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-xs mt-1 text-gray-400", children: "Activities will appear here as your team works" })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "space-y-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { style: { height: `${visibleRange.start * 80}px` } }),
        groupedActivities.slice(visibleRange.start, visibleRange.end).map((group, index) => {
          const isFirstOfDay = index === 0 || !isSameDay(group.timestamp, groupedActivities[index - 1]?.timestamp);
          return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
            isFirstOfDay && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "sticky top-0 z-10 bg-krushr-gray-bg-light px-4 py-2 border-b border-krushr-gray-border", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-xs font-medium text-krushr-gray uppercase tracking-wide", children: isToday(group.timestamp) ? "Today" : isYesterday(group.timestamp) ? "Yesterday" : format(group.timestamp, "EEEE, MMMM d") }) }),
            group.type === "grouped" && group.activities.length > 1 ? (
              /* Grouped activities */
              /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "border-l-4 border-krushr-primary/20 bg-krushr-primary/5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                  "button",
                  {
                    onClick: () => toggleGroup(group.id),
                    className: "w-full p-4 hover:bg-krushr-primary/10 transition-colors text-left",
                    children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-start space-x-3", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "pt-1", children: group.isExpanded ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ChevronDown, { className: "w-4 h-4 text-krushr-gray" }) : /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ChevronRight, { className: "w-4 h-4 text-krushr-gray" }) }),
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Avatar, { className: "w-8 h-8 flex-shrink-0", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(AvatarImage, { src: group.activities[0].user?.avatar }),
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(AvatarFallback, { className: "text-xs bg-krushr-gray-bg", children: group.activities[0].user?.name?.split(" ").map((n) => n[0]).join("").toUpperCase() || "U" })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex-1", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center space-x-2 mb-1", children: [
                          getActivityIcon(group.activities[0].type),
                          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "text-sm font-medium text-krushr-black", children: group.activities[0].user?.name || "Unknown User" }),
                          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "text-xs text-krushr-gray-light", children: formatTimeAgo(group.timestamp) })
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-sm font-medium text-krushr-gray-dark", children: group.activities[0].type === "task_completed" ? `completed ${group.activities.length} tasks` : `created ${group.activities.length} tasks` })
                      ] })
                    ] })
                  }
                ),
                group.isExpanded && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "pl-14 pr-4 pb-4 space-y-2", children: group.activities.map((activity) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "text-sm text-krushr-gray-dark", children: [
                  "\u2022 ",
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "font-medium text-krushr-black", children: activity.entityName }),
                  activity.priority && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "ml-2", children: getPriorityBadge(activity.priority) })
                ] }, activity.id)) })
              ] })
            ) : (
              /* Single activity */
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                "div",
                {
                  className: cn(
                    "group relative border-l-4 transition-all duration-200",
                    getActivityColor(group.activities[0].type),
                    "hover:shadow-elevation-sm hover:z-10"
                  ),
                  children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-start space-x-3", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Avatar, { className: "w-8 h-8 flex-shrink-0", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(AvatarImage, { src: group.activities[0].user?.avatar }),
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(AvatarFallback, { className: "text-xs bg-krushr-gray-bg", children: group.activities[0].user?.name?.split(" ").map((n) => n[0]).join("").toUpperCase() || "U" })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex-1 min-w-0", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center space-x-2 mb-1", children: [
                        getActivityIcon(group.activities[0].type),
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "text-sm font-medium text-krushr-black", children: group.activities[0].user?.name || "Unknown User" }),
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "text-xs text-krushr-gray-light flex-shrink-0", children: formatTimeAgo(group.activities[0].createdAt) })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { children: renderActivityContent(group.activities[0]) }),
                      group.activities[0].priority && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "mt-2", children: getPriorityBadge(group.activities[0].priority) }),
                      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center gap-2 mt-3", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity", children: REACTION_EMOJIS.map((emoji) => /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                          "button",
                          {
                            onClick: () => handleReaction(group.activities[0].id, emoji),
                            className: "p-1 hover:bg-krushr-gray-bg rounded transition-colors",
                            children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "text-sm", children: emoji })
                          },
                          emoji
                        )) }),
                        reactions[group.activities[0].id]?.map((reaction) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
                          "button",
                          {
                            onClick: () => handleReaction(group.activities[0].id, reaction.emoji),
                            className: cn(
                              "flex items-center gap-1 px-2 py-1 rounded-full text-xs transition-colors",
                              reaction.users.includes(currentUser?.id || "") ? "bg-krushr-primary/10 text-krushr-primary border border-krushr-primary/20" : "bg-krushr-gray-bg hover:bg-krushr-gray-bg-light"
                            ),
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { children: reaction.emoji }),
                              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { className: "font-medium", children: reaction.count })
                            ]
                          },
                          reaction.emoji
                        )),
                        group.activities[0].entityType === "task" && group.activities[0].entityId && /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
                          "a",
                          {
                            href: `#/workspace?task=${group.activities[0].entityId}`,
                            className: "ml-auto opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1 text-xs text-krushr-primary hover:text-krushr-primary/80",
                            children: [
                              "View task",
                              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ExternalLink, { className: "w-3 h-3" })
                            ]
                          }
                        )
                      ] }),
                      (group.activities[0].type === "task_completed" || group.activities[0].type === "comment_added") && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "mt-3", children: replyingTo === group.activities[0].id ? /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                          Input,
                          {
                            value: replyText,
                            onChange: (e) => setReplyText(e.target.value),
                            onKeyDown: (e) => {
                              if (e.key === "Enter" && !e.shiftKey) {
                                e.preventDefault();
                                handleReply(group.activities[0].id);
                              }
                              if (e.key === "Escape") {
                                setReplyingTo(null);
                                setReplyText("");
                              }
                            },
                            placeholder: "Add a comment...",
                            className: "flex-1 h-8 text-sm",
                            autoFocus: true
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                          Button,
                          {
                            size: "sm",
                            onClick: () => handleReply(group.activities[0].id),
                            disabled: !replyText.trim(),
                            className: "h-8",
                            children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Send, { className: "w-3 h-3" })
                          }
                        )
                      ] }) : /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
                        "button",
                        {
                          onClick: () => setReplyingTo(group.activities[0].id),
                          className: "text-xs text-krushr-gray hover:text-krushr-primary transition-colors opacity-0 group-hover:opacity-100",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(MessageCircle, { className: "w-3 h-3 inline mr-1" }),
                            "Reply"
                          ]
                        }
                      ) })
                    ] })
                  ] }) })
                }
              )
            )
          ] }, group.id);
        }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { style: { height: `${Math.max(0, (groupedActivities.length - visibleRange.end) * 80)}px` } })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "p-4 text-center border-t", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "text-gray-600 hover:text-gray-900",
          onClick: handleLoadMore,
          disabled: isLoadingMore,
          children: isLoadingMore ? /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(import_jsx_runtime40.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(LoaderCircle, { className: "w-3 h-3 mr-2 animate-spin" }),
            "Loading..."
          ] }) : "Load more activity"
        }
      ) })
    ] })
  ] });
}

// src/components/dashboard/QuickActions.tsx
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
function QuickActions({ className }) {
  const navigate = useNavigate();
  const actions = [
    {
      id: "create-task",
      title: "Create Task",
      description: "Add a new task to your board",
      icon: Plus,
      color: "text-blue-600 bg-blue-50 hover:bg-blue-100",
      action: () => {
        navigate("/board");
      }
    },
    {
      id: "schedule-meeting",
      title: "Schedule Meeting",
      description: "Set up a team meeting",
      icon: Calendar,
      color: "text-green-600 bg-green-50 hover:bg-green-100",
      action: () => {
        navigate("/calendar");
      }
    },
    {
      id: "start-chat",
      title: "Start Chat",
      description: "Begin a team conversation",
      icon: MessageCircle,
      color: "text-purple-600 bg-purple-50 hover:bg-purple-100",
      action: () => {
        navigate("/chat");
      }
    },
    {
      id: "create-note",
      title: "Quick Note",
      description: "Capture an idea or note",
      icon: FileText,
      color: "text-orange-600 bg-orange-50 hover:bg-orange-100",
      action: () => {
        navigate("/notes");
      }
    },
    {
      id: "invite-member",
      title: "Invite Member",
      description: "Add someone to your team",
      icon: Users,
      color: "text-indigo-600 bg-indigo-50 hover:bg-indigo-100",
      action: () => {
        navigate("/teams");
      }
    },
    {
      id: "start-call",
      title: "Start Call",
      description: "Begin a video call",
      icon: Video,
      color: "text-red-600 bg-red-50 hover:bg-red-100",
      action: () => {
        navigate("/chat");
      }
    },
    {
      id: "track-time",
      title: "Track Time",
      description: "Start time tracking",
      icon: Clock,
      color: "text-teal-600 bg-teal-50 hover:bg-teal-100",
      action: () => {
        navigate("/board");
      }
    },
    {
      id: "set-goal",
      title: "Set Goal",
      description: "Define a new objective",
      icon: Target,
      color: "text-pink-600 bg-pink-50 hover:bg-pink-100",
      action: () => {
        navigate("/projects");
      }
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Card, { className: cn("h-full", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardHeader, { className: "pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Quick Actions" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardContent, { className: "grid grid-cols-2 gap-3", children: actions.map((action) => {
      const IconComponent = action.icon;
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
        Button,
        {
          variant: "ghost",
          className: cn(
            "h-auto p-4 flex flex-col items-center text-center space-y-2 hover:scale-105 transition-all duration-200",
            action.color
          ),
          onClick: action.action,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(IconComponent, { className: "w-6 h-6" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "font-medium text-sm", children: action.title }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-xs opacity-75", children: action.description })
            ] })
          ]
        },
        action.id
      );
    }) })
  ] });
}

// src/components/dashboard/TasksSummary.tsx
var import_react26 = __toESM(require_react(), 1);

// src/components/dashboard/TaskFilters.tsx
var import_react24 = __toESM(require_react(), 1);
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
function TaskFilters({
  activeFilter,
  onFilterChange,
  workspaceId,
  className
}) {
  const { user } = useAuthStore();
  const { data: tasks2 = [] } = trpc.task.list.useQuery(
    { workspaceId: workspaceId || "" },
    { enabled: !!workspaceId }
  );
  const counts = import_react24.default.useMemo(() => {
    const now = /* @__PURE__ */ new Date();
    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1e3);
    return {
      all: tasks2.length,
      "my-tasks": tasks2.filter((task) => task.assigneeId === user?.id).length,
      urgent: tasks2.filter((task) => {
        if (task.status === "DONE" || task.status === "COMPLETED") return false;
        const isHighPriority = task.priority === "high" || task.priority === "critical";
        const isOverdue = task.dueDate && new Date(task.dueDate) < now;
        return isHighPriority || isOverdue;
      }).length,
      "due-today": tasks2.filter((task) => {
        if (!task.dueDate) return false;
        const dueDate = new Date(task.dueDate);
        return dueDate >= todayStart && dueDate < todayEnd;
      }).length,
      unassigned: tasks2.filter((task) => !task.assigneeId).length
    };
  }, [tasks2, user?.id]);
  const filters = [
    {
      id: "all",
      label: "All Tasks",
      icon: Funnel,
      count: counts.all,
      color: "text-gray-600",
      shortcut: "1"
    },
    {
      id: "my-tasks",
      label: "My Tasks",
      icon: User,
      count: counts["my-tasks"],
      color: "text-krushr-primary",
      shortcut: "2"
    },
    {
      id: "urgent",
      label: "Urgent",
      icon: TriangleAlert,
      count: counts.urgent,
      color: "text-krushr-priority-high",
      shortcut: "3"
    },
    {
      id: "due-today",
      label: "Due Today",
      icon: Clock,
      count: counts["due-today"],
      color: "text-krushr-warning",
      shortcut: "4"
    },
    {
      id: "unassigned",
      label: "Unassigned",
      icon: Users,
      count: counts.unassigned,
      color: "text-gray-500",
      shortcut: "5"
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: cn(
    "bg-white border-b border-gray-200",
    className
  ), children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "px-4 sm:px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "flex items-center gap-2 overflow-x-auto scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0", children: filters.map((filter) => {
    const IconComponent = filter.icon;
    const isActive = activeFilter === filter.id;
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
      "button",
      {
        onClick: () => onFilterChange(filter.id),
        className: cn(
          "group relative flex items-center gap-1.5 sm:gap-2 px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg font-medium text-xs sm:text-sm transition-all",
          "hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-krushr-primary focus:ring-offset-2",
          "whitespace-nowrap min-w-fit",
          isActive ? [
            "bg-krushr-primary text-white",
            "hover:bg-krushr-primary-700"
          ] : [
            "text-gray-600",
            "hover:text-gray-900"
          ]
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(IconComponent, { className: cn(
            "w-3.5 h-3.5 sm:w-4 sm:h-4 transition-colors",
            isActive ? "text-white" : filter.color
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { className: "hidden sm:inline", children: filter.label }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { className: "sm:hidden", children: filter.label.split(" ")[0] }),
          filter.count > 0 && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
            Badge,
            {
              variant: isActive ? "secondary" : "outline",
              className: cn(
                "ml-1 h-5 px-1.5 text-xs font-semibold",
                isActive ? [
                  "bg-white/20 text-white border-white/30",
                  "group-hover:bg-white/30"
                ] : [
                  "bg-gray-100 text-gray-700 border-gray-200",
                  "group-hover:bg-gray-200"
                ]
              ),
              children: filter.count > 99 ? "99+" : filter.count
            }
          ),
          filter.shortcut && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { className: cn(
            "absolute -top-1 -right-1 w-5 h-5 flex items-center justify-center rounded text-[10px] font-medium transition-opacity",
            "opacity-0 group-hover:opacity-100",
            isActive ? [
              "bg-white/20 text-white border border-white/30"
            ] : [
              "bg-gray-900 text-white"
            ]
          ), children: filter.shortcut }),
          isActive && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "absolute bottom-0 left-0 right-0 h-0.5 bg-white/40" })
        ]
      },
      filter.id
    );
  }) }) }) });
}
function filterTasks(tasks2, filter, userId) {
  const now = /* @__PURE__ */ new Date();
  const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1e3);
  switch (filter) {
    case "my-tasks":
      return tasks2.filter((task) => task.assigneeId === userId);
    case "urgent":
      return tasks2.filter((task) => {
        if (task.status === "DONE" || task.status === "COMPLETED") return false;
        const isHighPriority = task.priority === "high" || task.priority === "critical";
        const isOverdue = task.dueDate && new Date(task.dueDate) < now;
        return isHighPriority || isOverdue;
      });
    case "due-today":
      return tasks2.filter((task) => {
        if (!task.dueDate) return false;
        const dueDate = new Date(task.dueDate);
        return dueDate >= todayStart && dueDate < todayEnd;
      });
    case "unassigned":
      return tasks2.filter((task) => !task.assigneeId);
    case "all":
    default:
      return tasks2;
  }
}

// src/hooks/use-confetti.ts
var import_react25 = __toESM(require_react(), 1);
var KRUSHR_COLORS = [
  "#143197",
  // primary blue
  "#EB5857",
  // secondary red
  "#1FBB65",
  // success green
  "#FFB366",
  // warning orange
  "#57C7EB",
  // info blue
  "#8b5cf6",
  // purple
  "#ec4899"
  // pink
];
function useConfetti(options = {}) {
  const { onComplete, disabled = false } = options;
  const hasShownFirstTimeToast = (0, import_react25.useRef)(false);
  const lastTriggerTime = (0, import_react25.useRef)(0);
  const getCelebrationEnabled = (0, import_react25.useCallback)(() => {
    const stored = localStorage.getItem("celebrationsEnabled");
    return stored === null ? true : stored === "true";
  }, []);
  const setCelebrationEnabled2 = (0, import_react25.useCallback)((enabled) => {
    localStorage.setItem("celebrationsEnabled", String(enabled));
  }, []);
  const triggerConfetti = (0, import_react25.useCallback)((options2 = {}) => {
    if (disabled || !getCelebrationEnabled()) return;
    const now = Date.now();
    if (now - lastTriggerTime.current < 1e3) return;
    lastTriggerTime.current = now;
    if (!hasShownFirstTimeToast.current) {
      hasShownFirstTimeToast.current = true;
      toast.success("Task completed!", {
        description: "You can disable celebrations in settings",
        duration: 5e3,
        action: {
          label: "Disable",
          onClick: () => {
            setCelebrationEnabled2(false);
            toast.success("Celebrations disabled");
          }
        }
      });
    }
    const {
      origin = { x: 0.5, y: 0.5 },
      particleCount = 100,
      spread = 70
    } = options2;
    confetti_module_default({
      particleCount,
      spread,
      origin,
      colors: KRUSHR_COLORS,
      ticks: 200,
      gravity: 1.2,
      decay: 0.94,
      startVelocity: 30,
      shapes: ["square", "circle"],
      scalar: 1
    });
    setTimeout(() => {
      confetti_module_default({
        particleCount: particleCount / 2,
        spread: spread * 1.2,
        origin,
        colors: KRUSHR_COLORS,
        ticks: 200,
        gravity: 1.2,
        decay: 0.94,
        startVelocity: 20,
        shapes: ["square", "circle"],
        scalar: 0.8
      });
    }, 200);
    onComplete?.();
  }, [disabled, getCelebrationEnabled, setCelebrationEnabled2, onComplete]);
  const triggerTaskComplete = (0, import_react25.useCallback)(() => {
    triggerConfetti({
      origin: { x: 0.5, y: 0.6 },
      particleCount: 80,
      spread: 60
    });
  }, [triggerConfetti]);
  const triggerMilestone = (0, import_react25.useCallback)(() => {
    triggerConfetti({
      origin: { x: 0.5, y: 0.5 },
      particleCount: 150,
      spread: 100
    });
  }, [triggerConfetti]);
  (0, import_react25.useEffect)(() => {
    return () => {
      confetti_module_default.reset();
    };
  }, []);
  return {
    triggerConfetti,
    triggerTaskComplete,
    triggerMilestone,
    isEnabled: getCelebrationEnabled(),
    setEnabled: setCelebrationEnabled2
  };
}
function useSuccessSound() {
  const audioRef = (0, import_react25.useRef)(null);
  (0, import_react25.useEffect)(() => {
    audioRef.current = new Audio("data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N+RQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjiS1/LNeSsFJHfH");
    audioRef.current.volume = 0.3;
  }, []);
  const playSuccess = (0, import_react25.useCallback)(() => {
    const soundEnabled = localStorage.getItem("soundEnabled") !== "false";
    if (soundEnabled && audioRef.current) {
      audioRef.current.currentTime = 0;
      audioRef.current.play().catch(() => {
      });
    }
  }, []);
  return { playSuccess };
}

// src/components/dashboard/TasksSummary.tsx
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
function TasksSummary({ className, activeFilter = "all", focusMode = false }) {
  const navigate = useNavigate();
  const { user } = useAuthStore();
  const [editingTaskId, setEditingTaskId] = (0, import_react26.useState)(null);
  const [editingTitle, setEditingTitle] = (0, import_react26.useState)("");
  const [datePickerOpen, setDatePickerOpen] = (0, import_react26.useState)({});
  const [successTaskId, setSuccessTaskId] = (0, import_react26.useState)(null);
  const { triggerTaskComplete } = useConfetti();
  const { playSuccess } = useSuccessSound();
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const workspaceId = workspaces2[0]?.id;
  const { data: allTasks = [], isLoading, refetch } = trpc.task.list.useQuery(
    { workspaceId: workspaceId || "" },
    { enabled: !!workspaceId }
  );
  const updateTaskMutation = trpc.task.update.useMutation({
    onSuccess: (data2, variables) => {
      refetch();
      setSuccessTaskId(variables.id);
      setTimeout(() => setSuccessTaskId(null), 500);
      if (variables.title) {
        toast.success("Task title updated");
      } else if (variables.status) {
        if (variables.status === "DONE") {
          triggerTaskComplete();
          playSuccess();
          toast.success("\u{1F389} Task completed!");
        } else {
          toast.success(`Status changed to ${variables.status}`);
        }
      } else if (variables.priority) {
        toast.success(`Priority changed to ${variables.priority}`);
      } else if (variables.dueDate !== void 0) {
        toast.success(variables.dueDate ? "Due date updated" : "Due date removed");
      } else {
        toast.success("Task updated successfully");
      }
    },
    onError: (error) => {
      toast.error(error.message || "Failed to update task");
    }
  });
  const tasks2 = import_react26.default.useMemo(() => {
    let filtered = filterTasks(allTasks, activeFilter, user?.id);
    if (focusMode) {
      filtered = filtered.filter((task) => {
        if (task.status === "DONE" || task.status === "COMPLETED") return false;
        if (task.kanbanColumn?.title) {
          const title = task.kanbanColumn.title.toLowerCase();
          return !(title.includes("done") || title.includes("complete"));
        }
        return true;
      });
    }
    return filtered;
  }, [allTasks, activeFilter, user?.id, focusMode]);
  const totalTasks = tasks2.length;
  const completedTasks = tasks2.filter((task) => {
    if (task.status === "DONE" || task.status === "COMPLETED") return true;
    if (task.kanbanColumn?.title) {
      const title = task.kanbanColumn.title.toLowerCase();
      return title.includes("done") || title.includes("complete");
    }
    return false;
  }).length;
  const inProgressTasks = tasks2.filter((task) => {
    if (task.status === "IN_PROGRESS" || task.status === "REVIEW") return true;
    if (task.kanbanColumn?.title) {
      const title = task.kanbanColumn.title.toLowerCase();
      return title.includes("progress") || title.includes("review") || title.includes("doing");
    }
    return false;
  }).length;
  const overdueTasks = tasks2.filter((task) => {
    if (!task.dueDate) return false;
    if (task.status === "DONE" || task.status === "COMPLETED") return false;
    if (task.kanbanColumn?.title?.toLowerCase().includes("done")) return false;
    return new Date(task.dueDate) < /* @__PURE__ */ new Date();
  }).length;
  const dueSoonTasks = tasks2.filter((task) => {
    if (!task.dueDate) return false;
    const dueDate = new Date(task.dueDate);
    const now = /* @__PURE__ */ new Date();
    const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1e3);
    return dueDate > now && dueDate <= oneDayFromNow;
  }).length;
  const completionRate = totalTasks > 0 ? Math.round(completedTasks / totalTasks * 100) : 0;
  const stats = [
    {
      label: "Total Tasks",
      value: totalTasks,
      icon: CircleCheck,
      color: "text-gray-600",
      bgColor: "bg-gray-50"
    },
    {
      label: "In Progress",
      value: inProgressTasks,
      icon: Clock,
      color: "text-blue-600",
      bgColor: "bg-blue-50"
    },
    {
      label: "Completed",
      value: completedTasks,
      icon: CircleCheck,
      color: "text-green-600",
      bgColor: "bg-green-50"
    },
    {
      label: "Overdue",
      value: overdueTasks,
      icon: TriangleAlert,
      color: "text-red-600",
      bgColor: "bg-red-50"
    }
  ];
  const upcomingTasks = tasks2.filter((task) => task.dueDate && new Date(task.dueDate) > /* @__PURE__ */ new Date()).sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()).slice(0, 3);
  const formatDueDate = (dateString) => {
    const date = new Date(dateString);
    const now = /* @__PURE__ */ new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Tomorrow";
    if (diffDays < 7) return `${diffDays} days`;
    return date.toLocaleDateString("en-US", { month: "short", day: "numeric" });
  };
  const startEditing = (taskId, currentTitle) => {
    setEditingTaskId(taskId);
    setEditingTitle(currentTitle);
  };
  const cancelEditing = () => {
    setEditingTaskId(null);
    setEditingTitle("");
  };
  const saveTitle = async (taskId) => {
    if (editingTitle.trim()) {
      await updateTaskMutation.mutateAsync({
        id: taskId,
        title: editingTitle.trim()
      });
    }
    cancelEditing();
  };
  const handleKeyDown = (e, taskId) => {
    if (e.key === "Enter") {
      e.preventDefault();
      saveTitle(taskId);
    } else if (e.key === "Escape") {
      cancelEditing();
    }
  };
  const toggleStatus = async (task) => {
    const statusCycle = {
      "TODO": "IN_PROGRESS",
      "IN_PROGRESS": "IN_REVIEW",
      "IN_REVIEW": "DONE",
      "DONE": "TODO"
    };
    const newStatus = statusCycle[task.status] || "TODO";
    await updateTaskMutation.mutateAsync({
      id: task.id,
      status: newStatus
    });
  };
  const togglePriority = async (task) => {
    const priorityCycle = {
      "LOW": "MEDIUM",
      "MEDIUM": "HIGH",
      "HIGH": "URGENT",
      "URGENT": "LOW"
    };
    const newPriority = priorityCycle[task.priority] || "MEDIUM";
    await updateTaskMutation.mutateAsync({
      id: task.id,
      priority: newPriority
    });
  };
  const updateDueDate = async (taskId, date) => {
    await updateTaskMutation.mutateAsync({
      id: taskId,
      dueDate: date?.toISOString()
    });
    setDatePickerOpen((prev) => ({ ...prev, [taskId]: false }));
  };
  const getStatusColor = (status) => {
    const colors = {
      "TODO": "bg-gray-100 text-gray-700 border-gray-200",
      "IN_PROGRESS": "bg-blue-100 text-blue-700 border-blue-200",
      "IN_REVIEW": "bg-purple-100 text-purple-700 border-purple-200",
      "DONE": "bg-green-100 text-green-700 border-green-200",
      "CANCELLED": "bg-red-100 text-red-700 border-red-200"
    };
    return colors[status] || colors.TODO;
  };
  const getPriorityColor = (priority) => {
    const colors = {
      "LOW": "border-green-200 text-green-700 bg-green-50",
      "MEDIUM": "border-orange-200 text-orange-700 bg-orange-50",
      "HIGH": "border-red-200 text-red-700 bg-red-50",
      "URGENT": "border-red-300 text-red-800 bg-red-100"
    };
    return colors[priority] || colors.MEDIUM;
  };
  const getNextStatus = (currentStatus) => {
    const statusCycle = {
      "TODO": "IN_PROGRESS",
      "IN_PROGRESS": "IN_REVIEW",
      "IN_REVIEW": "DONE",
      "DONE": "TODO"
    };
    return statusCycle[currentStatus] || "IN_PROGRESS";
  };
  const getNextPriority = (currentPriority) => {
    const priorityCycle = {
      "LOW": "MEDIUM",
      "MEDIUM": "HIGH",
      "HIGH": "URGENT",
      "URGENT": "LOW"
    };
    return priorityCycle[currentPriority] || "MEDIUM";
  };
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Card, { className: cn("h-full flex items-center justify-center", className), children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin text-gray-400" }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(CardHeader, { className: "flex-shrink-0 pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(CardTitle, { className: "text-lg font-semibold", children: activeFilter === "all" ? "Tasks Overview" : activeFilter === "my-tasks" ? "My Tasks" : activeFilter === "urgent" ? "Urgent Tasks" : activeFilter === "due-today" ? "Due Today" : "Unassigned Tasks" }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(Badge, { variant: "outline", className: "text-green-700 border-green-200 bg-green-50", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TrendingUp, { className: "w-3 h-3 mr-1" }),
        completionRate,
        "% Complete"
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(CardContent, { className: "flex-1 space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "grid grid-cols-2 gap-4", children: stats.map((stat) => {
        const IconComponent = stat.icon;
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
          "div",
          {
            className: cn(
              "p-4 rounded-lg border transition-colors hover:shadow-sm",
              stat.bgColor
            ),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(IconComponent, { className: cn("w-5 h-5", stat.color) }),
                /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { className: cn("text-2xl font-bold", stat.color), children: stat.value })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "text-sm text-gray-600 font-medium", children: stat.label })
            ]
          },
          stat.label
        );
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center justify-between text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { className: "text-gray-600", children: "Overall Progress" }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("span", { className: "font-medium", children: [
            completedTasks,
            "/",
            totalTasks
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Progress, { value: completionRate, className: "h-2" })
      ] }),
      dueSoonTasks > 0 && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "p-3 bg-orange-50 border border-orange-200 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TriangleAlert, { className: "w-4 h-4 text-orange-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("span", { className: "text-sm font-medium text-orange-800", children: [
          dueSoonTasks,
          " task",
          dueSoonTasks > 1 ? "s" : "",
          " due within 24 hours"
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h4", { className: "text-sm font-semibold text-gray-900", children: "Upcoming Deadlines" }),
        upcomingTasks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "text-center py-4 text-gray-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Calendar, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm", children: "No upcoming deadlines" })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "space-y-2", children: upcomingTasks.map((task) => {
          const isEditing = editingTaskId === task.id;
          const isOverdue = task.dueDate && new Date(task.dueDate) < /* @__PURE__ */ new Date();
          return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
            "div",
            {
              className: cn(
                "group flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors",
                successTaskId === task.id && "animate-success-pulse"
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  isEditing ? /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center space-x-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                      Input,
                      {
                        value: editingTitle,
                        onChange: (e) => setEditingTitle(e.target.value),
                        onKeyDown: (e) => handleKeyDown(e, task.id),
                        className: "h-7 text-sm font-medium",
                        autoFocus: true
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                      Button,
                      {
                        size: "sm",
                        variant: "ghost",
                        className: "h-7 w-7 p-0",
                        onClick: () => saveTitle(task.id),
                        disabled: updateTaskMutation.isPending,
                        children: updateTaskMutation.isPending ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(LoaderCircle, { className: "w-3.5 h-3.5 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Save, { className: "w-3.5 h-3.5 text-green-600" })
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                      Button,
                      {
                        size: "sm",
                        variant: "ghost",
                        className: "h-7 w-7 p-0",
                        onClick: cancelEditing,
                        children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(X, { className: "w-3.5 h-3.5 text-red-600" })
                      }
                    )
                  ] }) : /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
                    "div",
                    {
                      className: "flex items-center space-x-2 cursor-pointer",
                      onDoubleClick: () => startEditing(task.id, task.title),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm font-medium text-gray-900 truncate", children: task.title }),
                        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                          Button,
                          {
                            size: "sm",
                            variant: "ghost",
                            className: "h-5 w-5 p-0 opacity-0 group-hover:opacity-100 transition-opacity",
                            onClick: (e) => {
                              e.stopPropagation();
                              startEditing(task.id, task.title);
                            },
                            children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Pen, { className: "w-3 h-3" })
                          }
                        )
                      ]
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center space-x-2 mt-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(Tooltip, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                        Badge,
                        {
                          variant: "outline",
                          className: cn(
                            "text-xs cursor-pointer transition-all hover:scale-105",
                            getStatusColor(task.status || "TODO"),
                            updateTaskMutation.isPending && "opacity-50 cursor-wait"
                          ),
                          onClick: () => !updateTaskMutation.isPending && toggleStatus(task),
                          children: updateTaskMutation.isPending ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(LoaderCircle, { className: "w-3 h-3 animate-spin" }) : task.status || "TODO"
                        }
                      ) }),
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("p", { className: "text-xs", children: [
                        "Click to change to: ",
                        getNextStatus(task.status || "TODO")
                      ] }) })
                    ] }) }),
                    task.priority && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(Tooltip, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                        Badge,
                        {
                          variant: "outline",
                          className: cn(
                            "text-xs cursor-pointer transition-all hover:scale-105",
                            getPriorityColor(task.priority),
                            updateTaskMutation.isPending && "opacity-50 cursor-wait"
                          ),
                          onClick: () => !updateTaskMutation.isPending && togglePriority(task),
                          children: updateTaskMutation.isPending ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(LoaderCircle, { className: "w-3 h-3 animate-spin" }) : task.priority
                        }
                      ) }),
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("p", { className: "text-xs", children: [
                        "Click to change to: ",
                        getNextPriority(task.priority)
                      ] }) })
                    ] }) }),
                    task.assignee && /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center space-x-1 text-xs text-gray-500", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(User, { className: "w-3 h-3" }),
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { children: task.assignee.name?.split(" ")[0] || "Assigned" })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
                  Popover2,
                  {
                    open: datePickerOpen[task.id] || false,
                    onOpenChange: (open) => setDatePickerOpen((prev) => ({ ...prev, [task.id]: open })),
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(PopoverTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
                        Button,
                        {
                          variant: "outline",
                          className: cn(
                            "h-8 px-2 text-xs font-medium",
                            isOverdue && "text-red-600 border-red-200 bg-red-50 hover:bg-red-100"
                          ),
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Calendar, { className: "w-3 h-3 mr-1" }),
                            task.dueDate ? formatDueDate(task.dueDate) : "Set due date"
                          ]
                        }
                      ) }),
                      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(PopoverContent2, { className: "w-auto p-0", align: "end", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                        Calendar2,
                        {
                          mode: "single",
                          selected: task.dueDate ? new Date(task.dueDate) : void 0,
                          onSelect: (date) => updateDueDate(task.id, date),
                          initialFocus: true
                        }
                      ) })
                    ]
                  }
                )
              ]
            },
            task.id
          );
        }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "pt-2 border-t", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
        Button,
        {
          variant: "ghost",
          className: "w-full justify-between text-gray-600 hover:text-gray-900",
          onClick: () => navigate("/board"),
          children: [
            "View all tasks",
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ArrowRight, { className: "w-4 h-4" })
          ]
        }
      ) })
    ] })
  ] });
}

// src/components/dashboard/ProductivityInsights.tsx
var import_react27 = __toESM(require_react(), 1);
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
function ProductivityInsights({ className, workspaceId }) {
  const { user } = useAuthStore();
  const { data: allTasks = [], isLoading } = trpc.task.list.useQuery(
    { workspaceId: workspaceId || "" },
    { enabled: !!workspaceId }
  );
  const weeklyData = (0, import_react27.useMemo)(() => {
    const now = /* @__PURE__ */ new Date();
    const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    const data2 = [];
    for (let i = 6; i >= 0; i--) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      date.setHours(0, 0, 0, 0);
      const nextDate = new Date(date);
      nextDate.setDate(nextDate.getDate() + 1);
      const completedCount = allTasks.filter((task) => {
        if (task.status !== "DONE" && task.status !== "COMPLETED") return false;
        const updatedAt = new Date(task.updatedAt);
        return updatedAt >= date && updatedAt < nextDate;
      }).length;
      data2.push({
        day: days[date.getDay()],
        date,
        completed: completedCount,
        isToday: i === 0
      });
    }
    return data2;
  }, [allTasks]);
  const velocity = (0, import_react27.useMemo)(() => {
    const thisWeekCompleted = weeklyData.reduce((sum, day) => sum + day.completed, 0);
    const lastWeekStart = /* @__PURE__ */ new Date();
    lastWeekStart.setDate(lastWeekStart.getDate() - 14);
    lastWeekStart.setHours(0, 0, 0, 0);
    const lastWeekEnd = /* @__PURE__ */ new Date();
    lastWeekEnd.setDate(lastWeekEnd.getDate() - 7);
    lastWeekEnd.setHours(0, 0, 0, 0);
    const lastWeekCompleted = allTasks.filter((task) => {
      if (task.status !== "DONE" && task.status !== "COMPLETED") return false;
      const updatedAt = new Date(task.updatedAt);
      return updatedAt >= lastWeekStart && updatedAt < lastWeekEnd;
    }).length;
    const percentChange = lastWeekCompleted > 0 ? Math.round((thisWeekCompleted - lastWeekCompleted) / lastWeekCompleted * 100) : thisWeekCompleted > 0 ? 100 : 0;
    return {
      thisWeek: thisWeekCompleted,
      lastWeek: lastWeekCompleted,
      percentChange,
      isUp: percentChange > 0
    };
  }, [weeklyData, allTasks]);
  const streak = (0, import_react27.useMemo)(() => {
    let currentStreak = 0;
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      date.setHours(0, 0, 0, 0);
      const nextDate = new Date(date);
      nextDate.setDate(nextDate.getDate() + 1);
      const hasCompletedTask = allTasks.some((task) => {
        if (task.status !== "DONE" && task.status !== "COMPLETED") return false;
        const updatedAt = new Date(task.updatedAt);
        return updatedAt >= date && updatedAt < nextDate;
      });
      if (hasCompletedTask) {
        currentStreak++;
      } else if (i > 0) {
        break;
      }
    }
    return currentStreak;
  }, [allTasks]);
  const focusTime = (0, import_react27.useMemo)(() => {
    const hourCounts = new Array(24).fill(0);
    allTasks.forEach((task) => {
      if (task.status === "DONE" || task.status === "COMPLETED") {
        const hour = new Date(task.updatedAt).getHours();
        hourCounts[hour]++;
      }
    });
    let maxHour = 14;
    let maxCount = 0;
    for (let i = 8; i <= 18; i++) {
      if (hourCounts[i] > maxCount) {
        maxCount = hourCounts[i];
        maxHour = i;
      }
    }
    const endHour = Math.min(maxHour + 2, 18);
    const formatHour = (h) => {
      const period = h >= 12 ? "PM" : "AM";
      const displayHour = h > 12 ? h - 12 : h === 0 ? 12 : h;
      return `${displayHour} ${period}`;
    };
    return {
      start: formatHour(maxHour),
      end: formatHour(endHour),
      hasData: maxCount > 0
    };
  }, [allTasks]);
  const maxCompleted = Math.max(...weeklyData.map((d) => d.completed), 5);
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Card, { className: cn("h-full flex items-center justify-center", className), children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin text-gray-400" }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(Card, { className: cn("", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(CardHeader, { className: "pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Productivity Insights" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(CardContent, { className: "space-y-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "space-y-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h4", { className: "text-sm font-medium text-gray-700", children: "Weekly Completion Trend" }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "flex items-end justify-between h-20 gap-1", children: weeklyData.map((day, index) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex-1 flex flex-col items-center justify-end gap-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
            "div",
            {
              className: cn(
                "w-full rounded-t transition-all duration-300",
                day.isToday ? "bg-krushr-primary" : "bg-krushr-primary/60",
                "animate-slide-up"
              ),
              style: {
                height: `${day.completed > 0 ? day.completed / maxCompleted * 100 : 5}%`,
                animationDelay: `${index * 50}ms`
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { className: cn(
            "text-xs",
            day.isToday ? "font-semibold text-krushr-primary" : "text-gray-500"
          ), children: day.day })
        ] }, index)) }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "flex items-center justify-between text-xs text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("span", { children: [
          weeklyData.reduce((sum, d) => sum + d.completed, 0),
          " tasks completed this week"
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-3 bg-gray-50 rounded-lg border border-gray-100", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-center gap-2", children: [
          velocity.isUp ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-1.5 bg-green-100 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TrendingUp, { className: "w-4 h-4 text-green-600" }) }) : velocity.percentChange < 0 ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-1.5 bg-red-100 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TrendingDown, { className: "w-4 h-4 text-red-600" }) }) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-1.5 bg-gray-100 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TrendingUp, { className: "w-4 h-4 text-gray-600" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("p", { className: "text-sm font-medium text-gray-900", children: [
              "You're ",
              Math.abs(velocity.percentChange),
              "% ",
              velocity.isUp ? "more" : velocity.percentChange < 0 ? "less" : "as",
              " productive"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "text-xs text-gray-500", children: velocity.percentChange !== 0 ? "than last week" : "as last week" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(Badge, { variant: "outline", className: "text-xs", children: [
          velocity.thisWeek,
          " vs ",
          velocity.lastWeek
        ] })
      ] }) }),
      streak > 0 && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-3 bg-orange-50 rounded-lg border border-orange-200", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Flame, { className: "w-5 h-5 text-orange-600 animate-pulse-slow" }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("p", { className: "text-sm font-medium text-orange-900", children: [
              streak,
              " day completion streak!"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "text-xs text-orange-700", children: "Keep up the great work" })
          ] })
        ] }),
        streak >= 7 && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Badge, { className: "bg-orange-600 hover:bg-orange-700", children: "On Fire!" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "p-3 bg-blue-50 rounded-lg border border-blue-200", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Clock, { className: "w-5 h-5 text-blue-600 flex-shrink-0" }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "min-w-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("p", { className: "text-sm font-medium text-blue-900", children: [
            "Best time to focus: ",
            focusTime.start,
            " - ",
            focusTime.end
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "text-xs text-blue-700", children: focusTime.hasData ? "Based on your completion patterns" : "Start completing tasks to see personalized insights" })
        ] })
      ] }) })
    ] })
  ] });
}

// src/components/common/KeyboardShortcutsHelp.tsx
var import_react29 = __toESM(require_react(), 1);

// src/hooks/useKeyboardShortcuts.tsx
var import_react28 = __toESM(require_react(), 1);
function useKeyboardShortcuts({
  onCreateTask,
  onChangeFilter,
  onToggleFocusMode,
  onShowHelp,
  onRefresh,
  onCloseModal
}) {
  const [isTextFieldFocused, setIsTextFieldFocused] = (0, import_react28.useState)(false);
  const navigate = useNavigate();
  (0, import_react28.useEffect)(() => {
    const handleFocusIn = (e) => {
      const target = e.target;
      const isTextField = target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.getAttribute("contenteditable") === "true" || target.closest('[contenteditable="true"]');
      setIsTextFieldFocused(!!isTextField);
    };
    const handleFocusOut = () => {
      setTimeout(() => {
        const activeElement = document.activeElement;
        const isTextField = activeElement?.tagName === "INPUT" || activeElement?.tagName === "TEXTAREA" || activeElement?.getAttribute("contenteditable") === "true" || activeElement?.closest('[contenteditable="true"]');
        setIsTextFieldFocused(!!isTextField);
      }, 50);
    };
    document.addEventListener("focusin", handleFocusIn);
    document.addEventListener("focusout", handleFocusOut);
    return () => {
      document.removeEventListener("focusin", handleFocusIn);
      document.removeEventListener("focusout", handleFocusOut);
    };
  }, []);
  const handleKeyDown = (0, import_react28.useCallback)((e) => {
    if (isTextFieldFocused) {
      if (e.key === "Escape" && onCloseModal) {
        onCloseModal();
      }
      return;
    }
    const preventDefault = () => {
      e.preventDefault();
      e.stopPropagation();
    };
    if (e.key === "c" && !e.metaKey && !e.ctrlKey) {
      preventDefault();
      onCreateTask();
      return;
    }
    if ((e.metaKey || e.ctrlKey) && e.key === "k") {
      preventDefault();
      onCreateTask();
      return;
    }
    const filterMap = {
      "1": "all",
      "2": "my-tasks",
      "3": "urgent",
      "4": "due-today",
      "5": "unassigned"
    };
    if (filterMap[e.key] && !e.metaKey && !e.ctrlKey && !e.altKey) {
      preventDefault();
      onChangeFilter(filterMap[e.key]);
      return;
    }
    if (e.key === "f" && !e.metaKey && !e.ctrlKey) {
      preventDefault();
      onToggleFocusMode();
      return;
    }
    if (e.key === "?" || e.key === "/" && e.shiftKey) {
      preventDefault();
      onShowHelp();
      return;
    }
    if ((e.metaKey || e.ctrlKey) && e.key === "/") {
      preventDefault();
      onShowHelp();
      return;
    }
    if (e.key === "r" && !e.metaKey && !e.ctrlKey) {
      preventDefault();
      onRefresh();
      return;
    }
    if (e.key === "Escape" && onCloseModal) {
      preventDefault();
      onCloseModal();
      return;
    }
    if (e.key === "g" && !e.metaKey && !e.ctrlKey) {
      const handleSecondKey = (e2) => {
        e2.preventDefault();
        switch (e2.key) {
          case "h":
            navigate("/");
            break;
          case "b":
            navigate("/board");
            break;
          case "c":
            navigate("/calendar");
            break;
          case "m":
            navigate("/chat");
            break;
          case "n":
            navigate("/notes");
            break;
        }
        document.removeEventListener("keydown", handleSecondKey);
      };
      document.addEventListener("keydown", handleSecondKey);
      setTimeout(() => {
        document.removeEventListener("keydown", handleSecondKey);
      }, 2e3);
    }
  }, [isTextFieldFocused, onCreateTask, onChangeFilter, onToggleFocusMode, onShowHelp, onRefresh, onCloseModal, navigate]);
  (0, import_react28.useEffect)(() => {
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleKeyDown]);
  return { isTextFieldFocused };
}
var KEYBOARD_SHORTCUTS = {
  navigation: [
    { keys: ["G", "H"], description: "Go to Home" },
    { keys: ["G", "B"], description: "Go to Board" },
    { keys: ["G", "C"], description: "Go to Calendar" },
    { keys: ["G", "M"], description: "Go to Chat" },
    { keys: ["G", "N"], description: "Go to Notes" }
  ],
  actions: [
    { keys: ["C"], description: "Create new task", modifiers: [] },
    { keys: ["\u2318", "K"], description: "Create new task", modifiers: ["Ctrl", "K"] },
    { keys: ["R"], description: "Refresh data" },
    { keys: ["F"], description: "Toggle focus mode (hide completed)" },
    { keys: ["Esc"], description: "Close modals/dialogs" }
  ],
  filters: [
    { keys: ["1"], description: "All tasks" },
    { keys: ["2"], description: "My tasks" },
    { keys: ["3"], description: "Urgent tasks" },
    { keys: ["4"], description: "Due today" },
    { keys: ["5"], description: "Unassigned tasks" }
  ],
  help: [
    { keys: ["?"], description: "Show keyboard shortcuts" },
    { keys: ["\u2318", "/"], description: "Show keyboard shortcuts", modifiers: ["Ctrl", "/"] }
  ]
};

// src/components/common/KeyboardShortcutsHelp.tsx
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
function KeyboardShortcutsHelp({ open, onOpenChange }) {
  const isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
  const renderKey = (key) => {
    if (key === "\u2318" && !isMac) return "Ctrl";
    if (key === "Ctrl" && isMac) return "\u2318";
    return key;
  };
  const renderShortcut = (shortcut) => {
    const keys = isMac ? shortcut.keys : shortcut.modifiers || shortcut.keys;
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex items-center justify-between py-2.5 px-1 hover:bg-gray-50 rounded-lg transition-colors", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "text-sm text-gray-700", children: shortcut.description }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "flex items-center gap-1", children: keys.map((key, index) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(import_react29.default.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("kbd", { className: "min-w-[28px] h-7 px-2 py-1 text-xs font-medium text-gray-800 bg-gray-100 border border-gray-200 rounded-md shadow-sm flex items-center justify-center", children: renderKey(key) }),
        index < keys.length - 1 && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "text-xs text-gray-400 mx-0.5", children: "+" })
      ] }, index)) })
    ] });
  };
  const renderSection = (title, shortcuts) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "space-y-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { className: "text-sm font-semibold text-krushr-primary uppercase tracking-wide", children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "space-y-1", children: shortcuts.map((shortcut, index) => /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { children: renderShortcut(shortcut) }, index)) })
  ] });
  return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(DialogContent, { className: "max-w-2xl max-h-[85vh] overflow-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(DialogHeader, { className: "pb-4", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(DialogTitle, { className: "text-2xl font-bold text-gray-900 flex items-center gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "w-10 h-10 bg-krushr-primary rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Command, { className: "w-6 h-6 text-white" }) }),
      "Keyboard Shortcuts"
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "overflow-y-auto max-h-[calc(85vh-120px)] pr-2 -mr-2", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "space-y-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "bg-krushr-primary-50 border border-krushr-primary-100 rounded-lg p-4", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("p", { className: "text-sm text-krushr-primary-800", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "font-semibold", children: "Pro tip:" }),
        " These shortcuts work anywhere in the dashboard. They're automatically disabled when you're typing in text fields."
      ] }) }),
      renderSection("Actions", KEYBOARD_SHORTCUTS.actions),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Separator2, { className: "my-4" }),
      renderSection("Task Filters", KEYBOARD_SHORTCUTS.filters),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Separator2, { className: "my-4" }),
      renderSection("Navigation", KEYBOARD_SHORTCUTS.navigation),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Separator2, { className: "my-4" }),
      renderSection("Help", KEYBOARD_SHORTCUTS.help)
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "mt-6 pt-4 border-t border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("p", { className: "text-xs text-gray-500 text-center", children: [
      "Press ",
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("kbd", { className: "px-1.5 py-0.5 text-xs bg-gray-100 border border-gray-200 rounded mx-1", children: "Esc" }),
      " to close"
    ] }) })
  ] }) });
}

// src/components/common/KeyboardHint.tsx
var import_react30 = __toESM(require_react(), 1);
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
function KeyboardHint({ keys, className, show = true }) {
  if (!show) return null;
  const isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
  const renderKey = (key) => {
    if (key === "\u2318" && !isMac) return "Ctrl";
    if (key === "Ctrl" && isMac) return "\u2318";
    return key;
  };
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: cn(
    "inline-flex items-center gap-0.5 ml-2",
    className
  ), children: keys.map((key, index) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_react30.default.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("kbd", { className: "min-w-[20px] h-5 px-1.5 py-0.5 text-[10px] font-medium text-gray-600 bg-gray-100/80 border border-gray-200/50 rounded flex items-center justify-center shadow-sm", children: renderKey(key) }),
    index < keys.length - 1 && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { className: "text-[10px] text-gray-400 mx-0.5", children: "+" })
  ] }, index)) });
}
function KeyboardTooltip({ children, keys, description }) {
  const [showTooltip, setShowTooltip] = import_react30.default.useState(false);
  const timeoutRef = import_react30.default.useRef();
  const handleMouseEnter = () => {
    timeoutRef.current = setTimeout(() => {
      setShowTooltip(true);
    }, 500);
  };
  const handleMouseLeave = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    setShowTooltip(false);
  };
  import_react30.default.useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "relative inline-flex", onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, children: [
    children,
    showTooltip && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "absolute z-50 bottom-full left-1/2 transform -translate-x-1/2 mb-2 pointer-events-none", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "bg-gray-900 text-white px-2 py-1.5 rounded-md shadow-lg text-xs whitespace-nowrap", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center gap-2", children: [
        description && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { children: description }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(KeyboardHint, { keys, className: "ml-0" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "absolute top-full left-1/2 transform -translate-x-1/2 -mt-px", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900" }) })
    ] }) })
  ] });
}

// src/pages/Home.tsx
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
function Home() {
  const { user, isAuthenticated } = useAuthStore();
  const navigate = useNavigate();
  const [showUniversalForm, setShowUniversalForm] = (0, import_react31.useState)(false);
  const [activeFilter, setActiveFilter] = (0, import_react31.useState)("all");
  const [showKeyboardHelp, setShowKeyboardHelp] = (0, import_react31.useState)(false);
  const [focusMode, setFocusMode] = (0, import_react31.useState)(false);
  (0, import_react31.useEffect)(() => {
    if (!isAuthenticated) {
      navigate("/login");
    }
  }, [isAuthenticated, navigate]);
  const { data: notificationData, refetch: refetchNotifications } = trpc.notification.list.useQuery({});
  const { data: workspaces2 = [], refetch: refetchWorkspaces } = trpc.workspace.list.useQuery();
  const notifications2 = notificationData?.notifications || [];
  const activeWorkspace = workspaces2[0];
  const unreadNotifications = notifications2.filter((n) => !n.isRead).length;
  const { data: allTasks = [] } = trpc.task.list.useQuery(
    { workspaceId: activeWorkspace?.id || "" },
    { enabled: !!activeWorkspace?.id }
  );
  const tasksDueToday = import_react31.default.useMemo(() => {
    const now = /* @__PURE__ */ new Date();
    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1e3);
    return allTasks.filter((task) => {
      if (!task.dueDate) return false;
      const dueDate = new Date(task.dueDate);
      return dueDate >= todayStart && dueDate < todayEnd;
    }).length;
  }, [allTasks]);
  const getGreeting = () => {
    const hour = (/* @__PURE__ */ new Date()).getHours();
    if (hour >= 5 && hour < 12) return { text: "Good morning", icon: "cs-sun" };
    if (hour >= 12 && hour < 17) return { text: "Good afternoon", icon: "cs-cloud-sun" };
    if (hour >= 17 && hour < 22) return { text: "Good evening", icon: "cs-moon" };
    return { text: "Working late?", icon: "cs-moon" };
  };
  const getMotivationalSubtitle = () => {
    const totalTasks = allTasks.filter(
      (task) => task.status !== "DONE" && task.status !== "COMPLETED"
    ).length;
    if (totalTasks === 0) return "All caught up! Time to relax or plan ahead.";
    if (totalTasks < 5) return "Ready to crush it today!";
    if (totalTasks < 10) return "Let's make progress!";
    return "You've got this! One task at a time.";
  };
  const getGradientClass = () => {
    const hour = (/* @__PURE__ */ new Date()).getHours();
    if (hour >= 5 && hour < 12) return "bg-gradient-to-r from-orange-500 to-yellow-500";
    if (hour >= 12 && hour < 17) return "bg-gradient-to-r from-blue-500 to-purple-500";
    if (hour >= 17 && hour < 22) return "bg-gradient-to-r from-purple-500 to-pink-500";
    return "bg-gradient-to-r from-indigo-600 to-purple-600";
  };
  const formatDate3 = () => {
    const date = /* @__PURE__ */ new Date();
    const options = {
      weekday: "long",
      month: "long",
      day: "numeric"
    };
    const formattedDate = date.toLocaleDateString("en-US", options);
    const day = date.getDate();
    const suffix = ["th", "st", "nd", "rd"][day % 10 > 3 || [11, 12, 13].includes(day % 100) ? 0 : day % 10];
    return formattedDate.replace(/\d+/, `${day}${suffix}`);
  };
  const greeting = getGreeting();
  const firstName = user?.name?.split(" ")[0] || "User";
  const handleCreateTask = (0, import_react31.useCallback)(() => {
    setShowUniversalForm(true);
  }, []);
  const handleChangeFilter = (0, import_react31.useCallback)((filter) => {
    setActiveFilter(filter);
  }, []);
  const handleToggleFocusMode = (0, import_react31.useCallback)(() => {
    setFocusMode((prev) => !prev);
    toast.success(focusMode ? "Focus mode disabled" : "Focus mode enabled - completed tasks hidden");
  }, [focusMode]);
  const handleShowHelp = (0, import_react31.useCallback)(() => {
    setShowKeyboardHelp(true);
  }, []);
  const handleRefresh = (0, import_react31.useCallback)(async () => {
    await Promise.all([
      refetchNotifications(),
      refetchWorkspaces()
    ]);
    toast.success("Data refreshed");
  }, [refetchNotifications, refetchWorkspaces]);
  const handleCloseModal = (0, import_react31.useCallback)(() => {
    if (showUniversalForm) {
      setShowUniversalForm(false);
    } else if (showKeyboardHelp) {
      setShowKeyboardHelp(false);
    }
  }, [showUniversalForm, showKeyboardHelp]);
  useKeyboardShortcuts({
    onCreateTask: handleCreateTask,
    onChangeFilter: handleChangeFilter,
    onToggleFocusMode: handleToggleFocusMode,
    onShowHelp: handleShowHelp,
    onRefresh: handleRefresh,
    onCloseModal: handleCloseModal
  });
  const quickNavItems = [
    {
      title: "Board",
      icon: ChartColumn,
      href: "/board",
      description: "Manage your kanban boards",
      color: "text-blue-600 bg-blue-50"
    },
    {
      title: "Calendar",
      icon: Calendar,
      href: "/calendar",
      description: "View deadlines and schedule",
      color: "text-green-600 bg-green-50"
    },
    {
      title: "Chat",
      icon: MessageCircle,
      href: "/chat",
      description: "Team conversations",
      color: "text-purple-600 bg-purple-50"
    },
    {
      title: "Notes",
      icon: StickyNote,
      href: "/notes",
      description: "Capture ideas and knowledge",
      color: "text-orange-600 bg-orange-50"
    }
  ];
  if (!isAuthenticated) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ResponsiveLayout, { children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "h-full flex flex-col bg-gray-50", children: [
    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "bg-white border-b border-gray-200 px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "animate-fade-in flex items-center gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("i", { className: `${greeting.icon} text-2xl text-gray-400` }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "min-w-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("h1", { className: "text-xl md:text-2xl font-bold flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: `${getGradientClass()} bg-clip-text text-transparent`, children: greeting.text }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("span", { className: "text-gray-900", children: [
              firstName,
              "!"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2 text-sm text-gray-600 flex-wrap", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "font-medium", children: formatDate3() }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "text-gray-400", children: "\u2022" }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { children: getMotivationalSubtitle() }),
            tasksDueToday > 0 && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(import_jsx_runtime47.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "text-gray-400", children: "\u2022" }),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("span", { className: "font-medium text-blue-600", children: [
                tasksDueToday,
                " task",
                tasksDueToday > 1 ? "s" : "",
                " due today"
              ] })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
          Button,
          {
            variant: "ghost",
            size: "icon",
            className: "relative h-9 w-9",
            onClick: () => navigate("/notifications"),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Bell, { className: "w-4 h-4" }),
              unreadNotifications > 0 && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { className: "absolute -top-0.5 -right-0.5 h-4 w-4 p-0 flex items-center justify-center text-[10px] bg-red-500", children: unreadNotifications })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(KeyboardTooltip, { keys: ["C"], description: "Press", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(Button, { onClick: () => setShowUniversalForm(true), size: "sm", className: "h-9", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Plus, { className: "w-4 h-4 mr-1.5" }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "hidden sm:inline", children: "Create Item" }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "sm:hidden", children: "Create" }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(KeyboardHint, { keys: ["C"], className: "ml-2" })
        ] }) })
      ] })
    ] }) }),
    showUniversalForm && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
      UniversalInputForm,
      {
        onClose: () => setShowUniversalForm(false),
        defaultType: "TASK" /* TASK */,
        workspaceId: activeWorkspace?.id
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        TaskFilters,
        {
          activeFilter,
          onFilterChange: setActiveFilter,
          workspaceId: activeWorkspace?.id
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "absolute right-4 top-1/2 -translate-y-1/2 flex items-center gap-2", children: [
        focusMode && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Focus Mode" }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(KeyboardTooltip, { keys: ["?"], description: "Keyboard shortcuts", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: () => setShowKeyboardHelp(true),
            className: "text-gray-500 hover:text-gray-700",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "text-xs", children: "Shortcuts" }),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(KeyboardHint, { keys: ["?"] })
            ]
          }
        ) })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex-1 p-6 overflow-auto", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6 h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ProductivityInsights, { workspaceId: activeWorkspace?.id }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CardHeader, { className: "pb-3", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CardTitle, { className: "text-lg font-semibold", children: "Quick Navigation" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CardContent, { className: "space-y-2", children: quickNavItems.map((item) => {
            const IconComponent = item.icon;
            return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
              Button,
              {
                variant: "ghost",
                className: "w-full justify-between h-auto p-4 hover:bg-gray-50",
                onClick: () => {
                  console.log("Button clicked:", item.title, item.href);
                  navigate(item.href);
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-3", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: `p-2 rounded-lg ${item.color}`, children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(IconComponent, { className: "w-4 h-4" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "text-left", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "font-medium text-gray-900", children: item.title }),
                      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "text-xs text-gray-500", children: item.description })
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ChevronRight, { className: "w-4 h-4 text-gray-400" })
                ]
              },
              item.title
            );
          }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(QuickActions, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        TasksSummary,
        {
          activeFilter,
          focusMode
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ActivityFeed, {}) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
      KeyboardShortcutsHelp,
      {
        open: showKeyboardHelp,
        onOpenChange: setShowKeyboardHelp
      }
    )
  ] }) });
}

// src/pages/Board.tsx
var import_react33 = __toESM(require_react(), 1);

// src/components/project/Layout.tsx
var import_react32 = __toESM(require_react(), 1);
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
function Layout({ children }) {
  const navigate = useNavigate();
  const location = useLocation();
  const [currentPage, setCurrentPage] = (0, import_react32.useState)("home");
  (0, import_react32.useEffect)(() => {
    const pathToPageMap = {
      "/": "home",
      "/home": "home",
      "/workspace": "workspace",
      "/board": "board",
      "/calendar": "calendar",
      "/chat": "chat",
      "/notes": "notes",
      "/teams": "teams",
      "/projects": "projects"
    };
    const currentPath = location.pathname;
    const page = pathToPageMap[currentPath] || "home";
    setCurrentPage(page);
  }, [location.pathname]);
  const handlePageChange = (page) => {
    console.log("Navigation clicked:", page);
    setCurrentPage(page);
    const routes = {
      home: "/home",
      workspace: "/workspace",
      board: "/board",
      calendar: "/calendar",
      chat: "/chat",
      notes: "/notes",
      teams: "/teams",
      projects: "/projects"
    };
    console.log("Will navigate to:", routes[page]);
    if (routes[page]) {
      console.log("Navigating to:", routes[page]);
      navigate(routes[page]);
    } else {
      console.log("No route found for page:", page);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "flex h-screen bg-gray-50", children: [
    /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Sidebar, { currentPage, onPageChange: handlePageChange }),
    /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("main", { className: "flex-1 overflow-x-visible overflow-y-auto", children })
  ] });
}

// src/components/common/KrushrLoader.tsx
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
function KrushrLoader({
  size = "md",
  text = "Loading...",
  className
}) {
  const sizeClasses = {
    sm: "w-16 h-16",
    md: "w-20 h-20",
    lg: "w-24 h-24"
  };
  const textSizeClasses = {
    sm: "text-sm",
    md: "text-base",
    lg: "text-lg"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: cn("flex flex-col items-center justify-center space-y-4", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: cn(
      "relative",
      sizeClasses[size]
    ), children: [
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "absolute inset-0 border-4 border-muted rounded-full border-t-primary animate-spin" }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "font-bold text-blue-600 text-sm", children: "K" }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: cn(
      "text-muted-foreground font-medium",
      textSizeClasses[size]
    ), children: text })
  ] });
}

// src/components/ui/floating-action-button.tsx
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var iconMap = {
  plus: Plus,
  message: MessageCircle,
  calendar: Calendar,
  note: FileText,
  team: Users
};
function FloatingActionButton({
  onClick,
  className,
  variant = "primary",
  size = "md",
  icon = "plus",
  tooltip
}) {
  const IconComponent = iconMap[icon];
  const sizeClasses = {
    sm: "w-12 h-12",
    md: "w-14 h-14",
    lg: "w-16 h-16"
  };
  const iconSizes = {
    sm: "w-5 h-5",
    md: "w-6 h-6",
    lg: "w-7 h-7"
  };
  const variantClasses = {
    primary: "bg-krushr-secondary hover:bg-krushr-secondary/90 text-white shadow-lg hover:shadow-xl",
    secondary: "bg-krushr-blue hover:bg-krushr-blue/90 text-white shadow-lg hover:shadow-xl"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
    Button,
    {
      onClick,
      className: cn(
        "fixed bottom-6 right-6 rounded-full transition-all duration-200 hover:scale-105 active:scale-95 z-50",
        sizeClasses[size],
        variantClasses[variant],
        className
      ),
      title: tooltip,
      children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(IconComponent, { className: iconSizes[size] })
    }
  );
}

// src/pages/Board.tsx
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
function Board() {
  const { isAuthenticated } = useAuthStore();
  const [selectedKanban, setSelectedKanban] = (0, import_react33.useState)(null);
  const [showQuickTaskModal, setShowQuickTaskModal] = (0, import_react33.useState)(false);
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const activeWorkspace = workspaces2[0];
  const { data: kanbans2 = [], isLoading, error } = trpc.kanban.list.useQuery(
    { workspaceId: activeWorkspace?.id || "" },
    { enabled: !!activeWorkspace?.id }
  );
  (0, import_react33.useEffect)(() => {
    if (kanbans2.length > 0 && !selectedKanban) {
      setSelectedKanban(kanbans2[0].id);
    }
  }, [kanbans2, selectedKanban]);
  if (!isAuthenticated) {
    return null;
  }
  const currentKanban = kanbans2.find((k3) => k3.id === selectedKanban);
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(KrushrLoader, { text: "Loading your kanban boards..." }) }) });
  }
  if (error) {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Card, { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(CardContent, { className: "p-6 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(KrushrLogo, { size: "md", showText: false }) }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { className: "text-destructive mb-4", children: error?.message || "An error occurred" }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Button, { onClick: () => window.location.reload(), className: "bg-primary", children: "Reload Page" })
    ] }) }) }) });
  }
  if (kanbans2.length === 0) {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Card, { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(CardContent, { className: "p-8 text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex justify-center mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(KrushrLogo, { size: "lg" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h3", { className: "text-xl font-semibold mb-3 text-foreground", children: "Welcome to Krushr!" }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { className: "text-muted-foreground mb-6", children: "Create your first kanban board to start organizing tasks and boosting productivity." }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(Button, { className: "bg-primary hover:bg-primary/90", children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
        "Create Your First Board"
      ] })
    ] }) }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(Layout, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "h-full flex flex-col", children: [
      kanbans2.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "bg-white border-b border-gray-200 px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("span", { className: "text-sm font-medium text-gray-700", children: "Board:" }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex space-x-2", children: kanbans2.map((kanban) => /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          Button,
          {
            variant: selectedKanban === kanban.id ? "default" : "outline",
            size: "sm",
            onClick: () => setSelectedKanban(kanban.id),
            children: kanban.title
          },
          kanban.id
        )) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex-1", children: currentKanban && activeWorkspace?.id ? /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(KanbanBoard, { kanban: { ...currentKanban, workspaceId: activeWorkspace.id } }) : /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Card, { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(CardContent, { className: "p-6 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { className: "text-gray-600", children: !currentKanban ? "Select a kanban board to view tasks." : "Loading workspace..." }) }) }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
        FloatingActionButton,
        {
          icon: "plus",
          tooltip: "Create New Task",
          onClick: () => setShowQuickTaskModal(true)
        }
      )
    ] }),
    showQuickTaskModal && activeWorkspace && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      SimpleCreatePanel,
      {
        workspaceId: activeWorkspace.id,
        open: showQuickTaskModal,
        onClose: () => setShowQuickTaskModal(false),
        onSuccess: () => {
          setShowQuickTaskModal(false);
        }
      }
    )
  ] });
}

// src/components/calendar/CalendarView.tsx
var import_react34 = __toESM(require_react(), 1);
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
function CalendarView({ className }) {
  const [currentDate, setCurrentDate] = (0, import_react34.useState)(/* @__PURE__ */ new Date());
  const [view, setView] = (0, import_react34.useState)("month");
  const [selectedDate, setSelectedDate] = (0, import_react34.useState)(null);
  const [showFilters, setShowFilters] = (0, import_react34.useState)(false);
  const { tasks: tasks2 } = useAppStore();
  const calendarEvents = (0, import_react34.useMemo)(() => {
    const events = [];
    tasks2.forEach((task) => {
      if (task.due_date) {
        events.push({
          id: `task-${task.id}`,
          title: task.title,
          type: "task",
          date: new Date(task.due_date),
          priority: task.priority,
          assignees: task.assignees,
          color: task.priority === "high" ? "bg-red-500" : task.priority === "medium" ? "bg-orange-500" : "bg-green-500"
        });
      }
    });
    const now = /* @__PURE__ */ new Date();
    events.push(
      {
        id: "meeting-1",
        title: "Team Standup",
        type: "meeting",
        date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 9, 0),
        time: "9:00 AM",
        assignees: [
          { id: "1", name: "Team Lead", avatar: "" },
          { id: "2", name: "Developer", avatar: "" }
        ],
        color: "bg-blue-500"
      },
      {
        id: "milestone-1",
        title: "Sprint Review",
        type: "milestone",
        date: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7),
        project: "Q1 Development",
        color: "bg-purple-500"
      }
    );
    return events;
  }, [tasks2]);
  const getMonthCalendar = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    const calendar = [];
    const current = new Date(startDate);
    for (let week = 0; week < 6; week++) {
      const weekDays = [];
      for (let day = 0; day < 7; day++) {
        const date = new Date(current);
        const dayEvents = calendarEvents.filter(
          (event) => event.date.toDateString() === date.toDateString()
        );
        weekDays.push({
          date: new Date(date),
          isCurrentMonth: date.getMonth() === month,
          isToday: date.toDateString() === (/* @__PURE__ */ new Date()).toDateString(),
          events: dayEvents
        });
        current.setDate(current.getDate() + 1);
      }
      calendar.push(weekDays);
    }
    return calendar;
  };
  const monthCalendar = getMonthCalendar();
  const navigateMonth = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + (direction === "next" ? 1 : -1));
    setCurrentDate(newDate);
  };
  const getEventIcon = (type) => {
    switch (type) {
      case "task":
        return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CircleCheck, { className: "w-3 h-3" });
      case "meeting":
        return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Users, { className: "w-3 h-3" });
      case "deadline":
        return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(TriangleAlert, { className: "w-3 h-3" });
      case "milestone":
        return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Calendar, { className: "w-3 h-3" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Clock, { className: "w-3 h-3" });
    }
  };
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Card, { className: cn("h-full flex flex-col", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(CardHeader, { className: "flex-shrink-0 pb-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center space-x-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(CardTitle, { className: "text-xl font-bold", children: [
            monthNames[currentDate.getMonth()],
            " ",
            currentDate.getFullYear()
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center space-x-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => navigateMonth("prev"),
                children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(ChevronLeft, { className: "w-4 h-4" })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => setCurrentDate(/* @__PURE__ */ new Date()),
                children: "Today"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => navigateMonth("next"),
                children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(ChevronRight, { className: "w-4 h-4" })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "flex border rounded-lg overflow-hidden", children: ["month", "week", "day"].map((viewType) => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
            Button,
            {
              variant: view === viewType ? "default" : "ghost",
              size: "sm",
              className: "rounded-none",
              onClick: () => setView(viewType),
              children: viewType.charAt(0).toUpperCase() + viewType.slice(1)
            },
            viewType
          )) }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
            Button,
            {
              variant: "outline",
              size: "sm",
              onClick: () => setShowFilters(!showFilters),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Funnel, { className: "w-4 h-4 mr-2" }),
                "Filter"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
            Button,
            {
              variant: "outline",
              size: "sm",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Download, { className: "w-4 h-4 mr-2" }),
                "Export"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Button, { size: "sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
            "Add Event"
          ] })
        ] })
      ] }),
      showFilters && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "mt-4 p-4 bg-gray-50 rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "flex items-center space-x-4", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "text-sm font-medium", children: "Show:" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Tasks" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Meetings" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Deadlines" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "outline", className: "cursor-pointer", children: "Milestones" })
      ] }) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CardContent, { className: "flex-1 p-0 overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "h-full flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "grid grid-cols-7 border-b bg-gray-50", children: dayNames.map((day) => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "p-3 text-center text-sm font-medium text-gray-600", children: day }, day)) }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "flex-1 overflow-y-auto", children: monthCalendar.map((week, weekIndex) => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "grid grid-cols-7 border-b min-h-[120px]", children: week.map((day, dayIndex) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
        "div",
        {
          className: cn(
            "border-r p-2 cursor-pointer hover:bg-gray-50 transition-colors",
            !day.isCurrentMonth && "bg-gray-25 text-gray-400",
            day.isToday && "bg-blue-50 border-blue-200",
            selectedDate?.toDateString() === day.date.toDateString() && "bg-blue-100"
          ),
          onClick: () => setSelectedDate(day.date),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center justify-between mb-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: cn(
                "text-sm font-medium",
                day.isToday && "text-blue-600",
                !day.isCurrentMonth && "text-gray-400"
              ), children: day.date.getDate() }),
              day.events.length > 3 && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("span", { className: "text-xs text-gray-500", children: [
                "+",
                day.events.length - 3
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "space-y-1", children: day.events.slice(0, 3).map((event) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Tooltip, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
                "div",
                {
                  className: cn(
                    "text-xs p-1 rounded text-white truncate flex items-center space-x-1 cursor-pointer hover:opacity-90 transition-opacity",
                    event.color
                  ),
                  children: [
                    getEventIcon(event.type),
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "truncate", children: event.title })
                  ]
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(TooltipContent, { side: "right", className: "max-w-xs", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "space-y-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "font-semibold text-sm", children: event.title }),
                /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "text-xs space-y-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "font-medium", children: "Type:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Badge, { variant: "secondary", className: "text-xs", children: event.type })
                  ] }),
                  event.time && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Clock, { className: "w-3 h-3" }),
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { children: event.time })
                  ] }),
                  event.priority && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "font-medium", children: "Priority:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
                      Badge,
                      {
                        variant: event.priority === "high" ? "destructive" : event.priority === "medium" ? "default" : "secondary",
                        className: "text-xs",
                        children: event.priority
                      }
                    )
                  ] }),
                  event.project && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { className: "font-medium", children: "Project:" }),
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("span", { children: event.project })
                  ] }),
                  event.assignees && event.assignees.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Users, { className: "w-3 h-3" }),
                    /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("span", { children: [
                      event.assignees.length,
                      " assignee",
                      event.assignees.length > 1 ? "s" : ""
                    ] })
                  ] })
                ] })
              ] }) })
            ] }, event.id)) })
          ]
        },
        dayIndex
      )) }, weekIndex)) })
    ] }) }),
    selectedDate && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex-shrink-0 border-t bg-red-100 p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("h4", { className: "font-medium text-gray-900 mb-2", children: [
        "SELECTED: ",
        formatDateShort(selectedDate.toISOString())
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "space-y-2", children: calendarEvents.filter((event) => event.date.toDateString() === selectedDate.toDateString()).map((event) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center space-x-3 p-2 bg-white rounded border", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: cn("w-3 h-3 rounded-full", event.color) }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "font-medium text-sm", children: event.title }),
          event.time && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "text-xs text-gray-500", children: event.time })
        ] }),
        event.assignees && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "flex -space-x-1", children: event.assignees.slice(0, 2).map((assignee) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Avatar, { className: "w-6 h-6 border-2 border-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(AvatarImage, { src: assignee.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(AvatarFallback, { className: "text-xs", children: assignee.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
        ] }, assignee.id)) }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Ellipsis, { className: "w-3 h-3" }) })
      ] }, event.id)) })
    ] })
  ] }) });
}

// src/hooks/use-realtime.ts
var import_react35 = __toESM(require_react(), 1);

// src/lib/api.ts
var API_BASE_URL = false ? "https://api.krushr.app" : "http://localhost:8000/api";
var ApiClient = class {
  constructor(baseURL) {
    this.token = null;
    this.baseURL = baseURL;
    this.token = localStorage.getItem("auth_token");
  }
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      headers: {
        "Content-Type": "application/json",
        ...this.token && { Authorization: `Bearer ${this.token}` },
        ...options.headers
      },
      ...options
    };
    try {
      const response = await fetch(url, config);
      const data2 = await response.json();
      if (!response.ok) {
        throw new Error(data2.message || "API request failed");
      }
      return data2;
    } catch (error) {
      console.error("API Error:", error);
      throw error;
    }
  }
  // Auth methods
  async login(email, password) {
    const response = await this.request(API_ENDPOINTS.LOGIN, {
      method: "POST",
      body: JSON.stringify({ email, password })
    });
    if (response.success && response.data?.token) {
      this.token = response.data.token;
      localStorage.setItem("auth_token", this.token);
    }
    return response;
  }
  async logout() {
    await this.request(API_ENDPOINTS.LOGOUT, { method: "POST" });
    this.token = null;
    localStorage.removeItem("auth_token");
  }
  async me() {
    return this.request(API_ENDPOINTS.ME);
  }
  async getWorkspaces() {
    return this.request(API_ENDPOINTS.WORKSPACES);
  }
  async createWorkspace(data2) {
    return this.request(API_ENDPOINTS.WORKSPACES, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async getTeams() {
    return this.request(API_ENDPOINTS.TEAMS);
  }
  async createTeam(data2) {
    return this.request(API_ENDPOINTS.TEAMS, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async getKanbans() {
    return this.request(API_ENDPOINTS.KANBANS);
  }
  async getKanban(id2) {
    return this.request(`${API_ENDPOINTS.KANBANS}/${id2}`);
  }
  async createKanban(data2) {
    return this.request(API_ENDPOINTS.KANBANS, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async updateKanban(id2, data2) {
    return this.request(`${API_ENDPOINTS.KANBANS}/${id2}`, {
      method: "PUT",
      body: JSON.stringify(data2)
    });
  }
  async getTasks(kanbanId) {
    const endpoint = kanbanId ? `${API_ENDPOINTS.TASKS}?kanban_id=${kanbanId}` : API_ENDPOINTS.TASKS;
    return this.request(endpoint);
  }
  async createTask(data2) {
    return this.request(API_ENDPOINTS.TASKS, {
      method: "POST",
      body: JSON.stringify(data2)
    });
  }
  async updateTask(id2, data2) {
    return this.request(`${API_ENDPOINTS.TASKS}/${id2}`, {
      method: "PUT",
      body: JSON.stringify(data2)
    });
  }
  async deleteTask(id2) {
    return this.request(`${API_ENDPOINTS.TASKS}/${id2}`, {
      method: "DELETE"
    });
  }
  async getNotifications() {
    return this.request(API_ENDPOINTS.NOTIFICATIONS);
  }
  async markNotificationRead(id2) {
    return this.request(`${API_ENDPOINTS.NOTIFICATIONS}/${id2}/read`, {
      method: "PUT"
    });
  }
};
var api = new ApiClient(API_BASE_URL);
var auth = {
  login: api.login.bind(api),
  logout: api.logout.bind(api),
  me: api.me.bind(api)
};
var workspaces = {
  list: api.getWorkspaces.bind(api),
  create: api.createWorkspace.bind(api)
};
var teams = {
  list: api.getTeams.bind(api),
  create: api.createTeam.bind(api)
};
var kanbans = {
  list: api.getKanbans.bind(api),
  get: api.getKanban.bind(api),
  create: api.createKanban.bind(api),
  update: api.updateKanban.bind(api)
};
var tasks = {
  list: api.getTasks.bind(api),
  create: api.createTask.bind(api),
  update: api.updateTask.bind(api),
  delete: api.deleteTask.bind(api)
};
var notifications = {
  list: api.getNotifications.bind(api),
  markRead: api.markNotificationRead.bind(api)
};

// src/hooks/use-realtime.ts
function useRealtimeConnection() {
  const {
    user,
    isAuthenticated,
    connectWebSocket,
    disconnectWebSocket,
    setWorkspaces,
    setKanbans,
    setTasks,
    setNotifications,
    setLoading,
    setError
  } = useAppStore();
  const initializeData = (0, import_react35.useCallback)(async () => {
    if (!isAuthenticated) return;
    setLoading(true);
    setError(null);
    try {
      const [workspacesRes, kanbansRes, tasksRes, notificationsRes] = await Promise.all([
        api.getWorkspaces(),
        api.getKanbans(),
        api.getTasks(),
        api.getNotifications()
      ]);
      if (workspacesRes.success && workspacesRes.data) {
        setWorkspaces(workspacesRes.data);
      }
      if (kanbansRes.success && kanbansRes.data) {
        setKanbans(kanbansRes.data);
      }
      if (tasksRes.success && tasksRes.data) {
        setTasks(tasksRes.data);
      }
      if (notificationsRes.success && notificationsRes.data) {
        setNotifications(notificationsRes.data);
      }
    } catch (error) {
      console.error("Failed to load initial data:", error);
      setError("Failed to load application data");
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated, setWorkspaces, setKanbans, setTasks, setNotifications, setLoading, setError]);
  (0, import_react35.useEffect)(() => {
    if (isAuthenticated && user) {
      connectWebSocket();
      initializeData();
    } else {
      disconnectWebSocket();
    }
    return () => {
      disconnectWebSocket();
    };
  }, [isAuthenticated, user, connectWebSocket, disconnectWebSocket, initializeData]);
  return {
    isConnected: useAppStore((state) => state.websocket.connected),
    isLoading: useAppStore((state) => state.loading),
    error: useAppStore((state) => state.error)
  };
}

// src/pages/Calendar.tsx
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
function Calendar3() {
  const { isLoading } = useRealtimeConnection();
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "text-gray-600", children: "Loading calendar..." })
    ] }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(CalendarView, {}) }) });
}

// src/components/ErrorBoundary.tsx
var import_react36 = __toESM(require_react(), 1);
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var ErrorBoundary = class extends import_react36.Component {
  constructor(props) {
    super(props);
    this.handleRetry = () => {
      this.setState({ hasError: false, error: void 0, errorInfo: void 0 });
    };
    this.handleGoHome = () => {
      window.location.href = "/#/workspace";
    };
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    console.error("ErrorBoundary caught an error:", error, errorInfo);
    this.setState({
      error,
      errorInfo
    });
    this.props.onError?.(error, errorInfo);
    if (false) {
      console.error("Production error:", {
        message: error.message,
        stack: error.stack,
        componentStack: errorInfo.componentStack
      });
    }
  }
  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }
      const { level = "component" } = this.props;
      if (level === "critical") {
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-krushr-gray-50 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "text-center max-w-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "w-20 h-20 bg-krushr-danger-50 rounded-full flex items-center justify-center mx-auto mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TriangleAlert, { className: "w-10 h-10 text-krushr-danger" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h1", { className: "text-2xl font-brand font-bold text-krushr-gray-900 mb-4", children: "Critical Error" }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "text-base font-brand text-krushr-gray-600 mb-6", children: "The application encountered a critical error and needs to be restarted. Your work may not be saved." }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "space-y-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
              "button",
              {
                onClick: () => window.location.reload(),
                className: "w-full bg-krushr-danger text-white px-6 py-3 rounded-button font-medium hover:bg-krushr-danger-600 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(RefreshCw, { className: "w-5 h-5" }),
                  "Restart Application"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
              "button",
              {
                onClick: this.handleGoHome,
                className: "w-full border border-krushr-gray-300 text-krushr-gray-700 px-6 py-3 rounded-button font-medium hover:bg-krushr-gray-50 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(House, { className: "w-5 h-5" }),
                  "Go to Dashboard"
                ]
              }
            )
          ] })
        ] }) });
      }
      if (level === "page") {
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "min-h-[60vh] flex items-center justify-center p-6", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "text-center max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "w-16 h-16 bg-krushr-warning-50 rounded-full flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TriangleAlert, { className: "w-8 h-8 text-krushr-warning" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h2", { className: "text-xl font-brand font-semibold text-krushr-gray-800 mb-3", children: "Page Error" }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "text-sm font-brand text-krushr-gray-600 mb-4", children: "This page encountered an error, but the rest of the application is still working." }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "space-y-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
              "button",
              {
                onClick: this.handleRetry,
                className: "w-full bg-krushr-primary text-white px-4 py-2 rounded-button font-medium hover:bg-krushr-primary-700 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(RefreshCw, { className: "w-4 h-4" }),
                  "Retry Page"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
              "button",
              {
                onClick: this.handleGoHome,
                className: "w-full border border-krushr-gray-300 text-krushr-gray-700 px-4 py-2 rounded-button font-medium hover:bg-krushr-gray-50 transition-colors flex items-center justify-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(House, { className: "w-4 h-4" }),
                  "Go to Dashboard"
                ]
              }
            )
          ] })
        ] }) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "flex items-center justify-center min-h-[200px] p-4 bg-krushr-gray-50 rounded-lg border border-krushr-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "text-center max-w-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "w-12 h-12 bg-krushr-info-50 rounded-full flex items-center justify-center mx-auto mb-3", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TriangleAlert, { className: "w-6 h-6 text-krushr-info" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h3", { className: "text-base font-brand font-medium text-krushr-gray-800 mb-2", children: "Component Error" }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "text-sm font-brand text-krushr-gray-600 mb-3", children: "This component failed to load, but other features are still available." }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
          "button",
          {
            onClick: this.handleRetry,
            className: "bg-krushr-primary text-white px-3 py-1.5 rounded-button text-sm font-medium hover:bg-krushr-primary-700 transition-colors flex items-center justify-center gap-1.5 mx-auto",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(RefreshCw, { className: "w-3 h-3" }),
              "Retry"
            ]
          }
        ),
        this.state.error && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("details", { className: "mt-3 text-left", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("summary", { className: "text-xs text-krushr-gray-500 cursor-pointer hover:text-krushr-gray-700", children: "Error Details" }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("pre", { className: "text-xs text-krushr-gray-600 mt-2 p-2 bg-white rounded border overflow-auto max-h-32", children: this.state.error.toString() })
        ] })
      ] }) });
    }
    return this.props.children;
  }
};
var PageErrorBoundary = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ErrorBoundary, { level: "page", children });
var CriticalErrorBoundary = ({ children }) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ErrorBoundary, { level: "critical", children });

// src/pages/Notes.tsx
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
function Notes() {
  const { currentWorkspace } = useAuthStore();
  if (!currentWorkspace) {
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { children: "Loading..." });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(PageErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(NotesPanel_default, { workspaceId: currentWorkspace.id }) }) });
}

// src/components/chat/ChatInterface.tsx
var import_react38 = __toESM(require_react(), 1);

// src/components/common/AttachmentUpload.tsx
var import_react37 = __toESM(require_react(), 1);
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var ALLOWED_FILE_TYPES = {
  "image/jpeg": [".jpg", ".jpeg"],
  "image/png": [".png"],
  "image/gif": [".gif"],
  "image/webp": [".webp"],
  "image/svg+xml": [".svg"],
  "image/bmp": [".bmp"],
  "image/tiff": [".tiff"],
  "application/pdf": [".pdf"],
  "text/plain": [".txt"],
  "text/markdown": [".md"],
  "text/csv": [".csv"],
  "application/msword": [".doc"],
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [".docx"],
  "application/vnd.ms-excel": [".xls"],
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [".xlsx"],
  "application/vnd.ms-powerpoint": [".ppt"],
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": [".pptx"],
  "application/zip": [".zip"],
  "application/x-rar-compressed": [".rar"],
  "application/x-7z-compressed": [".7z"],
  "application/gzip": [".gz"],
  "text/javascript": [".js"],
  "text/typescript": [".ts"],
  "application/json": [".json"],
  "text/html": [".html"],
  "text/css": [".css"],
  "audio/mpeg": [".mp3"],
  "audio/wav": [".wav"],
  "audio/ogg": [".ogg"],
  "video/mp4": [".mp4"],
  "video/webm": [".webm"],
  "video/ogg": [".ogv"]
};
var AttachmentUpload = ({
  type,
  targetId,
  onUploadComplete,
  className
}) => {
  const [isUploading, setIsUploading] = (0, import_react37.useState)(false);
  const uploadTaskFile = trpc.upload.uploadTaskFile.useMutation();
  const uploadChatFile = trpc.upload.uploadChatFile.useMutation();
  const uploadNoteFile = trpc.upload.uploadNoteFile.useMutation();
  const handleUpload = async (files) => {
    setIsUploading(true);
    const uploadedAttachments = [];
    try {
      for (const file of files) {
        const arrayBuffer = await fileToArrayBuffer(file);
        const buffer = Array.from(new Uint8Array(arrayBuffer));
        const fileData = {
          filename: file.name,
          mimetype: file.type,
          size: file.size,
          buffer
        };
        let result;
        switch (type) {
          case "task":
            result = await uploadTaskFile.mutateAsync({
              taskId: targetId,
              file: fileData
            });
            break;
          case "chat":
            result = await uploadChatFile.mutateAsync({
              messageId: targetId,
              file: fileData
            });
            break;
          case "note":
            result = await uploadNoteFile.mutateAsync({
              noteId: targetId,
              file: fileData
            });
            break;
          default:
            throw new Error(`Unsupported upload type: ${type}`);
        }
        uploadedAttachments.push(result);
        toast.success(`${file.name} uploaded successfully`, {
          description: `File compressed and saved (${formatFileSize(file.size)})`
        });
      }
      onUploadComplete?.(uploadedAttachments);
    } catch (error) {
      console.error("Upload failed:", error);
      toast.error("Upload failed", {
        description: error instanceof Error ? error.message : "Please try again"
      });
    } finally {
      setIsUploading(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
    FileUpload,
    {
      onUpload: handleUpload,
      accept: ALLOWED_FILE_TYPES,
      maxSize: 15 * 1024 * 1024,
      maxFiles: 10,
      className
    }
  );
};
var fileToArrayBuffer = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      if (reader.result instanceof ArrayBuffer) {
        resolve(reader.result);
      } else {
        reject(new Error("Failed to read file as ArrayBuffer"));
      }
    };
    reader.onerror = () => reject(reader.error);
    reader.readAsArrayBuffer(file);
  });
};
var formatFileSize = (bytes) => {
  if (bytes === 0) return "0 Bytes";
  const k3 = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k3));
  return parseFloat((bytes / Math.pow(k3, i)).toFixed(2)) + " " + sizes[i];
};
var AttachmentUpload_default = AttachmentUpload;

// src/components/common/AttachmentList.tsx
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var getFileIcon = (mimeType) => {
  if (!mimeType || typeof mimeType !== "string") return File;
  if (mimeType.startsWith("image/")) return FileImage;
  if (mimeType.startsWith("video/")) return FileVideo;
  if (mimeType.includes("pdf") || mimeType.includes("document") || mimeType.includes("text")) return FileText;
  if (mimeType.includes("zip") || mimeType.includes("rar") || mimeType.includes("7z")) return FileArchive;
  return File;
};
var getFileTypeColor = (mimeType) => {
  if (!mimeType || typeof mimeType !== "string") return "bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300";
  if (mimeType.startsWith("image/")) return "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300";
  if (mimeType.startsWith("video/")) return "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300";
  if (mimeType.startsWith("audio/")) return "bg-pink-100 text-pink-700 dark:bg-pink-900 dark:text-pink-300";
  if (mimeType.includes("pdf")) return "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300";
  if (mimeType.includes("document") || mimeType.includes("text")) return "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300";
  if (mimeType.includes("zip") || mimeType.includes("rar")) return "bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300";
  return "bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300";
};
var formatFileSize2 = (bytes) => {
  if (bytes === 0) return "0 Bytes";
  const k3 = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k3));
  return parseFloat((bytes / Math.pow(k3, i)).toFixed(1)) + " " + sizes[i];
};
var formatDate2 = (date) => {
  const d = new Date(date);
  const now = /* @__PURE__ */ new Date();
  const diffTime = Math.abs(now.getTime() - d.getTime());
  const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
  if (diffDays === 1) return "Today";
  if (diffDays === 2) return "Yesterday";
  if (diffDays <= 7) return `${diffDays} days ago`;
  return d.toLocaleDateString();
};
var AttachmentList = ({
  attachments,
  canDelete = false,
  onDelete,
  className,
  compact = false
}) => {
  if (attachments.length === 0) {
    return null;
  }
  const handleDownload = (attachment) => {
    const link = document.createElement("a");
    link.href = attachment.downloadUrl;
    link.download = attachment.filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  const handleDelete = (attachment) => {
    if (onDelete) {
      onDelete(attachment.id);
    }
  };
  const handlePreview = (attachment) => {
    if (!attachment.mimeType) {
      toast.info("Preview not available for this file type");
      return;
    }
    if (attachment.mimeType.startsWith("image/")) {
      window.open(attachment.downloadUrl, "_blank");
    } else if (attachment.mimeType === "application/pdf") {
      window.open(attachment.downloadUrl, "_blank");
    } else {
      toast.info("Preview not available for this file type");
    }
  };
  if (compact) {
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: cn("flex flex-wrap gap-2", className), children: attachments.map((attachment) => {
      const FileIcon = getFileIcon(attachment.mimeType);
      const isImage = attachment.mimeType && attachment.mimeType.startsWith("image/");
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
        "div",
        {
          className: "flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg text-sm",
          children: [
            isImage && attachment.thumbnailUrl ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              "img",
              {
                src: attachment.thumbnailUrl,
                alt: attachment.filename,
                className: "h-8 w-8 rounded object-cover",
                onError: (e) => {
                  e.currentTarget.style.display = "none";
                  e.currentTarget.parentElement?.querySelector(".fallback-icon")?.classList.remove("hidden");
                }
              }
            ) : null,
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(FileIcon, { className: cn("h-4 w-4 text-gray-500", isImage && attachment.thumbnailUrl ? "hidden fallback-icon" : "") }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "font-medium truncate max-w-[150px]", children: attachment.filename }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "text-gray-500", children: formatFileSize2(attachment.size) }),
            attachment.compressed && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Compressed" }),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-6 w-6 p-0",
                onClick: () => handleDownload(attachment),
                title: "Download",
                children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Download, { className: "h-3 w-3" })
              }
            )
          ]
        },
        attachment.id
      );
    }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: cn("space-y-3", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("h4", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: [
      "Attachments (",
      attachments.length,
      ")"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "space-y-2", children: attachments.map((attachment) => {
      const FileIcon = getFileIcon(attachment.mimeType);
      const typeColor = getFileTypeColor(attachment.mimeType);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Card, { className: "p-4", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-start gap-3", children: [
        attachment.mimeType && attachment.mimeType.startsWith("image/") && attachment.thumbnailUrl ? /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
            "img",
            {
              src: attachment.thumbnailUrl,
              alt: attachment.filename,
              className: "w-16 h-16 rounded-lg object-cover",
              onError: (e) => {
                e.currentTarget.style.display = "none";
                const fallback = e.currentTarget.parentElement?.querySelector(".thumbnail-fallback");
                if (fallback) fallback.classList.remove("hidden");
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: cn("hidden p-2 rounded-lg w-16 h-16 flex items-center justify-center thumbnail-fallback", typeColor), children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(FileIcon, { className: "h-5 w-5" }) })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: cn("p-2 rounded-lg", typeColor), children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(FileIcon, { className: "h-5 w-5" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "flex-1 min-w-0", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-start justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "min-w-0 flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100 truncate", children: [
            attachment.filename,
            /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("span", { className: "text-xs text-gray-500 font-normal ml-2", children: [
              "\u2022 ",
              formatFileSize2(attachment.size),
              " \u2022 ",
              formatDate2(attachment.uploadedAt),
              attachment.compressed && /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(import_jsx_runtime57.Fragment, { children: [
                " ",
                "\u2022 ",
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Badge, { variant: "secondary", className: "text-xs inline", children: "Compressed" })
              ] })
            ] })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "flex items-center gap-1 ml-2", children: [
            attachment.mimeType && (attachment.mimeType.startsWith("image/") || attachment.mimeType === "application/pdf") && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-8 w-8 p-0",
                onClick: () => handlePreview(attachment),
                title: "Preview",
                children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Eye, { className: "h-4 w-4" })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-8 w-8 p-0",
                onClick: () => handleDownload(attachment),
                title: "Download",
                children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Download, { className: "h-4 w-4" })
              }
            ),
            canDelete && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                className: "h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50",
                onClick: () => handleDelete(attachment),
                title: "Delete",
                children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Trash2, { className: "h-4 w-4" })
              }
            )
          ] })
        ] }) })
      ] }) }, attachment.id);
    }) })
  ] });
};
var AttachmentList_default = AttachmentList;

// src/components/chat/ChatInterface.tsx
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
function ChatInterface({ className }) {
  const [selectedChannel, setSelectedChannel] = (0, import_react38.useState)(null);
  const [message, setMessage] = (0, import_react38.useState)("");
  const [searchTerm, setSearchTerm] = (0, import_react38.useState)("");
  const [replyingTo, setReplyingTo] = (0, import_react38.useState)(null);
  const [showEmojiPicker, setShowEmojiPicker] = (0, import_react38.useState)(false);
  const [showAttachmentUpload, setShowAttachmentUpload] = (0, import_react38.useState)(false);
  const messageInputRef = (0, import_react38.useRef)(null);
  const messagesEndRef = (0, import_react38.useRef)(null);
  const fileInputRef = (0, import_react38.useRef)(null);
  const { user } = useAppStore();
  const { connected, sendMessage } = useWebSocket();
  const channels = [
    {
      id: "general",
      name: "general",
      type: "team",
      description: "General team discussion",
      members: 12,
      isPrivate: false
    },
    {
      id: "project-alpha",
      name: "project-alpha",
      type: "project",
      description: "Alpha project coordination",
      members: 5,
      isPrivate: false,
      projectId: "alpha-123"
    },
    {
      id: "design-team",
      name: "design-team",
      type: "team",
      description: "Design team collaboration",
      members: 4,
      isPrivate: false
    }
  ];
  const messages = [
    {
      id: "1",
      content: "Hey team! Just finished the design mockups for the new dashboard",
      type: "text",
      sender: { id: "1", name: "Sarah Chen", avatar: "" },
      timestamp: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
      reactions: [
        { emoji: "\u{1F44D}", users: ["2", "3"], count: 2 },
        { emoji: "\u{1F389}", users: ["4"], count: 1 }
      ]
    },
    {
      id: "2",
      content: "Awesome work! Could you share the files?",
      type: "text",
      sender: { id: "2", name: "Mike Johnson", avatar: "" },
      timestamp: new Date(Date.now() - 25 * 60 * 1e3).toISOString(),
      replyTo: "1"
    },
    {
      id: "3",
      content: "dashboard-mockups-v2.fig",
      type: "file",
      sender: { id: "1", name: "Sarah Chen", avatar: "" },
      timestamp: new Date(Date.now() - 20 * 60 * 1e3).toISOString(),
      attachments: [
        {
          id: "file-1",
          name: "dashboard-mockups-v2.fig",
          size: 2458e3,
          type: "application/figma",
          url: "#"
        }
      ]
    },
    {
      id: "4",
      content: "I've updated the API documentation task with the new endpoints",
      type: "task_reference",
      sender: { id: "3", name: "Emma Davis", avatar: "" },
      timestamp: new Date(Date.now() - 10 * 60 * 1e3).toISOString(),
      taskReference: {
        id: "task-123",
        title: "Update API Documentation",
        status: "in_progress"
      }
    }
  ];
  const currentChannel = channels.find((c) => c.id === selectedChannel) || channels[0];
  (0, import_react38.useEffect)(() => {
    if (!selectedChannel && channels.length > 0) {
      setSelectedChannel(channels[0].id);
    }
  }, [selectedChannel, channels]);
  (0, import_react38.useEffect)(() => {
    const scrollContainer = messagesEndRef.current?.closest("[data-radix-scroll-area-viewport]");
    if (scrollContainer && messagesEndRef.current) {
      scrollContainer.scrollTop = scrollContainer.scrollHeight;
    }
  }, [messages]);
  const handleSendMessage = () => {
    if (!message.trim() || !connected) return;
    const newMessage = {
      content: message,
      channelId: selectedChannel,
      replyTo: replyingTo,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    sendMessage("chat-message", newMessage);
    setMessage("");
    setReplyingTo(null);
  };
  const handleFileUpload = () => {
    setShowAttachmentUpload(!showAttachmentUpload);
  };
  const handleKeyPress = (event) => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };
  const addReaction = (messageId, emoji) => {
    console.log("Adding reaction:", messageId, emoji);
  };
  const formatFileSize3 = (bytes) => {
    if (bytes === 0) return "0 Bytes";
    const k3 = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k3));
    return parseFloat((bytes / Math.pow(k3, i)).toFixed(2)) + " " + sizes[i];
  };
  const getChannelIcon = (type) => {
    switch (type) {
      case "project":
        return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Hash, { className: "w-4 h-4" });
      case "team":
        return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Users, { className: "w-4 h-4" });
      case "direct":
        return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Avatar, { className: "w-4 h-4" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Hash, { className: "w-4 h-4" });
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: cn("h-full flex bg-white", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "w-64 border-r border-gray-200 flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-4 border-b border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h2", { className: "font-semibold text-gray-900", children: "Channels" }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Ellipsis, { className: "w-4 h-4" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "mt-3", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            Input,
            {
              placeholder: "Search channels...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "pl-10 h-8"
            }
          )
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ScrollArea, { className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "p-2 space-y-1", children: channels.filter(
        (channel) => channel.name.toLowerCase().includes(searchTerm.toLowerCase())
      ).map((channel) => /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
        Button,
        {
          variant: selectedChannel === channel.id ? "secondary" : "ghost",
          className: "w-full justify-start h-auto p-3",
          onClick: () => setSelectedChannel(channel.id),
          children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-3 w-full", children: [
            getChannelIcon(channel.type),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex-1 text-left", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "font-medium text-sm", children: [
                "#",
                channel.name
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "text-xs text-gray-500 truncate", children: [
                channel.members,
                " members"
              ] })
            ] }),
            channel.isPrivate && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Badge, { variant: "outline", className: "text-xs", children: "Private" })
          ] })
        },
        channel.id
      )) }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex-1 flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "p-4 border-b border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-3", children: [
          getChannelIcon(currentChannel.type),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("h3", { className: "font-semibold text-gray-900", children: [
              "#",
              currentChannel.name
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-gray-500", children: currentChannel.description })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Badge, { variant: "outline", className: "text-green-700 border-green-200", children: connected ? "Connected" : "Disconnected" }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Phone, { className: "w-4 h-4" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Video, { className: "w-4 h-4" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Ellipsis, { className: "w-4 h-4" }) })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ScrollArea, { className: "flex-1 p-4", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "space-y-4", children: [
        messages.map((msg) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "group", children: [
          msg.replyTo && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "ml-12 mb-1 text-xs text-gray-500 flex items-center space-x-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Reply, { className: "w-3 h-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { children: "Replying to previous message" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-start space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(Avatar, { className: "w-8 h-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AvatarImage, { src: msg.sender.avatar }),
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AvatarFallback, { className: "text-xs", children: msg.sender.name.split(" ").map((n) => n[0]).join("").toUpperCase() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-2 mb-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { className: "font-medium text-sm text-gray-900", children: msg.sender.name }),
                /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { className: "text-xs text-gray-500", children: formatDateTime(msg.timestamp) }),
                msg.editedAt && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Badge, { variant: "outline", className: "text-xs", children: "edited" })
              ] }),
              msg.type === "text" && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-gray-900", children: msg.content }),
              msg.attachments && msg.attachments.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
                AttachmentList_default,
                {
                  attachments: msg.attachments,
                  compact: true,
                  canDelete: false
                }
              ) }),
              msg.type === "task_reference" && msg.taskReference && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-3 bg-blue-50 rounded-lg border border-blue-200", children: [
                /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Badge, { variant: "outline", className: "text-blue-700 border-blue-300", children: "Task" }),
                  /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { className: "font-medium text-sm", children: msg.taskReference.title }),
                  /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
                    Badge,
                    {
                      variant: "outline",
                      className: cn(
                        "text-xs",
                        msg.taskReference.status === "completed" && "text-green-700 border-green-300",
                        msg.taskReference.status === "in_progress" && "text-blue-700 border-blue-300",
                        msg.taskReference.status === "todo" && "text-gray-700 border-gray-300"
                      ),
                      children: msg.taskReference.status.replace("_", " ")
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: msg.content })
              ] }),
              msg.reactions && msg.reactions.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-1 mt-2", children: [
                msg.reactions.map((reaction, index) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(
                  Button,
                  {
                    variant: "outline",
                    size: "sm",
                    className: "h-6 px-2 text-xs",
                    onClick: () => addReaction(msg.id, reaction.emoji),
                    children: [
                      reaction.emoji,
                      " ",
                      reaction.count
                    ]
                  },
                  index
                )),
                /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    className: "h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity",
                    onClick: () => setShowEmojiPicker(!showEmojiPicker),
                    children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Smile, { className: "w-3 h-3" })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "opacity-0 group-hover:opacity-100 transition-opacity flex items-center space-x-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  className: "h-6 w-6 p-0",
                  onClick: () => setReplyingTo(msg.id),
                  children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Reply, { className: "w-3 h-3" })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Pin, { className: "w-3 h-3" }) }),
              msg.sender.id === user?.id && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(import_jsx_runtime58.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(SquarePen, { className: "w-3 h-3" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Button, { variant: "ghost", size: "sm", className: "h-6 w-6 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Trash2, { className: "w-3 h-3" }) })
              ] })
            ] })
          ] })
        ] }, msg.id)),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { ref: messagesEndRef })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "p-4 border-t border-gray-200", children: [
        replyingTo && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "mb-2 p-2 bg-gray-50 rounded text-sm text-gray-600 flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("span", { children: "Replying to message..." }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              className: "h-6 w-6 p-0",
              onClick: () => setReplyingTo(null),
              children: "\xD7"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              onClick: handleFileUpload,
              children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Paperclip, { className: "w-4 h-4" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { className: "flex-1 relative", children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            FloatingInput,
            {
              ref: messageInputRef,
              label: `Message #${currentChannel.name}`,
              value: message,
              onChange: (e) => setMessage(e.target.value),
              onKeyPress: handleKeyPress,
              disabled: !connected
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              onClick: () => setShowEmojiPicker(!showEmojiPicker),
              children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Smile, { className: "w-4 h-4" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            Button,
            {
              onClick: handleSendMessage,
              disabled: !message.trim() || !connected,
              size: "sm",
              children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Send, { className: "w-4 h-4" })
            }
          )
        ] }),
        showAttachmentUpload && currentChannel && /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "mt-4 p-4 bg-gray-50 rounded-lg border", children: [
          /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("h4", { className: "text-sm font-medium", children: "Upload Attachments" }),
            /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => setShowAttachmentUpload(false),
                className: "h-6 w-6 p-0",
                children: "\xD7"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
            AttachmentUpload_default,
            {
              type: "chat",
              targetId: currentChannel.id,
              onUploadComplete: (attachments) => {
                console.log("Chat attachments uploaded:", attachments);
                setShowAttachmentUpload(false);
              },
              className: "mt-2"
            }
          )
        ] })
      ] })
    ] })
  ] });
}

// src/pages/Chat.tsx
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
function Chat() {
  const { isAuthenticated } = useAuthStore();
  const { data: threads = [], isLoading } = trpc.chat.getThreads.useQuery();
  if (!isAuthenticated) {
    return null;
  }
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("p", { className: "text-gray-600", children: "Loading chat..." })
    ] }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ChatInterface, { threads }) }) });
}

// src/pages/Teams.tsx
var import_react39 = __toESM(require_react(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
function Teams() {
  const { isAuthenticated, user } = useAuthStore();
  const [searchTerm, setSearchTerm] = (0, import_react39.useState)("");
  const [teamFilter, setTeamFilter] = (0, import_react39.useState)("all");
  const { data: teams2 = [], isLoading: teamsLoading } = trpc.team.getAll.useQuery();
  const { data: workspaces2 = [] } = trpc.workspace.getAll.useQuery();
  if (!isAuthenticated) {
    return null;
  }
  if (teamsLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { className: "text-gray-600", children: "Loading teams..." })
    ] }) }) });
  }
  const allMembers = teams2.flatMap(
    (team) => team.members?.map((member) => ({
      ...member,
      teamName: team.name,
      teamId: team.id
    })) || []
  );
  const filteredMembers = allMembers.filter((member) => {
    const matchesSearch = member.user?.name?.toLowerCase().includes(searchTerm.toLowerCase()) || member.user?.email?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesTeam = teamFilter === "all" || member.teamId === teamFilter;
    return matchesSearch && matchesTeam;
  });
  const getTeamColor = (index) => {
    const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-orange-500", "bg-pink-500", "bg-indigo-500"];
    return colors[index % colors.length];
  };
  const getMemberColor = (index) => {
    const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-orange-500", "bg-pink-500", "bg-indigo-500"];
    return colors[index % colors.length];
  };
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "h-full flex flex-col", children: [
    /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "bg-white border-b border-gray-200 p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Teams" }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { className: "text-gray-600 mt-1", children: "Manage your team members and collaboration" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("button", { className: "flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
          "Add Member"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "mt-4 flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "relative flex-1 max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Search, { className: "w-4 h-4 absolute left-3 top-3 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
            FloatingInput,
            {
              id: "search",
              type: "text",
              label: "Search team members...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "pl-10"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(
          "select",
          {
            value: teamFilter,
            onChange: (e) => setTeamFilter(e.target.value),
            className: "px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("option", { value: "all", children: "All Teams" }),
              teams2.map((team) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("option", { value: team.id, children: team.name }, team.id))
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex-1 p-6 overflow-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6 mb-8", children: teams2.map((team, index) => /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: `w-12 h-12 rounded-lg ${getTeamColor(index)} flex items-center justify-center`, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { className: "text-white font-bold text-lg", children: team.name.split(" ").map((word) => word[0]).join("") }) }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("button", { className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EllipsisVertical, { className: "w-4 h-4" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { className: "text-lg font-semibold text-gray-900", children: team.name }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { className: "text-gray-600 text-sm mb-4", children: team.description || "No description available" }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center justify-between text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("span", { className: "text-gray-500", children: [
            team.members?.length || 0,
            " Members"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("span", { className: "text-gray-500", children: [
            team.projects?.length || 0,
            " Projects"
          ] })
        ] })
      ] }, team.id)) }),
      /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "p-6 border-b border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: "Team Members" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "divide-y divide-gray-200", children: filteredMembers.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "p-6 text-center text-gray-500", children: "No team members found matching your criteria." }) : filteredMembers.map((member, index) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "p-6 hover:bg-gray-50 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center space-x-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: `w-12 h-12 rounded-full ${getMemberColor(index)} flex items-center justify-center relative`, children: [
              member.user?.avatar ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                "img",
                {
                  src: member.user.avatar,
                  alt: member.user.name,
                  className: "w-full h-full rounded-full object-cover"
                }
              ) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { className: "text-white font-medium", children: member.user?.name?.split(" ").map((n) => n[0]).join("").slice(0, 2) || "U" }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white bg-green-500" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { className: "font-semibold text-gray-900", children: member.user?.name || "Unknown User" }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { className: "text-gray-600 text-sm", children: member.role?.charAt(0).toUpperCase() + member.role?.slice(1) || "Member" }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "flex items-center space-x-4 mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center text-gray-500 text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Mail, { className: "w-3 h-3 mr-1" }),
                member.user?.email || "No email"
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { className: "px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full", children: member.teamName }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("button", { className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EllipsisVertical, { className: "w-4 h-4" }) })
          ] })
        ] }) }, `${member.teamId}-${member.user?.id}`)) })
      ] })
    ] })
  ] }) });
}

// src/pages/Projects.tsx
var import_react40 = __toESM(require_react(), 1);
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
function Projects() {
  const { isAuthenticated } = useAuthStore();
  const [searchTerm, setSearchTerm] = (0, import_react40.useState)("");
  const [statusFilter, setStatusFilter] = (0, import_react40.useState)("all");
  const { data: projects = [], isLoading } = trpc.project.getAll.useQuery();
  const { data: teams2 = [] } = trpc.team.getAll.useQuery();
  if (!isAuthenticated) {
    return null;
  }
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(LoaderCircle, { className: "w-8 h-8 animate-spin mx-auto mb-4 text-blue-600" }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600", children: "Loading projects..." })
    ] }) }) });
  }
  const filteredProjects = projects.filter((project) => {
    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) || project.description?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "all" || project.status.toLowerCase() === statusFilter.toLowerCase();
    return matchesSearch && matchesStatus;
  });
  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case "active":
        return "bg-green-100 text-green-800";
      case "planning":
        return "bg-orange-100 text-orange-800";
      case "completed":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-blue-100 text-blue-800";
    }
  };
  const getProjectColor = (index) => {
    const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-orange-500", "bg-pink-500", "bg-indigo-500"];
    return colors[index % colors.length];
  };
  const formatDate3 = (dateString) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric"
    });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "h-full flex flex-col", children: [
    /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "bg-white border-b border-gray-200 p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Projects" }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600 mt-1", children: "Manage and track all your projects" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("button", { className: "flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
          "New Project"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "mt-4 flex items-center space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "relative flex-1 max-w-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Search, { className: "w-4 h-4 absolute left-3 top-3 text-gray-400 z-20" }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
            FloatingInput,
            {
              id: "search",
              type: "text",
              label: "Search projects...",
              value: searchTerm,
              onChange: (e) => setSearchTerm(e.target.value),
              className: "pl-10"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(
          "select",
          {
            value: statusFilter,
            onChange: (e) => setStatusFilter(e.target.value),
            className: "px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("option", { value: "all", children: "All Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("option", { value: "active", children: "Active" }),
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("option", { value: "planning", children: "Planning" }),
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("option", { value: "completed", children: "Completed" })
            ]
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex-1 p-6 overflow-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600 text-sm", children: "Total Projects" }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: filteredProjects.length })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Activity, { className: "w-6 h-6 text-blue-600" }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600 text-sm", children: "Active Projects" }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: projects.filter((p2) => p2.status.toLowerCase() === "active").length })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Activity, { className: "w-6 h-6 text-green-600" }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600 text-sm", children: "Completed" }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: projects.filter((p2) => p2.status.toLowerCase() === "completed").length })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Activity, { className: "w-6 h-6 text-gray-600" }) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600 text-sm", children: "Team Members" }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-2xl font-bold text-gray-900", children: teams2.reduce((total, team) => total + (team.members?.length || 0), 0) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Users, { className: "w-6 h-6 text-purple-600" }) })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: filteredProjects.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "col-span-full text-center py-12", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-500", children: "No projects found matching your criteria." }) }) : filteredProjects.map((project, index) => /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow", children: [
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-start justify-between mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: `w-10 h-10 rounded-lg ${getProjectColor(index)} flex items-center justify-center`, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", { className: "text-white font-bold text-sm", children: project.name.split(" ").map((word) => word[0]).join("").slice(0, 2) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("h3", { className: "font-semibold text-gray-900", children: project.name }),
              /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", { className: `px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(project.status)}`, children: project.status.charAt(0).toUpperCase() + project.status.slice(1) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("button", { className: "text-gray-400 hover:text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(EllipsisVertical, { className: "w-4 h-4" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("p", { className: "text-gray-600 text-sm mb-4", children: project.description }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "flex items-center space-x-4 text-sm text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Calendar, { className: "w-4 h-4 mr-1" }),
            project.endDate ? formatDate3(project.endDate) : "No due date"
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { className: "flex -space-x-1", children: [
            project.team?.members?.slice(0, 3).map((member, idx) => /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
              "div",
              {
                className: "w-6 h-6 rounded-full bg-gray-400 border-2 border-white flex items-center justify-center",
                children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", { className: "text-white text-xs font-medium", children: member.user?.name?.split(" ").map((n) => n[0]).join("").slice(0, 2) || "U" })
              },
              idx
            )) || /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "w-6 h-6 rounded-full bg-gray-300 border-2 border-white flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", { className: "text-gray-600 text-xs", children: "No team" }) }),
            (project.team?.members?.length || 0) > 3 && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "w-6 h-6 rounded-full bg-gray-300 border-2 border-white flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("span", { className: "text-gray-600 text-xs", children: [
              "+",
              (project.team?.members?.length || 0) - 3
            ] }) })
          ] })
        ] })
      ] }, project.id)) })
    ] })
  ] }) });
}

// src/pages/Profile.tsx
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
function Profile() {
  const userStats = [
    { label: "Tasks Completed", value: "147", color: "bg-green-100 text-green-800" },
    { label: "Projects Active", value: "8", color: "bg-blue-100 text-blue-800" },
    { label: "Team Members", value: "12", color: "bg-purple-100 text-purple-800" },
    { label: "Hours Logged", value: "284", color: "bg-orange-100 text-orange-800" }
  ];
  const recentActivity = [
    {
      id: 1,
      action: "Completed task",
      target: "Birthday Cake Planning",
      time: "2 hours ago",
      color: "bg-green-500"
    },
    {
      id: 2,
      action: "Added comment to",
      target: "New MVP Build",
      time: "4 hours ago",
      color: "bg-blue-500"
    },
    {
      id: 3,
      action: "Created new project",
      target: "Website Redesign",
      time: "1 day ago",
      color: "bg-purple-500"
    },
    {
      id: 4,
      action: "Assigned task to",
      target: "Blaine Cottrell",
      time: "2 days ago",
      color: "bg-orange-500"
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "h-full overflow-auto", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "max-w-4xl mx-auto p-6", children: [
    /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-6 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-start justify-between", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center space-x-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "text-white text-2xl font-bold", children: "LJ" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Lisa Jackson" }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-gray-600 text-lg", children: "Team Lead & Project Manager" }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center space-x-4 mt-2 text-gray-500", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Mail, { className: "w-4 h-4 mr-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "text-sm", children: "lisa.jackson@company.com" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(MapPin, { className: "w-4 h-4 mr-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "text-sm", children: "San Francisco, CA" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Calendar, { className: "w-4 h-4 mr-1" }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "text-sm", children: "Joined March 2021" })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("button", { className: "flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PenLine, { className: "w-4 h-4 mr-2" }),
        "Edit Profile"
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "lg:col-span-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6 mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h2", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Performance Overview" }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: userStats.map((stat, index) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: `mx-auto w-16 h-16 rounded-full ${stat.color} flex items-center justify-center mb-2`, children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "text-xl font-bold", children: stat.value }) }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-sm text-gray-600", children: stat.label })
          ] }, index)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: "Recent Activity" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Activity, { className: "w-5 h-5 text-gray-400" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "space-y-4", children: recentActivity.map((activity) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-start space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: `w-8 h-8 rounded-full ${activity.color} flex items-center justify-center`, children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "w-2 h-2 bg-white rounded-full" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("p", { className: "text-sm text-gray-900", children: [
                activity.action,
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "font-medium", children: activity.target })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-xs text-gray-500", children: activity.time })
            ] })
          ] }, activity.id)) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Skills" }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "space-y-3", children: [
            { name: "Project Management", level: 95 },
            { name: "Team Leadership", level: 90 },
            { name: "Strategic Planning", level: 85 },
            { name: "Communication", level: 92 }
          ].map((skill, index) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center justify-between mb-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("span", { className: "text-sm font-medium text-gray-700", children: skill.name }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("span", { className: "text-sm text-gray-500", children: [
                skill.level,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-2", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
              "div",
              {
                className: "bg-blue-600 h-2 rounded-full transition-all duration-300",
                style: { width: `${skill.level}%` }
              }
            ) })
          ] }, index)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Current Projects" }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "space-y-3", children: [
            { name: "Birthday Event Planning", progress: 75, color: "bg-blue-500" },
            { name: "New MVP Development", progress: 45, color: "bg-green-500" },
            { name: "Website Redesign", progress: 20, color: "bg-purple-500" }
          ].map((project, index) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex items-center space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: `w-3 h-3 rounded-full ${project.color}` }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "text-sm font-medium text-gray-900", children: project.name }),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-1 mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
                "div",
                {
                  className: `h-1 rounded-full ${project.color}`,
                  style: { width: `${project.progress}%` }
                }
              ) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("span", { className: "text-xs text-gray-500", children: [
              project.progress,
              "%"
            ] })
          ] }, index)) })
        ] })
      ] })
    ] })
  ] }) }) });
}

// src/pages/Settings.tsx
var import_react41 = __toESM(require_react(), 1);
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
function Settings4() {
  const [currentUser, setCurrentUser] = (0, import_react41.useState)(null);
  const [preferences, setPreferences] = (0, import_react41.useState)(null);
  const [activeSessions, setActiveSessions] = (0, import_react41.useState)([]);
  const [profileForm, setProfileForm] = (0, import_react41.useState)({
    name: "",
    avatar: "",
    timezone: "",
    dateFormat: "",
    language: ""
  });
  const [passwordForm, setPasswordForm] = (0, import_react41.useState)({
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  });
  const [showPasswords, setShowPasswords] = (0, import_react41.useState)(false);
  const [showProfileModal, setShowProfileModal] = (0, import_react41.useState)(false);
  const [showPasswordModal, setShowPasswordModal] = (0, import_react41.useState)(false);
  const [showSessionsModal, setShowSessionsModal] = (0, import_react41.useState)(false);
  const userQuery = trpc.user.me.useQuery();
  const preferencesQuery = trpc.user.getPreferences.useQuery();
  const sessionsQuery = trpc.user.getActiveSessions.useQuery();
  const updateProfileMutation = trpc.user.updateProfile.useMutation();
  const updatePasswordMutation = trpc.user.updatePassword.useMutation();
  const updatePreferencesMutation = trpc.user.updatePreferences.useMutation();
  const exportDataMutation = trpc.user.exportData.useMutation();
  const revokeSessionMutation = trpc.user.revokeSession.useMutation();
  (0, import_react41.useEffect)(() => {
    if (userQuery.data) {
      setCurrentUser(userQuery.data);
      setProfileForm({
        name: userQuery.data.name || "",
        avatar: userQuery.data.avatar || "",
        timezone: userQuery.data.timezone || "UTC",
        dateFormat: userQuery.data.dateFormat || "MM/DD/YYYY",
        language: userQuery.data.language || "en"
      });
    }
  }, [userQuery.data]);
  (0, import_react41.useEffect)(() => {
    if (preferencesQuery.data) {
      setPreferences(preferencesQuery.data);
    }
  }, [preferencesQuery.data]);
  (0, import_react41.useEffect)(() => {
    if (sessionsQuery.data) {
      setActiveSessions(sessionsQuery.data);
    }
  }, [sessionsQuery.data]);
  const handleProfileUpdate = async (e) => {
    e.preventDefault();
    try {
      await updateProfileMutation.mutateAsync(profileForm);
      toast.success("Profile updated successfully");
      userQuery.refetch();
    } catch (error) {
      toast.error("Failed to update profile");
    }
  };
  const handlePasswordUpdate = async (e) => {
    e.preventDefault();
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error("New passwords do not match");
      return;
    }
    try {
      await updatePasswordMutation.mutateAsync({
        currentPassword: passwordForm.currentPassword,
        newPassword: passwordForm.newPassword
      });
      toast.success("Password updated successfully");
      setPasswordForm({ currentPassword: "", newPassword: "", confirmPassword: "" });
    } catch (error) {
      toast.error(error.message || "Failed to update password");
    }
  };
  const handlePreferenceChange = async (key, value) => {
    try {
      await updatePreferencesMutation.mutateAsync({ [key]: value });
      setPreferences({ ...preferences, [key]: value });
      toast.success("Preference updated");
    } catch (error) {
      toast.error("Failed to update preference");
    }
  };
  const handleExportData = async () => {
    try {
      const result = await exportDataMutation.mutateAsync();
      const dataStr = JSON.stringify(result.data, null, 2);
      const dataUri = "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);
      const exportFileDefaultName = `krushr-data-${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.json`;
      const linkElement = document.createElement("a");
      linkElement.setAttribute("href", dataUri);
      linkElement.setAttribute("download", exportFileDefaultName);
      document.body.appendChild(linkElement);
      linkElement.click();
      document.body.removeChild(linkElement);
      toast.success("Data exported successfully");
    } catch (error) {
      toast.error("Failed to export data");
    }
  };
  const handleRevokeSession = async (sessionId) => {
    try {
      await revokeSessionMutation.mutateAsync({ sessionId });
      toast.success("Session revoked");
      sessionsQuery.refetch();
    } catch (error) {
      toast.error("Failed to revoke session");
    }
  };
  if (userQuery.isLoading || preferencesQuery.isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "h-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "animate-spin rounded-full h-12 w-12 border-b-2 border-krushr-coral-red mx-auto mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-gray-600", children: "Loading settings..." })
    ] }) }) });
  }
  const settingsGroups = [
    {
      title: "Profile Settings",
      icon: User,
      settings: [
        { name: "Personal Information", description: "Update your profile details", type: "link", action: () => setShowProfileModal(true) },
        { name: "Change Password", description: "Update your account password", type: "link", action: () => setShowPasswordModal(true) },
        { name: "Active Sessions", description: "Manage your active sessions", type: "link", action: () => setShowSessionsModal(true) }
      ]
    },
    {
      title: "Notifications",
      icon: Bell,
      settings: [
        {
          name: "Desktop Notifications",
          description: "Get notified on your desktop",
          type: "toggle",
          enabled: preferences?.desktopNotifications ?? true,
          onChange: (value) => handlePreferenceChange("desktopNotifications", value)
        },
        {
          name: "Email Notifications",
          description: "Receive notifications via email",
          type: "toggle",
          enabled: preferences?.emailNotifications ?? true,
          onChange: (value) => handlePreferenceChange("emailNotifications", value)
        },
        {
          name: "Task Assignments",
          description: "Notify me about task assignments",
          type: "toggle",
          enabled: preferences?.notifyTaskAssignments ?? true,
          onChange: (value) => handlePreferenceChange("notifyTaskAssignments", value)
        },
        {
          name: "Comments & Mentions",
          description: "Notify me about comments and mentions",
          type: "toggle",
          enabled: preferences?.notifyCommentsMentions ?? true,
          onChange: (value) => handlePreferenceChange("notifyCommentsMentions", value)
        },
        {
          name: "Team Invitations",
          description: "Notify me about team invitations",
          type: "toggle",
          enabled: preferences?.notifyTeamInvitations ?? true,
          onChange: (value) => handlePreferenceChange("notifyTeamInvitations", value)
        },
        {
          name: "Project Deadlines",
          description: "Notify me about project deadlines",
          type: "toggle",
          enabled: preferences?.notifyProjectDeadlines ?? true,
          onChange: (value) => handlePreferenceChange("notifyProjectDeadlines", value)
        },
        {
          name: "File Uploads",
          description: "Notify me about file uploads",
          type: "toggle",
          enabled: preferences?.notifyFileUploads ?? false,
          onChange: (value) => handlePreferenceChange("notifyFileUploads", value)
        }
      ]
    },
    {
      title: "Appearance",
      icon: Palette,
      settings: [
        {
          name: "Theme",
          description: "Choose your preferred theme",
          type: "select",
          options: ["light", "dark", "system"],
          value: preferences?.theme ?? "system",
          onChange: (value) => handlePreferenceChange("theme", value)
        },
        {
          name: "Color Scheme",
          description: "Customize your color preferences",
          type: "select",
          options: ["blue", "green", "purple", "orange"],
          value: preferences?.colorScheme ?? "blue",
          onChange: (value) => handlePreferenceChange("colorScheme", value)
        },
        {
          name: "Compact Mode",
          description: "Use a more compact interface",
          type: "toggle",
          enabled: preferences?.compactMode ?? false,
          onChange: (value) => handlePreferenceChange("compactMode", value)
        },
        {
          name: "Task Completion Celebrations",
          description: "Show confetti and sound when tasks are completed",
          type: "toggle",
          enabled: isCelebrationEnabled(),
          onChange: (value) => {
            setCelebrationEnabled(value);
            toast.success(`Celebrations ${value ? "enabled" : "disabled"}`);
          }
        }
      ]
    },
    {
      title: "Security",
      icon: Shield,
      settings: [
        { name: "Two-Factor Authentication", description: "Add an extra layer of security (Coming Soon)", type: "toggle", enabled: false, disabled: true },
        { name: "Session Management", description: "Manage your active sessions", type: "link", action: () => setShowSessionsModal(true) },
        { name: "Change Password", description: "Update your account password", type: "link", action: () => setShowPasswordModal(true) }
      ]
    },
    {
      title: "Language & Region",
      icon: Globe,
      settings: [
        {
          name: "Language",
          description: "Choose your preferred language",
          type: "select",
          options: ["en", "es", "fr", "de"],
          optionLabels: ["English", "Spanish", "French", "German"],
          value: currentUser?.language ?? "en",
          onChange: (value) => setProfileForm({ ...profileForm, language: value })
        },
        {
          name: "Timezone",
          description: "Set your local timezone",
          type: "select",
          options: ["UTC-8", "UTC-5", "UTC+0", "UTC+1"],
          optionLabels: ["UTC-8 (PST)", "UTC-5 (EST)", "UTC+0 (GMT)", "UTC+1 (CET)"],
          value: currentUser?.timezone ?? "UTC",
          onChange: (value) => setProfileForm({ ...profileForm, timezone: value })
        },
        {
          name: "Date Format",
          description: "Choose how dates are displayed",
          type: "select",
          options: ["MM/DD/YYYY", "DD/MM/YYYY", "YYYY-MM-DD"],
          value: currentUser?.dateFormat ?? "MM/DD/YYYY",
          onChange: (value) => setProfileForm({ ...profileForm, dateFormat: value })
        }
      ]
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "h-full overflow-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "max-w-4xl mx-auto p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "mb-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h1", { className: "text-2xl font-bold text-gray-900", children: "Settings" }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-gray-600 mt-1", children: "Manage your account settings and preferences" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "space-y-8", children: settingsGroups.map((group, groupIndex) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "p-6 border-b border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "w-10 h-10 bg-red-50 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(group.icon, { className: "w-5 h-5 text-krushr-coral-red" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: group.title })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "divide-y divide-gray-200", children: group.settings.map((setting, settingIndex) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "p-6 flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "font-medium text-gray-900", children: setting.name }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: setting.description })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "ml-6", children: [
            setting.type === "toggle" && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
              "button",
              {
                disabled: setting.disabled,
                onClick: () => setting.onChange && setting.onChange(!setting.enabled),
                className: `relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${setting.enabled ? "bg-krushr-coral-red" : "bg-gray-200"} ${setting.disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}`,
                children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
                  "span",
                  {
                    className: `inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${setting.enabled ? "translate-x-6" : "translate-x-1"}`
                  }
                )
              }
            ),
            setting.type === "select" && setting.options && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
              "select",
              {
                value: setting.value || setting.options[0],
                onChange: (e) => setting.onChange && setting.onChange(e.target.value),
                className: "px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-krushr-coral-red focus:border-krushr-coral-red",
                children: setting.options.map((option, optionIndex) => /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("option", { value: option, children: setting.optionLabels ? setting.optionLabels[optionIndex] : option.charAt(0).toUpperCase() + option.slice(1) }, optionIndex))
              }
            ),
            setting.type === "link" && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
              "button",
              {
                onClick: () => setting.action && setting.action(),
                className: "text-krushr-coral-red hover:text-krushr-coral-red/80 font-medium",
                children: "Configure"
              }
            )
          ] })
        ] }, settingIndex)) })
      ] }, groupIndex)) }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "mt-8 bg-white rounded-lg border border-red-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "p-6 border-b border-red-200", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h2", { className: "text-lg font-semibold text-red-900", children: "Danger Zone" }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm text-red-600 mt-1", children: "These actions are irreversible" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "p-6 space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "font-medium text-gray-900", children: "Export Data" }),
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm text-gray-600", children: "Download a copy of all your data" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
              "button",
              {
                onClick: handleExportData,
                disabled: exportDataMutation.isLoading,
                className: "px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 flex items-center space-x-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Download, { className: "w-4 h-4" }),
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { children: exportDataMutation.isLoading ? "Exporting..." : "Export" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "font-medium text-gray-900", children: "Delete Account" }),
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-sm text-gray-600", children: "Permanently delete your account and all data" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("button", { className: "px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors", children: "Delete Account" })
          ] })
        ] })
      ] })
    ] }),
    showProfileModal && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "bg-white rounded-lg max-w-md w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Update Profile" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("form", { onSubmit: handleProfileUpdate, className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          FloatingInput,
          {
            type: "text",
            value: profileForm.name,
            onChange: (e) => setProfileForm({ ...profileForm, name: e.target.value }),
            label: "Name",
            required: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          FloatingInput,
          {
            type: "url",
            value: profileForm.avatar,
            onChange: (e) => setProfileForm({ ...profileForm, avatar: e.target.value }),
            label: "Avatar URL (Optional)"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex space-x-3 pt-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "button",
            {
              type: "submit",
              disabled: updateProfileMutation.isLoading,
              className: "flex-1 bg-krushr-coral-red text-white py-2 px-4 rounded-lg hover:bg-krushr-coral-red/90 disabled:opacity-50",
              children: updateProfileMutation.isLoading ? "Saving..." : "Save Changes"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "button",
            {
              type: "button",
              onClick: () => setShowProfileModal(false),
              className: "flex-1 bg-gray-200 text-gray-900 py-2 px-4 rounded-lg hover:bg-gray-300",
              children: "Cancel"
            }
          )
        ] })
      ] })
    ] }) }),
    showPasswordModal && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "bg-white rounded-lg max-w-md w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Change Password" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("form", { onSubmit: handlePasswordUpdate, className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            FloatingInput,
            {
              type: showPasswords ? "text" : "password",
              value: passwordForm.currentPassword,
              onChange: (e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value }),
              label: "Current Password",
              className: "pr-10",
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "button",
            {
              type: "button",
              onClick: () => setShowPasswords(!showPasswords),
              className: "absolute inset-y-0 right-0 pr-3 flex items-center z-20",
              children: showPasswords ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(EyeOff, { className: "h-4 w-4 text-gray-400" }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Eye, { className: "h-4 w-4 text-gray-400" })
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          FloatingInput,
          {
            type: showPasswords ? "text" : "password",
            value: passwordForm.newPassword,
            onChange: (e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value }),
            label: "New Password",
            minLength: 6,
            required: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          FloatingInput,
          {
            type: showPasswords ? "text" : "password",
            value: passwordForm.confirmPassword,
            onChange: (e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value }),
            label: "Confirm New Password",
            minLength: 6,
            required: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex space-x-3 pt-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "button",
            {
              type: "submit",
              disabled: updatePasswordMutation.isLoading,
              className: "flex-1 bg-krushr-coral-red text-white py-2 px-4 rounded-lg hover:bg-krushr-coral-red/90 disabled:opacity-50",
              children: updatePasswordMutation.isLoading ? "Updating..." : "Update Password"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "button",
            {
              type: "button",
              onClick: () => {
                setShowPasswordModal(false);
                setPasswordForm({ currentPassword: "", newPassword: "", confirmPassword: "" });
              },
              className: "flex-1 bg-gray-200 text-gray-900 py-2 px-4 rounded-lg hover:bg-gray-300",
              children: "Cancel"
            }
          )
        ] })
      ] })
    ] }) }),
    showSessionsModal && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "bg-white rounded-lg max-w-2xl w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "Active Sessions" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "space-y-3 max-h-96 overflow-y-auto", children: [
        activeSessions.map((session) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "flex items-center space-x-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "font-medium", children: session.isCurrent ? "Current Session" : "Session" }),
              session.isCurrent && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { className: "px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full", children: "Current" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("p", { className: "text-sm text-gray-600", children: [
              "Created: ",
              new Date(session.createdAt).toLocaleString()
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("p", { className: "text-sm text-gray-600", children: [
              "Expires: ",
              new Date(session.expiresAt).toLocaleString()
            ] })
          ] }),
          !session.isCurrent && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "button",
            {
              onClick: () => handleRevokeSession(session.id),
              className: "px-3 py-1 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 text-sm font-medium",
              children: "Revoke"
            }
          )
        ] }, session.id)),
        activeSessions.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("p", { className: "text-center text-gray-500 py-8", children: "No active sessions found" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "flex justify-end pt-4", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
        "button",
        {
          onClick: () => setShowSessionsModal(false),
          className: "bg-gray-200 text-gray-900 py-2 px-4 rounded-lg hover:bg-gray-300",
          children: "Close"
        }
      ) })
    ] }) })
  ] }) });
}

// src/pages/Pricing.tsx
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var Pricing = () => {
  const plans = [
    {
      name: "Free",
      description: "Ideal for individuals, or a quick test drive",
      price: "$0",
      period: "mo",
      features: [
        "Unlimited customizable panels",
        "Basic ChatGPT integration",
        "Google & Outlook calendars",
        "Up to 3 workspaces",
        "Basic task management"
      ],
      buttonText: "Start Free",
      buttonClass: "bg-gray-100 text-gray-900 hover:bg-gray-200",
      popular: false
    },
    {
      name: "Lite",
      description: "Put your full productivity stack on one page",
      price: "$39",
      originalPrice: "$49",
      period: "mo",
      savings: "Save $10/mo",
      features: [
        "250 Automations/month",
        "1 Connected email & calendar account",
        "Unlimited panels",
        "Customizable layout",
        "Unlimited contacts",
        "Unlimited teams"
      ],
      buttonText: "Start Now",
      buttonClass: "bg-figma-secondary text-white hover:bg-red-600",
      popular: false
    },
    {
      name: "Full Suite",
      description: "Everything + your tailored o1 model, OpenAI's most advanced model",
      price: "$49",
      originalPrice: "$99",
      period: "mo",
      savings: "Save $50/mo",
      features: [
        "ChatGPT o1 precise user style model",
        "750 Automations/month",
        "2 Connected email & calendar accounts",
        "Unlimited panels",
        "Customizable layout",
        "Unlimited contacts",
        "Unlimited teams",
        "40% beta discount (through 2025)"
      ],
      buttonText: "Start Now",
      buttonClass: "bg-figma-primary text-white hover:bg-blue-800",
      popular: true
    }
  ];
  const valueProps = [
    {
      icon: Zap,
      title: "Latest AI Technology",
      description: "Powered by OpenAI's most advanced o1 model, delivering human-like reasoning for your workflows."
    },
    {
      icon: Shield,
      title: "Enterprise Security",
      description: "Bank-level encryption, SOC 2 compliance, and complete data privacy. Your information stays yours."
    },
    {
      icon: Calendar,
      title: "Massive Time Savings",
      description: "Save 15+ hours per week by consolidating all your work tools into one intelligent workspace."
    }
  ];
  const faqs = [
    {
      question: "Can I upgrade or downgrade anytime?",
      answer: "Yes! You can change your plan at any time. Upgrades take effect immediately, and downgrades take effect at your next billing cycle."
    },
    {
      question: "What's included in the free trial?",
      answer: "The Free plan is completely free forever. The Full Suite plan includes a 14-day free trial with full access to all premium features."
    },
    {
      question: "How does the early bird pricing work?",
      answer: "The Full Suite includes a special beta discount. This pricing is designed to provide maximum value as we continue to enhance our AI capabilities."
    },
    {
      question: "Do you offer refunds?",
      answer: "Yes, we offer a 30-day money-back guarantee. If you're not satisfied, contact our support team for a full refund."
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "min-h-screen bg-white font-manrope", children: [
    /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "bg-figma-gray-bg-light py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "max-w-7xl mx-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "text-center mb-16", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-figma-primary font-medium mb-4", children: "2025 Pricing" }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h1", { className: "text-5xl font-bold text-figma-black mb-6", children: "Choose Your AI Productivity Plan" }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "max-w-3xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-lg text-figma-gray mb-0", children: "Start free and upgrade when you're ready to unlock the full power of AI-driven productivity. No hidden fees, cancel anytime." }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "max-w-6xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: plans.map((plan, index) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
        "div",
        {
          className: `relative bg-white rounded-2xl shadow-lg p-8 transition-all duration-300 hover:shadow-xl ${plan.popular ? "ring-2 ring-figma-primary transform scale-105 shadow-2xl" : "hover:scale-102"}`,
          children: [
            plan.popular && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "absolute -top-4 left-1/2 transform -translate-x-1/2 z-10", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "bg-gradient-to-r from-figma-primary to-figma-secondary text-white px-6 py-2 rounded-full text-sm font-bold shadow-lg border-2 border-white", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("span", { className: "flex items-center gap-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("svg", { className: "w-4 h-4", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("path", { d: "M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" }) }),
              "Most Popular"
            ] }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "mb-6 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h3", { className: "text-2xl md:text-3xl font-bold text-figma-black mb-3 tracking-tight", children: plan.name }),
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-figma-gray text-base md:text-lg leading-relaxed", children: plan.description })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "border-t border-figma-gray-border pt-6 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "flex flex-col mb-6", children: plan.features.map((feature, featureIndex) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "flex items-start mb-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Check, { className: "w-5 h-5 text-figma-success mr-3 mt-0.5 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("span", { className: "text-figma-gray-dark font-medium", children: feature })
            ] }, featureIndex)) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "mb-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "flex items-baseline flex-wrap gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("span", { className: "text-4xl md:text-5xl font-bold text-figma-black tracking-tight", children: plan.price }),
                /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("span", { className: "text-figma-gray text-lg font-medium", children: [
                  "/",
                  plan.period
                ] }),
                plan.originalPrice && /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("span", { className: "text-figma-gray ml-1 line-through text-xl font-medium opacity-60", children: [
                  plan.originalPrice,
                  "/mo"
                ] })
              ] }),
              plan.savings && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("span", { className: "inline-flex items-center px-3 py-1 rounded-full text-sm font-bold bg-green-100 text-green-800 border border-green-200", children: [
                /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("svg", { className: "w-4 h-4 mr-1", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", clipRule: "evenodd" }) }),
                plan.savings
              ] }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
              "button",
              {
                className: `w-full py-4 px-6 rounded-xl font-bold text-base md:text-lg transition-all duration-200 flex items-center justify-center shadow-md hover:shadow-lg transform hover:scale-105 ${plan.buttonClass}`,
                onClick: () => window.open("https://task.krushr.io/auth/register", "_blank"),
                children: [
                  plan.buttonText,
                  /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(ArrowRight, { className: "w-5 h-5 ml-2 transition-transform group-hover:translate-x-1" })
                ]
              }
            )
          ]
        },
        index
      )) }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "max-w-7xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "text-center mb-16", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h2", { className: "text-4xl font-bold text-figma-black mb-8", children: "Why Choose Krushr in 2025?" }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: valueProps.map((prop, index) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "bg-white rounded-xl shadow-lg p-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(prop.icon, { className: "w-12 h-12 text-figma-primary mb-6" }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h3", { className: "text-xl font-bold text-figma-black mb-4", children: prop.title }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-figma-gray", children: prop.description })
      ] }, index)) })
    ] }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "bg-figma-gray-bg-light py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "max-w-4xl mx-auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "text-center mb-16", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h2", { className: "text-4xl font-bold text-figma-black", children: "Frequently Asked Questions" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "space-y-6", children: faqs.map((faq, index) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "bg-white rounded-xl shadow-lg p-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h3", { className: "text-xl font-bold text-figma-black mb-3", children: faq.question }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-figma-gray", children: faq.answer })
      ] }, index)) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "py-20 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "max-w-4xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "text-center", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
      "div",
      {
        className: "bg-gradient-to-br from-figma-primary to-figma-purple rounded-2xl p-16 text-white",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h2", { className: "text-4xl font-bold mb-6", children: "Ready to 10x Your Productivity?" }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { className: "text-xl mb-8 opacity-90", children: "Join thousands of professionals who've already transformed their workflow with Krushr's AI-powered platform." }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
            "button",
            {
              className: "bg-white text-figma-primary px-8 py-4 rounded-lg font-semibold text-lg hover:bg-gray-100 transition-colors inline-flex items-center",
              onClick: () => window.open("https://task.krushr.io/auth/register", "_blank"),
              children: [
                "Start Free Today",
                /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(ArrowRight, { className: "w-5 h-5 ml-2" })
              ]
            }
          )
        ]
      }
    ) }) }) })
  ] });
};
var Pricing_default = Pricing;

// src/pages/Workspace.tsx
var import_react49 = __toESM(require_react(), 1);

// src/components/workspace/PanelWorkspace.tsx
var import_react44 = __toESM(require_react(), 1);
var import_react_grid_layout = __toESM(require_react_grid_layout(), 1);

// src/components/workspace/PanelRenderer.tsx
var import_react42 = __toESM(require_react(), 1);
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var KanbanBoard2 = (0, import_react42.lazy)(() => import("/chunks/KanbanBoard-3KSZNGWE.js"));
var Chat2 = (0, import_react42.lazy)(() => import("/chunks/Chat-Z2ORF33V.js"));
var NotesPanel = (0, import_react42.lazy)(() => import("/chunks/NotesPanel-73HEVHQT.js"));
var NewCalendarPanel = (0, import_react42.lazy)(() => import("/chunks/NewCalendarPanel-KRMHCMBX.js"));
var Contacts = (0, import_react42.lazy)(() => import("/chunks/Contacts-7KNWQBBW.js"));
var WorkspaceAiChat = (0, import_react42.lazy)(() => import("/chunks/WorkspaceAiChat-HAWIIZED.js"));
var PanelLoadingSpinner = () => /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(LoaderCircle, { className: "w-6 h-6 animate-spin text-krushr-primary" }) });
var PanelErrorBoundary = class extends import_react42.default.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(_) {
    return { hasError: true };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Panel loading error:", error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      return this.props.fallback || /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(CircleAlert, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-sm", children: "Failed to load panel" }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-xs mt-1", children: "Try refreshing the page" })
      ] }) });
    }
    return this.props.children;
  }
};
function PanelRenderer({ panel, workspaceId, onRefresh, onFullscreen, onFocus }) {
  const { toast: toast2 } = useToast();
  const utils = trpc.useUtils();
  const { focusMode, focusedPanelId, toggleFocusMode } = useUIStore();
  const [floatingPanels, setFloatingPanels] = (0, import_react42.useState)(() => /* @__PURE__ */ new Set());
  const [showCreatePanel, setShowCreatePanel] = (0, import_react42.useState)(false);
  const [isEditingTitle, setIsEditingTitle] = (0, import_react42.useState)(false);
  const [editedTitle, setEditedTitle] = (0, import_react42.useState)(panel.title);
  (0, import_react42.useEffect)(() => {
    if (!isEditingTitle) {
      setEditedTitle(panel.title);
    }
  }, [panel.title, isEditingTitle]);
  const toggleMinimize = trpc.panel.toggleMinimize.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
      setTimeout(() => {
        window.dispatchEvent(new Event("resize"));
      }, 100);
    },
    onError: (error) => {
      console.error("Minimize toggle failed:", error);
      toast2({
        title: "Error",
        description: "Failed to minimize/restore panel",
        variant: "destructive"
      });
    }
  });
  const toggleLock = trpc.panel.toggleLock.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    },
    onError: (error) => {
      console.error("Lock toggle failed:", error);
      toast2({
        title: "Error",
        description: "Failed to lock/unlock panel",
        variant: "destructive"
      });
    }
  });
  const handleToggleFloating = () => {
    setFloatingPanels((prev) => {
      const newFloatingPanels = new Set(prev);
      if (newFloatingPanels.has(panel.id)) {
        newFloatingPanels.delete(panel.id);
      } else {
        newFloatingPanels.add(panel.id);
      }
      return newFloatingPanels;
    });
  };
  const handleCloseFloating = () => {
    setFloatingPanels((prev) => {
      const newFloatingPanels = new Set(prev);
      newFloatingPanels.delete(panel.id);
      return newFloatingPanels;
    });
  };
  const isFloating = (0, import_react42.useMemo)(() => floatingPanels.has(panel.id), [floatingPanels, panel.id]);
  const toggleFullscreen = trpc.panel.toggleFullscreen.useMutation({
    onSuccess: (updatedPanel) => {
      try {
        const panelData2 = typeof updatedPanel.data === "string" ? JSON.parse(updatedPanel.data) : updatedPanel.data || {};
        utils.panel.list.invalidate({ workspaceId });
        onFullscreen?.(panel.id, panelData2.isFullscreen || false);
        onRefresh?.();
        setTimeout(() => {
          utils.panel.list.invalidate({ workspaceId });
        }, 50);
      } catch (error) {
        console.error("Error parsing panel data:", error, updatedPanel);
        utils.panel.list.invalidate({ workspaceId });
        onRefresh?.();
      }
    },
    onError: (error) => {
      console.error("Fullscreen toggle failed:", error);
      toast2({
        title: "Error",
        description: "Failed to toggle fullscreen mode",
        variant: "destructive"
      });
    }
  });
  const setFocus = trpc.panel.setFocus.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    }
  });
  const deletePanel = trpc.panel.delete.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
    },
    onError: (error) => {
      console.error("Panel deletion failed:", error);
      toast2({
        title: "Error",
        description: "Failed to delete panel",
        variant: "destructive"
      });
    }
  });
  const updatePanel = trpc.panel.update.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      onRefresh?.();
      setIsEditingTitle(false);
      toast2({
        title: "Success",
        description: "Panel title updated"
      });
    },
    onError: (error) => {
      console.error("Update failed:", error);
      toast2({
        title: "Error",
        description: "Failed to update panel title",
        variant: "destructive"
      });
      setEditedTitle(panel.title);
      setIsEditingTitle(false);
    }
  });
  const getPanelIcon = (type) => {
    switch (type) {
      case "KANBAN":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(FolderOpen, { className: "w-4 h-4 text-krushr-coral-red" });
      case "CHAT":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(MessageCircle, { className: "w-4 h-4 text-krushr-coral-red" });
      case "AI_CHAT":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Bot, { className: "w-4 h-4 text-krushr-coral-red" });
      case "CALENDAR":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Calendar, { className: "w-4 h-4 text-krushr-coral-red" });
      case "NOTES":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(StickyNote, { className: "w-4 h-4 text-krushr-coral-red" });
      case "EMAIL":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Mail, { className: "w-4 h-4 text-krushr-coral-red" });
      case "CONTACTS":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Users, { className: "w-4 h-4 text-krushr-coral-red" });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(GripVertical, { className: "w-4 h-4 text-krushr-coral-red" });
    }
  };
  const renderPanelContent = () => {
    if (panel.is_minimized) {
      return null;
    }
    switch (panel.type) {
      case "KANBAN":
        const kanbanId = panel.data?.kanbanId;
        if (!kanbanId) {
          return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Columns2, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-sm", children: "No Kanban board selected" }),
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-xs mt-1", children: "Create a Kanban board first, then edit this panel" })
          ] }) });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_react42.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(KanbanBoard2, { kanban: { id: kanbanId, workspaceId }, className: "h-full" }) }) });
      case "CHAT":
        const chatId = panel.data?.chatId;
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_react42.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Chat2, { threadId: chatId, className: "h-full" }) }) });
      case "AI_CHAT":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_react42.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          WorkspaceAiChat,
          {
            workspaceId,
            className: "h-full"
          }
        ) }) });
      case "CALENDAR":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_react42.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(NewCalendarPanel, { workspaceId, className: "h-full" }) });
      case "NOTES":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_react42.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          NotesPanel,
          {
            workspaceId,
            className: "h-full"
          }
        ) });
      case "EMAIL":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Mail, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("p", { className: "text-sm", children: "Email component coming soon" })
        ] }) });
      case "CONTACTS":
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_react42.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(PanelLoadingSpinner, {}), children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Contacts, { workspaceId, className: "h-full" }) });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "flex items-center justify-center h-full text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(GripVertical, { className: "w-8 h-8 mx-auto mb-2 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("p", { className: "text-sm", children: [
            "Unknown panel type: ",
            panel.type
          ] })
        ] }) });
    }
  };
  const handleToggleMinimize = () => {
    toggleMinimize.mutate({ id: panel.id });
  };
  const handleToggleLock = () => {
    toggleLock.mutate({ id: panel.id });
  };
  const handleToggleFullscreen = () => {
    toggleFullscreen.mutate({ id: panel.id });
  };
  const handleDelete = () => {
    if (confirm(`Delete panel "${panel.title}"?`)) {
      deletePanel.mutate({ id: panel.id });
    }
  };
  const handleTitleClick = (e) => {
    e.stopPropagation();
    if (!panel.is_locked) {
      setIsEditingTitle(true);
    }
  };
  const handleFocus = (e) => {
    if (isFloating) return;
    const target = e.target;
    if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.closest("input") || target.closest("textarea")) {
      return;
    }
    setFocus.mutate({ id: panel.id, focused: true });
    onFocus?.(panel.id);
  };
  const handleTouchStart = (e) => {
    const target = e.target;
    if (target.closest(".panel-drag-handle")) {
      e.stopPropagation();
    } else if (target.closest(".panel-content")) {
      return;
    }
  };
  const handleTouchMove = (e) => {
    const target = e.target;
    if (target.closest(".panel-drag-handle")) {
      e.stopPropagation();
    }
  };
  const handleTouchEnd = (e) => {
    const target = e.target;
    if (target.closest(".panel-drag-handle")) {
      e.stopPropagation();
    }
  };
  const handleTitleSave = () => {
    const trimmedTitle = editedTitle.trim();
    if (trimmedTitle && trimmedTitle !== panel.title) {
      updatePanel.mutate({
        id: panel.id,
        title: trimmedTitle
      });
    } else {
      setIsEditingTitle(false);
      setEditedTitle(panel.title);
    }
  };
  const handleTitleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleTitleSave();
    } else if (e.key === "Escape") {
      setIsEditingTitle(false);
      setEditedTitle(panel.title);
    }
  };
  const handleTitleBlur = () => {
    handleTitleSave();
  };
  const panelData = (0, import_react42.useMemo)(() => {
    try {
      return typeof panel.data === "string" ? JSON.parse(panel.data) : panel.data || {};
    } catch {
      return {};
    }
  }, [panel.data]);
  const isFullscreen = panelData?.isFullscreen || false;
  const isFocused = panelData?.isFocused || false;
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(
    Card,
    {
      className: cn(
        "panel-card flex flex-col",
        panel.is_minimized ? "h-auto" : "h-full",
        panel.is_locked && "border-amber-200 bg-amber-50",
        isFullscreen && "fixed inset-0 z-[9999] m-0 rounded-none shadow-2xl bg-white"
      ),
      onClick: handleFocus,
      onTouchStart: handleTouchStart,
      onTouchMove: handleTouchMove,
      onTouchEnd: handleTouchEnd,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(
          CardHeader,
          {
            className: cn(
              "panel-drag-handle flex-shrink-0 cursor-move",
              "flex flex-row items-center space-y-0 p-0 px-3 py-1.5",
              panel.is_locked && "cursor-not-allowed"
            ),
            style: { justifyContent: "flex-start" },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center gap-2 min-w-0 flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "text-krushr-coral-red", children: getPanelIcon(panel.type) }),
                isEditingTitle ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  Input,
                  {
                    value: editedTitle,
                    onChange: (e) => setEditedTitle(e.target.value),
                    onKeyDown: handleTitleKeyDown,
                    onBlur: handleTitleBlur,
                    className: "h-6 px-1 py-0 text-sm font-medium border-krushr-primary focus:border-krushr-primary focus:ring-1 focus:ring-krushr-primary",
                    autoFocus: true,
                    onClick: (e) => e.stopPropagation()
                  }
                ) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  "h3",
                  {
                    className: cn(
                      "font-medium text-sm truncate",
                      !panel.is_locked && "cursor-pointer hover:text-krushr-primary transition-colors"
                    ),
                    onClick: handleTitleClick,
                    title: panel.is_locked ? "Panel is locked" : "Click to edit title",
                    children: panel.title
                  }
                ),
                panel.is_locked && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Lock, { className: "w-3 h-3 text-amber-600 flex-shrink-0" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "flex items-center", style: { marginLeft: "auto", gap: "2px" }, children: [
                panel.type === "KANBAN" && /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(import_jsx_runtime65.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                    Button,
                    {
                      size: "sm",
                      variant: "ghost",
                      className: "w-5 h-5 p-0 hover:bg-gray-100 flex-shrink-0",
                      title: "Toggle tools",
                      onClick: (e) => {
                        e.stopPropagation();
                        const kanbanBoard = document.querySelector("[data-kanban-toolbar-toggle]");
                        if (kanbanBoard) {
                          kanbanBoard.click();
                        }
                      },
                      children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Settings, { className: "w-2.5 h-2.5" })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                    Button,
                    {
                      size: "sm",
                      variant: "ghost",
                      className: "w-5 h-5 p-0 hover:bg-gray-100 flex-shrink-0",
                      title: "Toggle tools",
                      onClick: (e) => {
                        e.stopPropagation();
                        const kanbanBoard = document.querySelector("[data-kanban-toolbar-toggle]");
                        if (kanbanBoard) {
                          kanbanBoard.click();
                        }
                      },
                      children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Ellipsis, { className: "w-2.5 h-2.5" })
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: cn(
                      "w-5 h-5 p-0 hover:bg-gray-100 flex-shrink-0",
                      focusMode && focusedPanelId === panel.id && "bg-krushr-primary/10 text-krushr-primary"
                    ),
                    onClick: () => toggleFocusMode(panel.id),
                    title: focusMode && focusedPanelId === panel.id ? "Exit focus mode" : "Focus on this panel",
                    children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Focus, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-gray-100 flex-shrink-0",
                    onClick: handleToggleLock,
                    disabled: toggleLock.isPending,
                    title: panel.is_locked ? "Unlock panel" : "Lock panel",
                    children: toggleLock.isPending ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "w-2.5 h-2.5 border border-gray-400 border-t-transparent rounded-full animate-spin" }) : panel.is_locked ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(LockOpen, { className: "w-2.5 h-2.5" }) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Lock, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-blue-100 hover:text-blue-600 flex-shrink-0",
                    onClick: handleToggleFullscreen,
                    disabled: toggleFullscreen.isPending,
                    title: isFullscreen ? "Exit fullscreen" : "Fullscreen",
                    children: toggleFullscreen.isPending ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "w-2.5 h-2.5 border border-gray-400 border-t-transparent rounded-full animate-spin" }) : isFullscreen ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Shrink, { className: "w-2.5 h-2.5" }) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Expand, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-gray-100 flex-shrink-0",
                    onClick: handleToggleMinimize,
                    disabled: toggleMinimize.isPending,
                    title: panel.is_minimized ? "Restore panel" : "Minimize panel",
                    children: toggleMinimize.isPending ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "w-2.5 h-2.5 border border-gray-400 border-t-transparent rounded-full animate-spin" }) : panel.is_minimized ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Maximize2, { className: "w-2.5 h-2.5" }) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Minimize2, { className: "w-2.5 h-2.5" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    className: "w-5 h-5 p-0 hover:bg-red-100 hover:text-red-600 flex-shrink-0",
                    onClick: handleDelete,
                    title: "Delete panel",
                    children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(X, { className: "w-2.5 h-2.5" })
                  }
                )
              ] })
            ]
          }
        ),
        !panel.is_minimized && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(CardContent, { className: "panel-content flex-1 p-1 pt-0 overflow-hidden", children: renderPanelContent() }),
        showCreatePanel && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          SimpleCreatePanel,
          {
            workspaceId,
            kanbanColumnId: panel.type === "KANBAN" && panel.data?.kanbanId ? panel.data.kanbanId : void 0,
            open: showCreatePanel,
            onClose: () => setShowCreatePanel(false),
            onSuccess: () => {
              setShowCreatePanel(false);
              onRefresh?.();
            }
          }
        )
      ]
    }
  );
}

// src/hooks/use-layout-persistence.ts
var import_react43 = __toESM(require_react(), 1);
function useLayoutPersistence({
  workspaceId,
  panels,
  autoSaveInterval = 3e4,
  enabled = true
}) {
  const { toast: toast2 } = useToast();
  const autoSaveTimeoutRef = (0, import_react43.useRef)();
  const lastSavedLayoutRef = (0, import_react43.useRef)("");
  const savePresetMutation = trpc.layout.savePreset.useMutation({
    onSuccess: (data2) => {
      toast2({
        title: "Layout Saved",
        description: `Layout preset "${data2.name}" saved successfully`
      });
    },
    onError: (error) => {
      toast2({
        title: "Save Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const loadPresetMutation = trpc.layout.loadPreset.useMutation({
    onSuccess: (data2) => {
      toast2({
        title: "Layout Loaded",
        description: data2.message
      });
      window.location.reload();
    },
    onError: (error) => {
      toast2({
        title: "Load Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const autoSaveMutation = trpc.layout.autoSave.useMutation({
    onError: (error) => {
      console.warn("Auto-save failed:", error.message);
    }
  });
  const { data: presets = [], refetch: refetchPresets } = trpc.layout.listPresets.useQuery(
    { workspaceId },
    { enabled: enabled && !!workspaceId }
  );
  const deletePresetMutation = trpc.layout.deletePreset.useMutation({
    onSuccess: () => {
      toast2({
        title: "Layout Deleted",
        description: "Layout preset deleted successfully"
      });
      refetchPresets();
    },
    onError: (error) => {
      toast2({
        title: "Delete Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const setDefaultMutation = trpc.layout.setDefaultPreset.useMutation({
    onSuccess: () => {
      toast2({
        title: "Default Set",
        description: "Default layout preset updated"
      });
      refetchPresets();
    },
    onError: (error) => {
      toast2({
        title: "Update Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });
  const generateLayoutData = (0, import_react43.useCallback)((currentPanels, layouts) => {
    const gridLayout = layouts || {
      lg: currentPanels.map((panel) => ({
        i: panel.id,
        x: panel.position_x,
        y: panel.position_y,
        w: panel.width,
        h: panel.height,
        minW: 2,
        minH: 2,
        maxW: 24,
        maxH: 24,
        isDraggable: !panel.is_locked,
        isResizable: !panel.is_locked
      }))
    };
    return {
      panels: currentPanels,
      gridLayout
    };
  }, []);
  const savePreset = (0, import_react43.useCallback)((name, description, isDefault = false) => {
    if (!enabled || !workspaceId || panels.length === 0) return;
    const layoutData = generateLayoutData(panels);
    savePresetMutation.mutate({
      workspaceId,
      name,
      description,
      isDefault,
      layoutData
    });
  }, [enabled, workspaceId, panels, generateLayoutData, savePresetMutation]);
  const loadPreset = (0, import_react43.useCallback)((presetId) => {
    if (!enabled || !workspaceId) return;
    loadPresetMutation.mutate({
      presetId,
      workspaceId
    });
  }, [enabled, workspaceId, loadPresetMutation]);
  const deletePreset = (0, import_react43.useCallback)((presetId) => {
    if (!enabled || !workspaceId) return;
    deletePresetMutation.mutate({
      presetId,
      workspaceId
    });
  }, [enabled, workspaceId, deletePresetMutation]);
  const setDefaultPreset = (0, import_react43.useCallback)((presetId) => {
    if (!enabled || !workspaceId) return;
    setDefaultMutation.mutate({
      presetId,
      workspaceId
    });
  }, [enabled, workspaceId, setDefaultMutation]);
  const performAutoSave = (0, import_react43.useCallback)(() => {
    if (!enabled || !workspaceId || panels.length === 0) return;
    const layoutData = generateLayoutData(panels);
    const layoutString = JSON.stringify(layoutData);
    if (layoutString !== lastSavedLayoutRef.current) {
      autoSaveMutation.mutate({
        workspaceId,
        layoutData
      });
      lastSavedLayoutRef.current = layoutString;
    }
  }, [enabled, workspaceId, panels, generateLayoutData, autoSaveMutation]);
  const scheduleAutoSave = (0, import_react43.useCallback)(() => {
    if (!enabled || autoSaveInterval <= 0) return;
    if (autoSaveTimeoutRef.current) {
      clearTimeout(autoSaveTimeoutRef.current);
    }
    autoSaveTimeoutRef.current = setTimeout(() => {
      performAutoSave();
      scheduleAutoSave();
    }, autoSaveInterval);
  }, [enabled, autoSaveInterval, performAutoSave]);
  const onLayoutChange = (0, import_react43.useCallback)((layouts) => {
    if (!enabled) return;
    const layoutData = generateLayoutData(panels, layouts);
    lastSavedLayoutRef.current = JSON.stringify(layoutData);
    scheduleAutoSave();
  }, [enabled, panels, generateLayoutData, scheduleAutoSave]);
  (0, import_react43.useEffect)(() => {
    if (enabled && panels.length > 0) {
      scheduleAutoSave();
    }
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [enabled, panels.length, scheduleAutoSave]);
  (0, import_react43.useEffect)(() => {
    if (enabled && panels.length > 0) {
      const layoutData = generateLayoutData(panels);
      const layoutString = JSON.stringify(layoutData);
      if (lastSavedLayoutRef.current && layoutString !== lastSavedLayoutRef.current) {
        const lastData = JSON.parse(lastSavedLayoutRef.current);
        const currentData = layoutData;
        if (lastData.panels.length !== currentData.panels.length) {
          performAutoSave();
        }
      }
    }
  }, [enabled, panels, generateLayoutData, performAutoSave]);
  return {
    presets,
    savePreset,
    loadPreset,
    deletePreset,
    setDefaultPreset,
    refetchPresets,
    performAutoSave,
    onLayoutChange,
    isSaving: savePresetMutation.isLoading,
    isLoading: loadPresetMutation.isLoading,
    isDeleting: deletePresetMutation.isLoading,
    isSettingDefault: setDefaultMutation.isLoading,
    isAutoSaving: autoSaveMutation.isLoading,
    generateLayoutData
  };
}

// src/components/workspace/PanelWorkspace.tsx
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var ResponsiveGridLayout = (0, import_react_grid_layout.WidthProvider)(import_react_grid_layout.Responsive);
var FixedGridLayout = (0, import_react_grid_layout.WidthProvider)(import_react_grid_layout.default);
function PanelWorkspace({ workspaceId, className }) {
  const [focusedPanelId, setFocusedPanelId] = (0, import_react44.useState)(null);
  const { focusMode, focusedPanelId: globalFocusedPanelId } = useUIStore();
  const { data: allPanels = [], refetch } = trpc.panel.list.useQuery(
    { workspaceId },
    {
      staleTime: 0,
      gcTime: 6e4,
      refetchOnWindowFocus: false,
      refetchOnMount: "always"
    }
  );
  const [hiddenPanelIds, setHiddenPanelIds] = (0, import_react44.useState)(/* @__PURE__ */ new Set());
  const [containerWidth, setContainerWidth] = (0, import_react44.useState)(() => {
    if (typeof window !== "undefined") {
      return window.innerWidth;
    }
    return 1600;
  });
  (0, import_react44.useEffect)(() => {
    const updateWidth = () => {
      const container = document.querySelector(".panel-workspace-container");
      if (container) {
        const width = container.clientWidth || window.innerWidth;
        setContainerWidth(width);
      }
    };
    updateWidth();
    window.addEventListener("resize", updateWidth);
    return () => window.removeEventListener("resize", updateWidth);
  }, []);
  const {
    onLayoutChange: onLayoutPersistenceChange,
    performAutoSave,
    isAutoSaving
  } = useLayoutPersistence({
    workspaceId,
    panels: allPanels,
    autoSaveInterval: 3e4,
    // Auto-save every 30 seconds
    enabled: false
    // Temporarily disable to prevent conflicts with real-time updates
  });
  const fullscreenPanel = allPanels.find((panel) => {
    try {
      const panelData = typeof panel.data === "string" ? JSON.parse(panel.data) : panel.data;
      return panelData?.isFullscreen === true;
    } catch {
      return false;
    }
  });
  const updatePositions = trpc.panel.updatePositions.useMutation({
    onSuccess: () => {
      console.log("\u2705 Panel positions saved successfully");
    },
    onError: (error) => {
      console.error("\u274C Failed to save panel positions:", error);
    }
  });
  const toggleFullscreen = trpc.panel.toggleFullscreen.useMutation({
    onSuccess: () => {
      refetch();
    }
  });
  const toggleMinimize = trpc.panel.toggleMinimize.useMutation({
    onSuccess: () => {
      refetch();
    }
  });
  (0, import_react44.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (!shouldProcessHotkey(e)) {
        return;
      }
      if (e.key === "Escape" && fullscreenPanel) {
        e.preventDefault();
        toggleFullscreen.mutate({ id: fullscreenPanel.id });
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "m" && focusedPanelId) {
        e.preventDefault();
        toggleMinimize.mutate({ id: focusedPanelId });
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "f" && focusedPanelId) {
        e.preventDefault();
        toggleFullscreen.mutate({ id: focusedPanelId });
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [fullscreenPanel, focusedPanelId]);
  const handleFullscreen = (0, import_react44.useCallback)((panelId, isFullscreen) => {
    refetch();
  }, [refetch]);
  const handleFocus = (0, import_react44.useCallback)((panelId) => {
    setFocusedPanelId(panelId);
  }, []);
  const [originalLayout, setOriginalLayout] = (0, import_react44.useState)(null);
  const [isDragging, setIsDragging] = (0, import_react44.useState)(false);
  const [draggedItemId, setDraggedItemId] = (0, import_react44.useState)(null);
  const updatePositionsImmediately = (0, import_react44.useCallback)((updates) => {
    if (updates.length > 0) {
      updatePositions.mutate({
        workspaceId,
        updates
      });
    }
  }, [workspaceId, updatePositions]);
  const handleLayoutChange = (0, import_react44.useCallback)((newLayout) => {
    if (allPanels.length === 0 || !newLayout) return;
    if (isDragging && draggedItemId) {
      const draggedItem = newLayout.find((item) => item.i === draggedItemId);
      if (draggedItem) {
        for (const panel of allPanels) {
          if (panel.id !== draggedItemId && panel.is_locked) {
            const lockedItem = newLayout.find((l) => l.i === panel.id);
            if (lockedItem) {
              const overlaps = !(draggedItem.x + draggedItem.w <= lockedItem.x || draggedItem.x >= lockedItem.x + lockedItem.w || draggedItem.y + draggedItem.h <= lockedItem.y || draggedItem.y >= lockedItem.y + lockedItem.h);
              if (overlaps && originalLayout) {
                console.log("\u26A0\uFE0F Collision with locked panel detected during drag:", panel.id);
                const originalItem = originalLayout.find((item) => item.i === draggedItemId);
                if (originalItem) {
                  draggedItem.x = originalItem.x;
                  draggedItem.y = originalItem.y;
                  draggedItem.w = originalItem.w;
                  draggedItem.h = originalItem.h;
                }
                break;
              }
            }
          }
        }
      }
    }
    console.log("\u{1F504} Layout Change Handler:", {
      panelCount: allPanels.length,
      newLayoutCount: newLayout.length,
      isDragging,
      draggedItemId
    });
    const optimizedLayout = newLayout.map((item) => ({
      ...item,
      w: Math.max(2, Math.min(24, item.w)),
      // Ensure width between 2-24 grid units
      h: Math.max(2, Math.min(50, item.h))
      // Ensure height between 2-50 grid units
    }));
    const updates = optimizedLayout.filter((item) => {
      const panel = allPanels.find((p2) => p2.id === item.i);
      if (panel && panel.is_locked) {
        return false;
      }
      const hasChanges = panel && (panel.position_x !== item.x || panel.position_y !== item.y || panel.width !== item.w || panel.height !== item.h);
      if (hasChanges && panel) {
        console.log("\u{1F504} Panel dimension change detected:", {
          panelId: panel.id,
          oldDimensions: { x: panel.position_x, y: panel.position_y, w: panel.width, h: panel.height },
          newDimensions: { x: item.x, y: item.y, w: item.w, h: item.h }
        });
      }
      return hasChanges;
    }).map((item) => ({
      id: item.i,
      position_x: item.x,
      position_y: item.y,
      width: item.w,
      height: item.h
    }));
    if (updates.length > 0) {
      console.log("\u{1F4BE} Applying layout updates:", updates.length, "panels");
      updatePositionsImmediately(updates);
    }
  }, [allPanels, updatePositionsImmediately, onLayoutPersistenceChange, isDragging, draggedItemId, originalLayout]);
  (0, import_react44.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape" && isDragging && originalLayout) {
        console.log("\u{1F504} Escape pressed - snapping back to original layout");
      }
    };
    if (isDragging) {
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }
  }, [isDragging, originalLayout]);
  const handlePanelDragStart = (0, import_react44.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    setOriginalLayout([...layout2]);
    setIsDragging(true);
    setDraggedItemId(oldItem.i);
    element.style.zIndex = "9998";
    element.style.opacity = "0.95";
    element.style.transition = "transform 0.15s ease-out, box-shadow 0.15s ease-out";
    element.style.transform += " scale(1.02)";
    element.style.boxShadow = "0 8px 20px rgba(20, 49, 151, 0.15), 0 4px 8px rgba(0,0,0,0.1)";
    element.style.border = "2px solid rgba(20, 49, 151, 0.4)";
    console.log("\u{1F3AF} Drag started - stored original layout:", {
      originalCount: layout2.length,
      draggedPanel: oldItem.i
    });
  }, []);
  const handlePanelDrag = (0, import_react44.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    element.style.transform = element.style.transform.replace(/scale\([^)]*\)/, "scale(1.02)");
    handleLayoutChange(layout2);
  }, [handleLayoutChange]);
  const handlePanelDragStop = (0, import_react44.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    setIsDragging(false);
    setDraggedItemId(null);
    element.style.transition = "all 0.3s ease-out";
    element.style.zIndex = "";
    element.style.opacity = "";
    element.style.transform = element.style.transform.replace(/scale\([^)]*\)/, "").trim();
    element.style.boxShadow = "";
    element.style.border = "";
    let shouldRevert = false;
    const draggedPanel = allPanels.find((p2) => p2.id === newItem.i);
    if (draggedPanel) {
      for (const panel of allPanels) {
        if (panel.id !== draggedPanel.id && panel.is_locked) {
          const lockedItem = layout2.find((l) => l.i === panel.id);
          if (lockedItem) {
            const overlaps = !(newItem.x + newItem.w <= lockedItem.x || newItem.x >= lockedItem.x + lockedItem.w || newItem.y + newItem.h <= lockedItem.y || newItem.y >= lockedItem.y + lockedItem.h);
            if (overlaps) {
              console.log("\u26A0\uFE0F Final position overlaps with locked panel:", panel.id);
              shouldRevert = true;
              break;
            }
          }
        }
      }
    }
    if (shouldRevert && originalLayout) {
      console.log("\u{1F504} Reverting to original layout due to locked panel collision");
      const revertUpdates = originalLayout.filter((item) => {
        const panel = allPanels.find((p2) => p2.id === item.i);
        return panel && !panel.is_locked;
      }).map((item) => ({
        id: item.i,
        position_x: item.x,
        position_y: item.y,
        width: item.w,
        height: item.h
      }));
      updatePositionsImmediately(revertUpdates);
    } else {
      const updates = layout2.filter((item) => {
        const panel = allPanels.find((p2) => p2.id === item.i);
        return panel && !panel.is_locked;
      }).map((item) => ({
        id: item.i,
        position_x: item.x,
        position_y: item.y,
        width: item.w,
        height: item.h
      }));
      console.log("\u{1F4BE} Saving final positions immediately (excluding locked panels):", updates);
      updatePositionsImmediately(updates);
    }
    setTimeout(() => {
      element.style.transition = "";
      setOriginalLayout(null);
    }, 300);
  }, [updatePositionsImmediately, allPanels, originalLayout]);
  const handlePanelResizeStart = (0, import_react44.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    element.style.zIndex = "9997";
    element.style.opacity = "0.98";
    element.style.transition = "border 0.15s ease-out";
    element.style.border = "2px solid rgba(31, 187, 101, 0.5)";
  }, []);
  const handlePanelResize = (0, import_react44.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
  }, []);
  const handlePanelResizeStop = (0, import_react44.useCallback)((layout2, oldItem, newItem, placeholder, e, element) => {
    element.style.transition = "all 0.2s ease-out";
    element.style.zIndex = "";
    element.style.opacity = "";
    element.style.border = "";
    setTimeout(() => {
      element.style.transition = "";
    }, 200);
    handleLayoutChange(layout2);
  }, [handleLayoutChange]);
  const layout = (0, import_react44.useMemo)(() => {
    const gridLayout = allPanels.map((panel) => {
      const isHidden = hiddenPanelIds.has(panel.id) || focusMode && globalFocusedPanelId && panel.id !== globalFocusedPanelId;
      return {
        i: panel.id,
        x: panel.position_x,
        y: panel.position_y,
        w: panel.width,
        h: panel.is_minimized ? 2 : panel.height,
        // Minimized panels get height of 2 grid units
        minW: 2,
        minH: panel.is_minimized ? 2 : 2,
        maxW: 24,
        maxH: panel.is_minimized ? 2 : 50,
        // Prevent resizing minimized panels vertically
        isDraggable: !panel.is_locked && !isHidden,
        isResizable: !panel.is_locked && !isHidden && !panel.is_minimized,
        // Disable resize for minimized panels
        static: panel.is_locked || panel.is_minimized
        // Locked panels are static - nothing can move them
      };
    });
    console.log("\u{1F4CA} Panel to Grid Layout Conversion:", {
      panelCount: allPanels.length,
      focusMode,
      focusedPanelId: globalFocusedPanelId,
      gridLayout: gridLayout.map((l) => ({ id: l.i, w: l.w, h: l.h, x: l.x, y: l.y }))
    });
    gridLayout.forEach((item) => {
      if ((item.w || 0) < (item.minW || 2) || (item.h || 0) < (item.minH || 2)) {
        console.warn("\u26A0\uFE0F Panel size below minimum:", item);
      }
    });
    return gridLayout;
  }, [allPanels, hiddenPanelIds, focusMode, globalFocusedPanelId]);
  const cols = 24;
  if (allPanels.length === 0) {
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: cn("flex items-center justify-center h-full p-8", className), children: /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: "No panels yet" }),
      /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "text-gray-600", children: "Add panels using the toolbar above to get started." })
    ] }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: cn("panel-workspace panel-workspace-container h-full flex-1", className), style: { overflowX: "visible", overflowY: "auto", scrollBehavior: "auto" }, children: [
    /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("style", { children: `
        .react-grid-layout {
          position: relative;
          min-height: 100%;
          overflow: visible;
        }
        
        .react-grid-item {
          transition: all 200ms cubic-bezier(0.23, 1, 0.32, 1);
          transition-property: left, top, width, height, transform, box-shadow, border;
          background: white;
          border: 1px solid #e5e7eb;
          border-radius: 12px;
          box-shadow: 0 2px 8px 0 rgb(0 0 0 / 0.04), 0 1px 4px -1px rgb(0 0 0 / 0.03);
          will-change: transform, box-shadow;
          cursor: grab;
        }
        
        .react-grid-item:hover {
          box-shadow: 0 4px 16px 0 rgb(0 0 0 / 0.08), 0 2px 8px -2px rgb(0 0 0 / 0.05);
          transform: translateY(-0.5px);
          border-color: rgba(59, 130, 246, 0.3);
          cursor: grab;
        }
        
        .react-grid-item:active {
          cursor: grabbing;
        }
        
        .react-grid-item.react-grid-placeholder {
          background: rgba(34, 197, 94, 0.1);
          border: 2px dashed rgba(34, 197, 94, 0.4);
          border-radius: 12px;
          transition: all 150ms cubic-bezier(0.23, 1, 0.32, 1);
          z-index: 2;
          user-select: none;
          backdrop-filter: blur(2px);
        }
        
        .react-grid-item.react-draggable-dragging {
          transition: none;
          z-index: 9998;
          opacity: 0.95;
          transform: scale(1.02);
          box-shadow: 0 8px 20px rgba(20, 49, 151, 0.15), 0 4px 8px rgba(0, 0, 0, 0.1);
          border: 2px solid rgba(20, 49, 151, 0.4);
          cursor: grabbing;
        }
        
        .react-grid-item.resizing {
          z-index: 9997;
          opacity: 0.95;
          border: 2px solid rgba(31, 187, 101, 0.4);
          box-shadow: 0 8px 24px rgba(31, 187, 101, 0.2), 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .react-grid-item.snapping {
          border: 2px solid rgba(20, 49, 151, 0.6);
          box-shadow: 0 0 0 4px rgba(20, 49, 151, 0.1);
        }

        .react-grid-item.focusing {
          animation: focusPulse 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        @keyframes focusPulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.02); }
          100% { transform: scale(1); }
        }

        .react-grid-layout {
          transition: height 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        .react-resizable-handle {
          position: absolute;
          background-color: transparent !important;
          background-image: none !important;
          background: none !important;
        }

        .react-resizable-handle::before,
        .react-resizable-handle::after {
          display: none !important;
          content: none !important;
          background: none !important;
        }

        .react-resizable-handle > * {
          display: none !important;
        }

        .react-resizable-handle-se {
          bottom: 0;
          right: 0;
          width: 20px;
          height: 20px;
          cursor: se-resize;
        }

        .react-resizable-handle-ne {
          top: 0;
          right: 0;
          width: 20px;
          height: 20px;
          cursor: ne-resize;
        }

        .react-resizable-handle-sw {
          bottom: 0;
          left: 0;
          width: 20px;
          height: 20px;
          cursor: sw-resize;
        }

        .react-resizable-handle-nw {
          top: 0;
          left: 0;
          width: 20px;
          height: 20px;
          cursor: nw-resize;
        }

        .react-resizable-handle-e {
          top: 0;
          right: -6px;
          bottom: 0;
          width: 12px;
          cursor: e-resize;
        }

        .react-resizable-handle-w {
          top: 0;
          left: -6px;
          bottom: 0;
          width: 12px;
          cursor: w-resize;
        }

        .react-resizable-handle-n {
          top: -6px;
          left: 0;
          right: 0;
          height: 12px;
          cursor: n-resize;
        }

        .react-resizable-handle-s {
          bottom: -6px;
          left: 0;
          right: 0;
          height: 12px;
          cursor: s-resize;
        }
      ` }),
    /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
      FixedGridLayout,
      {
        className: "layout",
        layout,
        cols,
        onLayoutChange: handleLayoutChange,
        isDraggable: true,
        isResizable: true,
        resizeHandles: ["se", "e", "s", "w", "n", "nw", "ne", "sw"],
        margin: [12, 12],
        containerPadding: [16, 16],
        rowHeight: 25,
        draggableHandle: ".panel-drag-handle",
        useCSSTransforms: true,
        preventCollision: true,
        compactType: null,
        autoSize: true,
        draggableCancel: "input,textarea,button,select,option,.panel-content",
        transformScale: 1,
        width: Math.max(containerWidth, 5e3),
        onDrag: handlePanelDrag,
        onDragStart: handlePanelDragStart,
        onDragStop: handlePanelDragStop,
        onResize: handlePanelResize,
        onResizeStart: handlePanelResizeStart,
        onResizeStop: handlePanelResizeStop,
        children: allPanels.map((panel) => {
          const shouldHide = hiddenPanelIds.has(panel.id) || focusMode && globalFocusedPanelId && panel.id !== globalFocusedPanelId;
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
            "div",
            {
              className: "panel-container",
              "data-panel-type": panel.type,
              style: {
                visibility: shouldHide ? "hidden" : "visible",
                pointerEvents: shouldHide ? "none" : "auto"
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
                PanelRenderer,
                {
                  panel: { ...panel, data: panel.data || {} },
                  workspaceId,
                  onRefresh: refetch,
                  onFullscreen: handleFullscreen,
                  onFocus: handleFocus
                }
              )
            },
            panel.id
          );
        })
      }
    )
  ] });
}

// src/components/workspace/WorkspaceHeaderConsolidated.tsx
var import_react47 = __toESM(require_react(), 1);

// src/components/workspace/CommandPalette.tsx
var import_react45 = __toESM(require_react(), 1);

// src/components/ui/command.tsx
var React61 = __toESM(require_react(), 1);
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var Command2 = React61.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
  _e,
  {
    ref,
    className: cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-white dark:bg-gray-900 text-sidebar-foreground",
      className
    ),
    ...props
  }
));
Command2.displayName = _e.displayName;
var CommandDialog = ({ children, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Dialog, { ...props, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(DialogContent, { className: "overflow-hidden p-0", children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Command2, { className: "[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5", children }) }) });
};
var CommandInput = React61.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)("div", { className: "flex items-center border-b border-sidebar-border px-3", "cmdk-input-wrapper": "", children: [
  /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Search, { className: "mr-2 h-4 w-4 shrink-0 text-krushr-secondary" }),
  /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
    _e.Input,
    {
      ref,
      className: cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm font-light font-manrope outline-none placeholder:text-sidebar-foreground/60 disabled:cursor-not-allowed disabled:opacity-50",
        className
      ),
      ...props
    }
  )
] }));
CommandInput.displayName = _e.Input.displayName;
var CommandList = React61.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
  _e.List,
  {
    ref,
    className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className),
    ...props
  }
));
CommandList.displayName = _e.List.displayName;
var CommandEmpty = React61.forwardRef((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
  _e.Empty,
  {
    ref,
    className: "py-6 text-center text-sm",
    ...props
  }
));
CommandEmpty.displayName = _e.Empty.displayName;
var CommandGroup = React61.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
  _e.Group,
  {
    ref,
    className: cn(
      "overflow-hidden p-1 text-sidebar-foreground font-manrope [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-semibold [&_[cmdk-group-heading]]:text-sidebar-foreground/70 [&_[cmdk-group-heading]]:uppercase [&_[cmdk-group-heading]]:tracking-wide",
      className
    ),
    ...props
  }
));
CommandGroup.displayName = _e.Group.displayName;
var CommandSeparator = React61.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
  _e.Separator,
  {
    ref,
    className: cn("-mx-1 h-px bg-border", className),
    ...props
  }
));
CommandSeparator.displayName = _e.Separator.displayName;
var CommandItem = React61.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
  _e.Item,
  {
    ref,
    className: cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-lg px-2 py-1.5 text-sm font-light font-manrope outline-none transition-colors data-[disabled=true]:pointer-events-none data-[selected=true]:bg-sidebar-accent data-[selected=true]:text-sidebar-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    ),
    ...props
  }
));
CommandItem.displayName = _e.Item.displayName;
var CommandShortcut = ({
  className,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
    "span",
    {
      className: cn(
        "ml-auto text-xs tracking-widest text-sidebar-foreground/60 font-manrope",
        className
      ),
      ...props
    }
  );
};
CommandShortcut.displayName = "CommandShortcut";

// src/components/workspace/CommandPalette.tsx
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
function CommandPalette({
  isOpen,
  onOpenChange,
  workspaceId,
  onNavigate,
  onCreatePanel,
  onAction
}) {
  const [searchQuery, setSearchQuery] = (0, import_react45.useState)("");
  const { user } = useAuthStore();
  const { data: recentItems = [] } = trpc.activity.getRecent.useQuery(
    { workspaceId, limit: 10 },
    { enabled: !!workspaceId }
  );
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const commands = [
    // Quick Actions
    {
      id: "quick-task",
      title: "Create Task",
      subtitle: "Add new task to Kanban",
      icon: Plus,
      shortcut: "\u2318N",
      action: () => onCreatePanel?.("TASK"),
      group: "Quick Actions",
      keywords: ["task", "todo", "create", "add", "kanban"],
      priority: 10
    },
    {
      id: "quick-note",
      title: "Create Note",
      subtitle: "Start writing immediately",
      icon: FileText,
      shortcut: "\u2318\u21E7N",
      action: () => onCreatePanel?.("NOTE"),
      group: "Quick Actions",
      keywords: ["note", "write", "document", "create"],
      priority: 9
    },
    {
      id: "quick-event",
      title: "Schedule Event",
      subtitle: "Add to calendar",
      icon: Calendar,
      shortcut: "\u2318\u21E7C",
      action: () => onCreatePanel?.("CALENDAR"),
      group: "Quick Actions",
      keywords: ["event", "meeting", "schedule", "calendar"],
      priority: 8
    },
    {
      id: "quick-chat",
      title: "Start Chat",
      subtitle: "Message team members",
      icon: MessageSquare,
      shortcut: "\u2318/",
      action: () => onCreatePanel?.("CHAT"),
      group: "Quick Actions",
      keywords: ["chat", "message", "communicate", "talk"],
      priority: 7
    },
    // AI Assistant
    {
      id: "ai-analyze",
      title: "AI Task Analysis",
      subtitle: "Get insights on your tasks",
      icon: TrendingUp,
      action: () => onAction?.("ai-analyze"),
      group: "AI Assistant",
      keywords: ["ai", "analyze", "insights", "smart", "assistant"],
      priority: 6
    },
    {
      id: "ai-schedule",
      title: "Smart Scheduling",
      subtitle: "AI-powered time blocking",
      icon: Zap,
      action: () => onAction?.("ai-schedule"),
      group: "AI Assistant",
      keywords: ["ai", "schedule", "smart", "time", "block"],
      priority: 5
    },
    {
      id: "ai-suggest",
      title: "Task Suggestions",
      subtitle: "Get AI recommendations",
      icon: Star,
      action: () => onAction?.("ai-suggest"),
      group: "AI Assistant",
      keywords: ["ai", "suggest", "recommend", "smart"],
      priority: 4
    },
    // Navigation
    {
      id: "nav-dashboard",
      title: "Go to Dashboard",
      subtitle: "Overview of all projects",
      icon: LayoutGrid,
      shortcut: "\u23181",
      action: () => onNavigate?.("/dashboard"),
      group: "Navigation",
      keywords: ["dashboard", "home", "overview"],
      priority: 3
    },
    {
      id: "nav-projects",
      title: "View Projects",
      subtitle: "All workspace projects",
      icon: Folder,
      shortcut: "\u23182",
      action: () => onNavigate?.("/projects"),
      group: "Navigation",
      keywords: ["projects", "folders", "workspace"],
      priority: 2
    },
    {
      id: "nav-team",
      title: "Team Members",
      subtitle: "View and manage team",
      icon: Users,
      shortcut: "\u23183",
      action: () => onNavigate?.("/team"),
      group: "Navigation",
      keywords: ["team", "members", "users", "people"],
      priority: 1
    },
    // Panel Management
    {
      id: "panel-layout-save",
      title: "Save Layout",
      subtitle: "Save current panel arrangement",
      icon: Bookmark,
      shortcut: "\u2318S",
      action: () => onAction?.("save-layout"),
      group: "Panel Management",
      keywords: ["save", "layout", "panels", "arrangement"]
    },
    {
      id: "panel-layout-load",
      title: "Load Layout",
      subtitle: "Switch to saved layout",
      icon: PanelsTopLeft,
      shortcut: "\u2318L",
      action: () => onAction?.("load-layout"),
      group: "Panel Management",
      keywords: ["load", "layout", "switch", "panels"]
    },
    {
      id: "panel-focus",
      title: "Focus Mode",
      subtitle: "Hide all but current panel",
      icon: Maximize,
      shortcut: "\u2318\u21E7F",
      action: () => onAction?.("focus-mode"),
      group: "Panel Management",
      keywords: ["focus", "hide", "minimize", "distraction-free"]
    },
    {
      id: "panel-minimize-all",
      title: "Minimize All",
      subtitle: "Collapse all panels",
      icon: Minimize,
      shortcut: "\u2318\u21E7M",
      action: () => onAction?.("minimize-all"),
      group: "Panel Management",
      keywords: ["minimize", "collapse", "hide", "panels"]
    },
    // View Options
    {
      id: "view-grid",
      title: "Grid View",
      subtitle: "Arrange panels in grid",
      icon: Grid3x3,
      action: () => onAction?.("view-grid"),
      group: "View Options",
      keywords: ["grid", "view", "arrange", "layout"]
    },
    {
      id: "view-list",
      title: "List View",
      subtitle: "Vertical panel layout",
      icon: List,
      action: () => onAction?.("view-list"),
      group: "View Options",
      keywords: ["list", "view", "vertical", "layout"]
    },
    // Settings & Account
    {
      id: "settings-workspace",
      title: "Workspace Settings",
      subtitle: "Configure workspace",
      icon: Settings,
      action: () => onNavigate?.("/settings"),
      group: "Settings",
      keywords: ["settings", "configure", "workspace", "options"]
    },
    {
      id: "settings-profile",
      title: "Profile Settings",
      subtitle: "Update your profile",
      icon: User,
      action: () => onNavigate?.("/profile"),
      group: "Settings",
      keywords: ["profile", "account", "user", "settings"]
    },
    {
      id: "logout",
      title: "Sign Out",
      subtitle: "Log out of workspace",
      icon: LogOut,
      action: () => onAction?.("logout"),
      group: "Settings",
      keywords: ["logout", "sign out", "exit", "leave"]
    }
  ];
  const workspaceCommands = workspaces2.map((workspace) => ({
    id: `workspace-${workspace.id}`,
    title: `Switch to ${workspace.name}`,
    subtitle: `${workspace.memberCount || 0} members`,
    icon: Folder,
    action: () => onNavigate?.(`/workspace/${workspace.id}`),
    group: "Workspaces",
    keywords: ["workspace", "switch", workspace.name.toLowerCase()],
    priority: workspace.id === workspaceId ? 10 : 1
  }));
  const recentCommands = recentItems.map((item) => ({
    id: `recent-${item.id}`,
    title: item.title || item.name,
    subtitle: `${item.type} \u2022 ${item.updatedAt}`,
    icon: item.type === "TASK" ? Plus : item.type === "NOTE" ? FileText : Calendar,
    action: () => onNavigate?.(`/${item.type.toLowerCase()}/${item.id}`),
    group: "Recent",
    keywords: ["recent", item.title?.toLowerCase(), item.type.toLowerCase()],
    priority: 5
  }));
  const allCommands = [...commands, ...workspaceCommands, ...recentCommands];
  const filteredCommands = allCommands.filter((command) => {
    if (!searchQuery) return true;
    const query = searchQuery.toLowerCase();
    const titleMatch = command.title.toLowerCase().includes(query);
    const subtitleMatch = command.subtitle?.toLowerCase().includes(query);
    const keywordMatch = command.keywords?.some((keyword) => keyword.includes(query));
    return titleMatch || subtitleMatch || keywordMatch;
  });
  const groupedCommands = filteredCommands.reduce((acc, command) => {
    if (!acc[command.group]) acc[command.group] = [];
    acc[command.group].push(command);
    return acc;
  }, {});
  const sortedGroups = Object.entries(groupedCommands).sort(([a], [b]) => {
    const priority = { "Quick Actions": 1, "AI Assistant": 2, "Recent": 3, "Navigation": 4, "Workspaces": 5, "Panel Management": 6, "View Options": 7, "Settings": 8 };
    return (priority[a] || 9) - (priority[b] || 9);
  });
  (0, import_react45.useEffect)(() => {
    const handleKeyDown = (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        if (!shouldProcessHotkey(e)) {
          return;
        }
        e.preventDefault();
        onOpenChange(true);
      }
      if (e.key === "Escape") {
        onOpenChange(false);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [onOpenChange]);
  return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(CommandDialog, { open: isOpen, onOpenChange, children: [
    /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
      CommandInput,
      {
        placeholder: "Search commands, create items, or ask AI...",
        value: searchQuery,
        onValueChange: setSearchQuery
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(CommandList, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(CommandEmpty, { children: /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "text-center py-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Command, { className: "w-8 h-8 mx-auto mb-2 text-krushr-secondary" }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { className: "text-sidebar-foreground font-manrope", children: "No commands found." }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { className: "text-sm text-sidebar-foreground/60 mt-1 font-manrope", children: "Try searching for actions, panels, or navigation" })
      ] }) }),
      sortedGroups.map(([group, commands2]) => /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(CommandGroup, { heading: group, children: commands2.sort((a, b) => (b.priority || 0) - (a.priority || 0)).map((command) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(
        CommandItem,
        {
          onSelect: () => {
            command.action();
            onOpenChange(false);
          },
          className: "flex items-center gap-3 px-3 py-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(command.icon, { className: "w-4 h-4 text-krushr-secondary" }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "text-sm font-light font-manrope text-sidebar-foreground", children: command.title }),
              command.subtitle && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "text-xs text-sidebar-foreground/60 truncate font-manrope", children: command.subtitle })
            ] }),
            command.shortcut && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(CommandShortcut, { className: "text-xs", children: command.shortcut }),
            group === "AI Assistant" && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Badge, { variant: "secondary", className: "text-xs px-1.5 py-0.5 font-manrope", children: "AI" })
          ]
        },
        command.id
      )) }, group))
    ] })
  ] });
}

// src/components/workspace/KeyboardShortcuts.tsx
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
function KeyboardShortcuts({ isOpen, onOpenChange }) {
  const shortcutGroups = [
    {
      title: "Essential Commands",
      shortcuts: [
        { key: "\u2318K", description: "Open command palette", icon: Command },
        { key: "\u2318N", description: "Quick add task", icon: Plus },
        { key: "\u2318/", description: "Focus search", icon: Search },
        { key: "\u2318\u21E7F", description: "Focus mode", icon: Maximize },
        { key: "\u2318\u21E7A", description: "AI assistant", icon: Zap },
        { key: "\u2318?", description: "Show shortcuts", icon: Keyboard }
      ]
    },
    {
      title: "Panel Creation",
      shortcuts: [
        { key: "\u2318\u21E7N", description: "Create note", icon: FileText },
        { key: "\u2318\u21E7C", description: "Create calendar event", icon: Calendar },
        { key: "\u2318\u21E7M", description: "Start chat", icon: MessageSquare },
        { key: "\u2318\u21E7K", description: "Create kanban board", icon: LayoutGrid }
      ]
    },
    {
      title: "Layout Management",
      shortcuts: [
        { key: "\u2318S", description: "Save layout", icon: Bookmark },
        { key: "\u2318L", description: "Load layout", icon: LayoutGrid },
        { key: "\u2318\u21E7M", description: "Minimize all panels", icon: Minimize },
        { key: "\u2318\u21E7R", description: "Refresh workspace", icon: RefreshCw }
      ]
    },
    {
      title: "Navigation",
      shortcuts: [
        { key: "\u23181", description: "Go to dashboard", icon: LayoutGrid },
        { key: "\u23182", description: "View projects", icon: Folder },
        { key: "\u23183", description: "Team members", icon: User },
        { key: "\u23184", description: "Settings", icon: Settings }
      ]
    },
    {
      title: "Content Actions",
      shortcuts: [
        { key: "\u2318D", description: "Duplicate item", icon: Copy },
        { key: "\u2318\u21E7S", description: "Share item", icon: Share },
        { key: "\u2318\u21E7D", description: "Download/Export", icon: Download },
        { key: "\u2318\u21E7U", description: "Upload file", icon: Upload }
      ]
    },
    {
      title: "Organization",
      shortcuts: [
        { key: "\u2318F", description: "Filter items", icon: Funnel },
        { key: "\u2318\u21E7O", description: "Sort items", icon: ArrowUpNarrowWide },
        { key: "\u2318G", description: "Grid view", icon: Grid3x3 },
        { key: "\u2318\u21E7L", description: "List view", icon: List }
      ]
    },
    {
      title: "Quick Actions",
      shortcuts: [
        { key: "\u2318\u21E7\u2B50", description: "Star/Favorite", icon: Star },
        { key: "\u2318\u21E7A", description: "Archive item", icon: Archive },
        { key: "\u2318\u21E7\u232B", description: "Delete item", icon: Trash },
        { key: "\u2318\u21E7Q", description: "Sign out", icon: LogOut }
      ]
    },
    {
      title: "AI & Analytics",
      shortcuts: [
        { key: "\u2318\u21E7I", description: "AI insights", icon: TrendingUp },
        { key: "\u2318\u21E7T", description: "Task suggestions", icon: Zap },
        { key: "\u2318\u21E7P", description: "Performance analytics", icon: TrendingUp }
      ]
    }
  ];
  return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Dialog, { open: isOpen, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(DialogContent, { className: "max-w-4xl max-h-[80vh] overflow-y-auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(DialogHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(DialogTitle, { className: "flex items-center space-x-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Keyboard, { className: "w-5 h-5" }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Keyboard Shortcuts" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-8", children: shortcutGroups.map((group, groupIndex) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { className: "text-sm font-semibold text-gray-900 uppercase tracking-wide", children: group.title }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "space-y-2", children: group.shortcuts.map((shortcut, shortcutIndex) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(
          "div",
          {
            className: "flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 group",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "flex items-center space-x-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(shortcut.icon, { className: "w-4 h-4 text-gray-500 group-hover:text-gray-700" }),
                /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: "text-sm text-gray-700 group-hover:text-gray-900", children: shortcut.description })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Badge, { variant: "outline", className: "text-xs font-mono", children: shortcut.key })
            ]
          },
          shortcutIndex
        )) })
      ] }, groupIndex)) }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { className: "text-sm font-semibold text-blue-900 mb-2", children: "Pro Tips" }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("ul", { className: "text-sm text-blue-800 space-y-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", { children: "\u2022 Use \u2318K to access the command palette for any action" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", { children: "\u2022 Hold \u2318 and click to open items in new panels" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", { children: "\u2022 Use \u2318\u21E7F to enter focus mode and eliminate distractions" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", { children: "\u2022 Create custom shortcuts in Settings \u2192 Keyboard" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", { children: "\u2022 Most shortcuts work across all panels and contexts" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "mt-4 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { className: "text-xs text-gray-500", children: [
        "Press ",
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Badge, { variant: "outline", className: "text-xs", children: "ESC" }),
        " to close this dialog"
      ] }) })
    ] })
  ] }) });
}

// src/components/workspace/LayoutManager.tsx
var import_react46 = __toESM(require_react(), 1);

// src/components/ui/alert-dialog.tsx
var React64 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-alert-dialog/dist/index.mjs
var React63 = __toESM(require_react(), 1);
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var ROOT_NAME = "AlertDialog";
var [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [
  createDialogScope
]);
var useDialogScope = createDialogScope();
var AlertDialog = (props) => {
  const { __scopeAlertDialog, ...alertDialogProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Root2, { ...dialogScope, ...alertDialogProps, modal: true });
};
AlertDialog.displayName = ROOT_NAME;
var TRIGGER_NAME4 = "AlertDialogTrigger";
var AlertDialogTrigger = React63.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...triggerProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Trigger, { ...dialogScope, ...triggerProps, ref: forwardedRef });
  }
);
AlertDialogTrigger.displayName = TRIGGER_NAME4;
var PORTAL_NAME2 = "AlertDialogPortal";
var AlertDialogPortal = (props) => {
  const { __scopeAlertDialog, ...portalProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Portal2, { ...dialogScope, ...portalProps });
};
AlertDialogPortal.displayName = PORTAL_NAME2;
var OVERLAY_NAME = "AlertDialogOverlay";
var AlertDialogOverlay = React63.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...overlayProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Overlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
  }
);
AlertDialogOverlay.displayName = OVERLAY_NAME;
var CONTENT_NAME3 = "AlertDialogContent";
var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME3);
var Slottable = createSlottable("AlertDialogContent");
var AlertDialogContent = React63.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, children, ...contentProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const contentRef = React63.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const cancelRef = React63.useRef(null);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
      WarningProvider,
      {
        contentName: CONTENT_NAME3,
        titleName: TITLE_NAME,
        docsSlug: "alert-dialog",
        children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
          Content,
          {
            role: "alertdialog",
            ...dialogScope,
            ...contentProps,
            ref: composedRefs,
            onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {
              event.preventDefault();
              cancelRef.current?.focus({ preventScroll: true });
            }),
            onPointerDownOutside: (event) => event.preventDefault(),
            onInteractOutside: (event) => event.preventDefault(),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Slottable, { children }),
              /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(DescriptionWarning, { contentRef })
            ]
          }
        ) })
      }
    );
  }
);
AlertDialogContent.displayName = CONTENT_NAME3;
var TITLE_NAME = "AlertDialogTitle";
var AlertDialogTitle = React63.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...titleProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Title, { ...dialogScope, ...titleProps, ref: forwardedRef });
  }
);
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "AlertDialogDescription";
var AlertDialogDescription = React63.forwardRef((props, forwardedRef) => {
  const { __scopeAlertDialog, ...descriptionProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Description, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
var ACTION_NAME = "AlertDialogAction";
var AlertDialogAction = React63.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...actionProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Close, { ...dialogScope, ...actionProps, ref: forwardedRef });
  }
);
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel";
var AlertDialogCancel = React63.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...cancelProps } = props;
    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const ref = useComposedRefs(forwardedRef, cancelRef);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Close, { ...dialogScope, ...cancelProps, ref });
  }
);
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning = ({ contentRef }) => {
  const MESSAGE = `\`${CONTENT_NAME3}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${CONTENT_NAME3}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME3}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
  React63.useEffect(() => {
    const hasDescription = document.getElementById(
      contentRef.current?.getAttribute("aria-describedby")
    );
    if (!hasDescription) console.warn(MESSAGE);
  }, [MESSAGE, contentRef]);
  return null;
};
var Root25 = AlertDialog;
var Trigger22 = AlertDialogTrigger;
var Portal22 = AlertDialogPortal;
var Overlay2 = AlertDialogOverlay;
var Content23 = AlertDialogContent;
var Action2 = AlertDialogAction;
var Cancel = AlertDialogCancel;
var Title2 = AlertDialogTitle;
var Description2 = AlertDialogDescription;

// src/components/ui/alert-dialog.tsx
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var AlertDialog2 = Root25;
var AlertDialogTrigger2 = Trigger22;
var AlertDialogPortal2 = Portal22;
var AlertDialogOverlay2 = React64.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  Overlay2,
  {
    className: cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props,
    ref
  }
));
AlertDialogOverlay2.displayName = Overlay2.displayName;
var AlertDialogContent2 = React64.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(AlertDialogPortal2, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(AlertDialogOverlay2, {}),
  /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
    Content23,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      ),
      ...props
    }
  )
] }));
AlertDialogContent2.displayName = Content23.displayName;
var AlertDialogHeader = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ),
    ...props
  }
);
AlertDialogHeader.displayName = "AlertDialogHeader";
var AlertDialogFooter = ({
  className,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
AlertDialogFooter.displayName = "AlertDialogFooter";
var AlertDialogTitle2 = React64.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  Title2,
  {
    ref,
    className: cn("text-lg font-semibold", className),
    ...props
  }
));
AlertDialogTitle2.displayName = Title2.displayName;
var AlertDialogDescription2 = React64.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  Description2,
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
AlertDialogDescription2.displayName = Description2.displayName;
var AlertDialogAction2 = React64.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  Action2,
  {
    ref,
    className: cn(buttonVariants(), className),
    ...props
  }
));
AlertDialogAction2.displayName = Action2.displayName;
var AlertDialogCancel2 = React64.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
  Cancel,
  {
    ref,
    className: cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    ),
    ...props
  }
));
AlertDialogCancel2.displayName = Cancel.displayName;

// src/components/workspace/LayoutManager.tsx
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
function LayoutManager({ workspaceId, panels, className }) {
  const [saveDialogOpen, setSaveDialogOpen] = (0, import_react46.useState)(false);
  const [loadDialogOpen, setLoadDialogOpen] = (0, import_react46.useState)(false);
  const [saveForm, setSaveForm] = (0, import_react46.useState)({
    name: "",
    description: "",
    isDefault: false
  });
  const {
    presets,
    savePreset,
    loadPreset,
    deletePreset,
    setDefaultPreset,
    performAutoSave,
    isSaving,
    isLoading,
    isDeleting,
    isSettingDefault,
    isAutoSaving,
    refetchPresets
  } = useLayoutPersistence({
    workspaceId,
    panels,
    enabled: true
  });
  const handleSavePreset = () => {
    if (!saveForm.name.trim()) return;
    savePreset(saveForm.name.trim(), saveForm.description.trim() || void 0, saveForm.isDefault);
    setSaveForm({ name: "", description: "", isDefault: false });
    setSaveDialogOpen(false);
  };
  const handleLoadPreset = (presetId) => {
    loadPreset(presetId);
    setLoadDialogOpen(false);
  };
  const handleDeletePreset = (presetId) => {
    deletePreset(presetId);
  };
  const handleSetDefault = (presetId) => {
    setDefaultPreset(presetId);
  };
  const handleManualSave = () => {
    performAutoSave();
  };
  const formatDate3 = (date) => {
    return new Date(date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
  };
  const hasUnsavedChanges = panels.length > 0;
  return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: cn("flex items-center gap-2", className), children: [
    isAutoSaving && /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center gap-1 text-xs text-gray-500", children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(LoaderCircle, { className: "w-3 h-3 animate-spin" }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", { children: "Saving..." })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(Dialog, { open: saveDialogOpen, onOpenChange: setSaveDialogOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
        Button,
        {
          variant: "outline",
          size: "sm",
          disabled: panels.length === 0,
          className: "flex items-center gap-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Download, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", { className: "hidden sm:inline", children: "Save Layout" })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(DialogContent, { className: "sm:max-w-md", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(DialogHeader, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogTitle, { children: "Save Layout Preset" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogDescription, { children: "Save your current panel arrangement as a reusable layout preset." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Label2, { htmlFor: "preset-name", children: "Preset Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
              FloatingInput,
              {
                id: "preset-name",
                label: "Preset Name",
                value: saveForm.name,
                onChange: (e) => setSaveForm((prev) => ({ ...prev, name: e.target.value })),
                className: "mt-1"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Label2, { htmlFor: "preset-description", children: "Description (Optional)" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
              Textarea,
              {
                id: "preset-description",
                value: saveForm.description,
                onChange: (e) => setSaveForm((prev) => ({ ...prev, description: e.target.value })),
                placeholder: "Describe this layout arrangement...",
                className: "mt-1",
                rows: 3
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
              "input",
              {
                type: "checkbox",
                id: "is-default",
                checked: saveForm.isDefault,
                onChange: (e) => setSaveForm((prev) => ({ ...prev, isDefault: e.target.checked })),
                className: "rounded border-gray-300"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Label2, { htmlFor: "is-default", className: "text-sm", children: "Set as default layout for this workspace" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(DialogFooter, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
            Button,
            {
              variant: "outline",
              onClick: () => setSaveDialogOpen(false),
              children: "Cancel"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
            Button,
            {
              onClick: handleSavePreset,
              disabled: !saveForm.name.trim() || isSaving,
              children: [
                isSaving ? /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(LoaderCircle, { className: "w-4 h-4 mr-2 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Save, { className: "w-4 h-4 mr-2" }),
                "Save Preset"
              ]
            }
          )
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(Dialog, { open: loadDialogOpen, onOpenChange: setLoadDialogOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
        Button,
        {
          variant: "outline",
          size: "sm",
          disabled: presets.length === 0,
          className: "flex items-center gap-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Upload, { className: "w-4 h-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", { className: "hidden sm:inline", children: "Load Layout" })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(DialogContent, { className: "sm:max-w-lg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(DialogHeader, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogTitle, { children: "Load Layout Preset" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogDescription, { children: "Choose a saved layout to restore your panel arrangement." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "space-y-3 max-h-96 overflow-y-auto", children: presets.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "text-center py-8 text-gray-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(FolderOpen, { className: "w-12 h-12 mx-auto mb-3 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { children: "No saved layout presets yet." }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-sm", children: "Save your current layout to get started." })
        ] }) : presets.map((preset) => /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
          "div",
          {
            className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex-1 min-w-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h4", { className: "font-medium truncate", children: preset.name }),
                  preset.isDefault && /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(Badge, { variant: "secondary", className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Star, { className: "w-3 h-3" }),
                    "Default"
                  ] })
                ] }),
                preset.description && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-sm text-gray-600 truncate mt-1", children: preset.description }),
                /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("p", { className: "text-xs text-gray-500 mt-1", children: [
                  "Created ",
                  formatDate3(preset.createdAt)
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center gap-1 ml-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => handleLoadPreset(preset.id),
                    disabled: isLoading,
                    className: "text-blue-600 hover:text-blue-700",
                    children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(LoaderCircle, { className: "w-4 h-4 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Upload, { className: "w-4 h-4" })
                  }
                ),
                !preset.isDefault && /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(import_jsx_runtime72.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
                    Button,
                    {
                      variant: "ghost",
                      size: "sm",
                      onClick: () => handleSetDefault(preset.id),
                      disabled: isSettingDefault,
                      className: "text-orange-600 hover:text-orange-700",
                      title: "Set as default",
                      children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Star, { className: "w-4 h-4" })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(AlertDialog2, { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(AlertDialogTrigger2, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
                      Button,
                      {
                        variant: "ghost",
                        size: "sm",
                        className: "text-red-600 hover:text-red-700",
                        children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Trash2, { className: "w-4 h-4" })
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(AlertDialogContent2, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(AlertDialogHeader, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(AlertDialogTitle2, { children: "Delete Layout Preset" }),
                        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(AlertDialogDescription2, { children: [
                          'Are you sure you want to delete "',
                          preset.name,
                          '"? This action cannot be undone.'
                        ] })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(AlertDialogFooter, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(AlertDialogCancel2, { children: "Cancel" }),
                        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
                          AlertDialogAction2,
                          {
                            onClick: () => handleDeletePreset(preset.id),
                            className: "bg-red-600 hover:bg-red-700",
                            children: "Delete"
                          }
                        )
                      ] })
                    ] })
                  ] })
                ] })
              ] })
            ]
          },
          preset.id
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(DialogFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
          Button,
          {
            variant: "outline",
            onClick: () => setLoadDialogOpen(false),
            children: "Close"
          }
        ) })
      ] })
    ] })
  ] });
}

// src/components/workspace/WorkspaceHeaderConsolidated.tsx
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var PANEL_TYPES = [
  {
    type: "KANBAN",
    icon: Columns2,
    label: "Kanban",
    description: "Task management with drag-and-drop columns",
    defaultTitle: "New Kanban"
  },
  {
    type: "CHAT",
    icon: MessageCircle,
    label: "Chat",
    description: "Team communication and messaging",
    defaultTitle: "Team Chat"
  },
  {
    type: "AI_CHAT",
    icon: Bot,
    label: "AI Assistant",
    description: "Gemini 2.5 Flash AI-powered assistant",
    defaultTitle: "AI Assistant"
  },
  {
    type: "CALENDAR",
    icon: Calendar,
    label: "Calendar",
    description: "Schedule and event management",
    defaultTitle: "Calendar"
  },
  {
    type: "NOTES",
    icon: StickyNote,
    label: "Notes",
    description: "Quick notes and documentation",
    defaultTitle: "Notes"
  },
  {
    type: "EMAIL",
    icon: Mail,
    label: "Email",
    description: "Email management and communication",
    defaultTitle: "Email"
  },
  {
    type: "CONTACTS",
    icon: Users,
    label: "Contacts",
    description: "Contact and customer management",
    defaultTitle: "Contacts"
  }
];
function WorkspaceHeaderConsolidated({
  workspaceId,
  panels = [],
  currentPanel,
  onNavigate,
  onCreatePanel,
  onAction,
  className
}) {
  const [isCommandPaletteOpen, setIsCommandPaletteOpen] = (0, import_react47.useState)(false);
  const [isKeyboardShortcutsOpen, setIsKeyboardShortcutsOpen] = (0, import_react47.useState)(false);
  const [isCustomPanelOpen, setIsCustomPanelOpen] = (0, import_react47.useState)(false);
  const [isOnline, setIsOnline] = (0, import_react47.useState)(navigator.onLine);
  const [searchQuery, setSearchQuery] = (0, import_react47.useState)("");
  const [selectedType, setSelectedType] = (0, import_react47.useState)(null);
  const [customTitle, setCustomTitle] = (0, import_react47.useState)("");
  const { user } = useAuthStore();
  const utils = trpc.useUtils();
  const { data: workspaces2 = [] } = trpc.workspace.list.useQuery();
  const { data: currentWorkspace } = trpc.workspace.findById.useQuery(
    { id: workspaceId },
    { enabled: !!workspaceId }
  );
  const { data: notifications2 = [] } = trpc.notification.list.useQuery(
    { workspaceId, unreadOnly: true },
    { enabled: !!workspaceId }
  );
  const { data: kanbans2 = [] } = trpc.kanban.list.useQuery({ workspaceId });
  const { data: chatThreads = [] } = trpc.chat.listThreads.useQuery({ workspaceId });
  const createPanel = trpc.panel.create.useMutation({
    onSuccess: () => {
      utils.panel.list.invalidate({ workspaceId });
      setIsCustomPanelOpen(false);
      setSelectedType(null);
      setCustomTitle("");
    }
  });
  const toggleMinimizeAll = trpc.panel.toggleMinimizeAll.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  const toggleLockAll = trpc.panel.toggleLockAll.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  const deleteAll = trpc.panel.deleteAll.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  const exitAllFullscreen = trpc.panel.exitAllFullscreen.useMutation({
    onSuccess: () => utils.panel.list.invalidate({ workspaceId })
  });
  (0, import_react47.useEffect)(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);
    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);
  (0, import_react47.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (!shouldProcessHotkey(e)) {
        return;
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        setIsCommandPaletteOpen(true);
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "n") {
        e.preventDefault();
        handleQuickCreate("KANBAN");
      }
      if ((e.metaKey || e.ctrlKey) && e.key === "?") {
        e.preventDefault();
        setIsKeyboardShortcutsOpen(true);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, []);
  const handleQuickCreate = (type) => {
    const panelType = PANEL_TYPES.find((p2) => p2.type === type);
    if (!panelType) return;
    let data2 = { workspaceId };
    let size = { width: 4, height: 3 };
    if (type === "KANBAN") {
      size = { width: 8, height: 6 };
      data2 = { workspaceId, createNew: true };
    } else if (type === "CHAT") {
      size = { width: 4, height: 5 };
      data2 = { workspaceId, createNew: true };
    } else if (type === "NOTES") {
      size = { width: 6, height: 5 };
      data2 = { workspaceId, createNew: true };
    }
    createPanel.mutate({
      type,
      title: panelType.defaultTitle,
      workspaceId,
      position: { x: 0, y: 0 },
      size,
      data: data2
    });
    onCreatePanel?.(type);
  };
  const handleCustomCreate = () => {
    if (!selectedType) return;
    const panelType = PANEL_TYPES.find((p2) => p2.type === selectedType);
    if (!panelType) return;
    const title = customTitle.trim() || panelType.defaultTitle;
    let data2 = { workspaceId, createNew: true };
    let size = { width: 4, height: 3 };
    if (selectedType === "KANBAN") {
      size = { width: 8, height: 6 };
    } else if (selectedType === "CHAT") {
      size = { width: 4, height: 5 };
    } else if (selectedType === "NOTES") {
      size = { width: 6, height: 5 };
    }
    createPanel.mutate({
      type: selectedType,
      title,
      workspaceId,
      position: { x: 0, y: 0 },
      size,
      data: data2
    });
  };
  const handleMinimizeAll = () => {
    const hasMinimized = panels.some((panel) => panel.is_minimized);
    toggleMinimizeAll.mutate({
      workspaceId,
      minimize: !hasMinimized
    });
  };
  const handleLockAll = () => {
    const hasLocked = panels.some((panel) => panel.is_locked);
    toggleLockAll.mutate({
      workspaceId,
      lock: !hasLocked
    });
  };
  const handleDeleteAll = () => {
    if (confirm(`Delete all ${panels.length} panels in this workspace?`)) {
      deleteAll.mutate({ workspaceId });
    }
  };
  const handleExitAllFullscreen = () => {
    exitAllFullscreen.mutate({ workspaceId });
  };
  const hasMinimizedPanels = panels.some((panel) => panel.is_minimized);
  const hasLockedPanels = panels.some((panel) => panel.is_locked);
  const hasFullscreenPanels = panels.some((panel) => {
    try {
      const panelData = typeof panel.data === "string" ? JSON.parse(panel.data) : panel.data;
      return panelData?.isFullscreen === true;
    } catch {
      return false;
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("header", { className: cn(
    "h-16 bg-white border-b border-gray-200 px-4 flex items-center justify-between shadow-sm",
    className
  ), children: [
    /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex items-center space-x-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Button, { variant: "ghost", className: "h-10 px-3 hover:bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Folder, { className: "w-4 h-4 text-krushr-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { className: "font-semibold text-gray-900 max-w-32 truncate", children: currentWorkspace?.name || "Workspace" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ChevronDown, { className: "w-4 h-4 text-gray-500" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuContent, { align: "start", className: "w-64", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuLabel, { children: "Switch Workspace" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          workspaces2.map((workspace) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
            DropdownMenuItem,
            {
              onClick: () => onNavigate?.(`/workspace/${workspace.id}`),
              className: "flex items-center space-x-3 p-3",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Folder, { className: "w-4 h-4 text-gray-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "font-medium text-sm truncate", children: workspace.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-xs text-gray-500", children: [
                    workspace.memberCount || 0,
                    " members"
                  ] })
                ] }),
                workspace.id === workspaceId && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Badge, { variant: "secondary", className: "text-xs", children: "Current" })
              ]
            },
            workspace.id
          )),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuItem, { onClick: () => onNavigate?.("/workspaces/new"), children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
            "Create Workspace"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
        LayoutManager,
        {
          workspaceId,
          panels
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "flex-1 max-w-2xl mx-8", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
        Input,
        {
          placeholder: "Search workspace or type \u2318K for commands...",
          value: searchQuery,
          onChange: (e) => setSearchQuery(e.target.value),
          className: "pl-10 pr-20 h-9 bg-gray-50 border-gray-200 focus:bg-white focus:border-krushr-primary",
          onFocus: () => setIsCommandPaletteOpen(true)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("kbd", { className: "px-1.5 py-0.5 text-xs font-medium bg-gray-100 border border-gray-200 rounded", children: "\u2318K" }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex items-center space-x-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex items-center space-x-1", children: [
        PANEL_TYPES.slice(0, 4).map(({ type, icon: Icon, label }) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Tooltip, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
            Button,
            {
              variant: "outline",
              size: "sm",
              onClick: () => handleQuickCreate(type),
              disabled: createPanel.isLoading,
              className: "h-8 w-8 p-0 hover:bg-krushr-secondary hover:text-white",
              children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Icon, { className: "w-4 h-4" })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("span", { className: "text-xs", children: [
            "Add ",
            label
          ] }) })
        ] }, type)),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenu, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Button, { variant: "outline", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Plus, { className: "w-4 h-4" }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuContent, { align: "end", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuLabel, { children: "More Panels" }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
            PANEL_TYPES.slice(4).map(({ type, icon: Icon, label }) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
              DropdownMenuItem,
              {
                onClick: () => handleQuickCreate(type),
                className: "flex items-center gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Icon, { className: "w-4 h-4" }),
                  label
                ]
              },
              type
            )),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuItem, { onClick: () => setIsCustomPanelOpen(true), children: [
              /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Settings2, { className: "w-4 h-4 mr-2" }),
              "Custom Panel..."
            ] })
          ] })
        ] })
      ] }),
      panels.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Button, { variant: "outline", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Settings2, { className: "w-4 h-4" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuContent, { align: "end", className: "w-48", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuLabel, { children: "Panel Controls" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
            DropdownMenuItem,
            {
              onClick: handleMinimizeAll,
              disabled: toggleMinimizeAll.isPending,
              className: "flex items-center gap-2",
              children: hasMinimizedPanels ? /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Maximize2, { className: "w-4 h-4" }),
                "Restore All"
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Minimize2, { className: "w-4 h-4" }),
                "Minimize All"
              ] })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
            DropdownMenuItem,
            {
              onClick: handleLockAll,
              disabled: toggleLockAll.isPending,
              className: "flex items-center gap-2",
              children: hasLockedPanels ? /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(LockOpen, { className: "w-4 h-4" }),
                "Unlock All"
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Lock, { className: "w-4 h-4" }),
                "Lock All"
              ] })
            }
          ),
          hasFullscreenPanels && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
            DropdownMenuItem,
            {
              onClick: handleExitAllFullscreen,
              disabled: exitAllFullscreen.isPending,
              className: "flex items-center gap-2",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Minimize2, { className: "w-4 h-4" }),
                "Exit All Fullscreen"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
            DropdownMenuItem,
            {
              onClick: handleDeleteAll,
              disabled: deleteAll.isPending,
              className: "flex items-center gap-2 text-red-600 hover:text-red-700 hover:bg-red-50",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Trash2, { className: "w-4 h-4" }),
                "Delete All Panels"
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          Button,
          {
            size: "sm",
            onClick: () => setIsCommandPaletteOpen(true),
            className: "h-8 w-8 p-0 bg-krushr-info hover:bg-krushr-info/90 text-white",
            children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Command, { className: "w-4 h-4" })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "font-medium", children: "Command Palette" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "text-xs opacity-70", children: "\u2318K" })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          Button,
          {
            size: "sm",
            onClick: () => onAction?.("ai-assistant"),
            className: "h-8 w-8 p-0 bg-krushr-success hover:bg-krushr-success/90 text-white",
            children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Zap, { className: "w-4 h-4" })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "font-medium", children: "AI Assistant" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "text-xs opacity-70", children: "\u2318\u21E7A" })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: isOnline ? /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Wifi, { className: "w-4 h-4 text-krushr-success" }) : /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Wifi, { className: "w-4 h-4 text-krushr-warning" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { className: "text-xs", children: isOnline ? "Connected" : "Offline" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0 relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Bell, { className: "w-4 h-4" }),
          notifications2.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Badge, { className: "absolute -top-1 -right-1 h-4 w-4 p-0 text-xs bg-krushr-secondary", children: notifications2.length > 9 ? "9+" : notifications2.length })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { className: "text-xs", children: notifications2.length > 0 ? `${notifications2.length} new notifications` : "No notifications" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Ellipsis, { className: "w-4 h-4" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuContent, { align: "end", className: "w-56", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuLabel, { children: "Global Controls" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuItem, { onClick: () => onAction?.("save-layout"), children: [
            "Save Layout",
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuShortcut, { children: "\u2318S" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuItem, { onClick: () => onAction?.("load-layout"), children: [
            "Load Layout",
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuShortcut, { children: "\u2318L" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuItem, { onClick: () => onAction?.("focus-mode"), children: [
            "Focus Mode",
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuShortcut, { children: "\u2318\u21E7F" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuItem, { onClick: () => setIsKeyboardShortcutsOpen(true), children: [
            "Keyboard Shortcuts",
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuShortcut, { children: "\u2318?" })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Tooltip, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            className: "h-8 w-8 p-0",
            onClick: () => onNavigate?.("/settings"),
            children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Settings, { className: "w-4 h-4" })
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TooltipContent, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { className: "text-xs", children: "Settings" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Button, { variant: "ghost", className: "h-8 w-8 p-0 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Avatar, { className: "h-8 w-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AvatarImage, { src: user?.avatar }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AvatarFallback, { className: "text-xs bg-krushr-primary text-white", children: user?.name?.charAt(0)?.toUpperCase() || "U" })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DropdownMenuContent, { align: "end", className: "w-56", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuLabel, { children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex flex-col space-y-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-sm font-medium", children: user?.name || "User" }),
            /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-xs text-gray-500", children: user?.email })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuItem, { onClick: () => onNavigate?.("/profile"), children: "Profile Settings" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuItem, { onClick: () => onNavigate?.("/preferences"), children: "Preferences" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuSeparator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DropdownMenuItem, { onClick: () => onAction?.("logout"), children: "Sign Out" })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Dialog, { open: isCustomPanelOpen, onOpenChange: setIsCustomPanelOpen, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DialogContent, { className: "sm:max-w-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(DialogHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DialogTitle, { children: "Create Custom Panel" }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DialogDescription, { children: "Choose a panel type and customize its settings." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Panel Type" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", { className: "grid grid-cols-2 gap-2", children: PANEL_TYPES.map(({ type, icon: Icon, label, description }) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
            "button",
            {
              onClick: () => setSelectedType(type),
              className: cn(
                "p-3 border rounded-lg text-left transition-all",
                selectedType === type ? "border-krushr-primary bg-krushr-primary/5" : "border-gray-200 hover:border-gray-300"
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex items-center gap-2 mb-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Icon, { className: "w-4 h-4 text-krushr-secondary" }),
                  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("span", { className: "font-medium text-sm", children: label })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { className: "text-xs text-gray-600", children: description })
              ]
            },
            type
          )) })
        ] }),
        selectedType && /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("label", { className: "text-sm font-medium text-gray-700 mb-2 block", children: "Panel Title" }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
            FloatingInput,
            {
              label: "Panel Title",
              placeholder: PANEL_TYPES.find((p2) => p2.type === selectedType)?.defaultTitle,
              value: customTitle,
              onChange: (e) => setCustomTitle(e.target.value)
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "flex justify-end gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
            Button,
            {
              variant: "outline",
              onClick: () => setIsCustomPanelOpen(false),
              children: "Cancel"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
            Button,
            {
              onClick: handleCustomCreate,
              disabled: !selectedType || createPanel.isLoading,
              className: "bg-krushr-primary hover:bg-krushr-primary/90",
              children: [
                createPanel.isLoading ? /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(LoaderCircle, { className: "w-4 h-4 mr-2 animate-spin" }) : /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Plus, { className: "w-4 h-4 mr-2" }),
                "Create Panel"
              ]
            }
          )
        ] })
      ] })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      CommandPalette,
      {
        isOpen: isCommandPaletteOpen,
        onOpenChange: setIsCommandPaletteOpen,
        workspaceId,
        onNavigate,
        onCreatePanel,
        onAction
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      KeyboardShortcuts,
      {
        isOpen: isKeyboardShortcutsOpen,
        onOpenChange: setIsKeyboardShortcutsOpen
      }
    )
  ] }) });
}

// src/components/workspace/SimpleEnhancedHeader.tsx
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
function SimpleEnhancedHeader({ workspaceId }) {
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("header", { className: "h-16 bg-white border-b border-gray-200 px-4 flex items-center justify-between shadow-sm", children: [
    /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "flex items-center space-x-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "text-lg font-semibold text-blue-600", children: "\u{1F680} Enhanced Workspace Header" }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { className: "px-3 py-1 bg-blue-500 text-white rounded text-sm", children: "Quick Add" }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { className: "px-3 py-1 bg-green-500 text-white rounded text-sm", children: "Command \u2318K" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "flex-1 max-w-md mx-8", children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
      "input",
      {
        type: "text",
        placeholder: "Search workspace or press \u2318K...",
        className: "w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "flex items-center space-x-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { className: "px-3 py-1 bg-gray-500 text-white rounded text-sm", children: "Sync" }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { className: "px-3 py-1 bg-purple-500 text-white rounded text-sm", children: "Notifications" }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm", children: "U" })
    ] })
  ] });
}

// src/components/workspace/LayoutManagerModal.tsx
var import_react48 = __toESM(require_react(), 1);
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
function LayoutManagerModal({
  open,
  onClose,
  workspaceId,
  panels,
  initialMode = "save"
}) {
  const [activeTab, setActiveTab] = (0, import_react48.useState)(initialMode);
  const [saveName, setSaveName] = (0, import_react48.useState)("");
  const [saveDescription, setSaveDescription] = (0, import_react48.useState)("");
  const [makeDefault, setMakeDefault] = (0, import_react48.useState)(false);
  const {
    presets,
    savePreset,
    loadPreset,
    deletePreset,
    setDefaultPreset,
    isSaving,
    isLoading,
    isDeleting,
    isSettingDefault
  } = useLayoutPersistence({ workspaceId, panels, enabled: true });
  const handleSave = () => {
    if (!saveName.trim()) return;
    savePreset(saveName, saveDescription || void 0, makeDefault);
    setSaveName("");
    setSaveDescription("");
    setMakeDefault(false);
    setActiveTab("load");
  };
  const handleLoad = (presetId) => {
    loadPreset(presetId);
    onClose();
  };
  const handleDelete = (presetId, e) => {
    e.stopPropagation();
    if (confirm("Are you sure you want to delete this layout?")) {
      deletePreset(presetId);
    }
  };
  const handleSetDefault = (presetId, e) => {
    e.stopPropagation();
    setDefaultPreset(presetId);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Dialog, { open, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(DialogContent, { className: "sm:max-w-[600px]", children: [
    /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(DialogHeader, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(DialogTitle, { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(PanelsTopLeft, { className: "w-5 h-5 text-krushr-primary" }),
        "Layout Manager"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(DialogDescription, { children: "Save your current panel arrangement or load a previously saved layout" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(Tabs2, { value: activeTab, onValueChange: setActiveTab, className: "mt-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(TabsList2, { className: "grid w-full grid-cols-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(TabsTrigger2, { value: "save", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Save, { className: "w-4 h-4 mr-2" }),
          "Save Layout"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(TabsTrigger2, { value: "load", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Download, { className: "w-4 h-4 mr-2" }),
          "Load Layout"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(TabsContent2, { value: "save", className: "space-y-4 mt-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Label2, { htmlFor: "layout-name", children: "Layout Name" }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            Input,
            {
              id: "layout-name",
              placeholder: "My Workspace Layout",
              value: saveName,
              onChange: (e) => setSaveName(e.target.value),
              disabled: isSaving
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Label2, { htmlFor: "layout-description", children: "Description (optional)" }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            Textarea,
            {
              id: "layout-description",
              placeholder: "Describe this layout...",
              value: saveDescription,
              onChange: (e) => setSaveDescription(e.target.value),
              disabled: isSaving,
              rows: 3
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            "input",
            {
              type: "checkbox",
              id: "make-default",
              checked: makeDefault,
              onChange: (e) => setMakeDefault(e.target.checked),
              disabled: isSaving,
              className: "h-4 w-4 rounded border-gray-300 text-krushr-primary focus:ring-krushr-primary"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Label2, { htmlFor: "make-default", className: "text-sm font-normal", children: "Set as default layout for this workspace" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex justify-end gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Button, { variant: "outline", onClick: onClose, disabled: isSaving, children: "Cancel" }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            Button,
            {
              onClick: handleSave,
              disabled: !saveName.trim() || isSaving,
              children: isSaving ? /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(import_jsx_runtime75.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Clock, { className: "w-4 h-4 mr-2 animate-spin" }),
                "Saving..."
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(import_jsx_runtime75.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Save, { className: "w-4 h-4 mr-2" }),
                "Save Layout"
              ] })
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(TabsContent2, { value: "load", className: "mt-4", children: [
        presets.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "text-center py-8 text-gray-500", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(FolderOpen, { className: "w-12 h-12 mx-auto mb-3 opacity-50" }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { children: "No saved layouts yet" }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { className: "text-sm mt-1", children: "Save your current layout to get started" })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "space-y-2 max-h-[400px] overflow-y-auto", children: presets.map((preset) => /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          "div",
          {
            onClick: () => handleLoad(preset.id),
            className: cn(
              "p-4 border rounded-lg cursor-pointer transition-colors",
              "hover:bg-gray-50 hover:border-krushr-primary/50",
              preset.isDefault && "border-krushr-primary bg-krushr-primary/5"
            ),
            children: /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex items-start justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("h4", { className: "font-medium", children: preset.name }),
                  preset.isDefault && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Star, { className: "w-4 h-4 text-krushr-primary fill-current" })
                ] }),
                preset.description && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: preset.description }),
                /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("p", { className: "text-xs text-gray-500 mt-2", children: [
                  "Saved ",
                  formatDistanceToNow(new Date(preset.createdAt), { addSuffix: true })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "flex items-center gap-1 ml-4", children: [
                !preset.isDefault && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    onClick: (e) => handleSetDefault(preset.id, e),
                    disabled: isSettingDefault || isLoading,
                    title: "Set as default",
                    children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Star, { className: "w-4 h-4" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    onClick: (e) => handleDelete(preset.id, e),
                    disabled: isDeleting || isLoading,
                    className: "text-red-600 hover:text-red-700",
                    children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Trash2, { className: "w-4 h-4" })
                  }
                )
              ] })
            ] })
          },
          preset.id
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "flex justify-end gap-2 mt-4", children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Button, { variant: "outline", onClick: onClose, disabled: isLoading, children: "Close" }) })
      ] })
    ] })
  ] }) });
}

// src/pages/Workspace.tsx
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
function Workspace() {
  const navigate = useNavigate();
  const { workspaceId } = useParams();
  const utils = trpc.useUtils();
  const {
    showTaskCreationModal,
    taskCreationColumnId,
    taskCreationKanbanId,
    openTaskCreationModal,
    closeTaskCreationModal,
    showLayoutManager,
    layoutManagerMode,
    openLayoutManager,
    closeLayoutManager,
    triggerNoteCreation,
    toggleFocusMode,
    focusMode
  } = useUIStore();
  const { data: workspaces2, isLoading } = trpc.workspace.list.useQuery(void 0, {
    staleTime: 3e5,
    // Cache for 5 minutes
    cacheTime: 6e5
    // Keep in cache for 10 minutes
  });
  const activeWorkspace = workspaceId ? workspaces2?.find((w) => w.id === workspaceId) : workspaces2?.find((w) => w._count.projects > 0 || w._count.teams > 0 || w._count.kanbans > 0) || workspaces2?.[0];
  const { data: panels = [] } = trpc.panel.list.useQuery(
    { workspaceId: activeWorkspace?.id ?? "" },
    {
      enabled: !!activeWorkspace?.id,
      staleTime: 6e4,
      // Cache for 1 minute
      cacheTime: 3e5
      // Keep in cache for 5 minutes
    }
  );
  const { data: kanbans2 = [] } = trpc.kanban.list.useQuery(
    { workspaceId: activeWorkspace?.id ?? "" },
    {
      enabled: !!activeWorkspace?.id,
      staleTime: 6e4,
      cacheTime: 3e5
    }
  );
  const firstKanban = kanbans2[0];
  const { data: firstKanbanData } = trpc.kanban.get.useQuery(
    { id: firstKanban?.id ?? "" },
    {
      enabled: !!firstKanban?.id,
      staleTime: 6e4,
      cacheTime: 3e5
    }
  );
  const createPanel = trpc.panel.create.useMutation({
    onSuccess: () => {
      if (activeWorkspace) {
        utils.panel.list.invalidate({ workspaceId: activeWorkspace.id });
      }
    }
  });
  const toggleMinimizeAll = trpc.panel.toggleMinimizeAll.useMutation({
    onSuccess: () => {
      if (activeWorkspace) {
        utils.panel.list.invalidate({ workspaceId: activeWorkspace.id });
      }
    }
  });
  const handleNavigate = (path) => {
    console.log("Navigate to:", path);
    navigate(path);
  };
  (0, import_react49.useEffect)(() => {
    const handleKeyDown = (e) => {
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === "F") {
        e.preventDefault();
        toggleFocusMode();
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, []);
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(LoaderCircle, { className: "w-8 h-8 mx-auto mb-2 animate-spin text-krushr-primary" }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("p", { className: "text-gray-600", children: "Loading workspace..." })
    ] }) }) });
  }
  if (!activeWorkspace) {
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "flex flex-col min-h-full", style: { backgroundColor: "hsl(0deg 0% 96.47%)" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(SimpleEnhancedHeader, { workspaceId: "demo-workspace-id" }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { className: "flex items-center justify-center flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("h2", { className: "text-xl font-semibold text-gray-900 mb-2", children: "No Workspace Found" }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("p", { className: "text-gray-600", children: "You need to create or join a workspace to use the panel system." }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("p", { className: "text-sm text-gray-500 mt-2", children: "(Enhanced header shown above for testing)" })
      ] }) })
    ] }) });
  }
  const handleCreatePanel = (type) => {
    if (!activeWorkspace) return;
    if (type === "TASK") {
      const firstKanbanColumn = firstKanbanData?.columns?.[0];
      openTaskCreationModal({
        kanbanId: firstKanban?.id,
        columnId: firstKanbanColumn?.id
      });
      return;
    }
    if (type === "NOTE") {
      triggerNoteCreation();
      return;
    }
    const panelConfig = {
      KANBAN: { title: "New Kanban Board", width: 8, height: 12 },
      NOTES: { title: "New Note", width: 6, height: 10 },
      CALENDAR: { title: "Calendar", width: 10, height: 14 },
      CHAT: { title: "Chat", width: 6, height: 12 }
    };
    const config = panelConfig[type] || { title: "New Panel", width: 6, height: 10 };
    createPanel.mutate({
      workspaceId: activeWorkspace.id,
      type,
      title: config.title,
      position_x: 0,
      position_y: 0,
      width: config.width,
      height: config.height,
      data: {}
    });
  };
  const handleAction = (action) => {
    switch (action) {
      case "logout":
        const authStore = useAuthStore.getState();
        authStore.logout();
        navigate("/login");
        break;
      case "save-layout":
        openLayoutManager("save");
        break;
      case "load-layout":
        openLayoutManager("load");
        break;
      case "focus-mode":
        toggleFocusMode();
        break;
      case "minimize-all":
        handleMinimizeAll();
        break;
      case "view-grid":
      case "view-list":
        console.log(`Switching to ${action.replace("view-", "")} view...`);
        break;
      case "ai-analyze":
      case "ai-schedule":
      case "ai-suggest":
        console.log(`AI feature: ${action}`);
        break;
      default:
        console.log("Unknown action:", action);
    }
  };
  const handleMinimizeAll = () => {
    if (!activeWorkspace) return;
    const hasNonMinimizedPanels = (panels || []).some((panel) => !panel.is_minimized);
    toggleMinimizeAll.mutate({
      workspaceId: activeWorkspace.id,
      minimize: hasNonMinimizedPanels
    });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Layout, { children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "flex flex-col min-h-full", style: { backgroundColor: "hsl(0deg 0% 96.47%)" }, children: [
    focusMode && /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { className: "bg-krushr-primary text-white text-sm py-1 px-4 flex items-center justify-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Focus, { className: "w-4 h-4 mr-2" }),
      "Focus Mode Active - Press \u2318\u21E7F to exit"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
      WorkspaceHeaderConsolidated,
      {
        workspaceId: activeWorkspace.id,
        panels,
        onNavigate: handleNavigate,
        onCreatePanel: handleCreatePanel,
        onAction: handleAction
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
      PanelWorkspace,
      {
        workspaceId: activeWorkspace.id,
        className: "flex-1"
      }
    ),
    showTaskCreationModal && firstKanban && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
      CompactTaskModal,
      {
        open: showTaskCreationModal,
        onClose: closeTaskCreationModal,
        workspaceId: activeWorkspace.id,
        kanbanId: taskCreationKanbanId || firstKanban.id,
        kanbanColumnId: taskCreationColumnId || firstKanbanData?.columns?.[0]?.id,
        onSuccess: () => {
          closeTaskCreationModal();
          utils.task.list.invalidate();
          utils.kanban.get.invalidate();
        }
      }
    ),
    showLayoutManager && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
      LayoutManagerModal,
      {
        open: showLayoutManager,
        onClose: closeLayoutManager,
        workspaceId: activeWorkspace.id,
        panels,
        initialMode: layoutManagerMode
      }
    )
  ] }) });
}

// src/components/ui/toast.tsx
var React70 = __toESM(require_react(), 1);

// ../node_modules/@radix-ui/react-toast/dist/index.mjs
var React69 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var PROVIDER_NAME = "ToastProvider";
var [Collection, useCollection, createCollectionScope] = createCollection("Toast");
var [createToastContext, createToastScope] = createContextScope("Toast", [createCollectionScope]);
var [ToastProviderProvider, useToastProviderContext] = createToastContext(PROVIDER_NAME);
var ToastProvider = (props) => {
  const {
    __scopeToast,
    label = "Notification",
    duration = 5e3,
    swipeDirection = "right",
    swipeThreshold = 50,
    children
  } = props;
  const [viewport, setViewport] = React69.useState(null);
  const [toastCount, setToastCount] = React69.useState(0);
  const isFocusedToastEscapeKeyDownRef = React69.useRef(false);
  const isClosePausedRef = React69.useRef(false);
  if (!label.trim()) {
    console.error(
      `Invalid prop \`label\` supplied to \`${PROVIDER_NAME}\`. Expected non-empty \`string\`.`
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Collection.Provider, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
    ToastProviderProvider,
    {
      scope: __scopeToast,
      label,
      duration,
      swipeDirection,
      swipeThreshold,
      toastCount,
      viewport,
      onViewportChange: setViewport,
      onToastAdd: React69.useCallback(() => setToastCount((prevCount) => prevCount + 1), []),
      onToastRemove: React69.useCallback(() => setToastCount((prevCount) => prevCount - 1), []),
      isFocusedToastEscapeKeyDownRef,
      isClosePausedRef,
      children
    }
  ) });
};
ToastProvider.displayName = PROVIDER_NAME;
var VIEWPORT_NAME = "ToastViewport";
var VIEWPORT_DEFAULT_HOTKEY = ["F8"];
var VIEWPORT_PAUSE = "toast.viewportPause";
var VIEWPORT_RESUME = "toast.viewportResume";
var ToastViewport = React69.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeToast,
      hotkey = VIEWPORT_DEFAULT_HOTKEY,
      label = "Notifications ({hotkey})",
      ...viewportProps
    } = props;
    const context = useToastProviderContext(VIEWPORT_NAME, __scopeToast);
    const getItems = useCollection(__scopeToast);
    const wrapperRef = React69.useRef(null);
    const headFocusProxyRef = React69.useRef(null);
    const tailFocusProxyRef = React69.useRef(null);
    const ref = React69.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
    const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
    const hasToasts = context.toastCount > 0;
    React69.useEffect(() => {
      const handleKeyDown = (event) => {
        const isHotkeyPressed = hotkey.length !== 0 && hotkey.every((key) => event[key] || event.code === key);
        if (isHotkeyPressed) ref.current?.focus();
      };
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }, [hotkey]);
    React69.useEffect(() => {
      const wrapper = wrapperRef.current;
      const viewport = ref.current;
      if (hasToasts && wrapper && viewport) {
        const handlePause = () => {
          if (!context.isClosePausedRef.current) {
            const pauseEvent = new CustomEvent(VIEWPORT_PAUSE);
            viewport.dispatchEvent(pauseEvent);
            context.isClosePausedRef.current = true;
          }
        };
        const handleResume = () => {
          if (context.isClosePausedRef.current) {
            const resumeEvent = new CustomEvent(VIEWPORT_RESUME);
            viewport.dispatchEvent(resumeEvent);
            context.isClosePausedRef.current = false;
          }
        };
        const handleFocusOutResume = (event) => {
          const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
          if (isFocusMovingOutside) handleResume();
        };
        const handlePointerLeaveResume = () => {
          const isFocusInside = wrapper.contains(document.activeElement);
          if (!isFocusInside) handleResume();
        };
        wrapper.addEventListener("focusin", handlePause);
        wrapper.addEventListener("focusout", handleFocusOutResume);
        wrapper.addEventListener("pointermove", handlePause);
        wrapper.addEventListener("pointerleave", handlePointerLeaveResume);
        window.addEventListener("blur", handlePause);
        window.addEventListener("focus", handleResume);
        return () => {
          wrapper.removeEventListener("focusin", handlePause);
          wrapper.removeEventListener("focusout", handleFocusOutResume);
          wrapper.removeEventListener("pointermove", handlePause);
          wrapper.removeEventListener("pointerleave", handlePointerLeaveResume);
          window.removeEventListener("blur", handlePause);
          window.removeEventListener("focus", handleResume);
        };
      }
    }, [hasToasts, context.isClosePausedRef]);
    const getSortedTabbableCandidates = React69.useCallback(
      ({ tabbingDirection }) => {
        const toastItems = getItems();
        const tabbableCandidates = toastItems.map((toastItem) => {
          const toastNode = toastItem.ref.current;
          const toastTabbableCandidates = [toastNode, ...getTabbableCandidates(toastNode)];
          return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
        });
        return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
      },
      [getItems]
    );
    React69.useEffect(() => {
      const viewport = ref.current;
      if (viewport) {
        const handleKeyDown = (event) => {
          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
          const isTabKey = event.key === "Tab" && !isMetaKey;
          if (isTabKey) {
            const focusedElement = document.activeElement;
            const isTabbingBackwards = event.shiftKey;
            const targetIsViewport = event.target === viewport;
            if (targetIsViewport && isTabbingBackwards) {
              headFocusProxyRef.current?.focus();
              return;
            }
            const tabbingDirection = isTabbingBackwards ? "backwards" : "forwards";
            const sortedCandidates = getSortedTabbableCandidates({ tabbingDirection });
            const index = sortedCandidates.findIndex((candidate) => candidate === focusedElement);
            if (focusFirst(sortedCandidates.slice(index + 1))) {
              event.preventDefault();
            } else {
              isTabbingBackwards ? headFocusProxyRef.current?.focus() : tailFocusProxyRef.current?.focus();
            }
          }
        };
        viewport.addEventListener("keydown", handleKeyDown);
        return () => viewport.removeEventListener("keydown", handleKeyDown);
      }
    }, [getItems, getSortedTabbableCandidates]);
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(
      Branch,
      {
        ref: wrapperRef,
        role: "region",
        "aria-label": label.replace("{hotkey}", hotkeyLabel),
        tabIndex: -1,
        style: { pointerEvents: hasToasts ? void 0 : "none" },
        children: [
          hasToasts && /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
            FocusProxy,
            {
              ref: headFocusProxyRef,
              onFocusFromOutsideViewport: () => {
                const tabbableCandidates = getSortedTabbableCandidates({
                  tabbingDirection: "forwards"
                });
                focusFirst(tabbableCandidates);
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Collection.Slot, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Primitive.ol, { tabIndex: -1, ...viewportProps, ref: composedRefs }) }),
          hasToasts && /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
            FocusProxy,
            {
              ref: tailFocusProxyRef,
              onFocusFromOutsideViewport: () => {
                const tabbableCandidates = getSortedTabbableCandidates({
                  tabbingDirection: "backwards"
                });
                focusFirst(tabbableCandidates);
              }
            }
          )
        ]
      }
    );
  }
);
ToastViewport.displayName = VIEWPORT_NAME;
var FOCUS_PROXY_NAME = "ToastFocusProxy";
var FocusProxy = React69.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, onFocusFromOutsideViewport, ...proxyProps } = props;
    const context = useToastProviderContext(FOCUS_PROXY_NAME, __scopeToast);
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
      VisuallyHidden,
      {
        "aria-hidden": true,
        tabIndex: 0,
        ...proxyProps,
        ref: forwardedRef,
        style: { position: "fixed" },
        onFocus: (event) => {
          const prevFocusedElement = event.relatedTarget;
          const isFocusFromOutsideViewport = !context.viewport?.contains(prevFocusedElement);
          if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();
        }
      }
    );
  }
);
FocusProxy.displayName = FOCUS_PROXY_NAME;
var TOAST_NAME = "Toast";
var TOAST_SWIPE_START = "toast.swipeStart";
var TOAST_SWIPE_MOVE = "toast.swipeMove";
var TOAST_SWIPE_CANCEL = "toast.swipeCancel";
var TOAST_SWIPE_END = "toast.swipeEnd";
var Toast = React69.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props;
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen ?? true,
      onChange: onOpenChange,
      caller: TOAST_NAME
    });
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Presence, { present: forceMount || open, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
      ToastImpl,
      {
        open,
        ...toastProps,
        ref: forwardedRef,
        onClose: () => setOpen(false),
        onPause: useCallbackRef(props.onPause),
        onResume: useCallbackRef(props.onResume),
        onSwipeStart: composeEventHandlers(props.onSwipeStart, (event) => {
          event.currentTarget.setAttribute("data-swipe", "start");
        }),
        onSwipeMove: composeEventHandlers(props.onSwipeMove, (event) => {
          const { x, y } = event.detail.delta;
          event.currentTarget.setAttribute("data-swipe", "move");
          event.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${x}px`);
          event.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${y}px`);
        }),
        onSwipeCancel: composeEventHandlers(props.onSwipeCancel, (event) => {
          event.currentTarget.setAttribute("data-swipe", "cancel");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-end-x");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-end-y");
        }),
        onSwipeEnd: composeEventHandlers(props.onSwipeEnd, (event) => {
          const { x, y } = event.detail.delta;
          event.currentTarget.setAttribute("data-swipe", "end");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
          event.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${x}px`);
          event.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${y}px`);
          setOpen(false);
        })
      }
    ) });
  }
);
Toast.displayName = TOAST_NAME;
var [ToastInteractiveProvider, useToastInteractiveContext] = createToastContext(TOAST_NAME, {
  onClose() {
  }
});
var ToastImpl = React69.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeToast,
      type = "foreground",
      duration: durationProp,
      open,
      onClose,
      onEscapeKeyDown,
      onPause,
      onResume,
      onSwipeStart,
      onSwipeMove,
      onSwipeCancel,
      onSwipeEnd,
      ...toastProps
    } = props;
    const context = useToastProviderContext(TOAST_NAME, __scopeToast);
    const [node, setNode] = React69.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
    const pointerStartRef = React69.useRef(null);
    const swipeDeltaRef = React69.useRef(null);
    const duration = durationProp || context.duration;
    const closeTimerStartTimeRef = React69.useRef(0);
    const closeTimerRemainingTimeRef = React69.useRef(duration);
    const closeTimerRef = React69.useRef(0);
    const { onToastAdd, onToastRemove } = context;
    const handleClose = useCallbackRef(() => {
      const isFocusInToast = node?.contains(document.activeElement);
      if (isFocusInToast) context.viewport?.focus();
      onClose();
    });
    const startTimer = React69.useCallback(
      (duration2) => {
        if (!duration2 || duration2 === Infinity) return;
        window.clearTimeout(closeTimerRef.current);
        closeTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
        closeTimerRef.current = window.setTimeout(handleClose, duration2);
      },
      [handleClose]
    );
    React69.useEffect(() => {
      const viewport = context.viewport;
      if (viewport) {
        const handleResume = () => {
          startTimer(closeTimerRemainingTimeRef.current);
          onResume?.();
        };
        const handlePause = () => {
          const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef.current;
          closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
          window.clearTimeout(closeTimerRef.current);
          onPause?.();
        };
        viewport.addEventListener(VIEWPORT_PAUSE, handlePause);
        viewport.addEventListener(VIEWPORT_RESUME, handleResume);
        return () => {
          viewport.removeEventListener(VIEWPORT_PAUSE, handlePause);
          viewport.removeEventListener(VIEWPORT_RESUME, handleResume);
        };
      }
    }, [context.viewport, duration, onPause, onResume, startTimer]);
    React69.useEffect(() => {
      if (open && !context.isClosePausedRef.current) startTimer(duration);
    }, [open, duration, context.isClosePausedRef, startTimer]);
    React69.useEffect(() => {
      onToastAdd();
      return () => onToastRemove();
    }, [onToastAdd, onToastRemove]);
    const announceTextContent = React69.useMemo(() => {
      return node ? getAnnounceTextContent(node) : null;
    }, [node]);
    if (!context.viewport) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(import_jsx_runtime77.Fragment, { children: [
      announceTextContent && /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
        ToastAnnounce,
        {
          __scopeToast,
          role: "status",
          "aria-live": type === "foreground" ? "assertive" : "polite",
          "aria-atomic": true,
          children: announceTextContent
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ToastInteractiveProvider, { scope: __scopeToast, onClose: handleClose, children: ReactDOM.createPortal(
        /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Collection.ItemSlot, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
          Root,
          {
            asChild: true,
            onEscapeKeyDown: composeEventHandlers(onEscapeKeyDown, () => {
              if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();
              context.isFocusedToastEscapeKeyDownRef.current = false;
            }),
            children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
              Primitive.li,
              {
                role: "status",
                "aria-live": "off",
                "aria-atomic": true,
                tabIndex: 0,
                "data-state": open ? "open" : "closed",
                "data-swipe-direction": context.swipeDirection,
                ...toastProps,
                ref: composedRefs,
                style: { userSelect: "none", touchAction: "none", ...props.style },
                onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                  if (event.key !== "Escape") return;
                  onEscapeKeyDown?.(event.nativeEvent);
                  if (!event.nativeEvent.defaultPrevented) {
                    context.isFocusedToastEscapeKeyDownRef.current = true;
                    handleClose();
                  }
                }),
                onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
                  if (event.button !== 0) return;
                  pointerStartRef.current = { x: event.clientX, y: event.clientY };
                }),
                onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
                  if (!pointerStartRef.current) return;
                  const x = event.clientX - pointerStartRef.current.x;
                  const y = event.clientY - pointerStartRef.current.y;
                  const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
                  const isHorizontalSwipe = ["left", "right"].includes(context.swipeDirection);
                  const clamp = ["left", "up"].includes(context.swipeDirection) ? Math.min : Math.max;
                  const clampedX = isHorizontalSwipe ? clamp(0, x) : 0;
                  const clampedY = !isHorizontalSwipe ? clamp(0, y) : 0;
                  const moveStartBuffer = event.pointerType === "touch" ? 10 : 2;
                  const delta = { x: clampedX, y: clampedY };
                  const eventDetail = { originalEvent: event, delta };
                  if (hasSwipeMoveStarted) {
                    swipeDeltaRef.current = delta;
                    handleAndDispatchCustomEvent(TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
                      discrete: false
                    });
                  } else if (isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
                    swipeDeltaRef.current = delta;
                    handleAndDispatchCustomEvent(TOAST_SWIPE_START, onSwipeStart, eventDetail, {
                      discrete: false
                    });
                    event.target.setPointerCapture(event.pointerId);
                  } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer) {
                    pointerStartRef.current = null;
                  }
                }),
                onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
                  const delta = swipeDeltaRef.current;
                  const target = event.target;
                  if (target.hasPointerCapture(event.pointerId)) {
                    target.releasePointerCapture(event.pointerId);
                  }
                  swipeDeltaRef.current = null;
                  pointerStartRef.current = null;
                  if (delta) {
                    const toast2 = event.currentTarget;
                    const eventDetail = { originalEvent: event, delta };
                    if (isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)) {
                      handleAndDispatchCustomEvent(TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
                        discrete: true
                      });
                    } else {
                      handleAndDispatchCustomEvent(
                        TOAST_SWIPE_CANCEL,
                        onSwipeCancel,
                        eventDetail,
                        {
                          discrete: true
                        }
                      );
                    }
                    toast2.addEventListener("click", (event2) => event2.preventDefault(), {
                      once: true
                    });
                  }
                })
              }
            )
          }
        ) }),
        context.viewport
      ) })
    ] });
  }
);
var ToastAnnounce = (props) => {
  const { __scopeToast, children, ...announceProps } = props;
  const context = useToastProviderContext(TOAST_NAME, __scopeToast);
  const [renderAnnounceText, setRenderAnnounceText] = React69.useState(false);
  const [isAnnounced, setIsAnnounced] = React69.useState(false);
  useNextFrame(() => setRenderAnnounceText(true));
  React69.useEffect(() => {
    const timer = window.setTimeout(() => setIsAnnounced(true), 1e3);
    return () => window.clearTimeout(timer);
  }, []);
  return isAnnounced ? null : /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Portal, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(VisuallyHidden, { ...announceProps, children: renderAnnounceText && /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(import_jsx_runtime77.Fragment, { children: [
    context.label,
    " ",
    children
  ] }) }) });
};
var TITLE_NAME2 = "ToastTitle";
var ToastTitle = React69.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...titleProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Primitive.div, { ...titleProps, ref: forwardedRef });
  }
);
ToastTitle.displayName = TITLE_NAME2;
var DESCRIPTION_NAME2 = "ToastDescription";
var ToastDescription = React69.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...descriptionProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Primitive.div, { ...descriptionProps, ref: forwardedRef });
  }
);
ToastDescription.displayName = DESCRIPTION_NAME2;
var ACTION_NAME2 = "ToastAction";
var ToastAction = React69.forwardRef(
  (props, forwardedRef) => {
    const { altText, ...actionProps } = props;
    if (!altText.trim()) {
      console.error(
        `Invalid prop \`altText\` supplied to \`${ACTION_NAME2}\`. Expected non-empty \`string\`.`
      );
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ToastAnnounceExclude, { altText, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ToastClose, { ...actionProps, ref: forwardedRef }) });
  }
);
ToastAction.displayName = ACTION_NAME2;
var CLOSE_NAME2 = "ToastClose";
var ToastClose = React69.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...closeProps } = props;
    const interactiveContext = useToastInteractiveContext(CLOSE_NAME2, __scopeToast);
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ToastAnnounceExclude, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
      Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, interactiveContext.onClose)
      }
    ) });
  }
);
ToastClose.displayName = CLOSE_NAME2;
var ToastAnnounceExclude = React69.forwardRef((props, forwardedRef) => {
  const { __scopeToast, altText, ...announceExcludeProps } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
    Primitive.div,
    {
      "data-radix-toast-announce-exclude": "",
      "data-radix-toast-announce-alt": altText || void 0,
      ...announceExcludeProps,
      ref: forwardedRef
    }
  );
});
function getAnnounceTextContent(container) {
  const textContent = [];
  const childNodes = Array.from(container.childNodes);
  childNodes.forEach((node) => {
    if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);
    if (isHTMLElement(node)) {
      const isHidden = node.ariaHidden || node.hidden || node.style.display === "none";
      const isExcluded = node.dataset.radixToastAnnounceExclude === "";
      if (!isHidden) {
        if (isExcluded) {
          const altText = node.dataset.radixToastAnnounceAlt;
          if (altText) textContent.push(altText);
        } else {
          textContent.push(...getAnnounceTextContent(node));
        }
      }
    }
  });
  return textContent;
}
function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const currentTarget = detail.originalEvent.currentTarget;
  const event = new CustomEvent(name, { bubbles: true, cancelable: true, detail });
  if (handler) currentTarget.addEventListener(name, handler, { once: true });
  if (discrete) {
    dispatchDiscreteCustomEvent(currentTarget, event);
  } else {
    currentTarget.dispatchEvent(event);
  }
}
var isDeltaInDirection = (delta, direction, threshold = 0) => {
  const deltaX = Math.abs(delta.x);
  const deltaY = Math.abs(delta.y);
  const isDeltaX = deltaX > deltaY;
  if (direction === "left" || direction === "right") {
    return isDeltaX && deltaX > threshold;
  } else {
    return !isDeltaX && deltaY > threshold;
  }
};
function useNextFrame(callback = () => {
}) {
  const fn = useCallbackRef(callback);
  useLayoutEffect2(() => {
    let raf1 = 0;
    let raf2 = 0;
    raf1 = window.requestAnimationFrame(() => raf2 = window.requestAnimationFrame(fn));
    return () => {
      window.cancelAnimationFrame(raf1);
      window.cancelAnimationFrame(raf2);
    };
  }, [fn]);
}
function isHTMLElement(node) {
  return node.nodeType === node.ELEMENT_NODE;
}
function getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode()) nodes.push(walker.currentNode);
  return nodes;
}
function focusFirst(candidates) {
  const previouslyFocusedElement = document.activeElement;
  return candidates.some((candidate) => {
    if (candidate === previouslyFocusedElement) return true;
    candidate.focus();
    return document.activeElement !== previouslyFocusedElement;
  });
}
var Provider = ToastProvider;
var Viewport = ToastViewport;
var Root26 = Toast;
var Title3 = ToastTitle;
var Description3 = ToastDescription;
var Action3 = ToastAction;
var Close2 = ToastClose;

// src/components/ui/toast.tsx
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var ToastProvider2 = Provider;
var ToastViewport2 = React70.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
  Viewport,
  {
    ref,
    className: cn(
      "fixed top-0 z-[9999999] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    ),
    ...props
  }
));
ToastViewport2.displayName = Viewport.displayName;
var toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);
var Toast2 = React70.forwardRef(({ className, variant, ...props }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
    Root26,
    {
      ref,
      className: cn(toastVariants({ variant }), className),
      ...props
    }
  );
});
Toast2.displayName = Root26.displayName;
var ToastAction2 = React70.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
  Action3,
  {
    ref,
    className: cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    ),
    ...props
  }
));
ToastAction2.displayName = Action3.displayName;
var ToastClose2 = React70.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
  Close2,
  {
    ref,
    className: cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    ),
    "toast-close": "",
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(X, { className: "h-4 w-4" })
  }
));
ToastClose2.displayName = Close2.displayName;
var ToastTitle2 = React70.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
  Title3,
  {
    ref,
    className: cn("text-sm font-semibold [&+div]:text-xs", className),
    ...props
  }
));
ToastTitle2.displayName = Title3.displayName;
var ToastDescription2 = React70.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
  Description3,
  {
    ref,
    className: cn("text-sm opacity-90", className),
    ...props
  }
));
ToastDescription2.displayName = Description3.displayName;

// src/components/ui/toaster.tsx
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
function Toaster2() {
  const { toasts } = useToast();
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(ToastProvider2, { children: [
    toasts.map(function({ id: id2, title, description, action, ...props }) {
      return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(Toast2, { ...props, children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "grid gap-1", children: [
          title && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToastTitle2, { children: title }),
          description && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToastDescription2, { children: description })
        ] }),
        action,
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToastClose2, {})
      ] }, id2);
    }),
    /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToastViewport2, {})
  ] });
}

// src/components/ui/sonner.tsx
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var Toaster3 = ({ ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
    Toaster,
    {
      theme: "light",
      className: "toaster group",
      toastOptions: {
        classNames: {
          toast: "group toast group-[.toaster]:bg-white group-[.toaster]:text-gray-900 group-[.toaster]:border-gray-200 group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-gray-600",
          actionButton: "group-[.toast]:bg-krushr-primary group-[.toast]:text-white",
          cancelButton: "group-[.toast]:bg-gray-100 group-[.toast]:text-gray-900",
          error: "group-[.toaster]:bg-red-50 group-[.toaster]:text-red-900 group-[.toaster]:border-red-200",
          success: "group-[.toaster]:bg-green-50 group-[.toaster]:text-green-900 group-[.toaster]:border-green-200",
          warning: "group-[.toaster]:bg-orange-50 group-[.toaster]:text-orange-900 group-[.toaster]:border-orange-200",
          info: "group-[.toaster]:bg-blue-50 group-[.toaster]:text-blue-900 group-[.toaster]:border-blue-200"
        }
      },
      ...props
    }
  );
};

// src/App.tsx
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
function ProtectedRoute({ children }) {
  const { isAuthenticated, isLoading } = useAuthStore();
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "flex items-center justify-center min-h-screen", children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-2" }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("p", { children: "Loading..." })
    ] }) });
  }
  return isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(import_jsx_runtime81.Fragment, { children }) : /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Navigate, { to: "/login", replace: true });
}
function App() {
  const { hydrate } = useAuthStore();
  (0, import_react50.useEffect)(() => {
    hydrate().catch(console.error);
  }, [hydrate]);
  return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(TRPCProvider, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(HashRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Routes, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Navigate, { to: "/workspace", replace: true }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/test", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Test, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/login", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Login, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/register", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Register, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/pricing", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Pricing_default, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/home", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Home, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/board", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Board, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/calendar", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Calendar3, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/notes", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Notes, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/chat", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Chat, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/teams", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Teams, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/projects", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Projects, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/workspace", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Workspace, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/workspace/:workspaceId", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Workspace, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/workspaces/new", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Workspace, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/profile", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Profile, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Route, { path: "/settings", element: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Settings4, {}) }) })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Toaster2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Toaster3, { position: "top-center", richColors: true })
  ] });
}

// src/main.tsx
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
function preventDuplicateCustomElements() {
  if (typeof window !== "undefined" && window.customElements) {
    const originalDefine = window.customElements.define.bind(window.customElements);
    const definedElements = /* @__PURE__ */ new Set();
    try {
      const existingElements = Object.getOwnPropertyNames(window.customElements);
      existingElements.forEach((name) => definedElements.add(name));
    } catch (e) {
      const commonElements = ["mce-autosize-textarea", "mce-editor", "tinymce-editor"];
      commonElements.forEach((name) => {
        if (window.customElements.get(name)) {
          definedElements.add(name);
        }
      });
    }
    window.customElements.define = function(name, constructor, options) {
      if (definedElements.has(name) || window.customElements.get(name)) {
        console.warn(`\u26A0\uFE0F Custom element '${name}' already defined, skipping duplicate registration`);
        return;
      }
      try {
        const result = originalDefine(name, constructor, options);
        definedElements.add(name);
        return result;
      } catch (error) {
        if (error instanceof Error && (error.message.includes("already been defined") || error.message.includes("already defined") || error.name === "NotSupportedError")) {
          console.warn(`\u26A0\uFE0F Custom element '${name}' registration prevented:`, error.message);
          definedElements.add(name);
          return;
        }
        if (isDevelopment()) {
          console.warn(`\u26A0\uFE0F Custom element '${name}' error suppressed in dev:`, error.message);
          return;
        }
        console.error(`\u274C Failed to define custom element '${name}':`, error);
        throw error;
      }
    };
    const originalAddEventListener = window.addEventListener;
    window.addEventListener = function(type, listener, options) {
      if (type === "error") {
        const wrappedListener = function(event) {
          if (event.error && event.error.message && event.error.message.includes("already been defined")) {
            console.warn("\u26A0\uFE0F Prevented custom element duplicate registration error:", event.error.message);
            event.preventDefault();
            return;
          }
          if (typeof listener === "function") {
            return listener.call(this, event);
          }
        };
        return originalAddEventListener.call(this, type, wrappedListener, options);
      }
      return originalAddEventListener.call(this, type, listener, options);
    };
    window.addEventListener("error", (event) => {
      if (event.error && event.error.message && event.error.message.includes("already been defined")) {
        console.warn("\u26A0\uFE0F Global error handler caught custom element duplicate registration:", event.error.message);
        event.preventDefault();
        event.stopPropagation();
        return false;
      }
    }, true);
    if (window.WebComponents && window.WebComponents.ready) {
      console.warn("\u26A0\uFE0F WebComponents polyfill detected - enhanced error suppression active");
    }
  }
}
preventDuplicateCustomElements();
if (isDevelopment()) {
  const originalLog = console.log;
  const originalInfo = console.info;
  const originalWarn = console.warn;
  const filterDevTools = (method) => {
    return function(...args) {
      if (args.length > 0 && typeof args[0] === "string" && args[0].includes("Download the React DevTools")) {
        return;
      }
      return method.apply(console, args);
    };
  };
  console.log = filterDevTools(originalLog);
  console.info = filterDevTools(originalInfo);
  console.warn = filterDevTools(originalWarn);
}
window.addEventListener("error", (event) => {
  const message = event.error?.message || event.message || "";
  if (message.includes("mce-autosize-textarea") || message.includes("already been defined") || message.includes("custom element") || event.filename?.includes("webcomponents") || event.filename?.includes("overlay_bundle")) {
    console.warn("\u26A0\uFE0F Suppressed webcomponents error:", message);
    event.preventDefault();
    event.stopPropagation();
    return false;
  }
}, true);
function isDevelopment() {
  return window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1" || window.location.hostname.startsWith("192.168.") || window.location.hostname.startsWith("10.") || window.location.port !== "" || window.location.protocol === "http:" || true;
}
async function initServiceWorker() {
  if (!("serviceWorker" in navigator)) {
    console.log("\u{1F6AB} Service Worker not supported by browser");
    return;
  }
  try {
    const registrations = await navigator.serviceWorker.getRegistrations();
    for (let registration2 of registrations) {
      await registration2.unregister();
      console.log("\u{1F5D1}\uFE0F Unregistered existing service worker:", registration2.scope);
    }
    if (isDevelopment()) {
      console.log("\u{1F6AB} Service Worker registration skipped (development mode)");
      console.log("\u{1F4CD} Environment detected:", {
        hostname: window.location.hostname,
        port: window.location.port,
        protocol: window.location.protocol,
        nodeEnv: "development"
      });
      return;
    }
    const registration = await navigator.serviceWorker.register("/sw.js", {
      scope: "/",
      updateViaCache: "none"
      // Always check for updates
    });
    console.log("\u2705 SW registered:", registration.scope);
    registration.addEventListener("updatefound", () => {
      const newWorker = registration.installing;
      if (newWorker) {
        console.log("\u{1F504} SW update found, installing...");
        newWorker.addEventListener("statechange", () => {
          if (newWorker.state === "installed" && navigator.serviceWorker.controller) {
            console.log("\u{1F504} SW update ready - consider refreshing page");
          }
        });
      }
    });
  } catch (error) {
    console.error("\u274C SW registration failed:", error);
  }
}
window.addEventListener("load", initServiceWorker);
var root = (0, import_client.createRoot)(document.getElementById("app"));
root.render(
  /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(CriticalErrorBoundary, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(App, {}),
    /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Toaster, { position: "top-right", richColors: true })
  ] })
);
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-router/dist/development/chunk-QMGIS6GS.mjs:
react-router/dist/development/index.mjs:
  (**
   * react-router v7.6.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=/main.js.map
