#!/usr/bin/env node

/**
 * Claude Code Automation Setup
 * Complete system setup for Krushr project automation
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('🚀 Starting Claude Code Automation Setup...\n');

// Configuration
const PROJECT_ROOT = process.cwd();
const ORCHESTRATOR_PATH = path.join(PROJECT_ROOT, 'Github-CC-Research/claudecode-orchestrator');
const AUTO_ACTION_PATH = path.join(PROJECT_ROOT, 'Github-CC-Research/claude-code-auto-action');

// Setup steps
const setupSteps = [
    {
        name: 'Prerequisites Check',
        action: () => {
            console.log('📋 Checking prerequisites...');
            
            // Check Node.js version
            const nodeVersion = process.version;
            console.log(`   ✓ Node.js version: ${nodeVersion}`);
            
            // Check npm
            try {
                const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
                console.log(`   ✓ npm version: ${npmVersion}`);
            } catch (error) {
                throw new Error('npm not found. Please install Node.js with npm.');
            }
            
            // Check project structure
            if (!fs.existsSync(ORCHESTRATOR_PATH)) {
                throw new Error('Orchestrator directory not found. Please ensure the project is properly cloned.');
            }
            
            if (!fs.existsSync(AUTO_ACTION_PATH)) {
                throw new Error('Auto-action directory not found. Please ensure the project is properly cloned.');
            }
            
            console.log('   ✓ All prerequisites met');
        }
    },
    
    {
        name: 'Orchestrator Setup',
        action: () => {
            console.log('🎭 Setting up orchestrator...');
            
            // Install orchestrator dependencies
            console.log('   📦 Installing orchestrator dependencies...');
            try {
                execSync('npm install', { cwd: ORCHESTRATOR_PATH, stdio: 'inherit' });
                console.log('   ✓ Orchestrator dependencies installed');
            } catch (error) {
                throw new Error('Failed to install orchestrator dependencies');
            }
            
            // Build orchestrator
            console.log('   🔨 Building orchestrator...');
            try {
                execSync('npm run build', { cwd: ORCHESTRATOR_PATH, stdio: 'inherit' });
                console.log('   ✓ Orchestrator built successfully');
            } catch (error) {
                console.log('   ⚠️  Build failed, continuing with existing build...');
            }
            
            // Make orchestrator executable
            const orchestratorScript = path.join(ORCHESTRATOR_PATH, 'orchestrator.sh');
            if (fs.existsSync(orchestratorScript)) {
                execSync(`chmod +x "${orchestratorScript}"`);
                console.log('   ✓ Orchestrator script made executable');
            }
        }
    },
    
    {
        name: 'Auto-Action Setup',
        action: () => {
            console.log('⚡ Setting up auto-action system...');
            
            // Install auto-action dependencies
            console.log('   📦 Installing auto-action dependencies...');
            try {
                execSync('npm install', { cwd: AUTO_ACTION_PATH, stdio: 'inherit' });
                console.log('   ✓ Auto-action dependencies installed');
            } catch (error) {
                throw new Error('Failed to install auto-action dependencies');
            }
            
            // Make scripts executable
            const scriptsDir = path.join(AUTO_ACTION_PATH, 'scripts');
            if (fs.existsSync(scriptsDir)) {
                const scripts = fs.readdirSync(scriptsDir).filter(f => f.endsWith('.sh'));
                scripts.forEach(script => {
                    const scriptPath = path.join(scriptsDir, script);
                    execSync(`chmod +x "${scriptPath}"`);
                });
                console.log(`   ✓ Made ${scripts.length} scripts executable`);
            }
        }
    },
    
    {
        name: 'Project Integration',
        action: () => {
            console.log('🔗 Setting up project integration...');
            
            // Create startup scripts
            const startupScript = `#!/bin/bash
# Claude Code Automation Startup Script
# Generated by setup-claude-automation.js

PROJECT_ROOT="${PROJECT_ROOT}"
ORCHESTRATOR_PATH="${ORCHESTRATOR_PATH}"
AUTO_ACTION_PATH="${AUTO_ACTION_PATH}"

echo "🚀 Starting Claude Code Automation..."

# Start orchestrator
echo "🎭 Starting orchestrator..."
cd "$ORCHESTRATOR_PATH"
npm start &
ORCHESTRATOR_PID=$!

# Start auto-action system
echo "⚡ Starting auto-action system..."
cd "$AUTO_ACTION_PATH"
./scripts/setup-auto-mode.sh &
AUTO_ACTION_PID=$!

echo "✅ Claude Code Automation started successfully!"
echo "   Orchestrator PID: $ORCHESTRATOR_PID"
echo "   Auto-action PID: $AUTO_ACTION_PID"

# Save PIDs for cleanup
echo "$ORCHESTRATOR_PID" > /tmp/claude-orchestrator.pid
echo "$AUTO_ACTION_PID" > /tmp/claude-auto-action.pid

echo "💡 Use 'npm run claude:stop' to stop all automation processes"
`;
            
            fs.writeFileSync(path.join(PROJECT_ROOT, 'start-claude-automation.sh'), startupScript);
            execSync(`chmod +x "${path.join(PROJECT_ROOT, 'start-claude-automation.sh')}"`);
            
            // Create stop script
            const stopScript = `#!/bin/bash
# Claude Code Automation Stop Script
# Generated by setup-claude-automation.js

echo "🛑 Stopping Claude Code Automation..."

# Stop orchestrator
if [ -f /tmp/claude-orchestrator.pid ]; then
    ORCHESTRATOR_PID=$(cat /tmp/claude-orchestrator.pid)
    kill $ORCHESTRATOR_PID 2>/dev/null || true
    rm /tmp/claude-orchestrator.pid
    echo "   🎭 Orchestrator stopped"
fi

# Stop auto-action
if [ -f /tmp/claude-auto-action.pid ]; then
    AUTO_ACTION_PID=$(cat /tmp/claude-auto-action.pid)
    kill $AUTO_ACTION_PID 2>/dev/null || true
    rm /tmp/claude-auto-action.pid
    echo "   ⚡ Auto-action stopped"
fi

echo "✅ Claude Code Automation stopped successfully!"
`;
            
            fs.writeFileSync(path.join(PROJECT_ROOT, 'stop-claude-automation.sh'), stopScript);
            execSync(`chmod +x "${path.join(PROJECT_ROOT, 'stop-claude-automation.sh')}"`);
            
            console.log('   ✓ Startup and stop scripts created');
        }
    },
    
    {
        name: 'Package.json Integration',
        action: () => {
            console.log('📦 Updating package.json scripts...');
            
            const packageJsonPath = path.join(PROJECT_ROOT, 'package.json');
            let packageJson = {};
            
            if (fs.existsSync(packageJsonPath)) {
                packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            }
            
            // Add scripts
            if (!packageJson.scripts) {
                packageJson.scripts = {};
            }
            
            packageJson.scripts = {
                ...packageJson.scripts,
                'claude:start': './start-claude-automation.sh',
                'claude:stop': './stop-claude-automation.sh',
                'claude:orchestrator': 'cd Github-CC-Research/claudecode-orchestrator && npm start',
                'claude:auto-action': 'cd Github-CC-Research/claude-code-auto-action && ./scripts/setup-auto-mode.sh',
                'claude:status': 'ps aux | grep -E "(orchestrator|auto-action)" | grep -v grep'
            };
            
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
            console.log('   ✓ Package.json scripts updated');
        }
    },
    
    {
        name: 'Claude Commands Setup',
        action: () => {
            console.log('📝 Setting up Claude commands...');
            
            const claudeCommandsDir = path.join(PROJECT_ROOT, '.claude/commands');
            if (!fs.existsSync(claudeCommandsDir)) {
                fs.mkdirSync(claudeCommandsDir, { recursive: true });
            }
            
            // Create automation commands
            const automationCommands = {
                'project:orchestrator:start': {
                    description: 'Start the Claude Code orchestrator',
                    command: 'cd Github-CC-Research/claudecode-orchestrator && npm start'
                },
                'project:orchestrator:stop': {
                    description: 'Stop the Claude Code orchestrator',
                    command: 'pkill -f "orchestrator" || echo "Orchestrator not running"'
                },
                'project:orchestrator:status': {
                    description: 'Check orchestrator status',
                    command: 'ps aux | grep orchestrator | grep -v grep || echo "Orchestrator not running"'
                },
                'project:auto-approve': {
                    description: 'Enable auto-approval for Claude Code',
                    command: 'cd Github-CC-Research/claude-code-auto-action && ./scripts/claude-yolo-mode.sh'
                },
                'project:automation:start': {
                    description: 'Start complete automation suite',
                    command: './start-claude-automation.sh'
                },
                'project:automation:stop': {
                    description: 'Stop complete automation suite',
                    command: './stop-claude-automation.sh'
                }
            };
            
            Object.entries(automationCommands).forEach(([name, config]) => {
                const commandContent = `#!/bin/bash
# ${config.description}
# Generated by setup-claude-automation.js

${config.command}
`;
                fs.writeFileSync(path.join(claudeCommandsDir, name), commandContent);
                execSync(`chmod +x "${path.join(claudeCommandsDir, name)}"`);
            });
            
            console.log(`   ✓ Created ${Object.keys(automationCommands).length} Claude commands`);
        }
    },
    
    {
        name: 'Validation Tests',
        action: () => {
            console.log('🧪 Running validation tests...');
            
            // Test orchestrator
            console.log('   🎭 Testing orchestrator...');
            try {
                const orchestratorTest = execSync('npm test', { 
                    cwd: ORCHESTRATOR_PATH, 
                    encoding: 'utf8',
                    timeout: 30000
                });
                console.log('   ✓ Orchestrator tests passed');
            } catch (error) {
                console.log('   ⚠️  Orchestrator tests failed, but continuing...');
            }
            
            // Test auto-action setup
            console.log('   ⚡ Testing auto-action setup...');
            const autoActionScripts = path.join(AUTO_ACTION_PATH, 'scripts');
            if (fs.existsSync(autoActionScripts)) {
                const scriptCount = fs.readdirSync(autoActionScripts).filter(f => f.endsWith('.sh')).length;
                console.log(`   ✓ Auto-action has ${scriptCount} executable scripts`);
            }
            
            // Test project integration
            console.log('   🔗 Testing project integration...');
            const startupScript = path.join(PROJECT_ROOT, 'start-claude-automation.sh');
            const stopScript = path.join(PROJECT_ROOT, 'stop-claude-automation.sh');
            
            if (fs.existsSync(startupScript) && fs.existsSync(stopScript)) {
                console.log('   ✓ Project integration scripts created');
            }
            
            console.log('   ✅ All validation tests completed');
        }
    }
];

// Run setup
async function runSetup() {
    console.log(`📂 Project Root: ${PROJECT_ROOT}\n`);
    
    for (let i = 0; i < setupSteps.length; i++) {
        const step = setupSteps[i];
        console.log(`\n${i + 1}. ${step.name}`);
        console.log('═'.repeat(50));
        
        try {
            await step.action();
            console.log(`✅ ${step.name} completed successfully`);
        } catch (error) {
            console.error(`❌ ${step.name} failed:`, error.message);
            console.log('\n🛑 Setup incomplete. Please resolve the error and try again.');
            process.exit(1);
        }
    }
    
    console.log('\n' + '═'.repeat(70));
    console.log('🎉 CLAUDE CODE AUTOMATION SETUP COMPLETE!');
    console.log('═'.repeat(70));
    
    console.log('\n📋 NEXT STEPS:');
    console.log('1. Start the automation system:');
    console.log('   npm run claude:start');
    console.log('   OR');
    console.log('   /project:automation:start');
    console.log('');
    console.log('2. Enable auto-approval (optional):');
    console.log('   /project:auto-approve');
    console.log('');
    console.log('3. Start the orchestrator only:');
    console.log('   /project:orchestrator:start');
    console.log('');
    console.log('4. Check system status:');
    console.log('   npm run claude:status');
    console.log('   OR');
    console.log('   /project:orchestrator:status');
    console.log('');
    console.log('5. Stop automation:');
    console.log('   npm run claude:stop');
    console.log('   OR');
    console.log('   /project:automation:stop');
    
    console.log('\n🎯 FEATURES ENABLED:');
    console.log('✅ Auto-approve ALL permissions');
    console.log('✅ Smart task completion detection');
    console.log('✅ Automatic continuation prompts');
    console.log('✅ Intelligent response handling');
    console.log('✅ Real-time monitoring');
    console.log('✅ Easy control commands');
    
    console.log('\n💡 Your Claude Code workflow is now fully automated!');
}

// Run the setup
runSetup().catch(error => {
    console.error('\n💥 Setup failed:', error);
    process.exit(1);
});